/* eslint-disable */
/* tslint:disable */
/*
 * ---------------------------------------------------------------
 * ## THIS FILE WAS GENERATED VIA SWAGGER-TYPESCRIPT-API        ##
 * ##                                                           ##
 * ## AUTHOR: acacode                                           ##
 * ## SOURCE: https://github.com/acacode/swagger-typescript-api ##
 * ---------------------------------------------------------------
 */

/**
* This is an object representing a Stripe account. You can retrieve it to see
properties on the account like its current e-mail address or if the account is
enabled yet to make live charges.

Some properties, marked below, are available only to platforms that want to
[create and manage Express or Custom accounts](https://stripe.com/docs/connect/accounts).
*/
export interface Account {
  /** Business information about the account. */
  business_profile?: AccountBusinessProfile | null;

  /** The business type. */
  business_type?: "company" | "government_entity" | "individual" | "non_profit" | null;
  capabilities?: AccountCapabilities;

  /** Whether the account can create live charges. */
  charges_enabled?: boolean;
  company?: LegalEntityCompany;
  controller?: AccountUnificationAccountController;

  /** The account's country. */
  country?: string;

  /**
   * Time at which the object was created. Measured in seconds since the Unix epoch.
   * @format unix-time
   */
  created?: number;

  /** Three-letter ISO currency code representing the default currency for the account. This must be a currency that [Stripe supports in the account's country](https://stripe.com/docs/payouts). */
  default_currency?: string;

  /** Whether account details have been submitted. Standard accounts cannot receive payouts before this is true. */
  details_submitted?: boolean;

  /** An email address associated with the account. You can treat this as metadata: it is not used for authentication or messaging account holders. */
  email?: string | null;

  /**
   * ExternalAccountList
   * External accounts (bank accounts and debit cards) currently attached to this account
   */
  external_accounts?: {
    data: (BankAccount | Card | (BankAccount & Card))[];
    has_more: boolean;
    object: "list";
    url: string;
  };
  future_requirements?: AccountFutureRequirements;

  /** Unique identifier for the object. */
  id: string;

  /**
   * This is an object representing a person associated with a Stripe account.
   *
   * A platform cannot access a Standard or Express account's persons after the account starts onboarding, such as after generating an account link for the account.
   * See the [Standard onboarding](https://stripe.com/docs/connect/standard-accounts) or [Express onboarding documentation](https://stripe.com/docs/connect/express-accounts) for information about platform pre-filling and account onboarding steps.
   * Related guide: [Handling Identity Verification with the API](https://stripe.com/docs/connect/identity-verification-api#person-information).
   */
  individual?: Person;

  /** Set of [key-value pairs](https://stripe.com/docs/api/metadata) that you can attach to an object. This can be useful for storing additional information about the object in a structured format. */
  metadata?: Record<string, string>;

  /** String representing the object's type. Objects of the same type share the same value. */
  object: "account";

  /** Whether Stripe can send payouts to this account. */
  payouts_enabled?: boolean;
  requirements?: AccountRequirements;

  /** Options for customizing how the account functions within Stripe. */
  settings?: AccountSettings | null;
  tos_acceptance?: AccountTosAcceptance;

  /** The Stripe account type. Can be `standard`, `express`, or `custom`. */
  type?: "custom" | "express" | "standard";
}

export interface AccountBacsDebitPaymentsSettings {
  /** The Bacs Direct Debit Display Name for this account. For payments made with Bacs Direct Debit, this will appear on the mandate, and as the statement descriptor. */
  display_name?: string;
}

export interface AccountBrandingSettings {
  /** (ID of a [file upload](https://stripe.com/docs/guides/file-upload)) An icon for the account. Must be square and at least 128px x 128px. */
  icon?: string | File | null;

  /** (ID of a [file upload](https://stripe.com/docs/guides/file-upload)) A logo for the account that will be used in Checkout instead of the icon and without the account's name next to it if provided. Must be at least 128px x 128px. */
  logo?: string | File | null;

  /** A CSS hex color value representing the primary branding color for this account */
  primary_color?: string | null;

  /** A CSS hex color value representing the secondary branding color for this account */
  secondary_color?: string | null;
}

export interface AccountBusinessProfile {
  /** [The merchant category code for the account](https://stripe.com/docs/connect/setting-mcc). MCCs are used to classify businesses based on the goods or services they provide. */
  mcc?: string | null;

  /** The customer-facing business name. */
  name?: string | null;

  /** Internal-only description of the product sold or service provided by the business. It's used by Stripe for risk and underwriting purposes. */
  product_description?: string | null;

  /** A publicly available mailing address for sending support issues to. */
  support_address?: Address | null;

  /** A publicly available email address for sending support issues to. */
  support_email?: string | null;

  /** A publicly available phone number to call with support issues. */
  support_phone?: string | null;

  /** A publicly available website for handling support issues. */
  support_url?: string | null;

  /** The business's publicly available website. */
  url?: string | null;
}

export interface AccountCapabilities {
  /** The status of the Canadian pre-authorized debits payments capability of the account, or whether the account can directly process Canadian pre-authorized debits charges. */
  acss_debit_payments?: "active" | "inactive" | "pending";

  /** The status of the Afterpay Clearpay capability of the account, or whether the account can directly process Afterpay Clearpay charges. */
  afterpay_clearpay_payments?: "active" | "inactive" | "pending";

  /** The status of the BECS Direct Debit (AU) payments capability of the account, or whether the account can directly process BECS Direct Debit (AU) charges. */
  au_becs_debit_payments?: "active" | "inactive" | "pending";

  /** The status of the Bacs Direct Debits payments capability of the account, or whether the account can directly process Bacs Direct Debits charges. */
  bacs_debit_payments?: "active" | "inactive" | "pending";

  /** The status of the Bancontact payments capability of the account, or whether the account can directly process Bancontact charges. */
  bancontact_payments?: "active" | "inactive" | "pending";

  /** The status of the boleto payments capability of the account, or whether the account can directly process boleto charges. */
  boleto_payments?: "active" | "inactive" | "pending";

  /** The status of the card issuing capability of the account, or whether you can use Issuing to distribute funds on cards */
  card_issuing?: "active" | "inactive" | "pending";

  /** The status of the card payments capability of the account, or whether the account can directly process credit and debit card charges. */
  card_payments?: "active" | "inactive" | "pending";

  /** The status of the Cartes Bancaires payments capability of the account, or whether the account can directly process Cartes Bancaires card charges in EUR currency. */
  cartes_bancaires_payments?: "active" | "inactive" | "pending";

  /** The status of the EPS payments capability of the account, or whether the account can directly process EPS charges. */
  eps_payments?: "active" | "inactive" | "pending";

  /** The status of the FPX payments capability of the account, or whether the account can directly process FPX charges. */
  fpx_payments?: "active" | "inactive" | "pending";

  /** The status of the giropay payments capability of the account, or whether the account can directly process giropay charges. */
  giropay_payments?: "active" | "inactive" | "pending";

  /** The status of the GrabPay payments capability of the account, or whether the account can directly process GrabPay charges. */
  grabpay_payments?: "active" | "inactive" | "pending";

  /** The status of the iDEAL payments capability of the account, or whether the account can directly process iDEAL charges. */
  ideal_payments?: "active" | "inactive" | "pending";

  /** The status of the JCB payments capability of the account, or whether the account (Japan only) can directly process JCB credit card charges in JPY currency. */
  jcb_payments?: "active" | "inactive" | "pending";

  /** The status of the Klarna payments capability of the account, or whether the account can directly process Klarna charges. */
  klarna_payments?: "active" | "inactive" | "pending";

  /** The status of the legacy payments capability of the account. */
  legacy_payments?: "active" | "inactive" | "pending";

  /** The status of the OXXO payments capability of the account, or whether the account can directly process OXXO charges. */
  oxxo_payments?: "active" | "inactive" | "pending";

  /** The status of the P24 payments capability of the account, or whether the account can directly process P24 charges. */
  p24_payments?: "active" | "inactive" | "pending";

  /** The status of the SEPA Direct Debits payments capability of the account, or whether the account can directly process SEPA Direct Debits charges. */
  sepa_debit_payments?: "active" | "inactive" | "pending";

  /** The status of the Sofort payments capability of the account, or whether the account can directly process Sofort charges. */
  sofort_payments?: "active" | "inactive" | "pending";

  /** The status of the tax reporting 1099-K (US) capability of the account. */
  tax_reporting_us_1099_k?: "active" | "inactive" | "pending";

  /** The status of the tax reporting 1099-MISC (US) capability of the account. */
  tax_reporting_us_1099_misc?: "active" | "inactive" | "pending";

  /** The status of the transfers capability of the account, or whether your platform can transfer funds to the account. */
  transfers?: "active" | "inactive" | "pending";
}

export interface AccountCapabilityFutureRequirements {
  /** Fields that are due and can be satisfied by providing the corresponding alternative fields instead. */
  alternatives?: AccountRequirementsAlternative[] | null;

  /**
   * Date on which `future_requirements` merges with the main `requirements` hash and `future_requirements` becomes empty. After the transition, `currently_due` requirements may immediately become `past_due`, but the account may also be given a grace period depending on the capability's enablement state prior to transitioning.
   * @format unix-time
   */
  current_deadline?: number | null;

  /** Fields that need to be collected to keep the capability enabled. If not collected by `future_requirements[current_deadline]`, these fields will transition to the main `requirements` hash. */
  currently_due: string[];

  /** This is typed as a string for consistency with `requirements.disabled_reason`, but it safe to assume `future_requirements.disabled_reason` is empty because fields in `future_requirements` will never disable the account. */
  disabled_reason?: string | null;

  /** Fields that are `currently_due` and need to be collected again because validation or verification failed. */
  errors: AccountRequirementsError[];

  /** Fields that need to be collected assuming all volume thresholds are reached. As they become required, they appear in `currently_due` as well. */
  eventually_due: string[];

  /** Fields that weren't collected by `requirements.current_deadline`. These fields need to be collected to enable the capability on the account. New fields will never appear here; `future_requirements.past_due` will always be a subset of `requirements.past_due`. */
  past_due: string[];

  /** Fields that may become required depending on the results of verification or review. Will be an empty array unless an asynchronous verification is pending. If verification fails, these fields move to `eventually_due` or `currently_due`. */
  pending_verification: string[];
}

export interface AccountCapabilityRequirements {
  /** Fields that are due and can be satisfied by providing the corresponding alternative fields instead. */
  alternatives?: AccountRequirementsAlternative[] | null;

  /**
   * Date by which the fields in `currently_due` must be collected to keep the capability enabled for the account. These fields may disable the capability sooner if the next threshold is reached before they are collected.
   * @format unix-time
   */
  current_deadline?: number | null;

  /** Fields that need to be collected to keep the capability enabled. If not collected by `current_deadline`, these fields appear in `past_due` as well, and the capability is disabled. */
  currently_due: string[];

  /**
   * If the capability is disabled, this string describes why. Can be `requirements.past_due`, `requirements.pending_verification`, `listed`, `platform_paused`, `rejected.fraud`, `rejected.listed`, `rejected.terms_of_service`, `rejected.other`, `under_review`, or `other`.
   *
   * `rejected.unsupported_business` means that the account's business is not supported by the capability. For example, payment methods may restrict the businesses they support in their terms of service:
   * - [Afterpay Clearpay's terms of service](/afterpay-clearpay/legal#restricted-businesses)
   * If you believe that the rejection is in error, please contact support at https://support.stripe.com/contact/ for assistance.
   */
  disabled_reason?: string | null;

  /** Fields that are `currently_due` and need to be collected again because validation or verification failed. */
  errors: AccountRequirementsError[];

  /** Fields that need to be collected assuming all volume thresholds are reached. As they become required, they appear in `currently_due` as well, and `current_deadline` becomes set. */
  eventually_due: string[];

  /** Fields that weren't collected by `current_deadline`. These fields need to be collected to enable the capability on the account. */
  past_due: string[];

  /** Fields that may become required depending on the results of verification or review. Will be an empty array unless an asynchronous verification is pending. If verification fails, these fields move to `eventually_due`, `currently_due`, or `past_due`. */
  pending_verification: string[];
}

export interface AccountCardIssuingSettings {
  tos_acceptance?: CardIssuingAccountTermsOfService;
}

export interface AccountCardPaymentsSettings {
  decline_on?: AccountDeclineChargeOn;

  /** The default text that appears on credit card statements when a charge is made. This field prefixes any dynamic `statement_descriptor` specified on the charge. `statement_descriptor_prefix` is useful for maximizing descriptor space for the dynamic portion. */
  statement_descriptor_prefix?: string | null;
}

export interface AccountDashboardSettings {
  /** The display name for this account. This is used on the Stripe Dashboard to differentiate between accounts. */
  display_name?: string | null;

  /** The timezone used in the Stripe Dashboard for this account. A list of possible time zone values is maintained at the [IANA Time Zone Database](http://www.iana.org/time-zones). */
  timezone?: string | null;
}

export interface AccountDeclineChargeOn {
  /** Whether Stripe automatically declines charges with an incorrect ZIP or postal code. This setting only applies when a ZIP or postal code is provided and they fail bank verification. */
  avs_failure: boolean;

  /** Whether Stripe automatically declines charges with an incorrect CVC. This setting only applies when a CVC is provided and it fails bank verification. */
  cvc_failure: boolean;
}

export interface AccountFutureRequirements {
  /** Fields that are due and can be satisfied by providing the corresponding alternative fields instead. */
  alternatives?: AccountRequirementsAlternative[] | null;

  /**
   * Date on which `future_requirements` merges with the main `requirements` hash and `future_requirements` becomes empty. After the transition, `currently_due` requirements may immediately become `past_due`, but the account may also be given a grace period depending on its enablement state prior to transitioning.
   * @format unix-time
   */
  current_deadline?: number | null;

  /** Fields that need to be collected to keep the account enabled. If not collected by `future_requirements[current_deadline]`, these fields will transition to the main `requirements` hash. */
  currently_due?: string[] | null;

  /** This is typed as a string for consistency with `requirements.disabled_reason`, but it safe to assume `future_requirements.disabled_reason` is empty because fields in `future_requirements` will never disable the account. */
  disabled_reason?: string | null;

  /** Fields that are `currently_due` and need to be collected again because validation or verification failed. */
  errors?: AccountRequirementsError[] | null;

  /** Fields that need to be collected assuming all volume thresholds are reached. As they become required, they appear in `currently_due` as well. */
  eventually_due?: string[] | null;

  /** Fields that weren't collected by `requirements.current_deadline`. These fields need to be collected to enable the capability on the account. New fields will never appear here; `future_requirements.past_due` will always be a subset of `requirements.past_due`. */
  past_due?: string[] | null;

  /** Fields that may become required depending on the results of verification or review. Will be an empty array unless an asynchronous verification is pending. If verification fails, these fields move to `eventually_due` or `currently_due`. */
  pending_verification?: string[] | null;
}

/**
* Account Links are the means by which a Connect platform grants a connected account permission to access
Stripe-hosted applications, such as Connect Onboarding.

Related guide: [Connect Onboarding](https://stripe.com/docs/connect/connect-onboarding).
*/
export interface AccountLink {
  /**
   * Time at which the object was created. Measured in seconds since the Unix epoch.
   * @format unix-time
   */
  created: number;

  /**
   * The timestamp at which this account link will expire.
   * @format unix-time
   */
  expires_at: number;

  /** String representing the object's type. Objects of the same type share the same value. */
  object: "account_link";

  /** The URL for the account link. */
  url: string;
}

export interface AccountPaymentsSettings {
  /** The default text that appears on credit card statements when a charge is made. This field prefixes any dynamic `statement_descriptor` specified on the charge. */
  statement_descriptor?: string | null;

  /** The Kana variation of the default text that appears on credit card statements when a charge is made (Japan only) */
  statement_descriptor_kana?: string | null;

  /** The Kanji variation of the default text that appears on credit card statements when a charge is made (Japan only) */
  statement_descriptor_kanji?: string | null;
}

export interface AccountPayoutSettings {
  /** A Boolean indicating if Stripe should try to reclaim negative balances from an attached bank account. See our [Understanding Connect Account Balances](https://stripe.com/docs/connect/account-balances) documentation for details. Default value is `false` for Custom accounts, otherwise `true`. */
  debit_negative_balances: boolean;
  schedule: TransferSchedule;

  /** The text that appears on the bank account statement for payouts. If not set, this defaults to the platform's bank descriptor as set in the Dashboard. */
  statement_descriptor?: string | null;
}

export interface AccountRequirements {
  /** Fields that are due and can be satisfied by providing the corresponding alternative fields instead. */
  alternatives?: AccountRequirementsAlternative[] | null;

  /**
   * Date by which the fields in `currently_due` must be collected to keep the account enabled. These fields may disable the account sooner if the next threshold is reached before they are collected.
   * @format unix-time
   */
  current_deadline?: number | null;

  /** Fields that need to be collected to keep the account enabled. If not collected by `current_deadline`, these fields appear in `past_due` as well, and the account is disabled. */
  currently_due?: string[] | null;

  /** If the account is disabled, this string describes why. Can be `requirements.past_due`, `requirements.pending_verification`, `listed`, `platform_paused`, `rejected.fraud`, `rejected.listed`, `rejected.terms_of_service`, `rejected.other`, `under_review`, or `other`. */
  disabled_reason?: string | null;

  /** Fields that are `currently_due` and need to be collected again because validation or verification failed. */
  errors?: AccountRequirementsError[] | null;

  /** Fields that need to be collected assuming all volume thresholds are reached. As they become required, they appear in `currently_due` as well, and `current_deadline` becomes set. */
  eventually_due?: string[] | null;

  /** Fields that weren't collected by `current_deadline`. These fields need to be collected to enable the account. */
  past_due?: string[] | null;

  /** Fields that may become required depending on the results of verification or review. Will be an empty array unless an asynchronous verification is pending. If verification fails, these fields move to `eventually_due`, `currently_due`, or `past_due`. */
  pending_verification?: string[] | null;
}

export interface AccountRequirementsAlternative {
  /** Fields that can be provided to satisfy all fields in `original_fields_due`. */
  alternative_fields_due: string[];

  /** Fields that are due and can be satisfied by providing all fields in `alternative_fields_due`. */
  original_fields_due: string[];
}

export interface AccountRequirementsError {
  /** The code for the type of error. */
  code:
    | "invalid_address_city_state_postal_code"
    | "invalid_street_address"
    | "invalid_value_other"
    | "verification_document_address_mismatch"
    | "verification_document_address_missing"
    | "verification_document_corrupt"
    | "verification_document_country_not_supported"
    | "verification_document_dob_mismatch"
    | "verification_document_duplicate_type"
    | "verification_document_expired"
    | "verification_document_failed_copy"
    | "verification_document_failed_greyscale"
    | "verification_document_failed_other"
    | "verification_document_failed_test_mode"
    | "verification_document_fraudulent"
    | "verification_document_id_number_mismatch"
    | "verification_document_id_number_missing"
    | "verification_document_incomplete"
    | "verification_document_invalid"
    | "verification_document_issue_or_expiry_date_missing"
    | "verification_document_manipulated"
    | "verification_document_missing_back"
    | "verification_document_missing_front"
    | "verification_document_name_mismatch"
    | "verification_document_name_missing"
    | "verification_document_nationality_mismatch"
    | "verification_document_not_readable"
    | "verification_document_not_signed"
    | "verification_document_not_uploaded"
    | "verification_document_photo_mismatch"
    | "verification_document_too_large"
    | "verification_document_type_not_supported"
    | "verification_failed_address_match"
    | "verification_failed_business_iec_number"
    | "verification_failed_document_match"
    | "verification_failed_id_number_match"
    | "verification_failed_keyed_identity"
    | "verification_failed_keyed_match"
    | "verification_failed_name_match"
    | "verification_failed_other"
    | "verification_failed_tax_id_match"
    | "verification_failed_tax_id_not_issued"
    | "verification_missing_executives"
    | "verification_missing_owners"
    | "verification_requires_additional_memorandum_of_associations";

  /** An informative message that indicates the error type and provides additional details about the error. */
  reason: string;

  /** The specific user onboarding requirement field (in the requirements hash) that needs to be resolved. */
  requirement: string;
}

export interface AccountSepaDebitPaymentsSettings {
  /** SEPA creditor identifier that identifies the company making the payment. */
  creditor_id?: string;
}

export interface AccountSettings {
  bacs_debit_payments?: AccountBacsDebitPaymentsSettings;
  branding: AccountBrandingSettings;
  card_issuing?: AccountCardIssuingSettings;
  card_payments: AccountCardPaymentsSettings;
  dashboard: AccountDashboardSettings;
  payments: AccountPaymentsSettings;
  payouts?: AccountPayoutSettings;
  sepa_debit_payments?: AccountSepaDebitPaymentsSettings;
}

export interface AccountTosAcceptance {
  /**
   * The Unix timestamp marking when the account representative accepted their service agreement
   * @format unix-time
   */
  date?: number | null;

  /** The IP address from which the account representative accepted their service agreement */
  ip?: string | null;

  /** The user's service agreement type */
  service_agreement?: string;

  /** The user agent of the browser from which the account representative accepted their service agreement */
  user_agent?: string | null;
}

export interface AccountUnificationAccountController {
  /** `true` if the Connect application retrieving the resource controls the account and can therefore exercise [platform controls](https://stripe.com/docs/connect/platform-controls-for-standard-accounts). Otherwise, this field is null. */
  is_controller?: boolean;

  /** The controller type. Can be `application`, if a Connect application controls the account, or `account`, if the account controls itself. */
  type: "account" | "application";
}

export interface Address {
  /** City, district, suburb, town, or village. */
  city?: string | null;

  /** Two-letter country code ([ISO 3166-1 alpha-2](https://en.wikipedia.org/wiki/ISO_3166-1_alpha-2)). */
  country?: string | null;

  /** Address line 1 (e.g., street, PO Box, or company name). */
  line1?: string | null;

  /** Address line 2 (e.g., apartment, suite, unit, or building). */
  line2?: string | null;

  /** ZIP or postal code. */
  postal_code?: string | null;

  /** State, county, province, or region. */
  state?: string | null;
}

export interface AlipayAccount {
  /**
   * Time at which the object was created. Measured in seconds since the Unix epoch.
   * @format unix-time
   */
  created: number;

  /** The ID of the customer associated with this Alipay Account. */
  customer?: string | Customer | DeletedCustomer | (Customer & DeletedCustomer) | null;

  /** Uniquely identifies the account and will be the same across all Alipay account objects that are linked to the same Alipay account. */
  fingerprint: string;

  /** Unique identifier for the object. */
  id: string;

  /** Has the value `true` if the object exists in live mode or the value `false` if the object exists in test mode. */
  livemode: boolean;

  /** Set of [key-value pairs](https://stripe.com/docs/api/metadata) that you can attach to an object. This can be useful for storing additional information about the object in a structured format. */
  metadata?: Record<string, string>;

  /** String representing the object's type. Objects of the same type share the same value. */
  object: "alipay_account";

  /** If the Alipay account object is not reusable, the exact amount that you can create a charge for. */
  payment_amount?: number | null;

  /** If the Alipay account object is not reusable, the exact currency that you can create a charge for. */
  payment_currency?: string | null;

  /** True if you can create multiple payments using this account. If the account is reusable, then you can freely choose the amount of each payment. */
  reusable: boolean;

  /** Whether this Alipay account object has ever been used for a payment. */
  used: boolean;

  /** The username for the Alipay account. */
  username: string;
}

export interface ApiErrors {
  /** For card errors, the ID of the failed charge. */
  charge?: string;

  /** For some errors that could be handled programmatically, a short string indicating the [error code](https://stripe.com/docs/error-codes) reported. */
  code?: string;

  /** For card errors resulting from a card issuer decline, a short string indicating the [card issuer's reason for the decline](https://stripe.com/docs/declines#issuer-declines) if they provide one. */
  decline_code?: string;

  /** A URL to more information about the [error code](https://stripe.com/docs/error-codes) reported. */
  doc_url?: string;

  /** A human-readable message providing more details about the error. For card errors, these messages can be shown to your users. */
  message?: string;

  /** If the error is parameter-specific, the parameter related to the error. For example, you can use this to display a message near the correct form field. */
  param?: string;

  /**
   * A PaymentIntent guides you through the process of collecting a payment from your customer.
   * We recommend that you create exactly one PaymentIntent for each order or
   * customer session in your system. You can reference the PaymentIntent later to
   * see the history of payment attempts for a particular session.
   *
   * A PaymentIntent transitions through
   * [multiple statuses](https://stripe.com/docs/payments/intents#intent-statuses)
   * throughout its lifetime as it interfaces with Stripe.js to perform
   * authentication flows and ultimately creates at most one successful charge.
   * Related guide: [Payment Intents API](https://stripe.com/docs/payments/payment-intents).
   */
  payment_intent?: PaymentIntent;

  /**
   * PaymentMethod objects represent your customer's payment instruments.
   * They can be used with [PaymentIntents](https://stripe.com/docs/payments/payment-intents) to collect payments or saved to
   * Customer objects to store instrument details for future payments.
   *
   * Related guides: [Payment Methods](https://stripe.com/docs/payments/payment-methods) and [More Payment Scenarios](https://stripe.com/docs/payments/more-payment-scenarios).
   */
  payment_method?: PaymentMethod;

  /** If the error is specific to the type of payment method, the payment method type that had a problem. This field is only populated for invoice-related errors. */
  payment_method_type?: string;

  /**
   * A SetupIntent guides you through the process of setting up and saving a customer's payment credentials for future payments.
   * For example, you could use a SetupIntent to set up and save your customer's card without immediately collecting a payment.
   * Later, you can use [PaymentIntents](https://stripe.com/docs/api#payment_intents) to drive the payment flow.
   *
   * Create a SetupIntent as soon as you're ready to collect your customer's payment credentials.
   * Do not maintain long-lived, unconfirmed SetupIntents as they may no longer be valid.
   * The SetupIntent then transitions through multiple [statuses](https://stripe.com/docs/payments/intents#intent-statuses) as it guides
   * you through the setup process.
   * Successful SetupIntents result in payment credentials that are optimized for future payments.
   * For example, cardholders in [certain regions](/guides/strong-customer-authentication) may need to be run through
   * [Strong Customer Authentication](https://stripe.com/docs/strong-customer-authentication) at the time of payment method collection
   * in order to streamline later [off-session payments](https://stripe.com/docs/payments/setup-intents).
   * If the SetupIntent is used with a [Customer](https://stripe.com/docs/api#setup_intent_object-customer), upon success,
   * it will automatically attach the resulting payment method to that Customer.
   * We recommend using SetupIntents or [setup_future_usage](https://stripe.com/docs/api#payment_intent_object-setup_future_usage) on
   * PaymentIntents to save payment methods in order to prevent saving invalid or unoptimized payment methods.
   * By using SetupIntents, you ensure that your customers experience the minimum set of required friction,
   * even as regulations change over time.
   * Related guide: [Setup Intents API](https://stripe.com/docs/payments/setup-intents).
   */
  setup_intent?: SetupIntent;

  /** The source object for errors returned on a request involving a source. */
  source?: BankAccount | Card | Source | (BankAccount & Card & Source);

  /** The type of error returned. One of `api_error`, `card_error`, `idempotency_error`, or `invalid_request_error` */
  type: "api_error" | "card_error" | "idempotency_error" | "invalid_request_error";
}

export interface ApplePayDomain {
  /**
   * Time at which the object was created. Measured in seconds since the Unix epoch.
   * @format unix-time
   */
  created: number;
  domain_name: string;

  /** Unique identifier for the object. */
  id: string;

  /** Has the value `true` if the object exists in live mode or the value `false` if the object exists in test mode. */
  livemode: boolean;

  /** String representing the object's type. Objects of the same type share the same value. */
  object: "apple_pay_domain";
}

export interface Application {
  /** Unique identifier for the object. */
  id: string;

  /** The name of the application. */
  name?: string | null;

  /** String representing the object's type. Objects of the same type share the same value. */
  object: "application";
}

export interface ApplicationFee {
  /** ID of the Stripe account this fee was taken from. */
  account: string | Account;

  /** Amount earned, in %s. */
  amount: number;

  /** Amount in %s refunded (can be less than the amount attribute on the fee if a partial refund was issued) */
  amount_refunded: number;

  /** ID of the Connect application that earned the fee. */
  application: string | Application;

  /** Balance transaction that describes the impact of this collected application fee on your account balance (not including refunds). */
  balance_transaction?: string | BalanceTransaction | null;

  /** ID of the charge that the application fee was taken from. */
  charge: string | Charge;

  /**
   * Time at which the object was created. Measured in seconds since the Unix epoch.
   * @format unix-time
   */
  created: number;

  /** Three-letter [ISO currency code](https://www.iso.org/iso-4217-currency-codes.html), in lowercase. Must be a [supported currency](https://stripe.com/docs/currencies). */
  currency: string;

  /** Unique identifier for the object. */
  id: string;

  /** Has the value `true` if the object exists in live mode or the value `false` if the object exists in test mode. */
  livemode: boolean;

  /** String representing the object's type. Objects of the same type share the same value. */
  object: "application_fee";

  /** ID of the corresponding charge on the platform account, if this fee was the result of a charge using the `destination` parameter. */
  originating_transaction?: string | Charge | null;

  /** Whether the fee has been fully refunded. If the fee is only partially refunded, this attribute will still be false. */
  refunded: boolean;

  /**
   * FeeRefundList
   * A list of refunds that have been applied to the fee.
   */
  refunds: { data: FeeRefund[]; has_more: boolean; object: "list"; url: string };
}

export interface AutomaticTax {
  /** Whether Stripe automatically computes tax on this invoice. */
  enabled: boolean;

  /** The status of the most recent automated tax calculation for this invoice. */
  status?: "complete" | "failed" | "requires_location_inputs" | null;
}

/**
* This is an object representing your Stripe balance. You can retrieve it to see
the balance currently on your Stripe account.

You can also retrieve the balance history, which contains a list of
[transactions](https://stripe.com/docs/reporting/balance-transaction-types) that contributed to the balance
(charges, payouts, and so forth).

The available and pending amounts for each currency are broken down further by
payment source types.

Related guide: [Understanding Connect Account Balances](https://stripe.com/docs/connect/account-balances).
*/
export interface Balance {
  /** Funds that are available to be transferred or paid out, whether automatically by Stripe or explicitly via the [Transfers API](https://stripe.com/docs/api#transfers) or [Payouts API](https://stripe.com/docs/api#payouts). The available balance for each currency and payment type can be found in the `source_types` property. */
  available: BalanceAmount[];

  /** Funds held due to negative balances on connected Custom accounts. The connect reserve balance for each currency and payment type can be found in the `source_types` property. */
  connect_reserved?: BalanceAmount[];

  /** Funds that can be paid out using Instant Payouts. */
  instant_available?: BalanceAmount[];
  issuing?: BalanceDetail;

  /** Has the value `true` if the object exists in live mode or the value `false` if the object exists in test mode. */
  livemode: boolean;

  /** String representing the object's type. Objects of the same type share the same value. */
  object: "balance";

  /** Funds that are not yet available in the balance, due to the 7-day rolling pay cycle. The pending balance for each currency, and for each payment type, can be found in the `source_types` property. */
  pending: BalanceAmount[];
}

export interface BalanceAmount {
  /** Balance amount. */
  amount: number;

  /** Three-letter [ISO currency code](https://www.iso.org/iso-4217-currency-codes.html), in lowercase. Must be a [supported currency](https://stripe.com/docs/currencies). */
  currency: string;
  source_types?: BalanceAmountBySourceType;
}

export interface BalanceAmountBySourceType {
  /** Amount for bank account. */
  bank_account?: number;

  /** Amount for card. */
  card?: number;

  /** Amount for FPX. */
  fpx?: number;
}

export interface BalanceDetail {
  /** Funds that are available for use. */
  available: BalanceAmount[];
}

/**
* Balance transactions represent funds moving through your Stripe account.
They're created for every type of transaction that comes into or flows out of your Stripe account balance.

Related guide: [Balance Transaction Types](https://stripe.com/docs/reports/balance-transaction-types).
*/
export interface BalanceTransaction {
  /** Gross amount of the transaction, in %s. */
  amount: number;

  /**
   * The date the transaction's net funds will become available in the Stripe balance.
   * @format unix-time
   */
  available_on: number;

  /**
   * Time at which the object was created. Measured in seconds since the Unix epoch.
   * @format unix-time
   */
  created: number;

  /** Three-letter [ISO currency code](https://www.iso.org/iso-4217-currency-codes.html), in lowercase. Must be a [supported currency](https://stripe.com/docs/currencies). */
  currency: string;

  /** An arbitrary string attached to the object. Often useful for displaying to users. */
  description?: string | null;

  /** The exchange rate used, if applicable, for this transaction. Specifically, if money was converted from currency A to currency B, then the `amount` in currency A, times `exchange_rate`, would be the `amount` in currency B. For example, suppose you charged a customer 10.00 EUR. Then the PaymentIntent's `amount` would be `1000` and `currency` would be `eur`. Suppose this was converted into 12.34 USD in your Stripe account. Then the BalanceTransaction's `amount` would be `1234`, `currency` would be `usd`, and `exchange_rate` would be `1.234`. */
  exchange_rate?: number | null;

  /** Fees (in %s) paid for this transaction. */
  fee: number;

  /** Detailed breakdown of fees (in %s) paid for this transaction. */
  fee_details: Fee[];

  /** Unique identifier for the object. */
  id: string;

  /** Net amount of the transaction, in %s. */
  net: number;

  /** String representing the object's type. Objects of the same type share the same value. */
  object: "balance_transaction";

  /** [Learn more](https://stripe.com/docs/reports/reporting-categories) about how reporting categories can help you understand balance transactions from an accounting perspective. */
  reporting_category: string;

  /** The Stripe object to which this transaction is related. */
  source?:
    | string
    | ApplicationFee
    | Charge
    | ConnectCollectionTransfer
    | Dispute
    | FeeRefund
    | IssuingAuthorization
    | IssuingDispute
    | IssuingTransaction
    | Payout
    | PlatformTaxFee
    | Refund
    | ReserveTransaction
    | TaxDeductedAtSource
    | Topup
    | Transfer
    | TransferReversal
    | (ApplicationFee &
        Charge &
        ConnectCollectionTransfer &
        Dispute &
        FeeRefund &
        IssuingAuthorization &
        IssuingDispute &
        IssuingTransaction &
        Payout &
        PlatformTaxFee &
        Refund &
        ReserveTransaction &
        TaxDeductedAtSource &
        Topup &
        Transfer &
        TransferReversal)
    | null;

  /** If the transaction's net funds are available in the Stripe balance yet. Either `available` or `pending`. */
  status: string;

  /** Transaction type: `adjustment`, `advance`, `advance_funding`, `anticipation_repayment`, `application_fee`, `application_fee_refund`, `charge`, `connect_collection_transfer`, `contribution`, `issuing_authorization_hold`, `issuing_authorization_release`, `issuing_dispute`, `issuing_transaction`, `payment`, `payment_failure_refund`, `payment_refund`, `payout`, `payout_cancel`, `payout_failure`, `refund`, `refund_failure`, `reserve_transaction`, `reserved_funds`, `stripe_fee`, `stripe_fx_fee`, `tax_fee`, `topup`, `topup_reversal`, `transfer`, `transfer_cancel`, `transfer_failure`, or `transfer_refund`. [Learn more](https://stripe.com/docs/reports/balance-transaction-types) about balance transaction types and what they represent. If you are looking to classify transactions for accounting purposes, you might want to consider `reporting_category` instead. */
  type:
    | "adjustment"
    | "advance"
    | "advance_funding"
    | "anticipation_repayment"
    | "application_fee"
    | "application_fee_refund"
    | "charge"
    | "connect_collection_transfer"
    | "contribution"
    | "issuing_authorization_hold"
    | "issuing_authorization_release"
    | "issuing_dispute"
    | "issuing_transaction"
    | "payment"
    | "payment_failure_refund"
    | "payment_refund"
    | "payout"
    | "payout_cancel"
    | "payout_failure"
    | "refund"
    | "refund_failure"
    | "reserve_transaction"
    | "reserved_funds"
    | "stripe_fee"
    | "stripe_fx_fee"
    | "tax_fee"
    | "topup"
    | "topup_reversal"
    | "transfer"
    | "transfer_cancel"
    | "transfer_failure"
    | "transfer_refund";
}

/**
* These bank accounts are payment methods on `Customer` objects.

On the other hand [External Accounts](https://stripe.com/docs/api#external_accounts) are transfer
destinations on `Account` objects for [Custom accounts](https://stripe.com/docs/connect/custom-accounts).
They can be bank accounts or debit cards as well, and are documented in the links above.

Related guide: [Bank Debits and Transfers](https://stripe.com/docs/payments/bank-debits-transfers).
*/
export interface BankAccount {
  /** The ID of the account that the bank account is associated with. */
  account?: string | Account | null;

  /** The name of the person or business that owns the bank account. */
  account_holder_name?: string | null;

  /** The type of entity that holds the account. This can be either `individual` or `company`. */
  account_holder_type?: string | null;

  /** The bank account type. This can only be `checking` or `savings` in most countries. In Japan, this can only be `futsu` or `toza`. */
  account_type?: string | null;

  /** A set of available payout methods for this bank account. Only values from this set should be passed as the `method` when creating a payout. */
  available_payout_methods?: ("instant" | "standard")[] | null;

  /** Name of the bank associated with the routing number (e.g., `WELLS FARGO`). */
  bank_name?: string | null;

  /** Two-letter ISO code representing the country the bank account is located in. */
  country: string;

  /** Three-letter [ISO code for the currency](https://stripe.com/docs/payouts) paid out to the bank account. */
  currency: string;

  /** The ID of the customer that the bank account is associated with. */
  customer?: string | Customer | DeletedCustomer | (Customer & DeletedCustomer) | null;

  /** Whether this bank account is the default external account for its currency. */
  default_for_currency?: boolean | null;

  /** Uniquely identifies this particular bank account. You can use this attribute to check whether two bank accounts are the same. */
  fingerprint?: string | null;

  /** Unique identifier for the object. */
  id: string;

  /** The last four digits of the bank account number. */
  last4: string;

  /** Set of [key-value pairs](https://stripe.com/docs/api/metadata) that you can attach to an object. This can be useful for storing additional information about the object in a structured format. */
  metadata?: Record<string, string>;

  /** String representing the object's type. Objects of the same type share the same value. */
  object: "bank_account";

  /** The routing transit number for the bank account. */
  routing_number?: string | null;

  /**
   * For bank accounts, possible values are `new`, `validated`, `verified`, `verification_failed`, or `errored`. A bank account that hasn't had any activity or validation performed is `new`. If Stripe can determine that the bank account exists, its status will be `validated`. Note that there often isn’t enough information to know (e.g., for smaller credit unions), and the validation is not always run. If customer bank account verification has succeeded, the bank account status will be `verified`. If the verification failed for any reason, such as microdeposit failure, the status will be `verification_failed`. If a transfer sent to this bank account fails, we'll set the status to `errored` and will not continue to send transfers until the bank details are updated.
   *
   * For external accounts, possible values are `new` and `errored`. Validations aren't run against external accounts because they're only used for payouts. This means the other statuses don't apply. If a transfer fails, the status is set to `errored` and transfers are stopped until account details are updated.
   */
  status: string;
}

export interface BillingDetails {
  /** Billing address. */
  address?: Address | null;

  /** Email address. */
  email?: string | null;

  /** Full name. */
  name?: string | null;

  /** Billing phone number (including extension). */
  phone?: string | null;
}

/**
 * A portal configuration describes the functionality and behavior of a portal session.
 */
export interface BillingPortalConfiguration {
  /** Whether the configuration is active and can be used to create portal sessions. */
  active: boolean;

  /** ID of the Connect Application that created the configuration. */
  application?: string | null;
  business_profile: PortalBusinessProfile;

  /**
   * Time at which the object was created. Measured in seconds since the Unix epoch.
   * @format unix-time
   */
  created: number;

  /** The default URL to redirect customers to when they click on the portal's link to return to your website. This can be [overriden](https://stripe.com/docs/api/customer_portal/sessions/create#create_portal_session-return_url) when creating the session. */
  default_return_url?: string | null;
  features: PortalFeatures;

  /** Unique identifier for the object. */
  id: string;

  /** Whether the configuration is the default. If `true`, this configuration can be managed in the Dashboard and portal sessions will use this configuration unless it is overriden when creating the session. */
  is_default: boolean;

  /** Has the value `true` if the object exists in live mode or the value `false` if the object exists in test mode. */
  livemode: boolean;

  /** Set of [key-value pairs](https://stripe.com/docs/api/metadata) that you can attach to an object. This can be useful for storing additional information about the object in a structured format. */
  metadata?: Record<string, string>;

  /** String representing the object's type. Objects of the same type share the same value. */
  object: "billing_portal.configuration";

  /**
   * Time at which the object was last updated. Measured in seconds since the Unix epoch.
   * @format unix-time
   */
  updated: number;
}

/**
* The Billing customer portal is a Stripe-hosted UI for subscription and
billing management.

A portal configuration describes the functionality and features that you
want to provide to your customers through the portal.

A portal session describes the instantiation of the customer portal for
a particular customer. By visiting the session's URL, the customer
can manage their subscriptions and billing details. For security reasons,
sessions are short-lived and will expire if the customer does not visit the URL.
Create sessions on-demand when customers intend to manage their subscriptions
and billing details.

Learn more in the [integration guide](https://stripe.com/docs/billing/subscriptions/integrating-customer-portal).
*/
export interface BillingPortalSession {
  /** The configuration used by this session, describing the features available. */
  configuration: string | BillingPortalConfiguration;

  /**
   * Time at which the object was created. Measured in seconds since the Unix epoch.
   * @format unix-time
   */
  created: number;

  /** The ID of the customer for this session. */
  customer: string;

  /** Unique identifier for the object. */
  id: string;

  /** Has the value `true` if the object exists in live mode or the value `false` if the object exists in test mode. */
  livemode: boolean;

  /** The IETF language tag of the locale Customer Portal is displayed in. If blank or auto, the customer’s `preferred_locales` or browser’s locale is used. */
  locale?:
    | "auto"
    | "bg"
    | "cs"
    | "da"
    | "de"
    | "el"
    | "en"
    | "en-AU"
    | "en-CA"
    | "en-GB"
    | "en-IE"
    | "en-IN"
    | "en-NZ"
    | "en-SG"
    | "es"
    | "es-419"
    | "et"
    | "fi"
    | "fil"
    | "fr"
    | "fr-CA"
    | "hr"
    | "hu"
    | "id"
    | "it"
    | "ja"
    | "ko"
    | "lt"
    | "lv"
    | "ms"
    | "mt"
    | "nb"
    | "nl"
    | "pl"
    | "pt"
    | "pt-BR"
    | "ro"
    | "ru"
    | "sk"
    | "sl"
    | "sv"
    | "th"
    | "tr"
    | "vi"
    | "zh"
    | "zh-HK"
    | "zh-TW"
    | null;

  /** String representing the object's type. Objects of the same type share the same value. */
  object: "billing_portal.session";

  /** The account for which the session was created on behalf of. When specified, only subscriptions and invoices with this `on_behalf_of` account appear in the portal. For more information, see the [docs](https://stripe.com/docs/connect/charges-transfers#on-behalf-of). Use the [Accounts API](https://stripe.com/docs/api/accounts/object#account_object-settings-branding) to modify the `on_behalf_of` account's branding settings, which the portal displays. */
  on_behalf_of?: string | null;

  /** The URL to redirect customers to when they click on the portal's link to return to your website. */
  return_url: string;

  /** The short-lived URL of the session that gives customers access to the customer portal. */
  url: string;
}

export interface BitcoinReceiver {
  /** True when this bitcoin receiver has received a non-zero amount of bitcoin. */
  active: boolean;

  /** The amount of `currency` that you are collecting as payment. */
  amount: number;

  /** The amount of `currency` to which `bitcoin_amount_received` has been converted. */
  amount_received: number;

  /** The amount of bitcoin that the customer should send to fill the receiver. The `bitcoin_amount` is denominated in Satoshi: there are 10^8 Satoshi in one bitcoin. */
  bitcoin_amount: number;

  /** The amount of bitcoin that has been sent by the customer to this receiver. */
  bitcoin_amount_received: number;

  /** This URI can be displayed to the customer as a clickable link (to activate their bitcoin client) or as a QR code (for mobile wallets). */
  bitcoin_uri: string;

  /**
   * Time at which the object was created. Measured in seconds since the Unix epoch.
   * @format unix-time
   */
  created: number;

  /** Three-letter [ISO code for the currency](https://stripe.com/docs/currencies) to which the bitcoin will be converted. */
  currency: string;

  /** The customer ID of the bitcoin receiver. */
  customer?: string | null;

  /** An arbitrary string attached to the object. Often useful for displaying to users. */
  description?: string | null;

  /** The customer's email address, set by the API call that creates the receiver. */
  email?: string | null;

  /** This flag is initially false and updates to true when the customer sends the `bitcoin_amount` to this receiver. */
  filled: boolean;

  /** Unique identifier for the object. */
  id: string;

  /** A bitcoin address that is specific to this receiver. The customer can send bitcoin to this address to fill the receiver. */
  inbound_address: string;

  /** Has the value `true` if the object exists in live mode or the value `false` if the object exists in test mode. */
  livemode: boolean;

  /** Set of [key-value pairs](https://stripe.com/docs/api/metadata) that you can attach to an object. This can be useful for storing additional information about the object in a structured format. */
  metadata?: Record<string, string>;

  /** String representing the object's type. Objects of the same type share the same value. */
  object: "bitcoin_receiver";

  /** The ID of the payment created from the receiver, if any. Hidden when viewing the receiver with a publishable key. */
  payment?: string | null;

  /** The refund address of this bitcoin receiver. */
  refund_address?: string | null;

  /**
   * BitcoinTransactionList
   * A list with one entry for each time that the customer sent bitcoin to the receiver. Hidden when viewing the receiver with a publishable key.
   */
  transactions?: { data: BitcoinTransaction[]; has_more: boolean; object: "list"; url: string };

  /** This receiver contains uncaptured funds that can be used for a payment or refunded. */
  uncaptured_funds: boolean;

  /** Indicate if this source is used for payment. */
  used_for_payment?: boolean | null;
}

export interface BitcoinTransaction {
  /** The amount of `currency` that the transaction was converted to in real-time. */
  amount: number;

  /** The amount of bitcoin contained in the transaction. */
  bitcoin_amount: number;

  /**
   * Time at which the object was created. Measured in seconds since the Unix epoch.
   * @format unix-time
   */
  created: number;

  /** Three-letter [ISO code for the currency](https://stripe.com/docs/currencies) to which this transaction was converted. */
  currency: string;

  /** Unique identifier for the object. */
  id: string;

  /** String representing the object's type. Objects of the same type share the same value. */
  object: "bitcoin_transaction";

  /** The receiver to which this transaction was sent. */
  receiver: string;
}

/**
* This is an object representing a capability for a Stripe account.

Related guide: [Account capabilities](https://stripe.com/docs/connect/account-capabilities).
*/
export interface Capability {
  /** The account for which the capability enables functionality. */
  account: string | Account;
  future_requirements?: AccountCapabilityFutureRequirements;

  /** The identifier for the capability. */
  id: string;

  /** String representing the object's type. Objects of the same type share the same value. */
  object: "capability";

  /** Whether the capability has been requested. */
  requested: boolean;

  /**
   * Time at which the capability was requested. Measured in seconds since the Unix epoch.
   * @format unix-time
   */
  requested_at?: number | null;
  requirements?: AccountCapabilityRequirements;

  /** The status of the capability. Can be `active`, `inactive`, `pending`, or `unrequested`. */
  status: "active" | "disabled" | "inactive" | "pending" | "unrequested";
}

/**
* You can store multiple cards on a customer in order to charge the customer
later. You can also store multiple debit cards on a recipient in order to
transfer to those cards later.

Related guide: [Card Payments with Sources](https://stripe.com/docs/sources/cards).
*/
export interface Card {
  /** The account this card belongs to. This attribute will not be in the card object if the card belongs to a customer or recipient instead. */
  account?: string | Account | null;

  /** City/District/Suburb/Town/Village. */
  address_city?: string | null;

  /** Billing address country, if provided when creating card. */
  address_country?: string | null;

  /** Address line 1 (Street address/PO Box/Company name). */
  address_line1?: string | null;

  /** If `address_line1` was provided, results of the check: `pass`, `fail`, `unavailable`, or `unchecked`. */
  address_line1_check?: string | null;

  /** Address line 2 (Apartment/Suite/Unit/Building). */
  address_line2?: string | null;

  /** State/County/Province/Region. */
  address_state?: string | null;

  /** ZIP or postal code. */
  address_zip?: string | null;

  /** If `address_zip` was provided, results of the check: `pass`, `fail`, `unavailable`, or `unchecked`. */
  address_zip_check?: string | null;

  /** A set of available payout methods for this card. Only values from this set should be passed as the `method` when creating a payout. */
  available_payout_methods?: ("instant" | "standard")[] | null;

  /** Card brand. Can be `American Express`, `Diners Club`, `Discover`, `JCB`, `MasterCard`, `UnionPay`, `Visa`, or `Unknown`. */
  brand: string;

  /** Two-letter ISO code representing the country of the card. You could use this attribute to get a sense of the international breakdown of cards you've collected. */
  country?: string | null;

  /** Three-letter [ISO code for currency](https://stripe.com/docs/payouts). Only applicable on accounts (not customers or recipients). The card can be used as a transfer destination for funds in this currency. */
  currency?: string | null;

  /** The customer that this card belongs to. This attribute will not be in the card object if the card belongs to an account or recipient instead. */
  customer?: string | Customer | DeletedCustomer | (Customer & DeletedCustomer) | null;

  /** If a CVC was provided, results of the check: `pass`, `fail`, `unavailable`, or `unchecked`. A result of unchecked indicates that CVC was provided but hasn't been checked yet. Checks are typically performed when attaching a card to a Customer object, or when creating a charge. For more details, see [Check if a card is valid without a charge](https://support.stripe.com/questions/check-if-a-card-is-valid-without-a-charge). */
  cvc_check?: string | null;

  /** Whether this card is the default external account for its currency. */
  default_for_currency?: boolean | null;

  /** (For tokenized numbers only.) The last four digits of the device account number. */
  dynamic_last4?: string | null;

  /** Two-digit number representing the card's expiration month. */
  exp_month: number;

  /** Four-digit number representing the card's expiration year. */
  exp_year: number;

  /**
   * Uniquely identifies this particular card number. You can use this attribute to check whether two customers who’ve signed up with you are using the same card number, for example. For payment methods that tokenize card information (Apple Pay, Google Pay), the tokenized number might be provided instead of the underlying card number.
   *
   * *Starting May 1, 2021, card fingerprint in India for Connect will change to allow two fingerprints for the same card --- one for India and one for the rest of the world.*
   */
  fingerprint?: string | null;

  /** Card funding type. Can be `credit`, `debit`, `prepaid`, or `unknown`. */
  funding: string;

  /** Unique identifier for the object. */
  id: string;

  /** The last four digits of the card. */
  last4: string;

  /** Set of [key-value pairs](https://stripe.com/docs/api/metadata) that you can attach to an object. This can be useful for storing additional information about the object in a structured format. */
  metadata?: Record<string, string>;

  /** Cardholder name. */
  name?: string | null;

  /** String representing the object's type. Objects of the same type share the same value. */
  object: "card";

  /** The recipient that this card belongs to. This attribute will not be in the card object if the card belongs to a customer or account instead. */
  recipient?: string | Recipient | null;

  /** If the card number is tokenized, this is the method that was used. Can be `android_pay` (includes Google Pay), `apple_pay`, `masterpass`, `visa_checkout`, or null. */
  tokenization_method?: string | null;
}

export interface CardGeneratedFromPaymentMethodDetails {
  card_present?: PaymentMethodDetailsCardPresent;

  /** The type of payment method transaction-specific details from the transaction that generated this `card` payment method. Always `card_present`. */
  type: string;
}

export interface CardIssuingAccountTermsOfService {
  /** The Unix timestamp marking when the account representative accepted the service agreement. */
  date?: number | null;

  /** The IP address from which the account representative accepted the service agreement. */
  ip?: string | null;

  /** The user agent of the browser from which the account representative accepted the service agreement. */
  user_agent?: string;
}

export type CardMandatePaymentMethodDetails = object;

/**
* To charge a credit or a debit card, you create a `Charge` object. You can
retrieve and refund individual charges as well as list all charges. Charges
are identified by a unique, random ID.

Related guide: [Accept a payment with the Charges API](https://stripe.com/docs/payments/accept-a-payment-charges).
*/
export interface Charge {
  /** Amount intended to be collected by this payment. A positive integer representing how much to charge in the [smallest currency unit](https://stripe.com/docs/currencies#zero-decimal) (e.g., 100 cents to charge $1.00 or 100 to charge ¥100, a zero-decimal currency). The minimum amount is $0.50 US or [equivalent in charge currency](https://stripe.com/docs/currencies#minimum-and-maximum-charge-amounts). The amount value supports up to eight digits (e.g., a value of 99999999 for a USD charge of $999,999.99). */
  amount: number;

  /** Amount in %s captured (can be less than the amount attribute on the charge if a partial capture was made). */
  amount_captured: number;

  /** Amount in %s refunded (can be less than the amount attribute on the charge if a partial refund was issued). */
  amount_refunded: number;

  /** ID of the Connect application that created the charge. */
  application?: string | Application | null;

  /** The application fee (if any) for the charge. [See the Connect documentation](https://stripe.com/docs/connect/direct-charges#collecting-fees) for details. */
  application_fee?: string | ApplicationFee | null;

  /** The amount of the application fee (if any) requested for the charge. [See the Connect documentation](https://stripe.com/docs/connect/direct-charges#collecting-fees) for details. */
  application_fee_amount?: number | null;

  /** ID of the balance transaction that describes the impact of this charge on your account balance (not including refunds or disputes). */
  balance_transaction?: string | BalanceTransaction | null;
  billing_details: BillingDetails;

  /** The full statement descriptor that is passed to card networks, and that is displayed on your customers' credit card and bank statements. Allows you to see what the statement descriptor looks like after the static and dynamic portions are combined. */
  calculated_statement_descriptor?: string | null;

  /** If the charge was created without capturing, this Boolean represents whether it is still uncaptured or has since been captured. */
  captured: boolean;

  /**
   * Time at which the object was created. Measured in seconds since the Unix epoch.
   * @format unix-time
   */
  created: number;

  /** Three-letter [ISO currency code](https://www.iso.org/iso-4217-currency-codes.html), in lowercase. Must be a [supported currency](https://stripe.com/docs/currencies). */
  currency: string;

  /** ID of the customer this charge is for if one exists. */
  customer?: string | Customer | DeletedCustomer | (Customer & DeletedCustomer) | null;

  /** An arbitrary string attached to the object. Often useful for displaying to users. */
  description?: string | null;

  /** Whether the charge has been disputed. */
  disputed: boolean;

  /** Error code explaining reason for charge failure if available (see [the errors section](https://stripe.com/docs/api#errors) for a list of codes). */
  failure_code?: string | null;

  /** Message to user further explaining reason for charge failure if available. */
  failure_message?: string | null;

  /** Information on fraud assessments for the charge. */
  fraud_details?: ChargeFraudDetails | null;

  /** Unique identifier for the object. */
  id: string;

  /** ID of the invoice this charge is for if one exists. */
  invoice?: string | Invoice | null;

  /** Has the value `true` if the object exists in live mode or the value `false` if the object exists in test mode. */
  livemode: boolean;

  /** Set of [key-value pairs](https://stripe.com/docs/api/metadata) that you can attach to an object. This can be useful for storing additional information about the object in a structured format. */
  metadata: Record<string, string>;

  /** String representing the object's type. Objects of the same type share the same value. */
  object: "charge";

  /** The account (if any) the charge was made on behalf of without triggering an automatic transfer. See the [Connect documentation](https://stripe.com/docs/connect/charges-transfers) for details. */
  on_behalf_of?: string | Account | null;

  /** ID of the order this charge is for if one exists. */
  order?: string | Order | null;

  /** Details about whether the payment was accepted, and why. See [understanding declines](https://stripe.com/docs/declines) for details. */
  outcome?: ChargeOutcome | null;

  /** `true` if the charge succeeded, or was successfully authorized for later capture. */
  paid: boolean;

  /** ID of the PaymentIntent associated with this charge, if one exists. */
  payment_intent?: string | PaymentIntent | null;

  /** ID of the payment method used in this charge. */
  payment_method?: string | null;

  /** Details about the payment method at the time of the transaction. */
  payment_method_details?: PaymentMethodDetails | null;

  /** This is the email address that the receipt for this charge was sent to. */
  receipt_email?: string | null;

  /** This is the transaction number that appears on email receipts sent for this charge. This attribute will be `null` until a receipt has been sent. */
  receipt_number?: string | null;

  /** This is the URL to view the receipt for this charge. The receipt is kept up-to-date to the latest state of the charge, including any refunds. If the charge is for an Invoice, the receipt will be stylized as an Invoice receipt. */
  receipt_url?: string | null;

  /** Whether the charge has been fully refunded. If the charge is only partially refunded, this attribute will still be false. */
  refunded: boolean;

  /**
   * RefundList
   * A list of refunds that have been applied to the charge.
   */
  refunds: { data: Refund[]; has_more: boolean; object: "list"; url: string };

  /** ID of the review associated with this charge if one exists. */
  review?: string | Review | null;

  /** Shipping information for the charge. */
  shipping?: Shipping | null;

  /** The transfer ID which created this charge. Only present if the charge came from another Stripe account. [See the Connect documentation](https://stripe.com/docs/connect/destination-charges) for details. */
  source_transfer?: string | Transfer | null;

  /** For card charges, use `statement_descriptor_suffix` instead. Otherwise, you can use this value as the complete description of a charge on your customers’ statements. Must contain at least one letter, maximum 22 characters. */
  statement_descriptor?: string | null;

  /** Provides information about the charge that customers see on their statements. Concatenated with the prefix (shortened descriptor) or statement descriptor that’s set on the account to form the complete statement descriptor. Maximum 22 characters for the concatenated descriptor. */
  statement_descriptor_suffix?: string | null;

  /** The status of the payment is either `succeeded`, `pending`, or `failed`. */
  status: "failed" | "pending" | "succeeded";

  /** ID of the transfer to the `destination` account (only applicable if the charge was created using the `destination` parameter). */
  transfer?: string | Transfer;

  /** An optional dictionary including the account to automatically transfer to as part of a destination charge. [See the Connect documentation](https://stripe.com/docs/connect/destination-charges) for details. */
  transfer_data?: ChargeTransferData | null;

  /** A string that identifies this transaction as part of a group. See the [Connect documentation](https://stripe.com/docs/connect/charges-transfers#transfer-options) for details. */
  transfer_group?: string | null;
}

export interface ChargeFraudDetails {
  /** Assessments from Stripe. If set, the value is `fraudulent`. */
  stripe_report?: string;

  /** Assessments reported by you. If set, possible values of are `safe` and `fraudulent`. */
  user_report?: string;
}

export interface ChargeOutcome {
  /** Possible values are `approved_by_network`, `declined_by_network`, `not_sent_to_network`, and `reversed_after_approval`. The value `reversed_after_approval` indicates the payment was [blocked by Stripe](https://stripe.com/docs/declines#blocked-payments) after bank authorization, and may temporarily appear as "pending" on a cardholder's statement. */
  network_status?: string | null;

  /** An enumerated value providing a more detailed explanation of the outcome's `type`. Charges blocked by Radar's default block rule have the value `highest_risk_level`. Charges placed in review by Radar's default review rule have the value `elevated_risk_level`. Charges authorized, blocked, or placed in review by custom rules have the value `rule`. See [understanding declines](https://stripe.com/docs/declines) for more details. */
  reason?: string | null;

  /** Stripe Radar's evaluation of the riskiness of the payment. Possible values for evaluated payments are `normal`, `elevated`, `highest`. For non-card payments, and card-based payments predating the public assignment of risk levels, this field will have the value `not_assessed`. In the event of an error in the evaluation, this field will have the value `unknown`. This field is only available with Radar. */
  risk_level?: string;

  /** Stripe Radar's evaluation of the riskiness of the payment. Possible values for evaluated payments are between 0 and 100. For non-card payments, card-based payments predating the public assignment of risk scores, or in the event of an error during evaluation, this field will not be present. This field is only available with Radar for Fraud Teams. */
  risk_score?: number;

  /** The ID of the Radar rule that matched the payment, if applicable. */
  rule?: string | Rule;

  /** A human-readable description of the outcome type and reason, designed for you (the recipient of the payment), not your customer. */
  seller_message?: string | null;

  /** Possible values are `authorized`, `manual_review`, `issuer_declined`, `blocked`, and `invalid`. See [understanding declines](https://stripe.com/docs/declines) and [Radar reviews](https://stripe.com/docs/radar/reviews) for details. */
  type: string;
}

export interface ChargeTransferData {
  /** The amount transferred to the destination account, if specified. By default, the entire charge amount is transferred to the destination account. */
  amount?: number | null;

  /** ID of an existing, connected Stripe account to transfer funds to if `transfer_data` was specified in the charge request. */
  destination: string | Account;
}

/**
* A Checkout Session represents your customer's session as they pay for
one-time purchases or subscriptions through [Checkout](https://stripe.com/docs/payments/checkout)
or [Payment Links](https://stripe.com/docs/payments/payment-links). We recommend creating a
new Session each time your customer attempts to pay.

Once payment is successful, the Checkout Session will contain a reference
to the [Customer](https://stripe.com/docs/api/customers), and either the successful
[PaymentIntent](https://stripe.com/docs/api/payment_intents) or an active
[Subscription](https://stripe.com/docs/api/subscriptions).

You can create a Checkout Session on your server and pass its ID to the
client to begin Checkout.

Related guide: [Checkout Server Quickstart](https://stripe.com/docs/payments/checkout/api).
*/
export interface CheckoutSession {
  /** When set, provides configuration for actions to take if this Checkout Session expires. */
  after_expiration?: PaymentPagesCheckoutSessionAfterExpiration | null;

  /** Enables user redeemable promotion codes. */
  allow_promotion_codes?: boolean | null;

  /** Total of all items before discounts or taxes are applied. */
  amount_subtotal?: number | null;

  /** Total of all items after discounts and taxes are applied. */
  amount_total?: number | null;
  automatic_tax: PaymentPagesCheckoutSessionAutomaticTax;

  /** Describes whether Checkout should collect the customer's billing address. */
  billing_address_collection?: "auto" | "required" | null;

  /** The URL the customer will be directed to if they decide to cancel payment and return to your website. */
  cancel_url: string;

  /**
   * A unique string to reference the Checkout Session. This can be a
   * customer ID, a cart ID, or similar, and can be used to reconcile the
   * Session with your internal systems.
   */
  client_reference_id?: string | null;

  /** Results of `consent_collection` for this session. */
  consent?: PaymentPagesCheckoutSessionConsent | null;

  /** When set, provides configuration for the Checkout Session to gather active consent from customers. */
  consent_collection?: PaymentPagesCheckoutSessionConsentCollection | null;

  /** Three-letter [ISO currency code](https://www.iso.org/iso-4217-currency-codes.html), in lowercase. Must be a [supported currency](https://stripe.com/docs/currencies). */
  currency?: string | null;

  /**
   * The ID of the customer for this Session.
   * For Checkout Sessions in `payment` or `subscription` mode, Checkout
   * will create a new customer object based on information provided
   * during the payment flow unless an existing customer was provided when
   * the Session was created.
   */
  customer?: string | Customer | DeletedCustomer | (Customer & DeletedCustomer) | null;

  /** Configure whether a Checkout Session creates a Customer when the Checkout Session completes. */
  customer_creation?: "always" | "if_required" | null;

  /** The customer details including the customer's tax exempt status and the customer's tax IDs. Only present on Sessions in `payment` or `subscription` mode. */
  customer_details?: PaymentPagesCheckoutSessionCustomerDetails | null;

  /**
   * If provided, this value will be used when the Customer object is created.
   * If not provided, customers will be asked to enter their email address.
   * Use this parameter to prefill customer data if you already have an email
   * on file. To access information about the customer once the payment flow is
   * complete, use the `customer` attribute.
   */
  customer_email?: string | null;

  /**
   * The timestamp at which the Checkout Session will expire.
   * @format unix-time
   */
  expires_at: number;

  /**
   * Unique identifier for the object. Used to pass to `redirectToCheckout`
   * in Stripe.js.
   */
  id: string;

  /**
   * PaymentPagesCheckoutSessionListLineItems
   * The line items purchased by the customer.
   */
  line_items?: { data: Item[]; has_more: boolean; object: "list"; url: string };

  /** Has the value `true` if the object exists in live mode or the value `false` if the object exists in test mode. */
  livemode: boolean;

  /** The IETF language tag of the locale Checkout is displayed in. If blank or `auto`, the browser's locale is used. */
  locale?:
    | "auto"
    | "bg"
    | "cs"
    | "da"
    | "de"
    | "el"
    | "en"
    | "en-GB"
    | "es"
    | "es-419"
    | "et"
    | "fi"
    | "fil"
    | "fr"
    | "fr-CA"
    | "hr"
    | "hu"
    | "id"
    | "it"
    | "ja"
    | "ko"
    | "lt"
    | "lv"
    | "ms"
    | "mt"
    | "nb"
    | "nl"
    | "pl"
    | "pt"
    | "pt-BR"
    | "ro"
    | "ru"
    | "sk"
    | "sl"
    | "sv"
    | "th"
    | "tr"
    | "vi"
    | "zh"
    | "zh-HK"
    | "zh-TW"
    | null;

  /** Set of [key-value pairs](https://stripe.com/docs/api/metadata) that you can attach to an object. This can be useful for storing additional information about the object in a structured format. */
  metadata?: Record<string, string>;

  /** The mode of the Checkout Session. */
  mode: "payment" | "setup" | "subscription";

  /** String representing the object's type. Objects of the same type share the same value. */
  object: "checkout.session";

  /** The ID of the PaymentIntent for Checkout Sessions in `payment` mode. */
  payment_intent?: string | PaymentIntent | null;

  /** The ID of the Payment Link that created this Session. */
  payment_link?: string | PaymentLink | null;

  /** Payment-method-specific configuration for the PaymentIntent or SetupIntent of this CheckoutSession. */
  payment_method_options?: CheckoutSessionPaymentMethodOptions | null;

  /**
   * A list of the types of payment methods (e.g. card) this Checkout
   * Session is allowed to accept.
   */
  payment_method_types: string[];

  /**
   * The payment status of the Checkout Session, one of `paid`, `unpaid`, or `no_payment_required`.
   * You can use this value to decide when to fulfill your customer's order.
   */
  payment_status: "no_payment_required" | "paid" | "unpaid";
  phone_number_collection?: PaymentPagesCheckoutSessionPhoneNumberCollection;

  /** The ID of the original expired Checkout Session that triggered the recovery flow. */
  recovered_from?: string | null;

  /** The ID of the SetupIntent for Checkout Sessions in `setup` mode. */
  setup_intent?: string | SetupIntent | null;

  /** Shipping information for this Checkout Session. */
  shipping?: Shipping | null;

  /** When set, provides configuration for Checkout to collect a shipping address from a customer. */
  shipping_address_collection?: PaymentPagesCheckoutSessionShippingAddressCollection | null;

  /** The shipping rate options applied to this Session. */
  shipping_options: PaymentPagesCheckoutSessionShippingOption[];

  /** The ID of the ShippingRate for Checkout Sessions in `payment` mode. */
  shipping_rate?: string | ShippingRate | null;

  /** The status of the Checkout Session, one of `open`, `complete`, or `expired`. */
  status?: "complete" | "expired" | "open" | null;

  /**
   * Describes the type of transaction being performed by Checkout in order to customize
   * relevant text on the page, such as the submit button. `submit_type` can only be
   * specified on Checkout Sessions in `payment` mode, but not Checkout Sessions
   * in `subscription` or `setup` mode.
   */
  submit_type?: "auto" | "book" | "donate" | "pay" | null;

  /** The ID of the subscription for Checkout Sessions in `subscription` mode. */
  subscription?: string | Subscription | null;

  /**
   * The URL the customer will be directed to after the payment or
   * subscription creation is successful.
   */
  success_url: string;
  tax_id_collection?: PaymentPagesCheckoutSessionTaxIdCollection;

  /** Tax and discount details for the computed total amount. */
  total_details?: PaymentPagesCheckoutSessionTotalDetails | null;

  /** The URL to the Checkout Session. */
  url?: string | null;
}

export interface CheckoutAcssDebitMandateOptions {
  /** A URL for custom mandate text */
  custom_mandate_url?: string;

  /** List of Stripe products where this mandate can be selected automatically. Returned when the Session is in `setup` mode. */
  default_for?: ("invoice" | "subscription")[];

  /** Description of the interval. Only required if the 'payment_schedule' parameter is 'interval' or 'combined'. */
  interval_description?: string | null;

  /** Payment schedule for the mandate. */
  payment_schedule?: "combined" | "interval" | "sporadic" | null;

  /** Transaction type of the mandate. */
  transaction_type?: "business" | "personal" | null;
}

export interface CheckoutAcssDebitPaymentMethodOptions {
  /** Currency supported by the bank account. Returned when the Session is in `setup` mode. */
  currency?: "cad" | "usd";
  mandate_options?: CheckoutAcssDebitMandateOptions;

  /** Bank account verification method. */
  verification_method?: "automatic" | "instant" | "microdeposits";
}

export interface CheckoutSessionPaymentMethodOptions {
  acss_debit?: CheckoutAcssDebitPaymentMethodOptions;
  boleto?: PaymentMethodOptionsBoleto;
  oxxo?: PaymentMethodOptionsOxxo;
}

export interface ConnectCollectionTransfer {
  /** Amount transferred, in %s. */
  amount: number;

  /** Three-letter [ISO currency code](https://www.iso.org/iso-4217-currency-codes.html), in lowercase. Must be a [supported currency](https://stripe.com/docs/currencies). */
  currency: string;

  /** ID of the account that funds are being collected for. */
  destination: string | Account;

  /** Unique identifier for the object. */
  id: string;

  /** Has the value `true` if the object exists in live mode or the value `false` if the object exists in test mode. */
  livemode: boolean;

  /** String representing the object's type. Objects of the same type share the same value. */
  object: "connect_collection_transfer";
}

/**
* Stripe needs to collect certain pieces of information about each account
created. These requirements can differ depending on the account's country. The
Country Specs API makes these rules available to your integration.

You can also view the information from this API call as [an online
guide](/docs/connect/required-verification-information).
*/
export interface CountrySpec {
  /** The default currency for this country. This applies to both payment methods and bank accounts. */
  default_currency: string;

  /** Unique identifier for the object. Represented as the ISO country code for this country. */
  id: string;

  /** String representing the object's type. Objects of the same type share the same value. */
  object: "country_spec";

  /** Currencies that can be accepted in the specific country (for transfers). */
  supported_bank_account_currencies: Record<string, string[]>;

  /** Currencies that can be accepted in the specified country (for payments). */
  supported_payment_currencies: string[];

  /** Payment methods available in the specified country. You may need to enable some payment methods (e.g., [ACH](https://stripe.com/docs/ach)) on your account before they appear in this list. The `stripe` payment method refers to [charging through your platform](https://stripe.com/docs/connect/destination-charges). */
  supported_payment_methods: string[];

  /** Countries that can accept transfers from the specified country. */
  supported_transfer_countries: string[];
  verification_fields: CountrySpecVerificationFields;
}

export interface CountrySpecVerificationFieldDetails {
  /** Additional fields which are only required for some users. */
  additional: string[];

  /** Fields which every account must eventually provide. */
  minimum: string[];
}

export interface CountrySpecVerificationFields {
  company: CountrySpecVerificationFieldDetails;
  individual: CountrySpecVerificationFieldDetails;
}

/**
* A coupon contains information about a percent-off or amount-off discount you
might want to apply to a customer. Coupons may be applied to [invoices](https://stripe.com/docs/api#invoices) or
[orders](https://stripe.com/docs/api#create_order_legacy-coupon). Coupons do not work with conventional one-off [charges](https://stripe.com/docs/api#create_charge).
*/
export interface Coupon {
  /** Amount (in the `currency` specified) that will be taken off the subtotal of any invoices for this customer. */
  amount_off?: number | null;
  applies_to?: CouponAppliesTo;

  /**
   * Time at which the object was created. Measured in seconds since the Unix epoch.
   * @format unix-time
   */
  created: number;

  /** If `amount_off` has been set, the three-letter [ISO code for the currency](https://stripe.com/docs/currencies) of the amount to take off. */
  currency?: string | null;

  /** One of `forever`, `once`, and `repeating`. Describes how long a customer who applies this coupon will get the discount. */
  duration: "forever" | "once" | "repeating";

  /** If `duration` is `repeating`, the number of months the coupon applies. Null if coupon `duration` is `forever` or `once`. */
  duration_in_months?: number | null;

  /** Unique identifier for the object. */
  id: string;

  /** Has the value `true` if the object exists in live mode or the value `false` if the object exists in test mode. */
  livemode: boolean;

  /** Maximum number of times this coupon can be redeemed, in total, across all customers, before it is no longer valid. */
  max_redemptions?: number | null;

  /** Set of [key-value pairs](https://stripe.com/docs/api/metadata) that you can attach to an object. This can be useful for storing additional information about the object in a structured format. */
  metadata?: Record<string, string>;

  /** Name of the coupon displayed to customers on for instance invoices or receipts. */
  name?: string | null;

  /** String representing the object's type. Objects of the same type share the same value. */
  object: "coupon";

  /** Percent that will be taken off the subtotal of any invoices for this customer for the duration of the coupon. For example, a coupon with percent_off of 50 will make a %s100 invoice %s50 instead. */
  percent_off?: number | null;

  /**
   * Date after which the coupon can no longer be redeemed.
   * @format unix-time
   */
  redeem_by?: number | null;

  /** Number of times this coupon has been applied to a customer. */
  times_redeemed: number;

  /** Taking account of the above properties, whether this coupon can still be applied to a customer. */
  valid: boolean;
}

export interface CouponAppliesTo {
  /** A list of product IDs this coupon applies to */
  products: string[];
}

/**
* Issue a credit note to adjust an invoice's amount after the invoice is finalized.

Related guide: [Credit Notes](https://stripe.com/docs/billing/invoices/credit-notes).
*/
export interface CreditNote {
  /** The integer amount in %s representing the total amount of the credit note, including tax. */
  amount: number;

  /**
   * Time at which the object was created. Measured in seconds since the Unix epoch.
   * @format unix-time
   */
  created: number;

  /** Three-letter [ISO currency code](https://www.iso.org/iso-4217-currency-codes.html), in lowercase. Must be a [supported currency](https://stripe.com/docs/currencies). */
  currency: string;

  /** ID of the customer. */
  customer: string | Customer | DeletedCustomer | (Customer & DeletedCustomer);

  /** Customer balance transaction related to this credit note. */
  customer_balance_transaction?: string | CustomerBalanceTransaction | null;

  /** The integer amount in %s representing the total amount of discount that was credited. */
  discount_amount: number;

  /** The aggregate amounts calculated per discount for all line items. */
  discount_amounts: DiscountsResourceDiscountAmount[];

  /** Unique identifier for the object. */
  id: string;

  /** ID of the invoice. */
  invoice: string | Invoice;

  /**
   * CreditNoteLinesList
   * Line items that make up the credit note
   */
  lines: { data: CreditNoteLineItem[]; has_more: boolean; object: "list"; url: string };

  /** Has the value `true` if the object exists in live mode or the value `false` if the object exists in test mode. */
  livemode: boolean;

  /** Customer-facing text that appears on the credit note PDF. */
  memo?: string | null;

  /** Set of [key-value pairs](https://stripe.com/docs/api/metadata) that you can attach to an object. This can be useful for storing additional information about the object in a structured format. */
  metadata?: Record<string, string>;

  /** A unique number that identifies this particular credit note and appears on the PDF of the credit note and its associated invoice. */
  number: string;

  /** String representing the object's type. Objects of the same type share the same value. */
  object: "credit_note";

  /** Amount that was credited outside of Stripe. */
  out_of_band_amount?: number | null;

  /** The link to download the PDF of the credit note. */
  pdf: string;

  /** Reason for issuing this credit note, one of `duplicate`, `fraudulent`, `order_change`, or `product_unsatisfactory` */
  reason?: "duplicate" | "fraudulent" | "order_change" | "product_unsatisfactory" | null;

  /** Refund related to this credit note. */
  refund?: string | Refund | null;

  /** Status of this credit note, one of `issued` or `void`. Learn more about [voiding credit notes](https://stripe.com/docs/billing/invoices/credit-notes#voiding). */
  status: "issued" | "void";

  /** The integer amount in %s representing the amount of the credit note, excluding tax and invoice level discounts. */
  subtotal: number;

  /** The aggregate amounts calculated per tax rate for all line items. */
  tax_amounts: CreditNoteTaxAmount[];

  /** The integer amount in %s representing the total amount of the credit note, including tax and all discount. */
  total: number;

  /** Type of this credit note, one of `pre_payment` or `post_payment`. A `pre_payment` credit note means it was issued when the invoice was open. A `post_payment` credit note means it was issued when the invoice was paid. */
  type: "post_payment" | "pre_payment";

  /**
   * The time that the credit note was voided.
   * @format unix-time
   */
  voided_at?: number | null;
}

export interface CreditNoteLineItem {
  /** The integer amount in %s representing the gross amount being credited for this line item, excluding (exclusive) tax and discounts. */
  amount: number;

  /** Description of the item being credited. */
  description?: string | null;

  /** The integer amount in %s representing the discount being credited for this line item. */
  discount_amount: number;

  /** The amount of discount calculated per discount for this line item */
  discount_amounts: DiscountsResourceDiscountAmount[];

  /** Unique identifier for the object. */
  id: string;

  /** ID of the invoice line item being credited */
  invoice_line_item?: string;

  /** Has the value `true` if the object exists in live mode or the value `false` if the object exists in test mode. */
  livemode: boolean;

  /** String representing the object's type. Objects of the same type share the same value. */
  object: "credit_note_line_item";

  /** The number of units of product being credited. */
  quantity?: number | null;

  /** The amount of tax calculated per tax rate for this line item */
  tax_amounts: CreditNoteTaxAmount[];

  /** The tax rates which apply to the line item. */
  tax_rates: TaxRate[];

  /** The type of the credit note line item, one of `invoice_line_item` or `custom_line_item`. When the type is `invoice_line_item` there is an additional `invoice_line_item` property on the resource the value of which is the id of the credited line item on the invoice. */
  type: "custom_line_item" | "invoice_line_item";

  /** The cost of each unit of product being credited. */
  unit_amount?: number | null;

  /**
   * Same as `unit_amount`, but contains a decimal value with at most 12 decimal places.
   * @format decimal
   */
  unit_amount_decimal?: string | null;
}

export interface CreditNoteTaxAmount {
  /** The amount, in %s, of the tax. */
  amount: number;

  /** Whether this tax amount is inclusive or exclusive. */
  inclusive: boolean;

  /** The tax rate that was applied to get this tax amount. */
  tax_rate: string | TaxRate;
}

/**
* This object represents a customer of your business. It lets you create recurring charges and track payments that belong to the same customer.

Related guide: [Save a card during payment](https://stripe.com/docs/payments/save-during-payment).
*/
export interface Customer {
  /** The customer's address. */
  address?: Address | null;

  /** Current balance, if any, being stored on the customer. If negative, the customer has credit to apply to their next invoice. If positive, the customer has an amount owed that will be added to their next invoice. The balance does not refer to any unpaid invoices; it solely takes into account amounts that have yet to be successfully applied to any invoice. This balance is only taken into account as invoices are finalized. */
  balance?: number;

  /**
   * Time at which the object was created. Measured in seconds since the Unix epoch.
   * @format unix-time
   */
  created: number;

  /** Three-letter [ISO code for the currency](https://stripe.com/docs/currencies) the customer can be charged in for recurring billing purposes. */
  currency?: string | null;

  /**
   * ID of the default payment source for the customer.
   *
   * If you are using payment methods created via the PaymentMethods API, see the [invoice_settings.default_payment_method](https://stripe.com/docs/api/customers/object#customer_object-invoice_settings-default_payment_method) field instead.
   */
  default_source?:
    | string
    | AlipayAccount
    | BankAccount
    | BitcoinReceiver
    | Card
    | Source
    | (AlipayAccount & BankAccount & BitcoinReceiver & Card & Source)
    | null;

  /**
   * When the customer's latest invoice is billed by charging automatically, `delinquent` is `true` if the invoice's latest charge failed. When the customer's latest invoice is billed by sending an invoice, `delinquent` is `true` if the invoice isn't paid by its due date.
   *
   * If an invoice is marked uncollectible by [dunning](https://stripe.com/docs/billing/automatic-collection), `delinquent` doesn't get reset to `false`.
   */
  delinquent?: boolean | null;

  /** An arbitrary string attached to the object. Often useful for displaying to users. */
  description?: string | null;

  /** Describes the current discount active on the customer, if there is one. */
  discount?: Discount | null;

  /** The customer's email address. */
  email?: string | null;

  /** Unique identifier for the object. */
  id: string;

  /** The prefix for the customer used to generate unique invoice numbers. */
  invoice_prefix?: string | null;
  invoice_settings?: InvoiceSettingCustomerSetting;

  /** Has the value `true` if the object exists in live mode or the value `false` if the object exists in test mode. */
  livemode: boolean;

  /** Set of [key-value pairs](https://stripe.com/docs/api/metadata) that you can attach to an object. This can be useful for storing additional information about the object in a structured format. */
  metadata?: Record<string, string>;

  /** The customer's full name or business name. */
  name?: string | null;

  /** The suffix of the customer's next invoice number, e.g., 0001. */
  next_invoice_sequence?: number;

  /** String representing the object's type. Objects of the same type share the same value. */
  object: "customer";

  /** The customer's phone number. */
  phone?: string | null;

  /** The customer's preferred locales (languages), ordered by preference. */
  preferred_locales?: string[] | null;

  /** Mailing and shipping address for the customer. Appears on invoices emailed to this customer. */
  shipping?: Shipping | null;

  /**
   * ApmsSourcesSourceList
   * The customer's payment sources, if any.
   */
  sources?: {
    data: (
      | AlipayAccount
      | BankAccount
      | BitcoinReceiver
      | Card
      | Source
      | (AlipayAccount & BankAccount & BitcoinReceiver & Card & Source)
    )[];
    has_more: boolean;
    object: "list";
    url: string;
  };

  /**
   * SubscriptionList
   * The customer's current subscriptions, if any.
   */
  subscriptions?: { data: Subscription[]; has_more: boolean; object: "list"; url: string };
  tax?: CustomerTax;

  /** Describes the customer's tax exemption status. One of `none`, `exempt`, or `reverse`. When set to `reverse`, invoice and receipt PDFs include the text **"Reverse charge"**. */
  tax_exempt?: "exempt" | "none" | "reverse" | null;

  /**
   * TaxIDsList
   * The customer's tax IDs.
   */
  tax_ids?: { data: TaxId[]; has_more: boolean; object: "list"; url: string };
}

export interface CustomerAcceptance {
  /**
   * The time at which the customer accepted the Mandate.
   * @format unix-time
   */
  accepted_at?: number | null;
  offline?: OfflineAcceptance;
  online?: OnlineAcceptance;

  /** The type of customer acceptance information included with the Mandate. One of `online` or `offline`. */
  type: "offline" | "online";
}

/**
* Each customer has a [`balance`](https://stripe.com/docs/api/customers/object#customer_object-balance) value,
which denotes a debit or credit that's automatically applied to their next invoice upon finalization.
You may modify the value directly by using the [update customer API](https://stripe.com/docs/api/customers/update),
or by creating a Customer Balance Transaction, which increments or decrements the customer's `balance` by the specified `amount`.

Related guide: [Customer Balance](https://stripe.com/docs/billing/customer/balance) to learn more.
*/
export interface CustomerBalanceTransaction {
  /** The amount of the transaction. A negative value is a credit for the customer's balance, and a positive value is a debit to the customer's `balance`. */
  amount: number;

  /**
   * Time at which the object was created. Measured in seconds since the Unix epoch.
   * @format unix-time
   */
  created: number;

  /** The ID of the credit note (if any) related to the transaction. */
  credit_note?: string | CreditNote | null;

  /** Three-letter [ISO currency code](https://www.iso.org/iso-4217-currency-codes.html), in lowercase. Must be a [supported currency](https://stripe.com/docs/currencies). */
  currency: string;

  /** The ID of the customer the transaction belongs to. */
  customer: string | Customer;

  /** An arbitrary string attached to the object. Often useful for displaying to users. */
  description?: string | null;

  /** The customer's `balance` after the transaction was applied. A negative value decreases the amount due on the customer's next invoice. A positive value increases the amount due on the customer's next invoice. */
  ending_balance: number;

  /** Unique identifier for the object. */
  id: string;

  /** The ID of the invoice (if any) related to the transaction. */
  invoice?: string | Invoice | null;

  /** Has the value `true` if the object exists in live mode or the value `false` if the object exists in test mode. */
  livemode: boolean;

  /** Set of [key-value pairs](https://stripe.com/docs/api/metadata) that you can attach to an object. This can be useful for storing additional information about the object in a structured format. */
  metadata?: Record<string, string>;

  /** String representing the object's type. Objects of the same type share the same value. */
  object: "customer_balance_transaction";

  /** Transaction type: `adjustment`, `applied_to_invoice`, `credit_note`, `initial`, `invoice_too_large`, `invoice_too_small`, `unspent_receiver_credit`, or `unapplied_from_invoice`. See the [Customer Balance page](https://stripe.com/docs/billing/customer/balance#types) to learn more about transaction types. */
  type:
    | "adjustment"
    | "applied_to_invoice"
    | "credit_note"
    | "initial"
    | "invoice_too_large"
    | "invoice_too_small"
    | "migration"
    | "unapplied_from_invoice"
    | "unspent_receiver_credit";
}

export interface CustomerTax {
  /** Surfaces if automatic tax computation is possible given the current customer location information. */
  automatic_tax: "failed" | "not_collecting" | "supported" | "unrecognized_location";

  /** A recent IP address of the customer used for tax reporting and tax location inference. */
  ip_address?: string | null;

  /** The customer's location as identified by Stripe Tax. */
  location?: CustomerTaxLocation | null;
}

export interface CustomerTaxLocation {
  /** The customer's country as identified by Stripe Tax. */
  country: string;

  /** The data source used to infer the customer's location. */
  source: "billing_address" | "ip_address" | "payment_method" | "shipping_destination";

  /** The customer's state, county, province, or region as identified by Stripe Tax. */
  state?: string | null;
}

export interface DeletedAccount {
  /** Always true for a deleted object */
  deleted: true;

  /** Unique identifier for the object. */
  id: string;

  /** String representing the object's type. Objects of the same type share the same value. */
  object: "account";
}

export interface DeletedAlipayAccount {
  /** Always true for a deleted object */
  deleted: true;

  /** Unique identifier for the object. */
  id: string;

  /** String representing the object's type. Objects of the same type share the same value. */
  object: "alipay_account";
}

export interface DeletedApplePayDomain {
  /** Always true for a deleted object */
  deleted: true;

  /** Unique identifier for the object. */
  id: string;

  /** String representing the object's type. Objects of the same type share the same value. */
  object: "apple_pay_domain";
}

export interface DeletedBankAccount {
  /** Three-letter [ISO code for the currency](https://stripe.com/docs/payouts) paid out to the bank account. */
  currency?: string | null;

  /** Always true for a deleted object */
  deleted: true;

  /** Unique identifier for the object. */
  id: string;

  /** String representing the object's type. Objects of the same type share the same value. */
  object: "bank_account";
}

export interface DeletedBitcoinReceiver {
  /** Always true for a deleted object */
  deleted: true;

  /** Unique identifier for the object. */
  id: string;

  /** String representing the object's type. Objects of the same type share the same value. */
  object: "bitcoin_receiver";
}

export interface DeletedCard {
  /** Three-letter [ISO code for the currency](https://stripe.com/docs/payouts) paid out to the bank account. */
  currency?: string | null;

  /** Always true for a deleted object */
  deleted: true;

  /** Unique identifier for the object. */
  id: string;

  /** String representing the object's type. Objects of the same type share the same value. */
  object: "card";
}

export interface DeletedCoupon {
  /** Always true for a deleted object */
  deleted: true;

  /** Unique identifier for the object. */
  id: string;

  /** String representing the object's type. Objects of the same type share the same value. */
  object: "coupon";
}

export interface DeletedCustomer {
  /** Always true for a deleted object */
  deleted: true;

  /** Unique identifier for the object. */
  id: string;

  /** String representing the object's type. Objects of the same type share the same value. */
  object: "customer";
}

export interface DeletedDiscount {
  /** The Checkout session that this coupon is applied to, if it is applied to a particular session in payment mode. Will not be present for subscription mode. */
  checkout_session?: string | null;

  /**
   * A coupon contains information about a percent-off or amount-off discount you
   * might want to apply to a customer. Coupons may be applied to [invoices](https://stripe.com/docs/api#invoices) or
   * [orders](https://stripe.com/docs/api#create_order_legacy-coupon). Coupons do not work with conventional one-off [charges](https://stripe.com/docs/api#create_charge).
   */
  coupon: Coupon;

  /** The ID of the customer associated with this discount. */
  customer?: string | Customer | DeletedCustomer | (Customer & DeletedCustomer) | null;

  /** Always true for a deleted object */
  deleted: true;

  /** The ID of the discount object. Discounts cannot be fetched by ID. Use `expand[]=discounts` in API calls to expand discount IDs in an array. */
  id: string;

  /** The invoice that the discount's coupon was applied to, if it was applied directly to a particular invoice. */
  invoice?: string | null;

  /** The invoice item `id` (or invoice line item `id` for invoice line items of type='subscription') that the discount's coupon was applied to, if it was applied directly to a particular invoice item or invoice line item. */
  invoice_item?: string | null;

  /** String representing the object's type. Objects of the same type share the same value. */
  object: "discount";

  /** The promotion code applied to create this discount. */
  promotion_code?: string | PromotionCode | null;

  /**
   * Date that the coupon was applied.
   * @format unix-time
   */
  start: number;

  /** The subscription that this coupon is applied to, if it is applied to a particular subscription. */
  subscription?: string | null;
}

export type DeletedExternalAccount = DeletedBankAccount | DeletedCard | (DeletedBankAccount & DeletedCard);

export interface DeletedInvoice {
  /** Always true for a deleted object */
  deleted: true;

  /** Unique identifier for the object. */
  id: string;

  /** String representing the object's type. Objects of the same type share the same value. */
  object: "invoice";
}

export interface DeletedInvoiceitem {
  /** Always true for a deleted object */
  deleted: true;

  /** Unique identifier for the object. */
  id: string;

  /** String representing the object's type. Objects of the same type share the same value. */
  object: "invoiceitem";
}

export type DeletedPaymentSource =
  | DeletedAlipayAccount
  | DeletedBankAccount
  | DeletedBitcoinReceiver
  | DeletedCard
  | (DeletedAlipayAccount & DeletedBankAccount & DeletedBitcoinReceiver & DeletedCard);

export interface DeletedPerson {
  /** Always true for a deleted object */
  deleted: true;

  /** Unique identifier for the object. */
  id: string;

  /** String representing the object's type. Objects of the same type share the same value. */
  object: "person";
}

export interface DeletedPlan {
  /** Always true for a deleted object */
  deleted: true;

  /** Unique identifier for the object. */
  id: string;

  /** String representing the object's type. Objects of the same type share the same value. */
  object: "plan";
}

export interface DeletedPrice {
  /** Always true for a deleted object */
  deleted: true;

  /** Unique identifier for the object. */
  id: string;

  /** String representing the object's type. Objects of the same type share the same value. */
  object: "price";
}

export interface DeletedProduct {
  /** Always true for a deleted object */
  deleted: true;

  /** Unique identifier for the object. */
  id: string;

  /** String representing the object's type. Objects of the same type share the same value. */
  object: "product";
}

export interface DeletedRadarValueList {
  /** Always true for a deleted object */
  deleted: true;

  /** Unique identifier for the object. */
  id: string;

  /** String representing the object's type. Objects of the same type share the same value. */
  object: "radar.value_list";
}

export interface DeletedRadarValueListItem {
  /** Always true for a deleted object */
  deleted: true;

  /** Unique identifier for the object. */
  id: string;

  /** String representing the object's type. Objects of the same type share the same value. */
  object: "radar.value_list_item";
}

export interface DeletedRecipient {
  /** Always true for a deleted object */
  deleted: true;

  /** Unique identifier for the object. */
  id: string;

  /** String representing the object's type. Objects of the same type share the same value. */
  object: "recipient";
}

export interface DeletedSku {
  /** Always true for a deleted object */
  deleted: true;

  /** Unique identifier for the object. */
  id: string;

  /** String representing the object's type. Objects of the same type share the same value. */
  object: "sku";
}

export interface DeletedSubscriptionItem {
  /** Always true for a deleted object */
  deleted: true;

  /** Unique identifier for the object. */
  id: string;

  /** String representing the object's type. Objects of the same type share the same value. */
  object: "subscription_item";
}

export interface DeletedTaxId {
  /** Always true for a deleted object */
  deleted: true;

  /** Unique identifier for the object. */
  id: string;

  /** String representing the object's type. Objects of the same type share the same value. */
  object: "tax_id";
}

export interface DeletedTerminalLocation {
  /** Always true for a deleted object */
  deleted: true;

  /** Unique identifier for the object. */
  id: string;

  /** String representing the object's type. Objects of the same type share the same value. */
  object: "terminal.location";
}

export interface DeletedTerminalReader {
  /** Always true for a deleted object */
  deleted: true;

  /** Unique identifier for the object. */
  id: string;

  /** String representing the object's type. Objects of the same type share the same value. */
  object: "terminal.reader";
}

export interface DeletedWebhookEndpoint {
  /** Always true for a deleted object */
  deleted: true;

  /** Unique identifier for the object. */
  id: string;

  /** String representing the object's type. Objects of the same type share the same value. */
  object: "webhook_endpoint";
}

export interface DeliveryEstimate {
  /** If `type` is `"exact"`, `date` will be the expected delivery date in the format YYYY-MM-DD. */
  date?: string;

  /** If `type` is `"range"`, `earliest` will be be the earliest delivery date in the format YYYY-MM-DD. */
  earliest?: string;

  /** If `type` is `"range"`, `latest` will be the latest delivery date in the format YYYY-MM-DD. */
  latest?: string;

  /** The type of estimate. Must be either `"range"` or `"exact"`. */
  type: string;
}

/**
* A discount represents the actual application of a coupon to a particular
customer. It contains information about when the discount began and when it
will end.

Related guide: [Applying Discounts to Subscriptions](https://stripe.com/docs/billing/subscriptions/discounts).
*/
export interface Discount {
  /** The Checkout session that this coupon is applied to, if it is applied to a particular session in payment mode. Will not be present for subscription mode. */
  checkout_session?: string | null;

  /**
   * A coupon contains information about a percent-off or amount-off discount you
   * might want to apply to a customer. Coupons may be applied to [invoices](https://stripe.com/docs/api#invoices) or
   * [orders](https://stripe.com/docs/api#create_order_legacy-coupon). Coupons do not work with conventional one-off [charges](https://stripe.com/docs/api#create_charge).
   */
  coupon: Coupon;

  /** The ID of the customer associated with this discount. */
  customer?: string | Customer | DeletedCustomer | (Customer & DeletedCustomer) | null;

  /**
   * If the coupon has a duration of `repeating`, the date that this discount will end. If the coupon has a duration of `once` or `forever`, this attribute will be null.
   * @format unix-time
   */
  end?: number | null;

  /** The ID of the discount object. Discounts cannot be fetched by ID. Use `expand[]=discounts` in API calls to expand discount IDs in an array. */
  id: string;

  /** The invoice that the discount's coupon was applied to, if it was applied directly to a particular invoice. */
  invoice?: string | null;

  /** The invoice item `id` (or invoice line item `id` for invoice line items of type='subscription') that the discount's coupon was applied to, if it was applied directly to a particular invoice item or invoice line item. */
  invoice_item?: string | null;

  /** String representing the object's type. Objects of the same type share the same value. */
  object: "discount";

  /** The promotion code applied to create this discount. */
  promotion_code?: string | PromotionCode | null;

  /**
   * Date that the coupon was applied.
   * @format unix-time
   */
  start: number;

  /** The subscription that this coupon is applied to, if it is applied to a particular subscription. */
  subscription?: string | null;
}

export interface DiscountsResourceDiscountAmount {
  /** The amount, in %s, of the discount. */
  amount: number;

  /** The discount that was applied to get this discount amount. */
  discount: string | Discount | DeletedDiscount | (Discount & DeletedDiscount);
}

/**
* A dispute occurs when a customer questions your charge with their card issuer.
When this happens, you're given the opportunity to respond to the dispute with
evidence that shows that the charge is legitimate. You can find more
information about the dispute process in our [Disputes and
Fraud](/docs/disputes) documentation.

Related guide: [Disputes and Fraud](https://stripe.com/docs/disputes).
*/
export interface Dispute {
  /** Disputed amount. Usually the amount of the charge, but can differ (usually because of currency fluctuation or because only part of the order is disputed). */
  amount: number;

  /** List of zero, one, or two balance transactions that show funds withdrawn and reinstated to your Stripe account as a result of this dispute. */
  balance_transactions: BalanceTransaction[];

  /** ID of the charge that was disputed. */
  charge: string | Charge;

  /**
   * Time at which the object was created. Measured in seconds since the Unix epoch.
   * @format unix-time
   */
  created: number;

  /** Three-letter [ISO currency code](https://www.iso.org/iso-4217-currency-codes.html), in lowercase. Must be a [supported currency](https://stripe.com/docs/currencies). */
  currency: string;
  evidence: DisputeEvidence;
  evidence_details: DisputeEvidenceDetails;

  /** Unique identifier for the object. */
  id: string;

  /** If true, it is still possible to refund the disputed payment. Once the payment has been fully refunded, no further funds will be withdrawn from your Stripe account as a result of this dispute. */
  is_charge_refundable: boolean;

  /** Has the value `true` if the object exists in live mode or the value `false` if the object exists in test mode. */
  livemode: boolean;

  /** Set of [key-value pairs](https://stripe.com/docs/api/metadata) that you can attach to an object. This can be useful for storing additional information about the object in a structured format. */
  metadata: Record<string, string>;

  /** String representing the object's type. Objects of the same type share the same value. */
  object: "dispute";

  /** ID of the PaymentIntent that was disputed. */
  payment_intent?: string | PaymentIntent | null;

  /** Reason given by cardholder for dispute. Possible values are `bank_cannot_process`, `check_returned`, `credit_not_processed`, `customer_initiated`, `debit_not_authorized`, `duplicate`, `fraudulent`, `general`, `incorrect_account_details`, `insufficient_funds`, `product_not_received`, `product_unacceptable`, `subscription_canceled`, or `unrecognized`. Read more about [dispute reasons](https://stripe.com/docs/disputes/categories). */
  reason: string;

  /** Current status of dispute. Possible values are `warning_needs_response`, `warning_under_review`, `warning_closed`, `needs_response`, `under_review`, `charge_refunded`, `won`, or `lost`. */
  status:
    | "charge_refunded"
    | "lost"
    | "needs_response"
    | "under_review"
    | "warning_closed"
    | "warning_needs_response"
    | "warning_under_review"
    | "won";
}

export interface DisputeEvidence {
  /** Any server or activity logs showing proof that the customer accessed or downloaded the purchased digital product. This information should include IP addresses, corresponding timestamps, and any detailed recorded activity. */
  access_activity_log?: string | null;

  /** The billing address provided by the customer. */
  billing_address?: string | null;

  /** (ID of a [file upload](https://stripe.com/docs/guides/file-upload)) Your subscription cancellation policy, as shown to the customer. */
  cancellation_policy?: string | File | null;

  /** An explanation of how and when the customer was shown your refund policy prior to purchase. */
  cancellation_policy_disclosure?: string | null;

  /** A justification for why the customer's subscription was not canceled. */
  cancellation_rebuttal?: string | null;

  /** (ID of a [file upload](https://stripe.com/docs/guides/file-upload)) Any communication with the customer that you feel is relevant to your case. Examples include emails proving that the customer received the product or service, or demonstrating their use of or satisfaction with the product or service. */
  customer_communication?: string | File | null;

  /** The email address of the customer. */
  customer_email_address?: string | null;

  /** The name of the customer. */
  customer_name?: string | null;

  /** The IP address that the customer used when making the purchase. */
  customer_purchase_ip?: string | null;

  /** (ID of a [file upload](https://stripe.com/docs/guides/file-upload)) A relevant document or contract showing the customer's signature. */
  customer_signature?: string | File | null;

  /** (ID of a [file upload](https://stripe.com/docs/guides/file-upload)) Documentation for the prior charge that can uniquely identify the charge, such as a receipt, shipping label, work order, etc. This document should be paired with a similar document from the disputed payment that proves the two payments are separate. */
  duplicate_charge_documentation?: string | File | null;

  /** An explanation of the difference between the disputed charge versus the prior charge that appears to be a duplicate. */
  duplicate_charge_explanation?: string | null;

  /** The Stripe ID for the prior charge which appears to be a duplicate of the disputed charge. */
  duplicate_charge_id?: string | null;

  /** A description of the product or service that was sold. */
  product_description?: string | null;

  /** (ID of a [file upload](https://stripe.com/docs/guides/file-upload)) Any receipt or message sent to the customer notifying them of the charge. */
  receipt?: string | File | null;

  /** (ID of a [file upload](https://stripe.com/docs/guides/file-upload)) Your refund policy, as shown to the customer. */
  refund_policy?: string | File | null;

  /** Documentation demonstrating that the customer was shown your refund policy prior to purchase. */
  refund_policy_disclosure?: string | null;

  /** A justification for why the customer is not entitled to a refund. */
  refund_refusal_explanation?: string | null;

  /** The date on which the customer received or began receiving the purchased service, in a clear human-readable format. */
  service_date?: string | null;

  /** (ID of a [file upload](https://stripe.com/docs/guides/file-upload)) Documentation showing proof that a service was provided to the customer. This could include a copy of a signed contract, work order, or other form of written agreement. */
  service_documentation?: string | File | null;

  /** The address to which a physical product was shipped. You should try to include as complete address information as possible. */
  shipping_address?: string | null;

  /** The delivery service that shipped a physical product, such as Fedex, UPS, USPS, etc. If multiple carriers were used for this purchase, please separate them with commas. */
  shipping_carrier?: string | null;

  /** The date on which a physical product began its route to the shipping address, in a clear human-readable format. */
  shipping_date?: string | null;

  /** (ID of a [file upload](https://stripe.com/docs/guides/file-upload)) Documentation showing proof that a product was shipped to the customer at the same address the customer provided to you. This could include a copy of the shipment receipt, shipping label, etc. It should show the customer's full shipping address, if possible. */
  shipping_documentation?: string | File | null;

  /** The tracking number for a physical product, obtained from the delivery service. If multiple tracking numbers were generated for this purchase, please separate them with commas. */
  shipping_tracking_number?: string | null;

  /** (ID of a [file upload](https://stripe.com/docs/guides/file-upload)) Any additional evidence or statements. */
  uncategorized_file?: string | File | null;

  /** Any additional evidence or statements. */
  uncategorized_text?: string | null;
}

export interface DisputeEvidenceDetails {
  /**
   * Date by which evidence must be submitted in order to successfully challenge dispute. Will be null if the customer's bank or credit card company doesn't allow a response for this particular dispute.
   * @format unix-time
   */
  due_by?: number | null;

  /** Whether evidence has been staged for this dispute. */
  has_evidence: boolean;

  /** Whether the last evidence submission was submitted past the due date. Defaults to `false` if no evidence submissions have occurred. If `true`, then delivery of the latest evidence is *not* guaranteed. */
  past_due: boolean;

  /** The number of times evidence has been submitted. Typically, you may only submit evidence once. */
  submission_count: number;
}

export interface EphemeralKey {
  /**
   * Time at which the object was created. Measured in seconds since the Unix epoch.
   * @format unix-time
   */
  created: number;

  /**
   * Time at which the key will expire. Measured in seconds since the Unix epoch.
   * @format unix-time
   */
  expires: number;

  /** Unique identifier for the object. */
  id: string;

  /** Has the value `true` if the object exists in live mode or the value `false` if the object exists in test mode. */
  livemode: boolean;

  /** String representing the object's type. Objects of the same type share the same value. */
  object: "ephemeral_key";

  /** The key's secret. You can use this value to make authorized requests to the Stripe API. */
  secret?: string;
}

/**
 * An error response from the Stripe API
 */
export interface Error {
  error: ApiErrors;
}

/**
* Events are our way of letting you know when something interesting happens in
your account. When an interesting event occurs, we create a new `Event`
object. For example, when a charge succeeds, we create a `charge.succeeded`
event; and when an invoice payment attempt fails, we create an
`invoice.payment_failed` event. Note that many API requests may cause multiple
events to be created. For example, if you create a new subscription for a
customer, you will receive both a `customer.subscription.created` event and a
`charge.succeeded` event.

Events occur when the state of another API resource changes. The state of that
resource at the time of the change is embedded in the event's data field. For
example, a `charge.succeeded` event will contain a charge, and an
`invoice.payment_failed` event will contain an invoice.

As with other API resources, you can use endpoints to retrieve an
[individual event](https://stripe.com/docs/api#retrieve_event) or a [list of events](https://stripe.com/docs/api#list_events)
from the API. We also have a separate
[webhooks](http://en.wikipedia.org/wiki/Webhook) system for sending the
`Event` objects directly to an endpoint on your server. Webhooks are managed
in your
[account settings](https://dashboard.stripe.com/account/webhooks),
and our [Using Webhooks](https://stripe.com/docs/webhooks) guide will help you get set up.

When using [Connect](https://stripe.com/docs/connect), you can also receive notifications of
events that occur in connected accounts. For these events, there will be an
additional `account` attribute in the received `Event` object.

**NOTE:** Right now, access to events through the [Retrieve Event API](https://stripe.com/docs/api#retrieve_event) is
guaranteed only for 30 days.
*/
export interface Event {
  /** The connected account that originated the event. */
  account?: string;

  /** The Stripe API version used to render `data`. *Note: This property is populated only for events on or after October 31, 2014*. */
  api_version?: string | null;

  /**
   * Time at which the object was created. Measured in seconds since the Unix epoch.
   * @format unix-time
   */
  created: number;
  data: NotificationEventData;

  /** Unique identifier for the object. */
  id: string;

  /** Has the value `true` if the object exists in live mode or the value `false` if the object exists in test mode. */
  livemode: boolean;

  /** String representing the object's type. Objects of the same type share the same value. */
  object: "event";

  /** Number of webhooks that have yet to be successfully delivered (i.e., to return a 20x response) to the URLs you've specified. */
  pending_webhooks: number;

  /** Information on the API request that instigated the event. */
  request?: NotificationEventRequest | null;

  /** Description of the event (e.g., `invoice.created` or `charge.refunded`). */
  type: string;
}

/**
* `Exchange Rate` objects allow you to determine the rates that Stripe is
currently using to convert from one currency to another. Since this number is
variable throughout the day, there are various reasons why you might want to
know the current rate (for example, to dynamically price an item for a user
with a default payment in a foreign currency).

If you want a guarantee that the charge is made with a certain exchange rate
you expect is current, you can pass in `exchange_rate` to charges endpoints.
If the value is no longer up to date, the charge won't go through. Please
refer to our [Exchange Rates API](https://stripe.com/docs/exchange-rates) guide for more
details.
*/
export interface ExchangeRate {
  /** Unique identifier for the object. Represented as the three-letter [ISO currency code](https://www.iso.org/iso-4217-currency-codes.html) in lowercase. */
  id: string;

  /** String representing the object's type. Objects of the same type share the same value. */
  object: "exchange_rate";

  /** Hash where the keys are supported currencies and the values are the exchange rate at which the base id currency converts to the key currency. */
  rates: Record<string, number>;
}

export type ExternalAccount = BankAccount | Card | (BankAccount & Card);

export interface Fee {
  /** Amount of the fee, in cents. */
  amount: number;

  /** ID of the Connect application that earned the fee. */
  application?: string | null;

  /** Three-letter [ISO currency code](https://www.iso.org/iso-4217-currency-codes.html), in lowercase. Must be a [supported currency](https://stripe.com/docs/currencies). */
  currency: string;

  /** An arbitrary string attached to the object. Often useful for displaying to users. */
  description?: string | null;

  /** Type of the fee, one of: `application_fee`, `stripe_fee` or `tax`. */
  type: string;
}

/**
* `Application Fee Refund` objects allow you to refund an application fee that
has previously been created but not yet refunded. Funds will be refunded to
the Stripe account from which the fee was originally collected.

Related guide: [Refunding Application Fees](https://stripe.com/docs/connect/destination-charges#refunding-app-fee).
*/
export interface FeeRefund {
  /** Amount, in %s. */
  amount: number;

  /** Balance transaction that describes the impact on your account balance. */
  balance_transaction?: string | BalanceTransaction | null;

  /**
   * Time at which the object was created. Measured in seconds since the Unix epoch.
   * @format unix-time
   */
  created: number;

  /** Three-letter [ISO currency code](https://www.iso.org/iso-4217-currency-codes.html), in lowercase. Must be a [supported currency](https://stripe.com/docs/currencies). */
  currency: string;

  /** ID of the application fee that was refunded. */
  fee: string | ApplicationFee;

  /** Unique identifier for the object. */
  id: string;

  /** Set of [key-value pairs](https://stripe.com/docs/api/metadata) that you can attach to an object. This can be useful for storing additional information about the object in a structured format. */
  metadata?: Record<string, string>;

  /** String representing the object's type. Objects of the same type share the same value. */
  object: "fee_refund";
}

/**
* This is an object representing a file hosted on Stripe's servers. The
file may have been uploaded by yourself using the [create file](https://stripe.com/docs/api#create_file)
request (for example, when uploading dispute evidence) or it may have
been created by Stripe (for example, the results of a [Sigma scheduled
query](#scheduled_queries)).

Related guide: [File Upload Guide](https://stripe.com/docs/file-upload).
*/
export interface File {
  /**
   * Time at which the object was created. Measured in seconds since the Unix epoch.
   * @format unix-time
   */
  created: number;

  /**
   * The time at which the file expires and is no longer available in epoch seconds.
   * @format unix-time
   */
  expires_at?: number | null;

  /** A filename for the file, suitable for saving to a filesystem. */
  filename?: string | null;

  /** Unique identifier for the object. */
  id: string;

  /**
   * FileFileLinkList
   * A list of [file links](https://stripe.com/docs/api#file_links) that point at this file.
   */
  links?: { data: FileLink[]; has_more: boolean; object: "list"; url: string };

  /** String representing the object's type. Objects of the same type share the same value. */
  object: "file";

  /** The [purpose](https://stripe.com/docs/file-upload#uploading-a-file) of the uploaded file. */
  purpose:
    | "account_requirement"
    | "additional_verification"
    | "business_icon"
    | "business_logo"
    | "customer_signature"
    | "dispute_evidence"
    | "document_provider_identity_document"
    | "finance_report_run"
    | "identity_document"
    | "identity_document_downloadable"
    | "pci_document"
    | "selfie"
    | "sigma_scheduled_query"
    | "tax_document_user_upload";

  /** The size in bytes of the file object. */
  size: number;

  /** A user friendly title for the document. */
  title?: string | null;

  /** The type of the file returned (e.g., `csv`, `pdf`, `jpg`, or `png`). */
  type?: string | null;

  /** The URL from which the file can be downloaded using your live secret API key. */
  url?: string | null;
}

/**
* To share the contents of a `File` object with non-Stripe users, you can
create a `FileLink`. `FileLink`s contain a URL that can be used to
retrieve the contents of the file without authentication.
*/
export interface FileLink {
  /**
   * Time at which the object was created. Measured in seconds since the Unix epoch.
   * @format unix-time
   */
  created: number;

  /** Whether this link is already expired. */
  expired: boolean;

  /**
   * Time at which the link expires.
   * @format unix-time
   */
  expires_at?: number | null;

  /** The file object this link points to. */
  file: string | File;

  /** Unique identifier for the object. */
  id: string;

  /** Has the value `true` if the object exists in live mode or the value `false` if the object exists in test mode. */
  livemode: boolean;

  /** Set of [key-value pairs](https://stripe.com/docs/api/metadata) that you can attach to an object. This can be useful for storing additional information about the object in a structured format. */
  metadata: Record<string, string>;

  /** String representing the object's type. Objects of the same type share the same value. */
  object: "file_link";

  /** The publicly accessible URL to download the file. */
  url?: string | null;
}

export interface FinancialReportingFinanceReportRunRunParameters {
  /** The set of output columns requested for inclusion in the report run. */
  columns?: string[];

  /** Connected account ID by which to filter the report run. */
  connected_account?: string;

  /** Currency of objects to be included in the report run. */
  currency?: string;

  /**
   * Ending timestamp of data to be included in the report run (exclusive).
   * @format unix-time
   */
  interval_end?: number;

  /**
   * Starting timestamp of data to be included in the report run.
   * @format unix-time
   */
  interval_start?: number;

  /** Payout ID by which to filter the report run. */
  payout?: string;

  /** Category of balance transactions to be included in the report run. */
  reporting_category?: string;

  /** Defaults to `Etc/UTC`. The output timezone for all timestamps in the report. A list of possible time zone values is maintained at the [IANA Time Zone Database](http://www.iana.org/time-zones). Has no effect on `interval_start` or `interval_end`. */
  timezone?: string;
}

/**
 * Point in Time
 */
export interface GelatoDataDocumentReportDateOfBirth {
  /** Numerical day between 1 and 31. */
  day?: number | null;

  /** Numerical month between 1 and 12. */
  month?: number | null;

  /** The four-digit year. */
  year?: number | null;
}

/**
 * Point in Time
 */
export interface GelatoDataDocumentReportExpirationDate {
  /** Numerical day between 1 and 31. */
  day?: number | null;

  /** Numerical month between 1 and 12. */
  month?: number | null;

  /** The four-digit year. */
  year?: number | null;
}

/**
 * Point in Time
 */
export interface GelatoDataDocumentReportIssuedDate {
  /** Numerical day between 1 and 31. */
  day?: number | null;

  /** Numerical month between 1 and 12. */
  month?: number | null;

  /** The four-digit year. */
  year?: number | null;
}

/**
 * Point in Time
 */
export interface GelatoDataIdNumberReportDate {
  /** Numerical day between 1 and 31. */
  day?: number | null;

  /** Numerical month between 1 and 12. */
  month?: number | null;

  /** The four-digit year. */
  year?: number | null;
}

/**
 * Point in Time
 */
export interface GelatoDataVerifiedOutputsDate {
  /** Numerical day between 1 and 31. */
  day?: number | null;

  /** Numerical month between 1 and 12. */
  month?: number | null;

  /** The four-digit year. */
  year?: number | null;
}

/**
 * Result from a document check
 */
export interface GelatoDocumentReport {
  /** Address as it appears in the document. */
  address?: Address | null;

  /** Date of birth as it appears in the document. */
  dob?: GelatoDataDocumentReportDateOfBirth | null;

  /** Details on the verification error. Present when status is `unverified`. */
  error?: GelatoDocumentReportError | null;

  /** Expiration date of the document. */
  expiration_date?: GelatoDataDocumentReportExpirationDate | null;

  /** Array of [File](https://stripe.com/docs/api/files) ids containing images for this document. */
  files?: string[] | null;

  /** First name as it appears in the document. */
  first_name?: string | null;

  /** Issued date of the document. */
  issued_date?: GelatoDataDocumentReportIssuedDate | null;

  /** Issuing country of the document. */
  issuing_country?: string | null;

  /** Last name as it appears in the document. */
  last_name?: string | null;

  /** Document ID number. */
  number?: string | null;

  /** Status of this `document` check. */
  status: "unverified" | "verified";

  /** Type of the document. */
  type?: "driving_license" | "id_card" | "passport" | null;
}

export interface GelatoDocumentReportError {
  /** A short machine-readable string giving the reason for the verification failure. */
  code?: "document_expired" | "document_type_not_supported" | "document_unverified_other" | null;

  /** A human-readable message giving the reason for the failure. These messages can be shown to your users. */
  reason?: string | null;
}

/**
 * Result from an id_number check
 */
export interface GelatoIdNumberReport {
  /** Date of birth. */
  dob?: GelatoDataIdNumberReportDate | null;

  /** Details on the verification error. Present when status is `unverified`. */
  error?: GelatoIdNumberReportError | null;

  /** First name. */
  first_name?: string | null;

  /** ID number. */
  id_number?: string | null;

  /** Type of ID number. */
  id_number_type?: "br_cpf" | "sg_nric" | "us_ssn" | null;

  /** Last name. */
  last_name?: string | null;

  /** Status of this `id_number` check. */
  status: "unverified" | "verified";
}

export interface GelatoIdNumberReportError {
  /** A short machine-readable string giving the reason for the verification failure. */
  code?: "id_number_insufficient_document_data" | "id_number_mismatch" | "id_number_unverified_other" | null;

  /** A human-readable message giving the reason for the failure. These messages can be shown to your users. */
  reason?: string | null;
}

export interface GelatoReportDocumentOptions {
  /** Array of strings of allowed identity document types. If the provided identity document isn’t one of the allowed types, the verification check will fail with a document_type_not_allowed error code. */
  allowed_types?: ("driving_license" | "id_card" | "passport")[];

  /** Collect an ID number and perform an [ID number check](https://stripe.com/docs/identity/verification-checks?type=id-number) with the document’s extracted name and date of birth. */
  require_id_number?: boolean;

  /** Disable image uploads, identity document images have to be captured using the device’s camera. */
  require_live_capture?: boolean;

  /** Capture a face image and perform a [selfie check](https://stripe.com/docs/identity/verification-checks?type=selfie) comparing a photo ID and a picture of your user’s face. [Learn more](https://stripe.com/docs/identity/selfie). */
  require_matching_selfie?: boolean;
}

export type GelatoReportIdNumberOptions = object;

/**
 * Result from a selfie check
 */
export interface GelatoSelfieReport {
  /** ID of the [File](https://stripe.com/docs/api/files) holding the image of the identity document used in this check. */
  document?: string | null;

  /** Details on the verification error. Present when status is `unverified`. */
  error?: GelatoSelfieReportError | null;

  /** ID of the [File](https://stripe.com/docs/api/files) holding the image of the selfie used in this check. */
  selfie?: string | null;

  /** Status of this `selfie` check. */
  status: "unverified" | "verified";
}

export interface GelatoSelfieReportError {
  /** A short machine-readable string giving the reason for the verification failure. */
  code?:
    | "selfie_document_missing_photo"
    | "selfie_face_mismatch"
    | "selfie_manipulated"
    | "selfie_unverified_other"
    | null;

  /** A human-readable message giving the reason for the failure. These messages can be shown to your users. */
  reason?: string | null;
}

export interface GelatoSessionDocumentOptions {
  /** Array of strings of allowed identity document types. If the provided identity document isn’t one of the allowed types, the verification check will fail with a document_type_not_allowed error code. */
  allowed_types?: ("driving_license" | "id_card" | "passport")[];

  /** Collect an ID number and perform an [ID number check](https://stripe.com/docs/identity/verification-checks?type=id-number) with the document’s extracted name and date of birth. */
  require_id_number?: boolean;

  /** Disable image uploads, identity document images have to be captured using the device’s camera. */
  require_live_capture?: boolean;

  /** Capture a face image and perform a [selfie check](https://stripe.com/docs/identity/verification-checks?type=selfie) comparing a photo ID and a picture of your user’s face. [Learn more](https://stripe.com/docs/identity/selfie). */
  require_matching_selfie?: boolean;
}

export type GelatoSessionIdNumberOptions = object;

/**
 * Shows last VerificationSession error
 */
export interface GelatoSessionLastError {
  /** A short machine-readable string giving the reason for the verification or user-session failure. */
  code?:
    | "abandoned"
    | "consent_declined"
    | "country_not_supported"
    | "device_not_supported"
    | "document_expired"
    | "document_type_not_supported"
    | "document_unverified_other"
    | "id_number_insufficient_document_data"
    | "id_number_mismatch"
    | "id_number_unverified_other"
    | "selfie_document_missing_photo"
    | "selfie_face_mismatch"
    | "selfie_manipulated"
    | "selfie_unverified_other"
    | "under_supported_age"
    | null;

  /** A message that explains the reason for verification or user-session failure. */
  reason?: string | null;
}

export interface GelatoVerificationReportOptions {
  document?: GelatoReportDocumentOptions;
  id_number?: GelatoReportIdNumberOptions;
}

export interface GelatoVerificationSessionOptions {
  document?: GelatoSessionDocumentOptions;
  id_number?: GelatoSessionIdNumberOptions;
}

export interface GelatoVerifiedOutputs {
  /** The user's verified address. */
  address?: Address | null;

  /** The user’s verified date of birth. */
  dob?: GelatoDataVerifiedOutputsDate | null;

  /** The user's verified first name. */
  first_name?: string | null;

  /** The user's verified id number. */
  id_number?: string | null;

  /** The user's verified id number type. */
  id_number_type?: "br_cpf" | "sg_nric" | "us_ssn" | null;

  /** The user's verified last name. */
  last_name?: string | null;
}

/**
* A VerificationReport is the result of an attempt to collect and verify data from a user.
The collection of verification checks performed is determined from the `type` and `options`
parameters used. You can find the result of each verification check performed in the
appropriate sub-resource: `document`, `id_number`, `selfie`.

Each VerificationReport contains a copy of any data collected by the user as well as
reference IDs which can be used to access collected images through the [FileUpload](https://stripe.com/docs/api/files)
API. To configure and create VerificationReports, use the
[VerificationSession](https://stripe.com/docs/api/identity/verification_sessions) API.

Related guides: [Accessing verification results](https://stripe.com/docs/identity/verification-sessions#results).
*/
export interface IdentityVerificationReport {
  /**
   * Time at which the object was created. Measured in seconds since the Unix epoch.
   * @format unix-time
   */
  created: number;

  /** Result from a document check */
  document?: GelatoDocumentReport;

  /** Unique identifier for the object. */
  id: string;

  /** Result from an id_number check */
  id_number?: GelatoIdNumberReport;

  /** Has the value `true` if the object exists in live mode or the value `false` if the object exists in test mode. */
  livemode: boolean;

  /** String representing the object's type. Objects of the same type share the same value. */
  object: "identity.verification_report";
  options: GelatoVerificationReportOptions;

  /** Result from a selfie check */
  selfie?: GelatoSelfieReport;

  /** Type of report. */
  type: "document" | "id_number";

  /** ID of the VerificationSession that created this report. */
  verification_session?: string | null;
}

/**
* A VerificationSession guides you through the process of collecting and verifying the identities
of your users. It contains details about the type of verification, such as what [verification
check](/docs/identity/verification-checks) to perform. Only create one VerificationSession for
each verification in your system.

A VerificationSession transitions through [multiple
statuses](/docs/identity/how-sessions-work) throughout its lifetime as it progresses through
the verification flow. The VerificationSession contains the user’s verified data after
verification checks are complete.

Related guide: [The Verification Sessions API](https://stripe.com/docs/identity/verification-sessions)
*/
export interface IdentityVerificationSession {
  /** The short-lived client secret used by Stripe.js to [show a verification modal](https://stripe.com/docs/js/identity/modal) inside your app. This client secret expires after 24 hours and can only be used once. Don’t store it, log it, embed it in a URL, or expose it to anyone other than the user. Make sure that you have TLS enabled on any page that includes the client secret. Refer to our docs on [passing the client secret to the frontend](https://stripe.com/docs/identity/verification-sessions#client-secret) to learn more. */
  client_secret?: string | null;

  /**
   * Time at which the object was created. Measured in seconds since the Unix epoch.
   * @format unix-time
   */
  created: number;

  /** Unique identifier for the object. */
  id: string;

  /** If present, this property tells you the last error encountered when processing the verification. */
  last_error?: GelatoSessionLastError | null;

  /** ID of the most recent VerificationReport. [Learn more about accessing detailed verification results.](https://stripe.com/docs/identity/verification-sessions#results) */
  last_verification_report?: string | IdentityVerificationReport | null;

  /** Has the value `true` if the object exists in live mode or the value `false` if the object exists in test mode. */
  livemode: boolean;

  /** Set of [key-value pairs](https://stripe.com/docs/api/metadata) that you can attach to an object. This can be useful for storing additional information about the object in a structured format. */
  metadata: Record<string, string>;

  /** String representing the object's type. Objects of the same type share the same value. */
  object: "identity.verification_session";
  options: GelatoVerificationSessionOptions;

  /** Redaction status of this VerificationSession. If the VerificationSession is not redacted, this field will be null. */
  redaction?: VerificationSessionRedaction | null;

  /** Status of this VerificationSession. [Learn more about the lifecycle of sessions](https://stripe.com/docs/identity/how-sessions-work). */
  status: "canceled" | "processing" | "requires_input" | "verified";

  /** The type of [verification check](https://stripe.com/docs/identity/verification-checks) to be performed. */
  type: "document" | "id_number";

  /** The short-lived URL that you use to redirect a user to Stripe to submit their identity information. This URL expires after 48 hours and can only be used once. Don’t store it, log it, send it in emails or expose it to anyone other than the user. Refer to our docs on [verifying identity documents](https://stripe.com/docs/identity/verify-identity-documents?platform=web&type=redirect) to learn how to redirect users to Stripe. */
  url?: string | null;

  /** The user’s verified data. */
  verified_outputs?: GelatoVerifiedOutputs | null;
}

/**
* Invoices are statements of amounts owed by a customer, and are either
generated one-off, or generated periodically from a subscription.

They contain [invoice items](https://stripe.com/docs/api#invoiceitems), and proration adjustments
that may be caused by subscription upgrades/downgrades (if necessary).

If your invoice is configured to be billed through automatic charges,
Stripe automatically finalizes your invoice and attempts payment. Note
that finalizing the invoice,
[when automatic](https://stripe.com/docs/billing/invoices/workflow/#auto_advance), does
not happen immediately as the invoice is created. Stripe waits
until one hour after the last webhook was successfully sent (or the last
webhook timed out after failing). If you (and the platforms you may have
connected to) have no webhooks configured, Stripe waits one hour after
creation to finalize the invoice.

If your invoice is configured to be billed by sending an email, then based on your
[email settings](https://dashboard.stripe.com/account/billing/automatic),
Stripe will email the invoice to your customer and await payment. These
emails can contain a link to a hosted page to pay the invoice.

Stripe applies any customer credit on the account before determining the
amount due for the invoice (i.e., the amount that will be actually
charged). If the amount due for the invoice is less than Stripe's [minimum allowed charge
per currency](/docs/currencies#minimum-and-maximum-charge-amounts), the
invoice is automatically marked paid, and we add the amount due to the
customer's credit balance which is applied to the next invoice.

More details on the customer's credit balance are
[here](https://stripe.com/docs/billing/customer/balance).

Related guide: [Send Invoices to Customers](https://stripe.com/docs/billing/invoices/sending).
*/
export interface Invoice {
  /** The country of the business associated with this invoice, most often the business creating the invoice. */
  account_country?: string | null;

  /** The public name of the business associated with this invoice, most often the business creating the invoice. */
  account_name?: string | null;

  /** The account tax IDs associated with the invoice. Only editable when the invoice is a draft. */
  account_tax_ids?: (string | TaxId | DeletedTaxId | (TaxId & DeletedTaxId))[] | null;

  /** Final amount due at this time for this invoice. If the invoice's total is smaller than the minimum charge amount, for example, or if there is account credit that can be applied to the invoice, the `amount_due` may be 0. If there is a positive `starting_balance` for the invoice (the customer owes money), the `amount_due` will also take that into account. The charge that gets generated for the invoice will be for the amount specified in `amount_due`. */
  amount_due: number;

  /** The amount, in %s, that was paid. */
  amount_paid: number;

  /** The amount remaining, in %s, that is due. */
  amount_remaining: number;

  /** The fee in %s that will be applied to the invoice and transferred to the application owner's Stripe account when the invoice is paid. */
  application_fee_amount?: number | null;

  /** Number of payment attempts made for this invoice, from the perspective of the payment retry schedule. Any payment attempt counts as the first attempt, and subsequently only automatic retries increment the attempt count. In other words, manual payment attempts after the first attempt do not affect the retry schedule. */
  attempt_count: number;

  /** Whether an attempt has been made to pay the invoice. An invoice is not attempted until 1 hour after the `invoice.created` webhook, for example, so you might not want to display that invoice as unpaid to your users. */
  attempted: boolean;

  /** Controls whether Stripe will perform [automatic collection](https://stripe.com/docs/billing/invoices/workflow/#auto_advance) of the invoice. When `false`, the invoice's state will not automatically advance without an explicit action. */
  auto_advance?: boolean;
  automatic_tax: AutomaticTax;

  /** Indicates the reason why the invoice was created. `subscription_cycle` indicates an invoice created by a subscription advancing into a new period. `subscription_create` indicates an invoice created due to creating a subscription. `subscription_update` indicates an invoice created due to updating a subscription. `subscription` is set for all old invoices to indicate either a change to a subscription or a period advancement. `manual` is set for all invoices unrelated to a subscription (for example: created via the invoice editor). The `upcoming` value is reserved for simulated invoices per the upcoming invoice endpoint. `subscription_threshold` indicates an invoice created due to a billing threshold being reached. */
  billing_reason?:
    | "automatic_pending_invoice_item_invoice"
    | "manual"
    | "quote_accept"
    | "subscription"
    | "subscription_create"
    | "subscription_cycle"
    | "subscription_threshold"
    | "subscription_update"
    | "upcoming"
    | null;

  /** ID of the latest charge generated for this invoice, if any. */
  charge?: string | Charge | null;

  /** Either `charge_automatically`, or `send_invoice`. When charging automatically, Stripe will attempt to pay this invoice using the default source attached to the customer. When sending an invoice, Stripe will email this invoice to the customer with payment instructions. */
  collection_method: "charge_automatically" | "send_invoice";

  /**
   * Time at which the object was created. Measured in seconds since the Unix epoch.
   * @format unix-time
   */
  created: number;

  /** Three-letter [ISO currency code](https://www.iso.org/iso-4217-currency-codes.html), in lowercase. Must be a [supported currency](https://stripe.com/docs/currencies). */
  currency: string;

  /** Custom fields displayed on the invoice. */
  custom_fields?: InvoiceSettingCustomField[] | null;

  /** The ID of the customer who will be billed. */
  customer?: string | Customer | DeletedCustomer | (Customer & DeletedCustomer) | null;

  /** The customer's address. Until the invoice is finalized, this field will equal `customer.address`. Once the invoice is finalized, this field will no longer be updated. */
  customer_address?: Address | null;

  /** The customer's email. Until the invoice is finalized, this field will equal `customer.email`. Once the invoice is finalized, this field will no longer be updated. */
  customer_email?: string | null;

  /** The customer's name. Until the invoice is finalized, this field will equal `customer.name`. Once the invoice is finalized, this field will no longer be updated. */
  customer_name?: string | null;

  /** The customer's phone number. Until the invoice is finalized, this field will equal `customer.phone`. Once the invoice is finalized, this field will no longer be updated. */
  customer_phone?: string | null;

  /** The customer's shipping information. Until the invoice is finalized, this field will equal `customer.shipping`. Once the invoice is finalized, this field will no longer be updated. */
  customer_shipping?: Shipping | null;

  /** The customer's tax exempt status. Until the invoice is finalized, this field will equal `customer.tax_exempt`. Once the invoice is finalized, this field will no longer be updated. */
  customer_tax_exempt?: "exempt" | "none" | "reverse" | null;

  /** The customer's tax IDs. Until the invoice is finalized, this field will contain the same tax IDs as `customer.tax_ids`. Once the invoice is finalized, this field will no longer be updated. */
  customer_tax_ids?: InvoicesResourceInvoiceTaxId[] | null;

  /** ID of the default payment method for the invoice. It must belong to the customer associated with the invoice. If not set, defaults to the subscription's default payment method, if any, or to the default payment method in the customer's invoice settings. */
  default_payment_method?: string | PaymentMethod | null;

  /** ID of the default payment source for the invoice. It must belong to the customer associated with the invoice and be in a chargeable state. If not set, defaults to the subscription's default source, if any, or to the customer's default source. */
  default_source?:
    | string
    | AlipayAccount
    | BankAccount
    | BitcoinReceiver
    | Card
    | Source
    | (AlipayAccount & BankAccount & BitcoinReceiver & Card & Source)
    | null;

  /** The tax rates applied to this invoice, if any. */
  default_tax_rates: TaxRate[];

  /** An arbitrary string attached to the object. Often useful for displaying to users. Referenced as 'memo' in the Dashboard. */
  description?: string | null;

  /** Describes the current discount applied to this invoice, if there is one. Not populated if there are multiple discounts. */
  discount?: Discount | null;

  /** The discounts applied to the invoice. Line item discounts are applied before invoice discounts. Use `expand[]=discounts` to expand each discount. */
  discounts?: (string | Discount | DeletedDiscount | (Discount & DeletedDiscount))[] | null;

  /**
   * The date on which payment for this invoice is due. This value will be `null` for invoices where `collection_method=charge_automatically`.
   * @format unix-time
   */
  due_date?: number | null;

  /** Ending customer balance after the invoice is finalized. Invoices are finalized approximately an hour after successful webhook delivery or when payment collection is attempted for the invoice. If the invoice has not been finalized yet, this will be null. */
  ending_balance?: number | null;

  /** Footer displayed on the invoice. */
  footer?: string | null;

  /** The URL for the hosted invoice page, which allows customers to view and pay an invoice. If the invoice has not been finalized yet, this will be null. */
  hosted_invoice_url?: string | null;

  /** Unique identifier for the object. */
  id?: string;

  /** The link to download the PDF for the invoice. If the invoice has not been finalized yet, this will be null. */
  invoice_pdf?: string | null;

  /** The error encountered during the previous attempt to finalize the invoice. This field is cleared when the invoice is successfully finalized. */
  last_finalization_error?: ApiErrors | null;

  /**
   * InvoiceLinesList
   * The individual line items that make up the invoice. `lines` is sorted as follows: invoice items in reverse chronological order, followed by the subscription, if any.
   */
  lines: { data: LineItem[]; has_more: boolean; object: "list"; url: string };

  /** Has the value `true` if the object exists in live mode or the value `false` if the object exists in test mode. */
  livemode: boolean;

  /** Set of [key-value pairs](https://stripe.com/docs/api/metadata) that you can attach to an object. This can be useful for storing additional information about the object in a structured format. */
  metadata?: Record<string, string>;

  /**
   * The time at which payment will next be attempted. This value will be `null` for invoices where `collection_method=send_invoice`.
   * @format unix-time
   */
  next_payment_attempt?: number | null;

  /** A unique, identifying string that appears on emails sent to the customer for this invoice. This starts with the customer's unique invoice_prefix if it is specified. */
  number?: string | null;

  /** String representing the object's type. Objects of the same type share the same value. */
  object: "invoice";

  /** The account (if any) for which the funds of the invoice payment are intended. If set, the invoice will be presented with the branding and support information of the specified account. See the [Invoices with Connect](https://stripe.com/docs/billing/invoices/connect) documentation for details. */
  on_behalf_of?: string | Account | null;

  /** Whether payment was successfully collected for this invoice. An invoice can be paid (most commonly) with a charge or with credit from the customer's account balance. */
  paid: boolean;

  /** Returns true if the invoice was manually marked paid, returns false if the invoice hasn't been paid yet or was paid on Stripe. */
  paid_out_of_band: boolean;

  /** The PaymentIntent associated with this invoice. The PaymentIntent is generated when the invoice is finalized, and can then be used to pay the invoice. Note that voiding an invoice will cancel the PaymentIntent. */
  payment_intent?: string | PaymentIntent | null;
  payment_settings: InvoicesPaymentSettings;

  /**
   * End of the usage period during which invoice items were added to this invoice.
   * @format unix-time
   */
  period_end: number;

  /**
   * Start of the usage period during which invoice items were added to this invoice.
   * @format unix-time
   */
  period_start: number;

  /** Total amount of all post-payment credit notes issued for this invoice. */
  post_payment_credit_notes_amount: number;

  /** Total amount of all pre-payment credit notes issued for this invoice. */
  pre_payment_credit_notes_amount: number;

  /** The quote this invoice was generated from. */
  quote?: string | Quote | null;

  /** This is the transaction number that appears on email receipts sent for this invoice. */
  receipt_number?: string | null;

  /** Starting customer balance before the invoice is finalized. If the invoice has not been finalized yet, this will be the current customer balance. */
  starting_balance: number;

  /** Extra information about an invoice for the customer's credit card statement. */
  statement_descriptor?: string | null;

  /** The status of the invoice, one of `draft`, `open`, `paid`, `uncollectible`, or `void`. [Learn more](https://stripe.com/docs/billing/invoices/workflow#workflow-overview) */
  status?: "deleted" | "draft" | "open" | "paid" | "uncollectible" | "void" | null;
  status_transitions: InvoicesStatusTransitions;

  /** The subscription that this invoice was prepared for, if any. */
  subscription?: string | Subscription | null;

  /** Only set for upcoming invoices that preview prorations. The time used to calculate prorations. */
  subscription_proration_date?: number;

  /** Total of all subscriptions, invoice items, and prorations on the invoice before any invoice level discount or tax is applied. Item discounts are already incorporated */
  subtotal: number;

  /** The amount of tax on this invoice. This is the sum of all the tax amounts on this invoice. */
  tax?: number | null;
  threshold_reason?: InvoiceThresholdReason;

  /** Total after discounts and taxes. */
  total: number;

  /** The aggregate amounts calculated per discount across all line items. */
  total_discount_amounts?: DiscountsResourceDiscountAmount[] | null;

  /** The aggregate amounts calculated per tax rate for all line items. */
  total_tax_amounts: InvoiceTaxAmount[];

  /** The account (if any) the payment will be attributed to for tax reporting, and where funds from the payment will be transferred to for the invoice. */
  transfer_data?: InvoiceTransferData | null;

  /**
   * Invoices are automatically paid or sent 1 hour after webhooks are delivered, or until all webhook delivery attempts have [been exhausted](https://stripe.com/docs/billing/webhooks#understand). This field tracks the time when webhooks for this invoice were successfully delivered. If the invoice had no webhooks to deliver, this will be set while the invoice is being created.
   * @format unix-time
   */
  webhooks_delivered_at?: number | null;
}

export interface InvoiceItemThresholdReason {
  /** The IDs of the line items that triggered the threshold invoice. */
  line_item_ids: string[];

  /** The quantity threshold boundary that applied to the given line item. */
  usage_gte: number;
}

export interface InvoiceLineItemPeriod {
  /**
   * End of the line item's billing period
   * @format unix-time
   */
  end: number;

  /**
   * Start of the line item's billing period
   * @format unix-time
   */
  start: number;
}

export interface InvoiceMandateOptionsCard {
  /** Amount to be charged for future payments. */
  amount?: number | null;

  /** One of `fixed` or `maximum`. If `fixed`, the `amount` param refers to the exact amount to be charged in future payments. If `maximum`, the amount charged can be up to the value passed for the `amount` param. */
  amount_type?: "fixed" | "maximum" | null;

  /** A description of the mandate or subscription that is meant to be displayed to the customer. */
  description?: string | null;
}

export interface InvoicePaymentMethodOptionsAcssDebit {
  mandate_options?: InvoicePaymentMethodOptionsAcssDebitMandateOptions;

  /** Bank account verification method. */
  verification_method?: "automatic" | "instant" | "microdeposits";
}

export interface InvoicePaymentMethodOptionsAcssDebitMandateOptions {
  /** Transaction type of the mandate. */
  transaction_type?: "business" | "personal" | null;
}

export interface InvoicePaymentMethodOptionsBancontact {
  /** Preferred language of the Bancontact authorization page that the customer is redirected to. */
  preferred_language: "de" | "en" | "fr" | "nl";
}

export interface InvoicePaymentMethodOptionsCard {
  /** We strongly recommend that you rely on our SCA Engine to automatically prompt your customers for authentication based on risk level and [other requirements](https://stripe.com/docs/strong-customer-authentication). However, if you wish to request 3D Secure based on logic from your own fraud engine, provide this option. Read our guide on [manually requesting 3D Secure](https://stripe.com/docs/payments/3d-secure#manual-three-ds) for more information on how this configuration interacts with Radar and our SCA Engine. */
  request_three_d_secure?: "any" | "automatic" | null;
}

export interface InvoiceSettingCustomField {
  /** The name of the custom field. */
  name: string;

  /** The value of the custom field. */
  value: string;
}

export interface InvoiceSettingCustomerSetting {
  /** Default custom fields to be displayed on invoices for this customer. */
  custom_fields?: InvoiceSettingCustomField[] | null;

  /** ID of a payment method that's attached to the customer, to be used as the customer's default payment method for subscriptions and invoices. */
  default_payment_method?: string | PaymentMethod | null;

  /** Default footer to be displayed on invoices for this customer. */
  footer?: string | null;
}

export interface InvoiceSettingQuoteSetting {
  /** Number of days within which a customer must pay invoices generated by this quote. This value will be `null` for quotes where `collection_method=charge_automatically`. */
  days_until_due?: number | null;
}

export interface InvoiceSettingSubscriptionScheduleSetting {
  /** Number of days within which a customer must pay invoices generated by this subscription schedule. This value will be `null` for subscription schedules where `billing=charge_automatically`. */
  days_until_due?: number | null;
}

export interface InvoiceTaxAmount {
  /** The amount, in %s, of the tax. */
  amount: number;

  /** Whether this tax amount is inclusive or exclusive. */
  inclusive: boolean;

  /** The tax rate that was applied to get this tax amount. */
  tax_rate: string | TaxRate;
}

export interface InvoiceThresholdReason {
  /** The total invoice amount threshold boundary if it triggered the threshold invoice. */
  amount_gte?: number | null;

  /** Indicates which line items triggered a threshold invoice. */
  item_reasons: InvoiceItemThresholdReason[];
}

export interface InvoiceTransferData {
  /** The amount in %s that will be transferred to the destination account when the invoice is paid. By default, the entire amount is transferred to the destination. */
  amount?: number | null;

  /** The account where funds from the payment will be transferred to upon payment success. */
  destination: string | Account;
}

/**
* Sometimes you want to add a charge or credit to a customer, but actually
charge or credit the customer's card only at the end of a regular billing
cycle. This is useful for combining several charges (to minimize
per-transaction fees), or for having Stripe tabulate your usage-based billing
totals.

Related guide: [Subscription Invoices](https://stripe.com/docs/billing/invoices/subscription#adding-upcoming-invoice-items).
*/
export interface Invoiceitem {
  /** Amount (in the `currency` specified) of the invoice item. This should always be equal to `unit_amount * quantity`. */
  amount: number;

  /** Three-letter [ISO currency code](https://www.iso.org/iso-4217-currency-codes.html), in lowercase. Must be a [supported currency](https://stripe.com/docs/currencies). */
  currency: string;

  /** The ID of the customer who will be billed when this invoice item is billed. */
  customer: string | Customer | DeletedCustomer | (Customer & DeletedCustomer);

  /**
   * Time at which the object was created. Measured in seconds since the Unix epoch.
   * @format unix-time
   */
  date: number;

  /** An arbitrary string attached to the object. Often useful for displaying to users. */
  description?: string | null;

  /** If true, discounts will apply to this invoice item. Always false for prorations. */
  discountable: boolean;

  /** The discounts which apply to the invoice item. Item discounts are applied before invoice discounts. Use `expand[]=discounts` to expand each discount. */
  discounts?: (string | Discount)[] | null;

  /** Unique identifier for the object. */
  id: string;

  /** The ID of the invoice this invoice item belongs to. */
  invoice?: string | Invoice | null;

  /** Has the value `true` if the object exists in live mode or the value `false` if the object exists in test mode. */
  livemode: boolean;

  /** Set of [key-value pairs](https://stripe.com/docs/api/metadata) that you can attach to an object. This can be useful for storing additional information about the object in a structured format. */
  metadata?: Record<string, string>;

  /** String representing the object's type. Objects of the same type share the same value. */
  object: "invoiceitem";
  period: InvoiceLineItemPeriod;

  /** The price of the invoice item. */
  price?: Price | null;

  /** Whether the invoice item was created automatically as a proration adjustment when the customer switched plans. */
  proration: boolean;

  /** Quantity of units for the invoice item. If the invoice item is a proration, the quantity of the subscription that the proration was computed for. */
  quantity: number;

  /** The subscription that this invoice item has been created for, if any. */
  subscription?: string | Subscription | null;

  /** The subscription item that this invoice item has been created for, if any. */
  subscription_item?: string;

  /** The tax rates which apply to the invoice item. When set, the `default_tax_rates` on the invoice do not apply to this invoice item. */
  tax_rates?: TaxRate[] | null;

  /** Unit amount (in the `currency` specified) of the invoice item. */
  unit_amount?: number | null;

  /**
   * Same as `unit_amount`, but contains a decimal value with at most 12 decimal places.
   * @format decimal
   */
  unit_amount_decimal?: string | null;
}

export interface InvoicesPaymentMethodOptions {
  /** If paying by `acss_debit`, this sub-hash contains details about the Canadian pre-authorized debit payment method options to pass to the invoice’s PaymentIntent. */
  acss_debit?: InvoicePaymentMethodOptionsAcssDebit | null;

  /** If paying by `bancontact`, this sub-hash contains details about the Bancontact payment method options to pass to the invoice’s PaymentIntent. */
  bancontact?: InvoicePaymentMethodOptionsBancontact | null;

  /** If paying by `card`, this sub-hash contains details about the Card payment method options to pass to the invoice’s PaymentIntent. */
  card?: InvoicePaymentMethodOptionsCard | null;
}

export interface InvoicesPaymentSettings {
  /** Payment-method-specific configuration to provide to the invoice’s PaymentIntent. */
  payment_method_options?: InvoicesPaymentMethodOptions | null;

  /** The list of payment method types (e.g. card) to provide to the invoice’s PaymentIntent. If not set, Stripe attempts to automatically determine the types to use by looking at the invoice’s default payment method, the subscription’s default payment method, the customer’s default payment method, and your [invoice template settings](https://dashboard.stripe.com/settings/billing/invoice). */
  payment_method_types?:
    | (
        | "ach_credit_transfer"
        | "ach_debit"
        | "acss_debit"
        | "au_becs_debit"
        | "bacs_debit"
        | "bancontact"
        | "boleto"
        | "card"
        | "fpx"
        | "giropay"
        | "ideal"
        | "sepa_debit"
        | "sofort"
        | "wechat_pay"
      )[]
    | null;
}

export interface InvoicesResourceInvoiceTaxId {
  /** The type of the tax ID, one of `eu_vat`, `br_cnpj`, `br_cpf`, `gb_vat`, `nz_gst`, `au_abn`, `au_arn`, `in_gst`, `no_vat`, `za_vat`, `ch_vat`, `mx_rfc`, `sg_uen`, `ru_inn`, `ru_kpp`, `ca_bn`, `hk_br`, `es_cif`, `tw_vat`, `th_vat`, `jp_cn`, `jp_rn`, `li_uid`, `my_itn`, `us_ein`, `kr_brn`, `ca_qst`, `ca_gst_hst`, `ca_pst_bc`, `ca_pst_mb`, `ca_pst_sk`, `my_sst`, `sg_gst`, `ae_trn`, `cl_tin`, `sa_vat`, `id_npwp`, `my_frp`, `il_vat`, `ge_vat`, `ua_vat`, or `unknown` */
  type:
    | "ae_trn"
    | "au_abn"
    | "au_arn"
    | "br_cnpj"
    | "br_cpf"
    | "ca_bn"
    | "ca_gst_hst"
    | "ca_pst_bc"
    | "ca_pst_mb"
    | "ca_pst_sk"
    | "ca_qst"
    | "ch_vat"
    | "cl_tin"
    | "es_cif"
    | "eu_vat"
    | "gb_vat"
    | "ge_vat"
    | "hk_br"
    | "id_npwp"
    | "il_vat"
    | "in_gst"
    | "jp_cn"
    | "jp_rn"
    | "kr_brn"
    | "li_uid"
    | "mx_rfc"
    | "my_frp"
    | "my_itn"
    | "my_sst"
    | "no_vat"
    | "nz_gst"
    | "ru_inn"
    | "ru_kpp"
    | "sa_vat"
    | "sg_gst"
    | "sg_uen"
    | "th_vat"
    | "tw_vat"
    | "ua_vat"
    | "unknown"
    | "us_ein"
    | "za_vat";

  /** The value of the tax ID. */
  value?: string | null;
}

export interface InvoicesStatusTransitions {
  /**
   * The time that the invoice draft was finalized.
   * @format unix-time
   */
  finalized_at?: number | null;

  /**
   * The time that the invoice was marked uncollectible.
   * @format unix-time
   */
  marked_uncollectible_at?: number | null;

  /**
   * The time that the invoice was paid.
   * @format unix-time
   */
  paid_at?: number | null;

  /**
   * The time that the invoice was voided.
   * @format unix-time
   */
  voided_at?: number | null;
}

/**
* This resource has been renamed to [Early Fraud
Warning](#early_fraud_warning_object) and will be removed in a future API
version.
*/
export interface IssuerFraudRecord {
  /** An IFR is actionable if it has not received a dispute and has not been fully refunded. You may wish to proactively refund a charge that receives an IFR, in order to avoid receiving a dispute later. */
  actionable: boolean;

  /** ID of the charge this issuer fraud record is for, optionally expanded. */
  charge: string | Charge;

  /**
   * Time at which the object was created. Measured in seconds since the Unix epoch.
   * @format unix-time
   */
  created: number;

  /** The type of fraud labelled by the issuer. One of `card_never_received`, `fraudulent_card_application`, `made_with_counterfeit_card`, `made_with_lost_card`, `made_with_stolen_card`, `misc`, `unauthorized_use_of_card`. */
  fraud_type: string;

  /** If true, the associated charge is subject to [liability shift](https://stripe.com/docs/payments/3d-secure#disputed-payments). */
  has_liability_shift: boolean;

  /** Unique identifier for the object. */
  id: string;

  /** Has the value `true` if the object exists in live mode or the value `false` if the object exists in test mode. */
  livemode: boolean;

  /** String representing the object's type. Objects of the same type share the same value. */
  object: "issuer_fraud_record";

  /** The timestamp at which the card issuer posted the issuer fraud record. */
  post_date: number;
}

/**
* When an [issued card](https://stripe.com/docs/issuing) is used to make a purchase, an Issuing `Authorization`
object is created. [Authorizations](https://stripe.com/docs/issuing/purchases/authorizations) must be approved for the
purchase to be completed successfully.

Related guide: [Issued Card Authorizations](https://stripe.com/docs/issuing/purchases/authorizations).
*/
export interface IssuingAuthorization {
  /** The total amount that was authorized or rejected. This amount is in the card's currency and in the [smallest currency unit](https://stripe.com/docs/currencies#zero-decimal). */
  amount: number;

  /** Detailed breakdown of amount components. These amounts are denominated in `currency` and in the [smallest currency unit](https://stripe.com/docs/currencies#zero-decimal). */
  amount_details?: IssuingAuthorizationAmountDetails | null;

  /** Whether the authorization has been approved. */
  approved: boolean;

  /** How the card details were provided. */
  authorization_method: "chip" | "contactless" | "keyed_in" | "online" | "swipe";

  /** List of balance transactions associated with this authorization. */
  balance_transactions: BalanceTransaction[];

  /** You can [create physical or virtual cards](https://stripe.com/docs/issuing/cards) that are issued to cardholders. */
  card: IssuingCard;

  /** The cardholder to whom this authorization belongs. */
  cardholder?: string | IssuingCardholder | null;

  /**
   * Time at which the object was created. Measured in seconds since the Unix epoch.
   * @format unix-time
   */
  created: number;

  /** Three-letter [ISO currency code](https://www.iso.org/iso-4217-currency-codes.html), in lowercase. Must be a [supported currency](https://stripe.com/docs/currencies). */
  currency: string;

  /** Unique identifier for the object. */
  id: string;

  /** Has the value `true` if the object exists in live mode or the value `false` if the object exists in test mode. */
  livemode: boolean;

  /** The total amount that was authorized or rejected. This amount is in the `merchant_currency` and in the [smallest currency unit](https://stripe.com/docs/currencies#zero-decimal). */
  merchant_amount: number;

  /** The currency that was presented to the cardholder for the authorization. Three-letter [ISO currency code](https://www.iso.org/iso-4217-currency-codes.html), in lowercase. Must be a [supported currency](https://stripe.com/docs/currencies). */
  merchant_currency: string;
  merchant_data: IssuingAuthorizationMerchantData;

  /** Set of [key-value pairs](https://stripe.com/docs/api/metadata) that you can attach to an object. This can be useful for storing additional information about the object in a structured format. */
  metadata: Record<string, string>;

  /** String representing the object's type. Objects of the same type share the same value. */
  object: "issuing.authorization";

  /** The pending authorization request. This field will only be non-null during an `issuing_authorization.request` webhook. */
  pending_request?: IssuingAuthorizationPendingRequest | null;

  /** History of every time `pending_request` was approved/denied, either by you directly or by Stripe (e.g. based on your `spending_controls`). If the merchant changes the authorization by performing an [incremental authorization](https://stripe.com/docs/issuing/purchases/authorizations), you can look at this field to see the previous requests for the authorization. */
  request_history: IssuingAuthorizationRequest[];

  /** The current status of the authorization in its lifecycle. */
  status: "closed" | "pending" | "reversed";

  /** List of [transactions](https://stripe.com/docs/api/issuing/transactions) associated with this authorization. */
  transactions: IssuingTransaction[];
  verification_data: IssuingAuthorizationVerificationData;

  /** The digital wallet used for this authorization. One of `apple_pay`, `google_pay`, or `samsung_pay`. */
  wallet?: string | null;
}

/**
 * You can [create physical or virtual cards](https://stripe.com/docs/issuing/cards) that are issued to cardholders.
 */
export interface IssuingCard {
  /** The brand of the card. */
  brand: string;

  /** The reason why the card was canceled. */
  cancellation_reason?: "lost" | "stolen" | null;

  /**
   * An Issuing `Cardholder` object represents an individual or business entity who is [issued](https://stripe.com/docs/issuing) cards.
   *
   * Related guide: [How to create a Cardholder](https://stripe.com/docs/issuing/cards#create-cardholder)
   */
  cardholder: IssuingCardholder;

  /**
   * Time at which the object was created. Measured in seconds since the Unix epoch.
   * @format unix-time
   */
  created: number;

  /** Three-letter [ISO currency code](https://www.iso.org/iso-4217-currency-codes.html), in lowercase. Must be a [supported currency](https://stripe.com/docs/currencies). */
  currency: string;

  /** The card's CVC. For security reasons, this is only available for virtual cards, and will be omitted unless you explicitly request it with [the `expand` parameter](https://stripe.com/docs/api/expanding_objects). Additionally, it's only available via the ["Retrieve a card" endpoint](https://stripe.com/docs/api/issuing/cards/retrieve), not via "List all cards" or any other endpoint. */
  cvc?: string;

  /** The expiration month of the card. */
  exp_month: number;

  /** The expiration year of the card. */
  exp_year: number;

  /** Unique identifier for the object. */
  id: string;

  /** The last 4 digits of the card number. */
  last4: string;

  /** Has the value `true` if the object exists in live mode or the value `false` if the object exists in test mode. */
  livemode: boolean;

  /** Set of [key-value pairs](https://stripe.com/docs/api/metadata) that you can attach to an object. This can be useful for storing additional information about the object in a structured format. */
  metadata: Record<string, string>;

  /** The full unredacted card number. For security reasons, this is only available for virtual cards, and will be omitted unless you explicitly request it with [the `expand` parameter](https://stripe.com/docs/api/expanding_objects). Additionally, it's only available via the ["Retrieve a card" endpoint](https://stripe.com/docs/api/issuing/cards/retrieve), not via "List all cards" or any other endpoint. */
  number?: string;

  /** String representing the object's type. Objects of the same type share the same value. */
  object: "issuing.card";

  /** The latest card that replaces this card, if any. */
  replaced_by?: string | IssuingCard | null;

  /** The card this card replaces, if any. */
  replacement_for?: string | IssuingCard | null;

  /** The reason why the previous card needed to be replaced. */
  replacement_reason?: "damaged" | "expired" | "lost" | "stolen" | null;

  /** Where and how the card will be shipped. */
  shipping?: IssuingCardShipping | null;
  spending_controls: IssuingCardAuthorizationControls;

  /** Whether authorizations can be approved on this card. */
  status: "active" | "canceled" | "inactive";

  /** The type of the card. */
  type: "physical" | "virtual";

  /** Information relating to digital wallets (like Apple Pay and Google Pay). */
  wallets?: IssuingCardWallets | null;
}

/**
* An Issuing `Cardholder` object represents an individual or business entity who is [issued](https://stripe.com/docs/issuing) cards.

Related guide: [How to create a Cardholder](https://stripe.com/docs/issuing/cards#create-cardholder)
*/
export interface IssuingCardholder {
  billing: IssuingCardholderAddress;

  /** Additional information about a `company` cardholder. */
  company?: IssuingCardholderCompany | null;

  /**
   * Time at which the object was created. Measured in seconds since the Unix epoch.
   * @format unix-time
   */
  created: number;

  /** The cardholder's email address. */
  email?: string | null;

  /** Unique identifier for the object. */
  id: string;

  /** Additional information about an `individual` cardholder. */
  individual?: IssuingCardholderIndividual | null;

  /** Has the value `true` if the object exists in live mode or the value `false` if the object exists in test mode. */
  livemode: boolean;

  /** Set of [key-value pairs](https://stripe.com/docs/api/metadata) that you can attach to an object. This can be useful for storing additional information about the object in a structured format. */
  metadata: Record<string, string>;

  /** The cardholder's name. This will be printed on cards issued to them. */
  name: string;

  /** String representing the object's type. Objects of the same type share the same value. */
  object: "issuing.cardholder";

  /** The cardholder's phone number. This is required for all cardholders who will be creating EU cards. See the [3D Secure documentation](https://stripe.com/docs/issuing/3d-secure#when-is-3d-secure-applied) for more details. */
  phone_number?: string | null;
  requirements: IssuingCardholderRequirements;

  /** Rules that control spending across this cardholder's cards. Refer to our [documentation](https://stripe.com/docs/issuing/controls/spending-controls) for more details. */
  spending_controls?: IssuingCardholderAuthorizationControls | null;

  /** Specifies whether to permit authorizations on this cardholder's cards. */
  status: "active" | "blocked" | "inactive";

  /** One of `individual` or `company`. */
  type: "company" | "individual";
}

/**
* As a [card issuer](https://stripe.com/docs/issuing), you can dispute transactions that the cardholder does not recognize, suspects to be fraudulent, or has other issues with.

Related guide: [Disputing Transactions](https://stripe.com/docs/issuing/purchases/disputes)
*/
export interface IssuingDispute {
  /** Disputed amount. Usually the amount of the `transaction`, but can differ (usually because of currency fluctuation). */
  amount: number;

  /** List of balance transactions associated with the dispute. */
  balance_transactions?: BalanceTransaction[] | null;

  /**
   * Time at which the object was created. Measured in seconds since the Unix epoch.
   * @format unix-time
   */
  created: number;

  /** The currency the `transaction` was made in. */
  currency: string;
  evidence: IssuingDisputeEvidence;

  /** Unique identifier for the object. */
  id: string;

  /** Has the value `true` if the object exists in live mode or the value `false` if the object exists in test mode. */
  livemode: boolean;

  /** Set of [key-value pairs](https://stripe.com/docs/api/metadata) that you can attach to an object. This can be useful for storing additional information about the object in a structured format. */
  metadata: Record<string, string>;

  /** String representing the object's type. Objects of the same type share the same value. */
  object: "issuing.dispute";

  /** Current status of the dispute. */
  status: "expired" | "lost" | "submitted" | "unsubmitted" | "won";

  /** The transaction being disputed. */
  transaction: string | IssuingTransaction;
}

/**
 * When a non-stripe BIN is used, any use of an [issued card](https://stripe.com/docs/issuing) must be settled directly with the card network. The net amount owed is represented by an Issuing `Settlement` object.
 */
export interface IssuingSettlement {
  /** The Bank Identification Number reflecting this settlement record. */
  bin: string;

  /** The date that the transactions are cleared and posted to user's accounts. */
  clearing_date: number;

  /**
   * Time at which the object was created. Measured in seconds since the Unix epoch.
   * @format unix-time
   */
  created: number;

  /** Three-letter [ISO currency code](https://www.iso.org/iso-4217-currency-codes.html), in lowercase. Must be a [supported currency](https://stripe.com/docs/currencies). */
  currency: string;

  /** Unique identifier for the object. */
  id: string;

  /** The total interchange received as reimbursement for the transactions. */
  interchange_fees: number;

  /** Has the value `true` if the object exists in live mode or the value `false` if the object exists in test mode. */
  livemode: boolean;

  /** Set of [key-value pairs](https://stripe.com/docs/api/metadata) that you can attach to an object. This can be useful for storing additional information about the object in a structured format. */
  metadata: Record<string, string>;

  /** The total net amount required to settle with the network. */
  net_total: number;

  /** The card network for this settlement report. One of ["visa"] */
  network: "visa";

  /** The total amount of fees owed to the network. */
  network_fees: number;

  /** The Settlement Identification Number assigned by the network. */
  network_settlement_identifier: string;

  /** String representing the object's type. Objects of the same type share the same value. */
  object: "issuing.settlement";

  /** One of `international` or `uk_national_net`. */
  settlement_service: string;

  /** The total number of transactions reflected in this settlement. */
  transaction_count: number;

  /** The total transaction amount reflected in this settlement. */
  transaction_volume: number;
}

/**
* Any use of an [issued card](https://stripe.com/docs/issuing) that results in funds entering or leaving
your Stripe account, such as a completed purchase or refund, is represented by an Issuing
`Transaction` object.

Related guide: [Issued Card Transactions](https://stripe.com/docs/issuing/purchases/transactions).
*/
export interface IssuingTransaction {
  /** The transaction amount, which will be reflected in your balance. This amount is in your currency and in the [smallest currency unit](https://stripe.com/docs/currencies#zero-decimal). */
  amount: number;

  /** Detailed breakdown of amount components. These amounts are denominated in `currency` and in the [smallest currency unit](https://stripe.com/docs/currencies#zero-decimal). */
  amount_details?: IssuingTransactionAmountDetails | null;

  /** The `Authorization` object that led to this transaction. */
  authorization?: string | IssuingAuthorization | null;

  /** ID of the [balance transaction](https://stripe.com/docs/api/balance_transactions) associated with this transaction. */
  balance_transaction?: string | BalanceTransaction | null;

  /** The card used to make this transaction. */
  card: string | IssuingCard;

  /** The cardholder to whom this transaction belongs. */
  cardholder?: string | IssuingCardholder | null;

  /**
   * Time at which the object was created. Measured in seconds since the Unix epoch.
   * @format unix-time
   */
  created: number;

  /** Three-letter [ISO currency code](https://www.iso.org/iso-4217-currency-codes.html), in lowercase. Must be a [supported currency](https://stripe.com/docs/currencies). */
  currency: string;

  /** If you've disputed the transaction, the ID of the dispute. */
  dispute?: string | IssuingDispute | null;

  /** Unique identifier for the object. */
  id: string;

  /** Has the value `true` if the object exists in live mode or the value `false` if the object exists in test mode. */
  livemode: boolean;

  /** The amount that the merchant will receive, denominated in `merchant_currency` and in the [smallest currency unit](https://stripe.com/docs/currencies#zero-decimal). It will be different from `amount` if the merchant is taking payment in a different currency. */
  merchant_amount: number;

  /** The currency with which the merchant is taking payment. */
  merchant_currency: string;
  merchant_data: IssuingAuthorizationMerchantData;

  /** Set of [key-value pairs](https://stripe.com/docs/api/metadata) that you can attach to an object. This can be useful for storing additional information about the object in a structured format. */
  metadata: Record<string, string>;

  /** String representing the object's type. Objects of the same type share the same value. */
  object: "issuing.transaction";

  /** Additional purchase information that is optionally provided by the merchant. */
  purchase_details?: IssuingTransactionPurchaseDetails | null;

  /** The nature of the transaction. */
  type: "capture" | "refund";

  /** The digital wallet used for this transaction. One of `apple_pay`, `google_pay`, or `samsung_pay`. */
  wallet?: "apple_pay" | "google_pay" | "samsung_pay" | null;
}

export interface IssuingAuthorizationAmountDetails {
  /** The fee charged by the ATM for the cash withdrawal. */
  atm_fee?: number | null;
}

export interface IssuingAuthorizationMerchantData {
  /** A categorization of the seller's type of business. See our [merchant categories guide](https://stripe.com/docs/issuing/merchant-categories) for a list of possible values. */
  category: string;

  /** The merchant category code for the seller’s business */
  category_code: string;

  /** City where the seller is located */
  city?: string | null;

  /** Country where the seller is located */
  country?: string | null;

  /** Name of the seller */
  name?: string | null;

  /** Identifier assigned to the seller by the card brand */
  network_id: string;

  /** Postal code where the seller is located */
  postal_code?: string | null;

  /** State where the seller is located */
  state?: string | null;
}

export interface IssuingAuthorizationPendingRequest {
  /** The additional amount Stripe will hold if the authorization is approved, in the card's [currency](https://stripe.com/docs/api#issuing_authorization_object-pending-request-currency) and in the [smallest currency unit](https://stripe.com/docs/currencies#zero-decimal). */
  amount: number;

  /** Detailed breakdown of amount components. These amounts are denominated in `currency` and in the [smallest currency unit](https://stripe.com/docs/currencies#zero-decimal). */
  amount_details?: IssuingAuthorizationAmountDetails | null;

  /** Three-letter [ISO currency code](https://www.iso.org/iso-4217-currency-codes.html), in lowercase. Must be a [supported currency](https://stripe.com/docs/currencies). */
  currency: string;

  /** If set `true`, you may provide [amount](https://stripe.com/docs/api/issuing/authorizations/approve#approve_issuing_authorization-amount) to control how much to hold for the authorization. */
  is_amount_controllable: boolean;

  /** The amount the merchant is requesting to be authorized in the `merchant_currency`. The amount is in the [smallest currency unit](https://stripe.com/docs/currencies#zero-decimal). */
  merchant_amount: number;

  /** The local currency the merchant is requesting to authorize. */
  merchant_currency: string;
}

export interface IssuingAuthorizationRequest {
  /** The `pending_request.amount` at the time of the request, presented in your card's currency and in the [smallest currency unit](https://stripe.com/docs/currencies#zero-decimal). Stripe held this amount from your account to fund the authorization if the request was approved. */
  amount: number;

  /** Detailed breakdown of amount components. These amounts are denominated in `currency` and in the [smallest currency unit](https://stripe.com/docs/currencies#zero-decimal). */
  amount_details?: IssuingAuthorizationAmountDetails | null;

  /** Whether this request was approved. */
  approved: boolean;

  /**
   * Time at which the object was created. Measured in seconds since the Unix epoch.
   * @format unix-time
   */
  created: number;

  /** Three-letter [ISO currency code](https://www.iso.org/iso-4217-currency-codes.html), in lowercase. Must be a [supported currency](https://stripe.com/docs/currencies). */
  currency: string;

  /** The `pending_request.merchant_amount` at the time of the request, presented in the `merchant_currency` and in the [smallest currency unit](https://stripe.com/docs/currencies#zero-decimal). */
  merchant_amount: number;

  /** The currency that was collected by the merchant and presented to the cardholder for the authorization. Three-letter [ISO currency code](https://www.iso.org/iso-4217-currency-codes.html), in lowercase. Must be a [supported currency](https://stripe.com/docs/currencies). */
  merchant_currency: string;

  /** The reason for the approval or decline. */
  reason:
    | "account_disabled"
    | "card_active"
    | "card_inactive"
    | "cardholder_inactive"
    | "cardholder_verification_required"
    | "insufficient_funds"
    | "not_allowed"
    | "spending_controls"
    | "suspected_fraud"
    | "verification_failed"
    | "webhook_approved"
    | "webhook_declined"
    | "webhook_timeout";
}

export interface IssuingAuthorizationVerificationData {
  /** Whether the cardholder provided an address first line and if it matched the cardholder’s `billing.address.line1`. */
  address_line1_check: "match" | "mismatch" | "not_provided";

  /** Whether the cardholder provided a postal code and if it matched the cardholder’s `billing.address.postal_code`. */
  address_postal_code_check: "match" | "mismatch" | "not_provided";

  /** Whether the cardholder provided a CVC and if it matched Stripe’s record. */
  cvc_check: "match" | "mismatch" | "not_provided";

  /** Whether the cardholder provided an expiry date and if it matched Stripe’s record. */
  expiry_check: "match" | "mismatch" | "not_provided";
}

export interface IssuingCardApplePay {
  /** Apple Pay Eligibility */
  eligible: boolean;

  /** Reason the card is ineligible for Apple Pay */
  ineligible_reason?: "missing_agreement" | "missing_cardholder_contact" | "unsupported_region" | null;
}

export interface IssuingCardAuthorizationControls {
  /** Array of strings containing [categories](https://stripe.com/docs/api#issuing_authorization_object-merchant_data-category) of authorizations to allow. All other categories will be blocked. Cannot be set with `blocked_categories`. */
  allowed_categories?:
    | (
        | "ac_refrigeration_repair"
        | "accounting_bookkeeping_services"
        | "advertising_services"
        | "agricultural_cooperative"
        | "airlines_air_carriers"
        | "airports_flying_fields"
        | "ambulance_services"
        | "amusement_parks_carnivals"
        | "antique_reproductions"
        | "antique_shops"
        | "aquariums"
        | "architectural_surveying_services"
        | "art_dealers_and_galleries"
        | "artists_supply_and_craft_shops"
        | "auto_and_home_supply_stores"
        | "auto_body_repair_shops"
        | "auto_paint_shops"
        | "auto_service_shops"
        | "automated_cash_disburse"
        | "automated_fuel_dispensers"
        | "automobile_associations"
        | "automotive_parts_and_accessories_stores"
        | "automotive_tire_stores"
        | "bail_and_bond_payments"
        | "bakeries"
        | "bands_orchestras"
        | "barber_and_beauty_shops"
        | "betting_casino_gambling"
        | "bicycle_shops"
        | "billiard_pool_establishments"
        | "boat_dealers"
        | "boat_rentals_and_leases"
        | "book_stores"
        | "books_periodicals_and_newspapers"
        | "bowling_alleys"
        | "bus_lines"
        | "business_secretarial_schools"
        | "buying_shopping_services"
        | "cable_satellite_and_other_pay_television_and_radio"
        | "camera_and_photographic_supply_stores"
        | "candy_nut_and_confectionery_stores"
        | "car_and_truck_dealers_new_used"
        | "car_and_truck_dealers_used_only"
        | "car_rental_agencies"
        | "car_washes"
        | "carpentry_services"
        | "carpet_upholstery_cleaning"
        | "caterers"
        | "charitable_and_social_service_organizations_fundraising"
        | "chemicals_and_allied_products"
        | "child_care_services"
        | "childrens_and_infants_wear_stores"
        | "chiropodists_podiatrists"
        | "chiropractors"
        | "cigar_stores_and_stands"
        | "civic_social_fraternal_associations"
        | "cleaning_and_maintenance"
        | "clothing_rental"
        | "colleges_universities"
        | "commercial_equipment"
        | "commercial_footwear"
        | "commercial_photography_art_and_graphics"
        | "commuter_transport_and_ferries"
        | "computer_network_services"
        | "computer_programming"
        | "computer_repair"
        | "computer_software_stores"
        | "computers_peripherals_and_software"
        | "concrete_work_services"
        | "construction_materials"
        | "consulting_public_relations"
        | "correspondence_schools"
        | "cosmetic_stores"
        | "counseling_services"
        | "country_clubs"
        | "courier_services"
        | "court_costs"
        | "credit_reporting_agencies"
        | "cruise_lines"
        | "dairy_products_stores"
        | "dance_hall_studios_schools"
        | "dating_escort_services"
        | "dentists_orthodontists"
        | "department_stores"
        | "detective_agencies"
        | "digital_goods_applications"
        | "digital_goods_games"
        | "digital_goods_large_volume"
        | "digital_goods_media"
        | "direct_marketing_catalog_merchant"
        | "direct_marketing_combination_catalog_and_retail_merchant"
        | "direct_marketing_inbound_telemarketing"
        | "direct_marketing_insurance_services"
        | "direct_marketing_other"
        | "direct_marketing_outbound_telemarketing"
        | "direct_marketing_subscription"
        | "direct_marketing_travel"
        | "discount_stores"
        | "doctors"
        | "door_to_door_sales"
        | "drapery_window_covering_and_upholstery_stores"
        | "drinking_places"
        | "drug_stores_and_pharmacies"
        | "drugs_drug_proprietaries_and_druggist_sundries"
        | "dry_cleaners"
        | "durable_goods"
        | "duty_free_stores"
        | "eating_places_restaurants"
        | "educational_services"
        | "electric_razor_stores"
        | "electrical_parts_and_equipment"
        | "electrical_services"
        | "electronics_repair_shops"
        | "electronics_stores"
        | "elementary_secondary_schools"
        | "employment_temp_agencies"
        | "equipment_rental"
        | "exterminating_services"
        | "family_clothing_stores"
        | "fast_food_restaurants"
        | "financial_institutions"
        | "fines_government_administrative_entities"
        | "fireplace_fireplace_screens_and_accessories_stores"
        | "floor_covering_stores"
        | "florists"
        | "florists_supplies_nursery_stock_and_flowers"
        | "freezer_and_locker_meat_provisioners"
        | "fuel_dealers_non_automotive"
        | "funeral_services_crematories"
        | "furniture_home_furnishings_and_equipment_stores_except_appliances"
        | "furniture_repair_refinishing"
        | "furriers_and_fur_shops"
        | "general_services"
        | "gift_card_novelty_and_souvenir_shops"
        | "glass_paint_and_wallpaper_stores"
        | "glassware_crystal_stores"
        | "golf_courses_public"
        | "government_services"
        | "grocery_stores_supermarkets"
        | "hardware_equipment_and_supplies"
        | "hardware_stores"
        | "health_and_beauty_spas"
        | "hearing_aids_sales_and_supplies"
        | "heating_plumbing_a_c"
        | "hobby_toy_and_game_shops"
        | "home_supply_warehouse_stores"
        | "hospitals"
        | "hotels_motels_and_resorts"
        | "household_appliance_stores"
        | "industrial_supplies"
        | "information_retrieval_services"
        | "insurance_default"
        | "insurance_underwriting_premiums"
        | "intra_company_purchases"
        | "jewelry_stores_watches_clocks_and_silverware_stores"
        | "landscaping_services"
        | "laundries"
        | "laundry_cleaning_services"
        | "legal_services_attorneys"
        | "luggage_and_leather_goods_stores"
        | "lumber_building_materials_stores"
        | "manual_cash_disburse"
        | "marinas_service_and_supplies"
        | "masonry_stonework_and_plaster"
        | "massage_parlors"
        | "medical_and_dental_labs"
        | "medical_dental_ophthalmic_and_hospital_equipment_and_supplies"
        | "medical_services"
        | "membership_organizations"
        | "mens_and_boys_clothing_and_accessories_stores"
        | "mens_womens_clothing_stores"
        | "metal_service_centers"
        | "miscellaneous"
        | "miscellaneous_apparel_and_accessory_shops"
        | "miscellaneous_auto_dealers"
        | "miscellaneous_business_services"
        | "miscellaneous_food_stores"
        | "miscellaneous_general_merchandise"
        | "miscellaneous_general_services"
        | "miscellaneous_home_furnishing_specialty_stores"
        | "miscellaneous_publishing_and_printing"
        | "miscellaneous_recreation_services"
        | "miscellaneous_repair_shops"
        | "miscellaneous_specialty_retail"
        | "mobile_home_dealers"
        | "motion_picture_theaters"
        | "motor_freight_carriers_and_trucking"
        | "motor_homes_dealers"
        | "motor_vehicle_supplies_and_new_parts"
        | "motorcycle_shops_and_dealers"
        | "motorcycle_shops_dealers"
        | "music_stores_musical_instruments_pianos_and_sheet_music"
        | "news_dealers_and_newsstands"
        | "non_fi_money_orders"
        | "non_fi_stored_value_card_purchase_load"
        | "nondurable_goods"
        | "nurseries_lawn_and_garden_supply_stores"
        | "nursing_personal_care"
        | "office_and_commercial_furniture"
        | "opticians_eyeglasses"
        | "optometrists_ophthalmologist"
        | "orthopedic_goods_prosthetic_devices"
        | "osteopaths"
        | "package_stores_beer_wine_and_liquor"
        | "paints_varnishes_and_supplies"
        | "parking_lots_garages"
        | "passenger_railways"
        | "pawn_shops"
        | "pet_shops_pet_food_and_supplies"
        | "petroleum_and_petroleum_products"
        | "photo_developing"
        | "photographic_photocopy_microfilm_equipment_and_supplies"
        | "photographic_studios"
        | "picture_video_production"
        | "piece_goods_notions_and_other_dry_goods"
        | "plumbing_heating_equipment_and_supplies"
        | "political_organizations"
        | "postal_services_government_only"
        | "precious_stones_and_metals_watches_and_jewelry"
        | "professional_services"
        | "public_warehousing_and_storage"
        | "quick_copy_repro_and_blueprint"
        | "railroads"
        | "real_estate_agents_and_managers_rentals"
        | "record_stores"
        | "recreational_vehicle_rentals"
        | "religious_goods_stores"
        | "religious_organizations"
        | "roofing_siding_sheet_metal"
        | "secretarial_support_services"
        | "security_brokers_dealers"
        | "service_stations"
        | "sewing_needlework_fabric_and_piece_goods_stores"
        | "shoe_repair_hat_cleaning"
        | "shoe_stores"
        | "small_appliance_repair"
        | "snowmobile_dealers"
        | "special_trade_services"
        | "specialty_cleaning"
        | "sporting_goods_stores"
        | "sporting_recreation_camps"
        | "sports_and_riding_apparel_stores"
        | "sports_clubs_fields"
        | "stamp_and_coin_stores"
        | "stationary_office_supplies_printing_and_writing_paper"
        | "stationery_stores_office_and_school_supply_stores"
        | "swimming_pools_sales"
        | "t_ui_travel_germany"
        | "tailors_alterations"
        | "tax_payments_government_agencies"
        | "tax_preparation_services"
        | "taxicabs_limousines"
        | "telecommunication_equipment_and_telephone_sales"
        | "telecommunication_services"
        | "telegraph_services"
        | "tent_and_awning_shops"
        | "testing_laboratories"
        | "theatrical_ticket_agencies"
        | "timeshares"
        | "tire_retreading_and_repair"
        | "tolls_bridge_fees"
        | "tourist_attractions_and_exhibits"
        | "towing_services"
        | "trailer_parks_campgrounds"
        | "transportation_services"
        | "travel_agencies_tour_operators"
        | "truck_stop_iteration"
        | "truck_utility_trailer_rentals"
        | "typesetting_plate_making_and_related_services"
        | "typewriter_stores"
        | "u_s_federal_government_agencies_or_departments"
        | "uniforms_commercial_clothing"
        | "used_merchandise_and_secondhand_stores"
        | "utilities"
        | "variety_stores"
        | "veterinary_services"
        | "video_amusement_game_supplies"
        | "video_game_arcades"
        | "video_tape_rental_stores"
        | "vocational_trade_schools"
        | "watch_jewelry_repair"
        | "welding_repair"
        | "wholesale_clubs"
        | "wig_and_toupee_stores"
        | "wires_money_orders"
        | "womens_accessory_and_specialty_shops"
        | "womens_ready_to_wear_stores"
        | "wrecking_and_salvage_yards"
      )[]
    | null;

  /** Array of strings containing [categories](https://stripe.com/docs/api#issuing_authorization_object-merchant_data-category) of authorizations to decline. All other categories will be allowed. Cannot be set with `allowed_categories`. */
  blocked_categories?:
    | (
        | "ac_refrigeration_repair"
        | "accounting_bookkeeping_services"
        | "advertising_services"
        | "agricultural_cooperative"
        | "airlines_air_carriers"
        | "airports_flying_fields"
        | "ambulance_services"
        | "amusement_parks_carnivals"
        | "antique_reproductions"
        | "antique_shops"
        | "aquariums"
        | "architectural_surveying_services"
        | "art_dealers_and_galleries"
        | "artists_supply_and_craft_shops"
        | "auto_and_home_supply_stores"
        | "auto_body_repair_shops"
        | "auto_paint_shops"
        | "auto_service_shops"
        | "automated_cash_disburse"
        | "automated_fuel_dispensers"
        | "automobile_associations"
        | "automotive_parts_and_accessories_stores"
        | "automotive_tire_stores"
        | "bail_and_bond_payments"
        | "bakeries"
        | "bands_orchestras"
        | "barber_and_beauty_shops"
        | "betting_casino_gambling"
        | "bicycle_shops"
        | "billiard_pool_establishments"
        | "boat_dealers"
        | "boat_rentals_and_leases"
        | "book_stores"
        | "books_periodicals_and_newspapers"
        | "bowling_alleys"
        | "bus_lines"
        | "business_secretarial_schools"
        | "buying_shopping_services"
        | "cable_satellite_and_other_pay_television_and_radio"
        | "camera_and_photographic_supply_stores"
        | "candy_nut_and_confectionery_stores"
        | "car_and_truck_dealers_new_used"
        | "car_and_truck_dealers_used_only"
        | "car_rental_agencies"
        | "car_washes"
        | "carpentry_services"
        | "carpet_upholstery_cleaning"
        | "caterers"
        | "charitable_and_social_service_organizations_fundraising"
        | "chemicals_and_allied_products"
        | "child_care_services"
        | "childrens_and_infants_wear_stores"
        | "chiropodists_podiatrists"
        | "chiropractors"
        | "cigar_stores_and_stands"
        | "civic_social_fraternal_associations"
        | "cleaning_and_maintenance"
        | "clothing_rental"
        | "colleges_universities"
        | "commercial_equipment"
        | "commercial_footwear"
        | "commercial_photography_art_and_graphics"
        | "commuter_transport_and_ferries"
        | "computer_network_services"
        | "computer_programming"
        | "computer_repair"
        | "computer_software_stores"
        | "computers_peripherals_and_software"
        | "concrete_work_services"
        | "construction_materials"
        | "consulting_public_relations"
        | "correspondence_schools"
        | "cosmetic_stores"
        | "counseling_services"
        | "country_clubs"
        | "courier_services"
        | "court_costs"
        | "credit_reporting_agencies"
        | "cruise_lines"
        | "dairy_products_stores"
        | "dance_hall_studios_schools"
        | "dating_escort_services"
        | "dentists_orthodontists"
        | "department_stores"
        | "detective_agencies"
        | "digital_goods_applications"
        | "digital_goods_games"
        | "digital_goods_large_volume"
        | "digital_goods_media"
        | "direct_marketing_catalog_merchant"
        | "direct_marketing_combination_catalog_and_retail_merchant"
        | "direct_marketing_inbound_telemarketing"
        | "direct_marketing_insurance_services"
        | "direct_marketing_other"
        | "direct_marketing_outbound_telemarketing"
        | "direct_marketing_subscription"
        | "direct_marketing_travel"
        | "discount_stores"
        | "doctors"
        | "door_to_door_sales"
        | "drapery_window_covering_and_upholstery_stores"
        | "drinking_places"
        | "drug_stores_and_pharmacies"
        | "drugs_drug_proprietaries_and_druggist_sundries"
        | "dry_cleaners"
        | "durable_goods"
        | "duty_free_stores"
        | "eating_places_restaurants"
        | "educational_services"
        | "electric_razor_stores"
        | "electrical_parts_and_equipment"
        | "electrical_services"
        | "electronics_repair_shops"
        | "electronics_stores"
        | "elementary_secondary_schools"
        | "employment_temp_agencies"
        | "equipment_rental"
        | "exterminating_services"
        | "family_clothing_stores"
        | "fast_food_restaurants"
        | "financial_institutions"
        | "fines_government_administrative_entities"
        | "fireplace_fireplace_screens_and_accessories_stores"
        | "floor_covering_stores"
        | "florists"
        | "florists_supplies_nursery_stock_and_flowers"
        | "freezer_and_locker_meat_provisioners"
        | "fuel_dealers_non_automotive"
        | "funeral_services_crematories"
        | "furniture_home_furnishings_and_equipment_stores_except_appliances"
        | "furniture_repair_refinishing"
        | "furriers_and_fur_shops"
        | "general_services"
        | "gift_card_novelty_and_souvenir_shops"
        | "glass_paint_and_wallpaper_stores"
        | "glassware_crystal_stores"
        | "golf_courses_public"
        | "government_services"
        | "grocery_stores_supermarkets"
        | "hardware_equipment_and_supplies"
        | "hardware_stores"
        | "health_and_beauty_spas"
        | "hearing_aids_sales_and_supplies"
        | "heating_plumbing_a_c"
        | "hobby_toy_and_game_shops"
        | "home_supply_warehouse_stores"
        | "hospitals"
        | "hotels_motels_and_resorts"
        | "household_appliance_stores"
        | "industrial_supplies"
        | "information_retrieval_services"
        | "insurance_default"
        | "insurance_underwriting_premiums"
        | "intra_company_purchases"
        | "jewelry_stores_watches_clocks_and_silverware_stores"
        | "landscaping_services"
        | "laundries"
        | "laundry_cleaning_services"
        | "legal_services_attorneys"
        | "luggage_and_leather_goods_stores"
        | "lumber_building_materials_stores"
        | "manual_cash_disburse"
        | "marinas_service_and_supplies"
        | "masonry_stonework_and_plaster"
        | "massage_parlors"
        | "medical_and_dental_labs"
        | "medical_dental_ophthalmic_and_hospital_equipment_and_supplies"
        | "medical_services"
        | "membership_organizations"
        | "mens_and_boys_clothing_and_accessories_stores"
        | "mens_womens_clothing_stores"
        | "metal_service_centers"
        | "miscellaneous"
        | "miscellaneous_apparel_and_accessory_shops"
        | "miscellaneous_auto_dealers"
        | "miscellaneous_business_services"
        | "miscellaneous_food_stores"
        | "miscellaneous_general_merchandise"
        | "miscellaneous_general_services"
        | "miscellaneous_home_furnishing_specialty_stores"
        | "miscellaneous_publishing_and_printing"
        | "miscellaneous_recreation_services"
        | "miscellaneous_repair_shops"
        | "miscellaneous_specialty_retail"
        | "mobile_home_dealers"
        | "motion_picture_theaters"
        | "motor_freight_carriers_and_trucking"
        | "motor_homes_dealers"
        | "motor_vehicle_supplies_and_new_parts"
        | "motorcycle_shops_and_dealers"
        | "motorcycle_shops_dealers"
        | "music_stores_musical_instruments_pianos_and_sheet_music"
        | "news_dealers_and_newsstands"
        | "non_fi_money_orders"
        | "non_fi_stored_value_card_purchase_load"
        | "nondurable_goods"
        | "nurseries_lawn_and_garden_supply_stores"
        | "nursing_personal_care"
        | "office_and_commercial_furniture"
        | "opticians_eyeglasses"
        | "optometrists_ophthalmologist"
        | "orthopedic_goods_prosthetic_devices"
        | "osteopaths"
        | "package_stores_beer_wine_and_liquor"
        | "paints_varnishes_and_supplies"
        | "parking_lots_garages"
        | "passenger_railways"
        | "pawn_shops"
        | "pet_shops_pet_food_and_supplies"
        | "petroleum_and_petroleum_products"
        | "photo_developing"
        | "photographic_photocopy_microfilm_equipment_and_supplies"
        | "photographic_studios"
        | "picture_video_production"
        | "piece_goods_notions_and_other_dry_goods"
        | "plumbing_heating_equipment_and_supplies"
        | "political_organizations"
        | "postal_services_government_only"
        | "precious_stones_and_metals_watches_and_jewelry"
        | "professional_services"
        | "public_warehousing_and_storage"
        | "quick_copy_repro_and_blueprint"
        | "railroads"
        | "real_estate_agents_and_managers_rentals"
        | "record_stores"
        | "recreational_vehicle_rentals"
        | "religious_goods_stores"
        | "religious_organizations"
        | "roofing_siding_sheet_metal"
        | "secretarial_support_services"
        | "security_brokers_dealers"
        | "service_stations"
        | "sewing_needlework_fabric_and_piece_goods_stores"
        | "shoe_repair_hat_cleaning"
        | "shoe_stores"
        | "small_appliance_repair"
        | "snowmobile_dealers"
        | "special_trade_services"
        | "specialty_cleaning"
        | "sporting_goods_stores"
        | "sporting_recreation_camps"
        | "sports_and_riding_apparel_stores"
        | "sports_clubs_fields"
        | "stamp_and_coin_stores"
        | "stationary_office_supplies_printing_and_writing_paper"
        | "stationery_stores_office_and_school_supply_stores"
        | "swimming_pools_sales"
        | "t_ui_travel_germany"
        | "tailors_alterations"
        | "tax_payments_government_agencies"
        | "tax_preparation_services"
        | "taxicabs_limousines"
        | "telecommunication_equipment_and_telephone_sales"
        | "telecommunication_services"
        | "telegraph_services"
        | "tent_and_awning_shops"
        | "testing_laboratories"
        | "theatrical_ticket_agencies"
        | "timeshares"
        | "tire_retreading_and_repair"
        | "tolls_bridge_fees"
        | "tourist_attractions_and_exhibits"
        | "towing_services"
        | "trailer_parks_campgrounds"
        | "transportation_services"
        | "travel_agencies_tour_operators"
        | "truck_stop_iteration"
        | "truck_utility_trailer_rentals"
        | "typesetting_plate_making_and_related_services"
        | "typewriter_stores"
        | "u_s_federal_government_agencies_or_departments"
        | "uniforms_commercial_clothing"
        | "used_merchandise_and_secondhand_stores"
        | "utilities"
        | "variety_stores"
        | "veterinary_services"
        | "video_amusement_game_supplies"
        | "video_game_arcades"
        | "video_tape_rental_stores"
        | "vocational_trade_schools"
        | "watch_jewelry_repair"
        | "welding_repair"
        | "wholesale_clubs"
        | "wig_and_toupee_stores"
        | "wires_money_orders"
        | "womens_accessory_and_specialty_shops"
        | "womens_ready_to_wear_stores"
        | "wrecking_and_salvage_yards"
      )[]
    | null;

  /** Limit spending with amount-based rules that apply across any cards this card replaced (i.e., its `replacement_for` card and _that_ card's `replacement_for` card, up the chain). */
  spending_limits?: IssuingCardSpendingLimit[] | null;

  /** Currency of the amounts within `spending_limits`. Always the same as the currency of the card. */
  spending_limits_currency?: string | null;
}

export interface IssuingCardGooglePay {
  /** Google Pay Eligibility */
  eligible: boolean;

  /** Reason the card is ineligible for Google Pay */
  ineligible_reason?: "missing_agreement" | "missing_cardholder_contact" | "unsupported_region" | null;
}

export interface IssuingCardShipping {
  address: Address;

  /** The delivery company that shipped a card. */
  carrier?: "dhl" | "fedex" | "royal_mail" | "usps" | null;

  /**
   * A unix timestamp representing a best estimate of when the card will be delivered.
   * @format unix-time
   */
  eta?: number | null;

  /** Recipient name. */
  name: string;

  /** Shipment service, such as `standard` or `express`. */
  service: "express" | "priority" | "standard";

  /** The delivery status of the card. */
  status?: "canceled" | "delivered" | "failure" | "pending" | "returned" | "shipped" | null;

  /** A tracking number for a card shipment. */
  tracking_number?: string | null;

  /** A link to the shipping carrier's site where you can view detailed information about a card shipment. */
  tracking_url?: string | null;

  /** Packaging options. */
  type: "bulk" | "individual";
}

export interface IssuingCardSpendingLimit {
  /** Maximum amount allowed to spend per interval. */
  amount: number;

  /** Array of strings containing [categories](https://stripe.com/docs/api#issuing_authorization_object-merchant_data-category) this limit applies to. Omitting this field will apply the limit to all categories. */
  categories?:
    | (
        | "ac_refrigeration_repair"
        | "accounting_bookkeeping_services"
        | "advertising_services"
        | "agricultural_cooperative"
        | "airlines_air_carriers"
        | "airports_flying_fields"
        | "ambulance_services"
        | "amusement_parks_carnivals"
        | "antique_reproductions"
        | "antique_shops"
        | "aquariums"
        | "architectural_surveying_services"
        | "art_dealers_and_galleries"
        | "artists_supply_and_craft_shops"
        | "auto_and_home_supply_stores"
        | "auto_body_repair_shops"
        | "auto_paint_shops"
        | "auto_service_shops"
        | "automated_cash_disburse"
        | "automated_fuel_dispensers"
        | "automobile_associations"
        | "automotive_parts_and_accessories_stores"
        | "automotive_tire_stores"
        | "bail_and_bond_payments"
        | "bakeries"
        | "bands_orchestras"
        | "barber_and_beauty_shops"
        | "betting_casino_gambling"
        | "bicycle_shops"
        | "billiard_pool_establishments"
        | "boat_dealers"
        | "boat_rentals_and_leases"
        | "book_stores"
        | "books_periodicals_and_newspapers"
        | "bowling_alleys"
        | "bus_lines"
        | "business_secretarial_schools"
        | "buying_shopping_services"
        | "cable_satellite_and_other_pay_television_and_radio"
        | "camera_and_photographic_supply_stores"
        | "candy_nut_and_confectionery_stores"
        | "car_and_truck_dealers_new_used"
        | "car_and_truck_dealers_used_only"
        | "car_rental_agencies"
        | "car_washes"
        | "carpentry_services"
        | "carpet_upholstery_cleaning"
        | "caterers"
        | "charitable_and_social_service_organizations_fundraising"
        | "chemicals_and_allied_products"
        | "child_care_services"
        | "childrens_and_infants_wear_stores"
        | "chiropodists_podiatrists"
        | "chiropractors"
        | "cigar_stores_and_stands"
        | "civic_social_fraternal_associations"
        | "cleaning_and_maintenance"
        | "clothing_rental"
        | "colleges_universities"
        | "commercial_equipment"
        | "commercial_footwear"
        | "commercial_photography_art_and_graphics"
        | "commuter_transport_and_ferries"
        | "computer_network_services"
        | "computer_programming"
        | "computer_repair"
        | "computer_software_stores"
        | "computers_peripherals_and_software"
        | "concrete_work_services"
        | "construction_materials"
        | "consulting_public_relations"
        | "correspondence_schools"
        | "cosmetic_stores"
        | "counseling_services"
        | "country_clubs"
        | "courier_services"
        | "court_costs"
        | "credit_reporting_agencies"
        | "cruise_lines"
        | "dairy_products_stores"
        | "dance_hall_studios_schools"
        | "dating_escort_services"
        | "dentists_orthodontists"
        | "department_stores"
        | "detective_agencies"
        | "digital_goods_applications"
        | "digital_goods_games"
        | "digital_goods_large_volume"
        | "digital_goods_media"
        | "direct_marketing_catalog_merchant"
        | "direct_marketing_combination_catalog_and_retail_merchant"
        | "direct_marketing_inbound_telemarketing"
        | "direct_marketing_insurance_services"
        | "direct_marketing_other"
        | "direct_marketing_outbound_telemarketing"
        | "direct_marketing_subscription"
        | "direct_marketing_travel"
        | "discount_stores"
        | "doctors"
        | "door_to_door_sales"
        | "drapery_window_covering_and_upholstery_stores"
        | "drinking_places"
        | "drug_stores_and_pharmacies"
        | "drugs_drug_proprietaries_and_druggist_sundries"
        | "dry_cleaners"
        | "durable_goods"
        | "duty_free_stores"
        | "eating_places_restaurants"
        | "educational_services"
        | "electric_razor_stores"
        | "electrical_parts_and_equipment"
        | "electrical_services"
        | "electronics_repair_shops"
        | "electronics_stores"
        | "elementary_secondary_schools"
        | "employment_temp_agencies"
        | "equipment_rental"
        | "exterminating_services"
        | "family_clothing_stores"
        | "fast_food_restaurants"
        | "financial_institutions"
        | "fines_government_administrative_entities"
        | "fireplace_fireplace_screens_and_accessories_stores"
        | "floor_covering_stores"
        | "florists"
        | "florists_supplies_nursery_stock_and_flowers"
        | "freezer_and_locker_meat_provisioners"
        | "fuel_dealers_non_automotive"
        | "funeral_services_crematories"
        | "furniture_home_furnishings_and_equipment_stores_except_appliances"
        | "furniture_repair_refinishing"
        | "furriers_and_fur_shops"
        | "general_services"
        | "gift_card_novelty_and_souvenir_shops"
        | "glass_paint_and_wallpaper_stores"
        | "glassware_crystal_stores"
        | "golf_courses_public"
        | "government_services"
        | "grocery_stores_supermarkets"
        | "hardware_equipment_and_supplies"
        | "hardware_stores"
        | "health_and_beauty_spas"
        | "hearing_aids_sales_and_supplies"
        | "heating_plumbing_a_c"
        | "hobby_toy_and_game_shops"
        | "home_supply_warehouse_stores"
        | "hospitals"
        | "hotels_motels_and_resorts"
        | "household_appliance_stores"
        | "industrial_supplies"
        | "information_retrieval_services"
        | "insurance_default"
        | "insurance_underwriting_premiums"
        | "intra_company_purchases"
        | "jewelry_stores_watches_clocks_and_silverware_stores"
        | "landscaping_services"
        | "laundries"
        | "laundry_cleaning_services"
        | "legal_services_attorneys"
        | "luggage_and_leather_goods_stores"
        | "lumber_building_materials_stores"
        | "manual_cash_disburse"
        | "marinas_service_and_supplies"
        | "masonry_stonework_and_plaster"
        | "massage_parlors"
        | "medical_and_dental_labs"
        | "medical_dental_ophthalmic_and_hospital_equipment_and_supplies"
        | "medical_services"
        | "membership_organizations"
        | "mens_and_boys_clothing_and_accessories_stores"
        | "mens_womens_clothing_stores"
        | "metal_service_centers"
        | "miscellaneous"
        | "miscellaneous_apparel_and_accessory_shops"
        | "miscellaneous_auto_dealers"
        | "miscellaneous_business_services"
        | "miscellaneous_food_stores"
        | "miscellaneous_general_merchandise"
        | "miscellaneous_general_services"
        | "miscellaneous_home_furnishing_specialty_stores"
        | "miscellaneous_publishing_and_printing"
        | "miscellaneous_recreation_services"
        | "miscellaneous_repair_shops"
        | "miscellaneous_specialty_retail"
        | "mobile_home_dealers"
        | "motion_picture_theaters"
        | "motor_freight_carriers_and_trucking"
        | "motor_homes_dealers"
        | "motor_vehicle_supplies_and_new_parts"
        | "motorcycle_shops_and_dealers"
        | "motorcycle_shops_dealers"
        | "music_stores_musical_instruments_pianos_and_sheet_music"
        | "news_dealers_and_newsstands"
        | "non_fi_money_orders"
        | "non_fi_stored_value_card_purchase_load"
        | "nondurable_goods"
        | "nurseries_lawn_and_garden_supply_stores"
        | "nursing_personal_care"
        | "office_and_commercial_furniture"
        | "opticians_eyeglasses"
        | "optometrists_ophthalmologist"
        | "orthopedic_goods_prosthetic_devices"
        | "osteopaths"
        | "package_stores_beer_wine_and_liquor"
        | "paints_varnishes_and_supplies"
        | "parking_lots_garages"
        | "passenger_railways"
        | "pawn_shops"
        | "pet_shops_pet_food_and_supplies"
        | "petroleum_and_petroleum_products"
        | "photo_developing"
        | "photographic_photocopy_microfilm_equipment_and_supplies"
        | "photographic_studios"
        | "picture_video_production"
        | "piece_goods_notions_and_other_dry_goods"
        | "plumbing_heating_equipment_and_supplies"
        | "political_organizations"
        | "postal_services_government_only"
        | "precious_stones_and_metals_watches_and_jewelry"
        | "professional_services"
        | "public_warehousing_and_storage"
        | "quick_copy_repro_and_blueprint"
        | "railroads"
        | "real_estate_agents_and_managers_rentals"
        | "record_stores"
        | "recreational_vehicle_rentals"
        | "religious_goods_stores"
        | "religious_organizations"
        | "roofing_siding_sheet_metal"
        | "secretarial_support_services"
        | "security_brokers_dealers"
        | "service_stations"
        | "sewing_needlework_fabric_and_piece_goods_stores"
        | "shoe_repair_hat_cleaning"
        | "shoe_stores"
        | "small_appliance_repair"
        | "snowmobile_dealers"
        | "special_trade_services"
        | "specialty_cleaning"
        | "sporting_goods_stores"
        | "sporting_recreation_camps"
        | "sports_and_riding_apparel_stores"
        | "sports_clubs_fields"
        | "stamp_and_coin_stores"
        | "stationary_office_supplies_printing_and_writing_paper"
        | "stationery_stores_office_and_school_supply_stores"
        | "swimming_pools_sales"
        | "t_ui_travel_germany"
        | "tailors_alterations"
        | "tax_payments_government_agencies"
        | "tax_preparation_services"
        | "taxicabs_limousines"
        | "telecommunication_equipment_and_telephone_sales"
        | "telecommunication_services"
        | "telegraph_services"
        | "tent_and_awning_shops"
        | "testing_laboratories"
        | "theatrical_ticket_agencies"
        | "timeshares"
        | "tire_retreading_and_repair"
        | "tolls_bridge_fees"
        | "tourist_attractions_and_exhibits"
        | "towing_services"
        | "trailer_parks_campgrounds"
        | "transportation_services"
        | "travel_agencies_tour_operators"
        | "truck_stop_iteration"
        | "truck_utility_trailer_rentals"
        | "typesetting_plate_making_and_related_services"
        | "typewriter_stores"
        | "u_s_federal_government_agencies_or_departments"
        | "uniforms_commercial_clothing"
        | "used_merchandise_and_secondhand_stores"
        | "utilities"
        | "variety_stores"
        | "veterinary_services"
        | "video_amusement_game_supplies"
        | "video_game_arcades"
        | "video_tape_rental_stores"
        | "vocational_trade_schools"
        | "watch_jewelry_repair"
        | "welding_repair"
        | "wholesale_clubs"
        | "wig_and_toupee_stores"
        | "wires_money_orders"
        | "womens_accessory_and_specialty_shops"
        | "womens_ready_to_wear_stores"
        | "wrecking_and_salvage_yards"
      )[]
    | null;

  /** Interval (or event) to which the amount applies. */
  interval: "all_time" | "daily" | "monthly" | "per_authorization" | "weekly" | "yearly";
}

export interface IssuingCardWallets {
  apple_pay: IssuingCardApplePay;
  google_pay: IssuingCardGooglePay;

  /** Unique identifier for a card used with digital wallets */
  primary_account_identifier?: string | null;
}

export interface IssuingCardholderAddress {
  address: Address;
}

export interface IssuingCardholderAuthorizationControls {
  /** Array of strings containing [categories](https://stripe.com/docs/api#issuing_authorization_object-merchant_data-category) of authorizations to allow. All other categories will be blocked. Cannot be set with `blocked_categories`. */
  allowed_categories?:
    | (
        | "ac_refrigeration_repair"
        | "accounting_bookkeeping_services"
        | "advertising_services"
        | "agricultural_cooperative"
        | "airlines_air_carriers"
        | "airports_flying_fields"
        | "ambulance_services"
        | "amusement_parks_carnivals"
        | "antique_reproductions"
        | "antique_shops"
        | "aquariums"
        | "architectural_surveying_services"
        | "art_dealers_and_galleries"
        | "artists_supply_and_craft_shops"
        | "auto_and_home_supply_stores"
        | "auto_body_repair_shops"
        | "auto_paint_shops"
        | "auto_service_shops"
        | "automated_cash_disburse"
        | "automated_fuel_dispensers"
        | "automobile_associations"
        | "automotive_parts_and_accessories_stores"
        | "automotive_tire_stores"
        | "bail_and_bond_payments"
        | "bakeries"
        | "bands_orchestras"
        | "barber_and_beauty_shops"
        | "betting_casino_gambling"
        | "bicycle_shops"
        | "billiard_pool_establishments"
        | "boat_dealers"
        | "boat_rentals_and_leases"
        | "book_stores"
        | "books_periodicals_and_newspapers"
        | "bowling_alleys"
        | "bus_lines"
        | "business_secretarial_schools"
        | "buying_shopping_services"
        | "cable_satellite_and_other_pay_television_and_radio"
        | "camera_and_photographic_supply_stores"
        | "candy_nut_and_confectionery_stores"
        | "car_and_truck_dealers_new_used"
        | "car_and_truck_dealers_used_only"
        | "car_rental_agencies"
        | "car_washes"
        | "carpentry_services"
        | "carpet_upholstery_cleaning"
        | "caterers"
        | "charitable_and_social_service_organizations_fundraising"
        | "chemicals_and_allied_products"
        | "child_care_services"
        | "childrens_and_infants_wear_stores"
        | "chiropodists_podiatrists"
        | "chiropractors"
        | "cigar_stores_and_stands"
        | "civic_social_fraternal_associations"
        | "cleaning_and_maintenance"
        | "clothing_rental"
        | "colleges_universities"
        | "commercial_equipment"
        | "commercial_footwear"
        | "commercial_photography_art_and_graphics"
        | "commuter_transport_and_ferries"
        | "computer_network_services"
        | "computer_programming"
        | "computer_repair"
        | "computer_software_stores"
        | "computers_peripherals_and_software"
        | "concrete_work_services"
        | "construction_materials"
        | "consulting_public_relations"
        | "correspondence_schools"
        | "cosmetic_stores"
        | "counseling_services"
        | "country_clubs"
        | "courier_services"
        | "court_costs"
        | "credit_reporting_agencies"
        | "cruise_lines"
        | "dairy_products_stores"
        | "dance_hall_studios_schools"
        | "dating_escort_services"
        | "dentists_orthodontists"
        | "department_stores"
        | "detective_agencies"
        | "digital_goods_applications"
        | "digital_goods_games"
        | "digital_goods_large_volume"
        | "digital_goods_media"
        | "direct_marketing_catalog_merchant"
        | "direct_marketing_combination_catalog_and_retail_merchant"
        | "direct_marketing_inbound_telemarketing"
        | "direct_marketing_insurance_services"
        | "direct_marketing_other"
        | "direct_marketing_outbound_telemarketing"
        | "direct_marketing_subscription"
        | "direct_marketing_travel"
        | "discount_stores"
        | "doctors"
        | "door_to_door_sales"
        | "drapery_window_covering_and_upholstery_stores"
        | "drinking_places"
        | "drug_stores_and_pharmacies"
        | "drugs_drug_proprietaries_and_druggist_sundries"
        | "dry_cleaners"
        | "durable_goods"
        | "duty_free_stores"
        | "eating_places_restaurants"
        | "educational_services"
        | "electric_razor_stores"
        | "electrical_parts_and_equipment"
        | "electrical_services"
        | "electronics_repair_shops"
        | "electronics_stores"
        | "elementary_secondary_schools"
        | "employment_temp_agencies"
        | "equipment_rental"
        | "exterminating_services"
        | "family_clothing_stores"
        | "fast_food_restaurants"
        | "financial_institutions"
        | "fines_government_administrative_entities"
        | "fireplace_fireplace_screens_and_accessories_stores"
        | "floor_covering_stores"
        | "florists"
        | "florists_supplies_nursery_stock_and_flowers"
        | "freezer_and_locker_meat_provisioners"
        | "fuel_dealers_non_automotive"
        | "funeral_services_crematories"
        | "furniture_home_furnishings_and_equipment_stores_except_appliances"
        | "furniture_repair_refinishing"
        | "furriers_and_fur_shops"
        | "general_services"
        | "gift_card_novelty_and_souvenir_shops"
        | "glass_paint_and_wallpaper_stores"
        | "glassware_crystal_stores"
        | "golf_courses_public"
        | "government_services"
        | "grocery_stores_supermarkets"
        | "hardware_equipment_and_supplies"
        | "hardware_stores"
        | "health_and_beauty_spas"
        | "hearing_aids_sales_and_supplies"
        | "heating_plumbing_a_c"
        | "hobby_toy_and_game_shops"
        | "home_supply_warehouse_stores"
        | "hospitals"
        | "hotels_motels_and_resorts"
        | "household_appliance_stores"
        | "industrial_supplies"
        | "information_retrieval_services"
        | "insurance_default"
        | "insurance_underwriting_premiums"
        | "intra_company_purchases"
        | "jewelry_stores_watches_clocks_and_silverware_stores"
        | "landscaping_services"
        | "laundries"
        | "laundry_cleaning_services"
        | "legal_services_attorneys"
        | "luggage_and_leather_goods_stores"
        | "lumber_building_materials_stores"
        | "manual_cash_disburse"
        | "marinas_service_and_supplies"
        | "masonry_stonework_and_plaster"
        | "massage_parlors"
        | "medical_and_dental_labs"
        | "medical_dental_ophthalmic_and_hospital_equipment_and_supplies"
        | "medical_services"
        | "membership_organizations"
        | "mens_and_boys_clothing_and_accessories_stores"
        | "mens_womens_clothing_stores"
        | "metal_service_centers"
        | "miscellaneous"
        | "miscellaneous_apparel_and_accessory_shops"
        | "miscellaneous_auto_dealers"
        | "miscellaneous_business_services"
        | "miscellaneous_food_stores"
        | "miscellaneous_general_merchandise"
        | "miscellaneous_general_services"
        | "miscellaneous_home_furnishing_specialty_stores"
        | "miscellaneous_publishing_and_printing"
        | "miscellaneous_recreation_services"
        | "miscellaneous_repair_shops"
        | "miscellaneous_specialty_retail"
        | "mobile_home_dealers"
        | "motion_picture_theaters"
        | "motor_freight_carriers_and_trucking"
        | "motor_homes_dealers"
        | "motor_vehicle_supplies_and_new_parts"
        | "motorcycle_shops_and_dealers"
        | "motorcycle_shops_dealers"
        | "music_stores_musical_instruments_pianos_and_sheet_music"
        | "news_dealers_and_newsstands"
        | "non_fi_money_orders"
        | "non_fi_stored_value_card_purchase_load"
        | "nondurable_goods"
        | "nurseries_lawn_and_garden_supply_stores"
        | "nursing_personal_care"
        | "office_and_commercial_furniture"
        | "opticians_eyeglasses"
        | "optometrists_ophthalmologist"
        | "orthopedic_goods_prosthetic_devices"
        | "osteopaths"
        | "package_stores_beer_wine_and_liquor"
        | "paints_varnishes_and_supplies"
        | "parking_lots_garages"
        | "passenger_railways"
        | "pawn_shops"
        | "pet_shops_pet_food_and_supplies"
        | "petroleum_and_petroleum_products"
        | "photo_developing"
        | "photographic_photocopy_microfilm_equipment_and_supplies"
        | "photographic_studios"
        | "picture_video_production"
        | "piece_goods_notions_and_other_dry_goods"
        | "plumbing_heating_equipment_and_supplies"
        | "political_organizations"
        | "postal_services_government_only"
        | "precious_stones_and_metals_watches_and_jewelry"
        | "professional_services"
        | "public_warehousing_and_storage"
        | "quick_copy_repro_and_blueprint"
        | "railroads"
        | "real_estate_agents_and_managers_rentals"
        | "record_stores"
        | "recreational_vehicle_rentals"
        | "religious_goods_stores"
        | "religious_organizations"
        | "roofing_siding_sheet_metal"
        | "secretarial_support_services"
        | "security_brokers_dealers"
        | "service_stations"
        | "sewing_needlework_fabric_and_piece_goods_stores"
        | "shoe_repair_hat_cleaning"
        | "shoe_stores"
        | "small_appliance_repair"
        | "snowmobile_dealers"
        | "special_trade_services"
        | "specialty_cleaning"
        | "sporting_goods_stores"
        | "sporting_recreation_camps"
        | "sports_and_riding_apparel_stores"
        | "sports_clubs_fields"
        | "stamp_and_coin_stores"
        | "stationary_office_supplies_printing_and_writing_paper"
        | "stationery_stores_office_and_school_supply_stores"
        | "swimming_pools_sales"
        | "t_ui_travel_germany"
        | "tailors_alterations"
        | "tax_payments_government_agencies"
        | "tax_preparation_services"
        | "taxicabs_limousines"
        | "telecommunication_equipment_and_telephone_sales"
        | "telecommunication_services"
        | "telegraph_services"
        | "tent_and_awning_shops"
        | "testing_laboratories"
        | "theatrical_ticket_agencies"
        | "timeshares"
        | "tire_retreading_and_repair"
        | "tolls_bridge_fees"
        | "tourist_attractions_and_exhibits"
        | "towing_services"
        | "trailer_parks_campgrounds"
        | "transportation_services"
        | "travel_agencies_tour_operators"
        | "truck_stop_iteration"
        | "truck_utility_trailer_rentals"
        | "typesetting_plate_making_and_related_services"
        | "typewriter_stores"
        | "u_s_federal_government_agencies_or_departments"
        | "uniforms_commercial_clothing"
        | "used_merchandise_and_secondhand_stores"
        | "utilities"
        | "variety_stores"
        | "veterinary_services"
        | "video_amusement_game_supplies"
        | "video_game_arcades"
        | "video_tape_rental_stores"
        | "vocational_trade_schools"
        | "watch_jewelry_repair"
        | "welding_repair"
        | "wholesale_clubs"
        | "wig_and_toupee_stores"
        | "wires_money_orders"
        | "womens_accessory_and_specialty_shops"
        | "womens_ready_to_wear_stores"
        | "wrecking_and_salvage_yards"
      )[]
    | null;

  /** Array of strings containing [categories](https://stripe.com/docs/api#issuing_authorization_object-merchant_data-category) of authorizations to decline. All other categories will be allowed. Cannot be set with `allowed_categories`. */
  blocked_categories?:
    | (
        | "ac_refrigeration_repair"
        | "accounting_bookkeeping_services"
        | "advertising_services"
        | "agricultural_cooperative"
        | "airlines_air_carriers"
        | "airports_flying_fields"
        | "ambulance_services"
        | "amusement_parks_carnivals"
        | "antique_reproductions"
        | "antique_shops"
        | "aquariums"
        | "architectural_surveying_services"
        | "art_dealers_and_galleries"
        | "artists_supply_and_craft_shops"
        | "auto_and_home_supply_stores"
        | "auto_body_repair_shops"
        | "auto_paint_shops"
        | "auto_service_shops"
        | "automated_cash_disburse"
        | "automated_fuel_dispensers"
        | "automobile_associations"
        | "automotive_parts_and_accessories_stores"
        | "automotive_tire_stores"
        | "bail_and_bond_payments"
        | "bakeries"
        | "bands_orchestras"
        | "barber_and_beauty_shops"
        | "betting_casino_gambling"
        | "bicycle_shops"
        | "billiard_pool_establishments"
        | "boat_dealers"
        | "boat_rentals_and_leases"
        | "book_stores"
        | "books_periodicals_and_newspapers"
        | "bowling_alleys"
        | "bus_lines"
        | "business_secretarial_schools"
        | "buying_shopping_services"
        | "cable_satellite_and_other_pay_television_and_radio"
        | "camera_and_photographic_supply_stores"
        | "candy_nut_and_confectionery_stores"
        | "car_and_truck_dealers_new_used"
        | "car_and_truck_dealers_used_only"
        | "car_rental_agencies"
        | "car_washes"
        | "carpentry_services"
        | "carpet_upholstery_cleaning"
        | "caterers"
        | "charitable_and_social_service_organizations_fundraising"
        | "chemicals_and_allied_products"
        | "child_care_services"
        | "childrens_and_infants_wear_stores"
        | "chiropodists_podiatrists"
        | "chiropractors"
        | "cigar_stores_and_stands"
        | "civic_social_fraternal_associations"
        | "cleaning_and_maintenance"
        | "clothing_rental"
        | "colleges_universities"
        | "commercial_equipment"
        | "commercial_footwear"
        | "commercial_photography_art_and_graphics"
        | "commuter_transport_and_ferries"
        | "computer_network_services"
        | "computer_programming"
        | "computer_repair"
        | "computer_software_stores"
        | "computers_peripherals_and_software"
        | "concrete_work_services"
        | "construction_materials"
        | "consulting_public_relations"
        | "correspondence_schools"
        | "cosmetic_stores"
        | "counseling_services"
        | "country_clubs"
        | "courier_services"
        | "court_costs"
        | "credit_reporting_agencies"
        | "cruise_lines"
        | "dairy_products_stores"
        | "dance_hall_studios_schools"
        | "dating_escort_services"
        | "dentists_orthodontists"
        | "department_stores"
        | "detective_agencies"
        | "digital_goods_applications"
        | "digital_goods_games"
        | "digital_goods_large_volume"
        | "digital_goods_media"
        | "direct_marketing_catalog_merchant"
        | "direct_marketing_combination_catalog_and_retail_merchant"
        | "direct_marketing_inbound_telemarketing"
        | "direct_marketing_insurance_services"
        | "direct_marketing_other"
        | "direct_marketing_outbound_telemarketing"
        | "direct_marketing_subscription"
        | "direct_marketing_travel"
        | "discount_stores"
        | "doctors"
        | "door_to_door_sales"
        | "drapery_window_covering_and_upholstery_stores"
        | "drinking_places"
        | "drug_stores_and_pharmacies"
        | "drugs_drug_proprietaries_and_druggist_sundries"
        | "dry_cleaners"
        | "durable_goods"
        | "duty_free_stores"
        | "eating_places_restaurants"
        | "educational_services"
        | "electric_razor_stores"
        | "electrical_parts_and_equipment"
        | "electrical_services"
        | "electronics_repair_shops"
        | "electronics_stores"
        | "elementary_secondary_schools"
        | "employment_temp_agencies"
        | "equipment_rental"
        | "exterminating_services"
        | "family_clothing_stores"
        | "fast_food_restaurants"
        | "financial_institutions"
        | "fines_government_administrative_entities"
        | "fireplace_fireplace_screens_and_accessories_stores"
        | "floor_covering_stores"
        | "florists"
        | "florists_supplies_nursery_stock_and_flowers"
        | "freezer_and_locker_meat_provisioners"
        | "fuel_dealers_non_automotive"
        | "funeral_services_crematories"
        | "furniture_home_furnishings_and_equipment_stores_except_appliances"
        | "furniture_repair_refinishing"
        | "furriers_and_fur_shops"
        | "general_services"
        | "gift_card_novelty_and_souvenir_shops"
        | "glass_paint_and_wallpaper_stores"
        | "glassware_crystal_stores"
        | "golf_courses_public"
        | "government_services"
        | "grocery_stores_supermarkets"
        | "hardware_equipment_and_supplies"
        | "hardware_stores"
        | "health_and_beauty_spas"
        | "hearing_aids_sales_and_supplies"
        | "heating_plumbing_a_c"
        | "hobby_toy_and_game_shops"
        | "home_supply_warehouse_stores"
        | "hospitals"
        | "hotels_motels_and_resorts"
        | "household_appliance_stores"
        | "industrial_supplies"
        | "information_retrieval_services"
        | "insurance_default"
        | "insurance_underwriting_premiums"
        | "intra_company_purchases"
        | "jewelry_stores_watches_clocks_and_silverware_stores"
        | "landscaping_services"
        | "laundries"
        | "laundry_cleaning_services"
        | "legal_services_attorneys"
        | "luggage_and_leather_goods_stores"
        | "lumber_building_materials_stores"
        | "manual_cash_disburse"
        | "marinas_service_and_supplies"
        | "masonry_stonework_and_plaster"
        | "massage_parlors"
        | "medical_and_dental_labs"
        | "medical_dental_ophthalmic_and_hospital_equipment_and_supplies"
        | "medical_services"
        | "membership_organizations"
        | "mens_and_boys_clothing_and_accessories_stores"
        | "mens_womens_clothing_stores"
        | "metal_service_centers"
        | "miscellaneous"
        | "miscellaneous_apparel_and_accessory_shops"
        | "miscellaneous_auto_dealers"
        | "miscellaneous_business_services"
        | "miscellaneous_food_stores"
        | "miscellaneous_general_merchandise"
        | "miscellaneous_general_services"
        | "miscellaneous_home_furnishing_specialty_stores"
        | "miscellaneous_publishing_and_printing"
        | "miscellaneous_recreation_services"
        | "miscellaneous_repair_shops"
        | "miscellaneous_specialty_retail"
        | "mobile_home_dealers"
        | "motion_picture_theaters"
        | "motor_freight_carriers_and_trucking"
        | "motor_homes_dealers"
        | "motor_vehicle_supplies_and_new_parts"
        | "motorcycle_shops_and_dealers"
        | "motorcycle_shops_dealers"
        | "music_stores_musical_instruments_pianos_and_sheet_music"
        | "news_dealers_and_newsstands"
        | "non_fi_money_orders"
        | "non_fi_stored_value_card_purchase_load"
        | "nondurable_goods"
        | "nurseries_lawn_and_garden_supply_stores"
        | "nursing_personal_care"
        | "office_and_commercial_furniture"
        | "opticians_eyeglasses"
        | "optometrists_ophthalmologist"
        | "orthopedic_goods_prosthetic_devices"
        | "osteopaths"
        | "package_stores_beer_wine_and_liquor"
        | "paints_varnishes_and_supplies"
        | "parking_lots_garages"
        | "passenger_railways"
        | "pawn_shops"
        | "pet_shops_pet_food_and_supplies"
        | "petroleum_and_petroleum_products"
        | "photo_developing"
        | "photographic_photocopy_microfilm_equipment_and_supplies"
        | "photographic_studios"
        | "picture_video_production"
        | "piece_goods_notions_and_other_dry_goods"
        | "plumbing_heating_equipment_and_supplies"
        | "political_organizations"
        | "postal_services_government_only"
        | "precious_stones_and_metals_watches_and_jewelry"
        | "professional_services"
        | "public_warehousing_and_storage"
        | "quick_copy_repro_and_blueprint"
        | "railroads"
        | "real_estate_agents_and_managers_rentals"
        | "record_stores"
        | "recreational_vehicle_rentals"
        | "religious_goods_stores"
        | "religious_organizations"
        | "roofing_siding_sheet_metal"
        | "secretarial_support_services"
        | "security_brokers_dealers"
        | "service_stations"
        | "sewing_needlework_fabric_and_piece_goods_stores"
        | "shoe_repair_hat_cleaning"
        | "shoe_stores"
        | "small_appliance_repair"
        | "snowmobile_dealers"
        | "special_trade_services"
        | "specialty_cleaning"
        | "sporting_goods_stores"
        | "sporting_recreation_camps"
        | "sports_and_riding_apparel_stores"
        | "sports_clubs_fields"
        | "stamp_and_coin_stores"
        | "stationary_office_supplies_printing_and_writing_paper"
        | "stationery_stores_office_and_school_supply_stores"
        | "swimming_pools_sales"
        | "t_ui_travel_germany"
        | "tailors_alterations"
        | "tax_payments_government_agencies"
        | "tax_preparation_services"
        | "taxicabs_limousines"
        | "telecommunication_equipment_and_telephone_sales"
        | "telecommunication_services"
        | "telegraph_services"
        | "tent_and_awning_shops"
        | "testing_laboratories"
        | "theatrical_ticket_agencies"
        | "timeshares"
        | "tire_retreading_and_repair"
        | "tolls_bridge_fees"
        | "tourist_attractions_and_exhibits"
        | "towing_services"
        | "trailer_parks_campgrounds"
        | "transportation_services"
        | "travel_agencies_tour_operators"
        | "truck_stop_iteration"
        | "truck_utility_trailer_rentals"
        | "typesetting_plate_making_and_related_services"
        | "typewriter_stores"
        | "u_s_federal_government_agencies_or_departments"
        | "uniforms_commercial_clothing"
        | "used_merchandise_and_secondhand_stores"
        | "utilities"
        | "variety_stores"
        | "veterinary_services"
        | "video_amusement_game_supplies"
        | "video_game_arcades"
        | "video_tape_rental_stores"
        | "vocational_trade_schools"
        | "watch_jewelry_repair"
        | "welding_repair"
        | "wholesale_clubs"
        | "wig_and_toupee_stores"
        | "wires_money_orders"
        | "womens_accessory_and_specialty_shops"
        | "womens_ready_to_wear_stores"
        | "wrecking_and_salvage_yards"
      )[]
    | null;

  /** Limit spending with amount-based rules that apply across this cardholder's cards. */
  spending_limits?: IssuingCardholderSpendingLimit[] | null;

  /** Currency of the amounts within `spending_limits`. */
  spending_limits_currency?: string | null;
}

export interface IssuingCardholderCompany {
  /** Whether the company's business ID number was provided. */
  tax_id_provided: boolean;
}

export interface IssuingCardholderIdDocument {
  /** The back of a document returned by a [file upload](https://stripe.com/docs/api#create_file) with a `purpose` value of `identity_document`. */
  back?: string | File | null;

  /** The front of a document returned by a [file upload](https://stripe.com/docs/api#create_file) with a `purpose` value of `identity_document`. */
  front?: string | File | null;
}

export interface IssuingCardholderIndividual {
  /** The date of birth of this cardholder. */
  dob?: IssuingCardholderIndividualDob | null;

  /** The first name of this cardholder. */
  first_name: string;

  /** The last name of this cardholder. */
  last_name: string;

  /** Government-issued ID document for this cardholder. */
  verification?: IssuingCardholderVerification | null;
}

export interface IssuingCardholderIndividualDob {
  /** The day of birth, between 1 and 31. */
  day?: number | null;

  /** The month of birth, between 1 and 12. */
  month?: number | null;

  /** The four-digit year of birth. */
  year?: number | null;
}

export interface IssuingCardholderRequirements {
  /** If `disabled_reason` is present, all cards will decline authorizations with `cardholder_verification_required` reason. */
  disabled_reason?: "listed" | "rejected.listed" | "under_review" | null;

  /** Array of fields that need to be collected in order to verify and re-enable the cardholder. */
  past_due?:
    | (
        | "company.tax_id"
        | "individual.dob.day"
        | "individual.dob.month"
        | "individual.dob.year"
        | "individual.first_name"
        | "individual.last_name"
        | "individual.verification.document"
      )[]
    | null;
}

export interface IssuingCardholderSpendingLimit {
  /** Maximum amount allowed to spend per interval. */
  amount: number;

  /** Array of strings containing [categories](https://stripe.com/docs/api#issuing_authorization_object-merchant_data-category) this limit applies to. Omitting this field will apply the limit to all categories. */
  categories?:
    | (
        | "ac_refrigeration_repair"
        | "accounting_bookkeeping_services"
        | "advertising_services"
        | "agricultural_cooperative"
        | "airlines_air_carriers"
        | "airports_flying_fields"
        | "ambulance_services"
        | "amusement_parks_carnivals"
        | "antique_reproductions"
        | "antique_shops"
        | "aquariums"
        | "architectural_surveying_services"
        | "art_dealers_and_galleries"
        | "artists_supply_and_craft_shops"
        | "auto_and_home_supply_stores"
        | "auto_body_repair_shops"
        | "auto_paint_shops"
        | "auto_service_shops"
        | "automated_cash_disburse"
        | "automated_fuel_dispensers"
        | "automobile_associations"
        | "automotive_parts_and_accessories_stores"
        | "automotive_tire_stores"
        | "bail_and_bond_payments"
        | "bakeries"
        | "bands_orchestras"
        | "barber_and_beauty_shops"
        | "betting_casino_gambling"
        | "bicycle_shops"
        | "billiard_pool_establishments"
        | "boat_dealers"
        | "boat_rentals_and_leases"
        | "book_stores"
        | "books_periodicals_and_newspapers"
        | "bowling_alleys"
        | "bus_lines"
        | "business_secretarial_schools"
        | "buying_shopping_services"
        | "cable_satellite_and_other_pay_television_and_radio"
        | "camera_and_photographic_supply_stores"
        | "candy_nut_and_confectionery_stores"
        | "car_and_truck_dealers_new_used"
        | "car_and_truck_dealers_used_only"
        | "car_rental_agencies"
        | "car_washes"
        | "carpentry_services"
        | "carpet_upholstery_cleaning"
        | "caterers"
        | "charitable_and_social_service_organizations_fundraising"
        | "chemicals_and_allied_products"
        | "child_care_services"
        | "childrens_and_infants_wear_stores"
        | "chiropodists_podiatrists"
        | "chiropractors"
        | "cigar_stores_and_stands"
        | "civic_social_fraternal_associations"
        | "cleaning_and_maintenance"
        | "clothing_rental"
        | "colleges_universities"
        | "commercial_equipment"
        | "commercial_footwear"
        | "commercial_photography_art_and_graphics"
        | "commuter_transport_and_ferries"
        | "computer_network_services"
        | "computer_programming"
        | "computer_repair"
        | "computer_software_stores"
        | "computers_peripherals_and_software"
        | "concrete_work_services"
        | "construction_materials"
        | "consulting_public_relations"
        | "correspondence_schools"
        | "cosmetic_stores"
        | "counseling_services"
        | "country_clubs"
        | "courier_services"
        | "court_costs"
        | "credit_reporting_agencies"
        | "cruise_lines"
        | "dairy_products_stores"
        | "dance_hall_studios_schools"
        | "dating_escort_services"
        | "dentists_orthodontists"
        | "department_stores"
        | "detective_agencies"
        | "digital_goods_applications"
        | "digital_goods_games"
        | "digital_goods_large_volume"
        | "digital_goods_media"
        | "direct_marketing_catalog_merchant"
        | "direct_marketing_combination_catalog_and_retail_merchant"
        | "direct_marketing_inbound_telemarketing"
        | "direct_marketing_insurance_services"
        | "direct_marketing_other"
        | "direct_marketing_outbound_telemarketing"
        | "direct_marketing_subscription"
        | "direct_marketing_travel"
        | "discount_stores"
        | "doctors"
        | "door_to_door_sales"
        | "drapery_window_covering_and_upholstery_stores"
        | "drinking_places"
        | "drug_stores_and_pharmacies"
        | "drugs_drug_proprietaries_and_druggist_sundries"
        | "dry_cleaners"
        | "durable_goods"
        | "duty_free_stores"
        | "eating_places_restaurants"
        | "educational_services"
        | "electric_razor_stores"
        | "electrical_parts_and_equipment"
        | "electrical_services"
        | "electronics_repair_shops"
        | "electronics_stores"
        | "elementary_secondary_schools"
        | "employment_temp_agencies"
        | "equipment_rental"
        | "exterminating_services"
        | "family_clothing_stores"
        | "fast_food_restaurants"
        | "financial_institutions"
        | "fines_government_administrative_entities"
        | "fireplace_fireplace_screens_and_accessories_stores"
        | "floor_covering_stores"
        | "florists"
        | "florists_supplies_nursery_stock_and_flowers"
        | "freezer_and_locker_meat_provisioners"
        | "fuel_dealers_non_automotive"
        | "funeral_services_crematories"
        | "furniture_home_furnishings_and_equipment_stores_except_appliances"
        | "furniture_repair_refinishing"
        | "furriers_and_fur_shops"
        | "general_services"
        | "gift_card_novelty_and_souvenir_shops"
        | "glass_paint_and_wallpaper_stores"
        | "glassware_crystal_stores"
        | "golf_courses_public"
        | "government_services"
        | "grocery_stores_supermarkets"
        | "hardware_equipment_and_supplies"
        | "hardware_stores"
        | "health_and_beauty_spas"
        | "hearing_aids_sales_and_supplies"
        | "heating_plumbing_a_c"
        | "hobby_toy_and_game_shops"
        | "home_supply_warehouse_stores"
        | "hospitals"
        | "hotels_motels_and_resorts"
        | "household_appliance_stores"
        | "industrial_supplies"
        | "information_retrieval_services"
        | "insurance_default"
        | "insurance_underwriting_premiums"
        | "intra_company_purchases"
        | "jewelry_stores_watches_clocks_and_silverware_stores"
        | "landscaping_services"
        | "laundries"
        | "laundry_cleaning_services"
        | "legal_services_attorneys"
        | "luggage_and_leather_goods_stores"
        | "lumber_building_materials_stores"
        | "manual_cash_disburse"
        | "marinas_service_and_supplies"
        | "masonry_stonework_and_plaster"
        | "massage_parlors"
        | "medical_and_dental_labs"
        | "medical_dental_ophthalmic_and_hospital_equipment_and_supplies"
        | "medical_services"
        | "membership_organizations"
        | "mens_and_boys_clothing_and_accessories_stores"
        | "mens_womens_clothing_stores"
        | "metal_service_centers"
        | "miscellaneous"
        | "miscellaneous_apparel_and_accessory_shops"
        | "miscellaneous_auto_dealers"
        | "miscellaneous_business_services"
        | "miscellaneous_food_stores"
        | "miscellaneous_general_merchandise"
        | "miscellaneous_general_services"
        | "miscellaneous_home_furnishing_specialty_stores"
        | "miscellaneous_publishing_and_printing"
        | "miscellaneous_recreation_services"
        | "miscellaneous_repair_shops"
        | "miscellaneous_specialty_retail"
        | "mobile_home_dealers"
        | "motion_picture_theaters"
        | "motor_freight_carriers_and_trucking"
        | "motor_homes_dealers"
        | "motor_vehicle_supplies_and_new_parts"
        | "motorcycle_shops_and_dealers"
        | "motorcycle_shops_dealers"
        | "music_stores_musical_instruments_pianos_and_sheet_music"
        | "news_dealers_and_newsstands"
        | "non_fi_money_orders"
        | "non_fi_stored_value_card_purchase_load"
        | "nondurable_goods"
        | "nurseries_lawn_and_garden_supply_stores"
        | "nursing_personal_care"
        | "office_and_commercial_furniture"
        | "opticians_eyeglasses"
        | "optometrists_ophthalmologist"
        | "orthopedic_goods_prosthetic_devices"
        | "osteopaths"
        | "package_stores_beer_wine_and_liquor"
        | "paints_varnishes_and_supplies"
        | "parking_lots_garages"
        | "passenger_railways"
        | "pawn_shops"
        | "pet_shops_pet_food_and_supplies"
        | "petroleum_and_petroleum_products"
        | "photo_developing"
        | "photographic_photocopy_microfilm_equipment_and_supplies"
        | "photographic_studios"
        | "picture_video_production"
        | "piece_goods_notions_and_other_dry_goods"
        | "plumbing_heating_equipment_and_supplies"
        | "political_organizations"
        | "postal_services_government_only"
        | "precious_stones_and_metals_watches_and_jewelry"
        | "professional_services"
        | "public_warehousing_and_storage"
        | "quick_copy_repro_and_blueprint"
        | "railroads"
        | "real_estate_agents_and_managers_rentals"
        | "record_stores"
        | "recreational_vehicle_rentals"
        | "religious_goods_stores"
        | "religious_organizations"
        | "roofing_siding_sheet_metal"
        | "secretarial_support_services"
        | "security_brokers_dealers"
        | "service_stations"
        | "sewing_needlework_fabric_and_piece_goods_stores"
        | "shoe_repair_hat_cleaning"
        | "shoe_stores"
        | "small_appliance_repair"
        | "snowmobile_dealers"
        | "special_trade_services"
        | "specialty_cleaning"
        | "sporting_goods_stores"
        | "sporting_recreation_camps"
        | "sports_and_riding_apparel_stores"
        | "sports_clubs_fields"
        | "stamp_and_coin_stores"
        | "stationary_office_supplies_printing_and_writing_paper"
        | "stationery_stores_office_and_school_supply_stores"
        | "swimming_pools_sales"
        | "t_ui_travel_germany"
        | "tailors_alterations"
        | "tax_payments_government_agencies"
        | "tax_preparation_services"
        | "taxicabs_limousines"
        | "telecommunication_equipment_and_telephone_sales"
        | "telecommunication_services"
        | "telegraph_services"
        | "tent_and_awning_shops"
        | "testing_laboratories"
        | "theatrical_ticket_agencies"
        | "timeshares"
        | "tire_retreading_and_repair"
        | "tolls_bridge_fees"
        | "tourist_attractions_and_exhibits"
        | "towing_services"
        | "trailer_parks_campgrounds"
        | "transportation_services"
        | "travel_agencies_tour_operators"
        | "truck_stop_iteration"
        | "truck_utility_trailer_rentals"
        | "typesetting_plate_making_and_related_services"
        | "typewriter_stores"
        | "u_s_federal_government_agencies_or_departments"
        | "uniforms_commercial_clothing"
        | "used_merchandise_and_secondhand_stores"
        | "utilities"
        | "variety_stores"
        | "veterinary_services"
        | "video_amusement_game_supplies"
        | "video_game_arcades"
        | "video_tape_rental_stores"
        | "vocational_trade_schools"
        | "watch_jewelry_repair"
        | "welding_repair"
        | "wholesale_clubs"
        | "wig_and_toupee_stores"
        | "wires_money_orders"
        | "womens_accessory_and_specialty_shops"
        | "womens_ready_to_wear_stores"
        | "wrecking_and_salvage_yards"
      )[]
    | null;

  /** Interval (or event) to which the amount applies. */
  interval: "all_time" | "daily" | "monthly" | "per_authorization" | "weekly" | "yearly";
}

export interface IssuingCardholderVerification {
  /** An identifying document, either a passport or local ID card. */
  document?: IssuingCardholderIdDocument | null;
}

export interface IssuingDisputeCanceledEvidence {
  /** (ID of a [file upload](https://stripe.com/docs/guides/file-upload)) Additional documentation supporting the dispute. */
  additional_documentation?: string | File | null;

  /**
   * Date when order was canceled.
   * @format unix-time
   */
  canceled_at?: number | null;

  /** Whether the cardholder was provided with a cancellation policy. */
  cancellation_policy_provided?: boolean | null;

  /** Reason for canceling the order. */
  cancellation_reason?: string | null;

  /**
   * Date when the cardholder expected to receive the product.
   * @format unix-time
   */
  expected_at?: number | null;

  /** Explanation of why the cardholder is disputing this transaction. */
  explanation?: string | null;

  /** Description of the merchandise or service that was purchased. */
  product_description?: string | null;

  /** Whether the product was a merchandise or service. */
  product_type?: "merchandise" | "service" | null;

  /** Result of cardholder's attempt to return the product. */
  return_status?: "merchant_rejected" | "successful" | null;

  /**
   * Date when the product was returned or attempted to be returned.
   * @format unix-time
   */
  returned_at?: number | null;
}

export interface IssuingDisputeDuplicateEvidence {
  /** (ID of a [file upload](https://stripe.com/docs/guides/file-upload)) Additional documentation supporting the dispute. */
  additional_documentation?: string | File | null;

  /** (ID of a [file upload](https://stripe.com/docs/guides/file-upload)) Copy of the card statement showing that the product had already been paid for. */
  card_statement?: string | File | null;

  /** (ID of a [file upload](https://stripe.com/docs/guides/file-upload)) Copy of the receipt showing that the product had been paid for in cash. */
  cash_receipt?: string | File | null;

  /** (ID of a [file upload](https://stripe.com/docs/guides/file-upload)) Image of the front and back of the check that was used to pay for the product. */
  check_image?: string | File | null;

  /** Explanation of why the cardholder is disputing this transaction. */
  explanation?: string | null;

  /** Transaction (e.g., ipi_...) that the disputed transaction is a duplicate of. Of the two or more transactions that are copies of each other, this is original undisputed one. */
  original_transaction?: string | null;
}

export interface IssuingDisputeEvidence {
  canceled?: IssuingDisputeCanceledEvidence;
  duplicate?: IssuingDisputeDuplicateEvidence;
  fraudulent?: IssuingDisputeFraudulentEvidence;
  merchandise_not_as_described?: IssuingDisputeMerchandiseNotAsDescribedEvidence;
  not_received?: IssuingDisputeNotReceivedEvidence;
  other?: IssuingDisputeOtherEvidence;

  /** The reason for filing the dispute. Its value will match the field containing the evidence. */
  reason:
    | "canceled"
    | "duplicate"
    | "fraudulent"
    | "merchandise_not_as_described"
    | "not_received"
    | "other"
    | "service_not_as_described";
  service_not_as_described?: IssuingDisputeServiceNotAsDescribedEvidence;
}

export interface IssuingDisputeFraudulentEvidence {
  /** (ID of a [file upload](https://stripe.com/docs/guides/file-upload)) Additional documentation supporting the dispute. */
  additional_documentation?: string | File | null;

  /** Explanation of why the cardholder is disputing this transaction. */
  explanation?: string | null;
}

export interface IssuingDisputeMerchandiseNotAsDescribedEvidence {
  /** (ID of a [file upload](https://stripe.com/docs/guides/file-upload)) Additional documentation supporting the dispute. */
  additional_documentation?: string | File | null;

  /** Explanation of why the cardholder is disputing this transaction. */
  explanation?: string | null;

  /**
   * Date when the product was received.
   * @format unix-time
   */
  received_at?: number | null;

  /** Description of the cardholder's attempt to return the product. */
  return_description?: string | null;

  /** Result of cardholder's attempt to return the product. */
  return_status?: "merchant_rejected" | "successful" | null;

  /**
   * Date when the product was returned or attempted to be returned.
   * @format unix-time
   */
  returned_at?: number | null;
}

export interface IssuingDisputeNotReceivedEvidence {
  /** (ID of a [file upload](https://stripe.com/docs/guides/file-upload)) Additional documentation supporting the dispute. */
  additional_documentation?: string | File | null;

  /**
   * Date when the cardholder expected to receive the product.
   * @format unix-time
   */
  expected_at?: number | null;

  /** Explanation of why the cardholder is disputing this transaction. */
  explanation?: string | null;

  /** Description of the merchandise or service that was purchased. */
  product_description?: string | null;

  /** Whether the product was a merchandise or service. */
  product_type?: "merchandise" | "service" | null;
}

export interface IssuingDisputeOtherEvidence {
  /** (ID of a [file upload](https://stripe.com/docs/guides/file-upload)) Additional documentation supporting the dispute. */
  additional_documentation?: string | File | null;

  /** Explanation of why the cardholder is disputing this transaction. */
  explanation?: string | null;

  /** Description of the merchandise or service that was purchased. */
  product_description?: string | null;

  /** Whether the product was a merchandise or service. */
  product_type?: "merchandise" | "service" | null;
}

export interface IssuingDisputeServiceNotAsDescribedEvidence {
  /** (ID of a [file upload](https://stripe.com/docs/guides/file-upload)) Additional documentation supporting the dispute. */
  additional_documentation?: string | File | null;

  /**
   * Date when order was canceled.
   * @format unix-time
   */
  canceled_at?: number | null;

  /** Reason for canceling the order. */
  cancellation_reason?: string | null;

  /** Explanation of why the cardholder is disputing this transaction. */
  explanation?: string | null;

  /**
   * Date when the product was received.
   * @format unix-time
   */
  received_at?: number | null;
}

export interface IssuingTransactionAmountDetails {
  /** The fee charged by the ATM for the cash withdrawal. */
  atm_fee?: number | null;
}

export interface IssuingTransactionFlightData {
  /** The time that the flight departed. */
  departure_at?: number | null;

  /** The name of the passenger. */
  passenger_name?: string | null;

  /** Whether the ticket is refundable. */
  refundable?: boolean | null;

  /** The legs of the trip. */
  segments?: IssuingTransactionFlightDataLeg[] | null;

  /** The travel agency that issued the ticket. */
  travel_agency?: string | null;
}

export interface IssuingTransactionFlightDataLeg {
  /** The three-letter IATA airport code of the flight's destination. */
  arrival_airport_code?: string | null;

  /** The airline carrier code. */
  carrier?: string | null;

  /** The three-letter IATA airport code that the flight departed from. */
  departure_airport_code?: string | null;

  /** The flight number. */
  flight_number?: string | null;

  /** The flight's service class. */
  service_class?: string | null;

  /** Whether a stopover is allowed on this flight. */
  stopover_allowed?: boolean | null;
}

export interface IssuingTransactionFuelData {
  /** The type of fuel that was purchased. One of `diesel`, `unleaded_plus`, `unleaded_regular`, `unleaded_super`, or `other`. */
  type: string;

  /** The units for `volume_decimal`. One of `us_gallon` or `liter`. */
  unit: string;

  /**
   * The cost in cents per each unit of fuel, represented as a decimal string with at most 12 decimal places.
   * @format decimal
   */
  unit_cost_decimal: string;

  /**
   * The volume of the fuel that was pumped, represented as a decimal string with at most 12 decimal places.
   * @format decimal
   */
  volume_decimal?: string | null;
}

export interface IssuingTransactionLodgingData {
  /** The time of checking into the lodging. */
  check_in_at?: number | null;

  /** The number of nights stayed at the lodging. */
  nights?: number | null;
}

export interface IssuingTransactionPurchaseDetails {
  /** Information about the flight that was purchased with this transaction. */
  flight?: IssuingTransactionFlightData | null;

  /** Information about fuel that was purchased with this transaction. */
  fuel?: IssuingTransactionFuelData | null;

  /** Information about lodging that was purchased with this transaction. */
  lodging?: IssuingTransactionLodgingData | null;

  /** The line items in the purchase. */
  receipt?: IssuingTransactionReceiptData[] | null;

  /** A merchant-specific order number. */
  reference?: string | null;
}

export interface IssuingTransactionReceiptData {
  /** The description of the item. The maximum length of this field is 26 characters. */
  description?: string | null;

  /** The quantity of the item. */
  quantity?: number | null;

  /** The total for this line item in cents. */
  total?: number | null;

  /** The unit cost of the item in cents. */
  unit_cost?: number | null;
}

/**
 * A line item.
 */
export interface Item {
  /** Total before any discounts or taxes are applied. */
  amount_subtotal: number;

  /** Total after discounts and taxes. */
  amount_total: number;

  /** Three-letter [ISO currency code](https://www.iso.org/iso-4217-currency-codes.html), in lowercase. Must be a [supported currency](https://stripe.com/docs/currencies). */
  currency: string;

  /** An arbitrary string attached to the object. Often useful for displaying to users. Defaults to product name. */
  description: string;

  /** The discounts applied to the line item. */
  discounts?: LineItemsDiscountAmount[];

  /** Unique identifier for the object. */
  id: string;

  /** String representing the object's type. Objects of the same type share the same value. */
  object: "item";

  /** The price used to generate the line item. */
  price?: Price | null;

  /** The quantity of products being purchased. */
  quantity?: number | null;

  /** The taxes applied to the line item. */
  taxes?: LineItemsTaxAmount[];
}

export interface LegalEntityCompany {
  address?: Address;

  /** The Kana variation of the company's primary address (Japan only). */
  address_kana?: LegalEntityJapanAddress | null;

  /** The Kanji variation of the company's primary address (Japan only). */
  address_kanji?: LegalEntityJapanAddress | null;

  /** Whether the company's directors have been provided. This Boolean will be `true` if you've manually indicated that all directors are provided via [the `directors_provided` parameter](https://stripe.com/docs/api/accounts/update#update_account-company-directors_provided). */
  directors_provided?: boolean;

  /** Whether the company's executives have been provided. This Boolean will be `true` if you've manually indicated that all executives are provided via [the `executives_provided` parameter](https://stripe.com/docs/api/accounts/update#update_account-company-executives_provided), or if Stripe determined that sufficient executives were provided. */
  executives_provided?: boolean;

  /** The company's legal name. */
  name?: string | null;

  /** The Kana variation of the company's legal name (Japan only). */
  name_kana?: string | null;

  /** The Kanji variation of the company's legal name (Japan only). */
  name_kanji?: string | null;

  /** Whether the company's owners have been provided. This Boolean will be `true` if you've manually indicated that all owners are provided via [the `owners_provided` parameter](https://stripe.com/docs/api/accounts/update#update_account-company-owners_provided), or if Stripe determined that sufficient owners were provided. Stripe determines ownership requirements using both the number of owners provided and their total percent ownership (calculated by adding the `percent_ownership` of each owner together). */
  owners_provided?: boolean;

  /** This hash is used to attest that the beneficial owner information provided to Stripe is both current and correct. */
  ownership_declaration?: LegalEntityUboDeclaration | null;

  /** The company's phone number (used for verification). */
  phone?: string | null;

  /** The category identifying the legal structure of the company or legal entity. See [Business structure](https://stripe.com/docs/connect/identity-verification#business-structure) for more details. */
  structure?:
    | "free_zone_establishment"
    | "free_zone_llc"
    | "government_instrumentality"
    | "governmental_unit"
    | "incorporated_non_profit"
    | "limited_liability_partnership"
    | "llc"
    | "multi_member_llc"
    | "private_company"
    | "private_corporation"
    | "private_partnership"
    | "public_company"
    | "public_corporation"
    | "public_partnership"
    | "single_member_llc"
    | "sole_establishment"
    | "sole_proprietorship"
    | "tax_exempt_government_instrumentality"
    | "unincorporated_association"
    | "unincorporated_non_profit";

  /** Whether the company's business ID number was provided. */
  tax_id_provided?: boolean;

  /** The jurisdiction in which the `tax_id` is registered (Germany-based companies only). */
  tax_id_registrar?: string;

  /** Whether the company's business VAT number was provided. */
  vat_id_provided?: boolean;

  /** Information on the verification state of the company. */
  verification?: LegalEntityCompanyVerification | null;
}

export interface LegalEntityCompanyVerification {
  document: LegalEntityCompanyVerificationDocument;
}

export interface LegalEntityCompanyVerificationDocument {
  /** The back of a document returned by a [file upload](https://stripe.com/docs/api#create_file) with a `purpose` value of `additional_verification`. */
  back?: string | File | null;

  /** A user-displayable string describing the verification state of this document. */
  details?: string | null;

  /** One of `document_corrupt`, `document_expired`, `document_failed_copy`, `document_failed_greyscale`, `document_failed_other`, `document_failed_test_mode`, `document_fraudulent`, `document_incomplete`, `document_invalid`, `document_manipulated`, `document_not_readable`, `document_not_uploaded`, `document_type_not_supported`, or `document_too_large`. A machine-readable code specifying the verification state for this document. */
  details_code?: string | null;

  /** The front of a document returned by a [file upload](https://stripe.com/docs/api#create_file) with a `purpose` value of `additional_verification`. */
  front?: string | File | null;
}

export interface LegalEntityDob {
  /** The day of birth, between 1 and 31. */
  day?: number | null;

  /** The month of birth, between 1 and 12. */
  month?: number | null;

  /** The four-digit year of birth. */
  year?: number | null;
}

export interface LegalEntityJapanAddress {
  /** City/Ward. */
  city?: string | null;

  /** Two-letter country code ([ISO 3166-1 alpha-2](https://en.wikipedia.org/wiki/ISO_3166-1_alpha-2)). */
  country?: string | null;

  /** Block/Building number. */
  line1?: string | null;

  /** Building details. */
  line2?: string | null;

  /** ZIP or postal code. */
  postal_code?: string | null;

  /** Prefecture. */
  state?: string | null;

  /** Town/cho-me. */
  town?: string | null;
}

export interface LegalEntityPersonVerification {
  /** A document showing address, either a passport, local ID card, or utility bill from a well-known utility company. */
  additional_document?: LegalEntityPersonVerificationDocument | null;

  /** A user-displayable string describing the verification state for the person. For example, this may say "Provided identity information could not be verified". */
  details?: string | null;

  /** One of `document_address_mismatch`, `document_dob_mismatch`, `document_duplicate_type`, `document_id_number_mismatch`, `document_name_mismatch`, `document_nationality_mismatch`, `failed_keyed_identity`, or `failed_other`. A machine-readable code specifying the verification state for the person. */
  details_code?: string | null;
  document?: LegalEntityPersonVerificationDocument;

  /** The state of verification for the person. Possible values are `unverified`, `pending`, or `verified`. */
  status: string;
}

export interface LegalEntityPersonVerificationDocument {
  /** The back of an ID returned by a [file upload](https://stripe.com/docs/api#create_file) with a `purpose` value of `identity_document`. */
  back?: string | File | null;

  /** A user-displayable string describing the verification state of this document. For example, if a document is uploaded and the picture is too fuzzy, this may say "Identity document is too unclear to read". */
  details?: string | null;

  /** One of `document_corrupt`, `document_country_not_supported`, `document_expired`, `document_failed_copy`, `document_failed_other`, `document_failed_test_mode`, `document_fraudulent`, `document_failed_greyscale`, `document_incomplete`, `document_invalid`, `document_manipulated`, `document_missing_back`, `document_missing_front`, `document_not_readable`, `document_not_uploaded`, `document_photo_mismatch`, `document_too_large`, or `document_type_not_supported`. A machine-readable code specifying the verification state for this document. */
  details_code?: string | null;

  /** The front of an ID returned by a [file upload](https://stripe.com/docs/api#create_file) with a `purpose` value of `identity_document`. */
  front?: string | File | null;
}

export interface LegalEntityUboDeclaration {
  /**
   * The Unix timestamp marking when the beneficial owner attestation was made.
   * @format unix-time
   */
  date?: number | null;

  /** The IP address from which the beneficial owner attestation was made. */
  ip?: string | null;

  /** The user-agent string from the browser where the beneficial owner attestation was made. */
  user_agent?: string | null;
}

export interface LineItem {
  /** The amount, in %s. */
  amount: number;

  /** Three-letter [ISO currency code](https://www.iso.org/iso-4217-currency-codes.html), in lowercase. Must be a [supported currency](https://stripe.com/docs/currencies). */
  currency: string;

  /** An arbitrary string attached to the object. Often useful for displaying to users. */
  description?: string | null;

  /** The amount of discount calculated per discount for this line item. */
  discount_amounts?: DiscountsResourceDiscountAmount[] | null;

  /** If true, discounts will apply to this line item. Always false for prorations. */
  discountable: boolean;

  /** The discounts applied to the invoice line item. Line item discounts are applied before invoice discounts. Use `expand[]=discounts` to expand each discount. */
  discounts?: (string | Discount)[] | null;

  /** Unique identifier for the object. */
  id: string;

  /** The ID of the [invoice item](https://stripe.com/docs/api/invoiceitems) associated with this line item if any. */
  invoice_item?: string;

  /** Has the value `true` if the object exists in live mode or the value `false` if the object exists in test mode. */
  livemode: boolean;

  /** Set of [key-value pairs](https://stripe.com/docs/api/metadata) that you can attach to an object. This can be useful for storing additional information about the object in a structured format. Note that for line items with `type=subscription` this will reflect the metadata of the subscription that caused the line item to be created. */
  metadata: Record<string, string>;

  /** String representing the object's type. Objects of the same type share the same value. */
  object: "line_item";
  period: InvoiceLineItemPeriod;

  /** The price of the line item. */
  price?: Price | null;

  /** Whether this is a proration. */
  proration: boolean;

  /** The quantity of the subscription, if the line item is a subscription or a proration. */
  quantity?: number | null;

  /** The subscription that the invoice item pertains to, if any. */
  subscription?: string | null;

  /** The subscription item that generated this invoice item. Left empty if the line item is not an explicit result of a subscription. */
  subscription_item?: string;

  /** The amount of tax calculated per tax rate for this line item */
  tax_amounts?: InvoiceTaxAmount[];

  /** The tax rates which apply to the line item. */
  tax_rates?: TaxRate[];

  /** A string identifying the type of the source of this line item, either an `invoiceitem` or a `subscription`. */
  type: "invoiceitem" | "subscription";
}

export interface LineItemsDiscountAmount {
  /** The amount discounted. */
  amount: number;

  /**
   * A discount represents the actual application of a coupon to a particular
   * customer. It contains information about when the discount began and when it
   * will end.
   *
   * Related guide: [Applying Discounts to Subscriptions](https://stripe.com/docs/billing/subscriptions/discounts).
   */
  discount: Discount;
}

export interface LineItemsTaxAmount {
  /** Amount of tax applied for this rate. */
  amount: number;

  /**
   * Tax rates can be applied to [invoices](https://stripe.com/docs/billing/invoices/tax-rates), [subscriptions](https://stripe.com/docs/billing/subscriptions/taxes) and [Checkout Sessions](https://stripe.com/docs/payments/checkout/set-up-a-subscription#tax-rates) to collect tax.
   *
   * Related guide: [Tax Rates](https://stripe.com/docs/billing/taxes/tax-rates).
   */
  rate: TaxRate;
}

export interface LoginLink {
  /**
   * Time at which the object was created. Measured in seconds since the Unix epoch.
   * @format unix-time
   */
  created: number;

  /** String representing the object's type. Objects of the same type share the same value. */
  object: "login_link";

  /** The URL for the login link. */
  url: string;
}

/**
 * A Mandate is a record of the permission a customer has given you to debit their payment method.
 */
export interface Mandate {
  customer_acceptance: CustomerAcceptance;

  /** Unique identifier for the object. */
  id: string;

  /** Has the value `true` if the object exists in live mode or the value `false` if the object exists in test mode. */
  livemode: boolean;
  multi_use?: MandateMultiUse;

  /** String representing the object's type. Objects of the same type share the same value. */
  object: "mandate";

  /** ID of the payment method associated with this mandate. */
  payment_method: string | PaymentMethod;
  payment_method_details: MandatePaymentMethodDetails;
  single_use?: MandateSingleUse;

  /** The status of the mandate, which indicates whether it can be used to initiate a payment. */
  status: "active" | "inactive" | "pending";

  /** The type of the mandate. */
  type: "multi_use" | "single_use";
}

export interface MandateAcssDebit {
  /** List of Stripe products where this mandate can be selected automatically. */
  default_for?: ("invoice" | "subscription")[];

  /** Description of the interval. Only required if the 'payment_schedule' parameter is 'interval' or 'combined'. */
  interval_description?: string | null;

  /** Payment schedule for the mandate. */
  payment_schedule: "combined" | "interval" | "sporadic";

  /** Transaction type of the mandate. */
  transaction_type: "business" | "personal";
}

export interface MandateAuBecsDebit {
  /** The URL of the mandate. This URL generally contains sensitive information about the customer and should be shared with them exclusively. */
  url: string;
}

export interface MandateBacsDebit {
  /** The status of the mandate on the Bacs network. Can be one of `pending`, `revoked`, `refused`, or `accepted`. */
  network_status: "accepted" | "pending" | "refused" | "revoked";

  /** The unique reference identifying the mandate on the Bacs network. */
  reference: string;

  /** The URL that will contain the mandate that the customer has signed. */
  url: string;
}

export type MandateMultiUse = object;

export interface MandatePaymentMethodDetails {
  acss_debit?: MandateAcssDebit;
  au_becs_debit?: MandateAuBecsDebit;
  bacs_debit?: MandateBacsDebit;
  card?: CardMandatePaymentMethodDetails;
  sepa_debit?: MandateSepaDebit;

  /** The type of the payment method associated with this mandate. An additional hash is included on `payment_method_details` with a name matching this value. It contains mandate information specific to the payment method. */
  type: string;
}

export interface MandateSepaDebit {
  /** The unique reference of the mandate. */
  reference: string;

  /** The URL of the mandate. This URL generally contains sensitive information about the customer and should be shared with them exclusively. */
  url: string;
}

export interface MandateSingleUse {
  /** On a single use mandate, the amount of the payment. */
  amount: number;

  /** On a single use mandate, the currency of the payment. */
  currency: string;
}

export interface Networks {
  /** All available networks for the card. */
  available: string[];

  /** The preferred network for the card. */
  preferred?: string | null;
}

export interface NotificationEventData {
  /** Object containing the API resource relevant to the event. For example, an `invoice.created` event will have a full [invoice object](https://stripe.com/docs/api#invoice_object) as the value of the object key. */
  object: object;

  /** Object containing the names of the attributes that have changed, and their previous values (sent along only with *.updated events). */
  previous_attributes?: object;
}

export interface NotificationEventRequest {
  /** ID of the API request that caused the event. If null, the event was automatic (e.g., Stripe's automatic subscription handling). Request logs are available in the [dashboard](https://dashboard.stripe.com/logs), but currently not in the API. */
  id?: string | null;

  /** The idempotency key transmitted during the request, if any. *Note: This property is populated only for events on or after May 23, 2017*. */
  idempotency_key?: string | null;
}

export type OfflineAcceptance = object;

export interface OnlineAcceptance {
  /** The IP address from which the Mandate was accepted by the customer. */
  ip_address?: string | null;

  /** The user agent of the browser from which the Mandate was accepted by the customer. */
  user_agent?: string | null;
}

/**
* Order objects are created to handle end customers' purchases of previously
defined [products](https://stripe.com/docs/api#products). You can create, retrieve, and pay individual orders, as well
as list all orders. Orders are identified by a unique, random ID.

Related guide: [Tax, Shipping, and Inventory](https://stripe.com/docs/orders).
*/
export interface Order {
  /** A positive integer in the smallest currency unit (that is, 100 cents for $1.00, or 1 for ¥1, Japanese Yen being a zero-decimal currency) representing the total amount for the order. */
  amount: number;

  /** The total amount that was returned to the customer. */
  amount_returned?: number | null;

  /** ID of the Connect Application that created the order. */
  application?: string | null;

  /** A fee in cents that will be applied to the order and transferred to the application owner’s Stripe account. The request must be made with an OAuth key or the Stripe-Account header in order to take an application fee. For more information, see the application fees documentation. */
  application_fee?: number | null;

  /** The ID of the payment used to pay for the order. Present if the order status is `paid`, `fulfilled`, or `refunded`. */
  charge?: string | Charge | null;

  /**
   * Time at which the object was created. Measured in seconds since the Unix epoch.
   * @format unix-time
   */
  created: number;

  /** Three-letter [ISO currency code](https://www.iso.org/iso-4217-currency-codes.html), in lowercase. Must be a [supported currency](https://stripe.com/docs/currencies). */
  currency: string;

  /** The customer used for the order. */
  customer?: string | Customer | DeletedCustomer | (Customer & DeletedCustomer) | null;

  /** The email address of the customer placing the order. */
  email?: string | null;

  /** External coupon code to load for this order. */
  external_coupon_code?: string;

  /** Unique identifier for the object. */
  id: string;

  /** List of items constituting the order. An order can have up to 25 items. */
  items: OrderItem[];

  /** Has the value `true` if the object exists in live mode or the value `false` if the object exists in test mode. */
  livemode: boolean;

  /** Set of [key-value pairs](https://stripe.com/docs/api/metadata) that you can attach to an object. This can be useful for storing additional information about the object in a structured format. */
  metadata?: Record<string, string>;

  /** String representing the object's type. Objects of the same type share the same value. */
  object: "order";

  /**
   * OrdersResourceOrderReturnList
   * A list of returns that have taken place for this order.
   */
  returns?: { data: OrderReturn[]; has_more: boolean; object: "list"; url: string };

  /** The shipping method that is currently selected for this order, if any. If present, it is equal to one of the `id`s of shipping methods in the `shipping_methods` array. At order creation time, if there are multiple shipping methods, Stripe will automatically selected the first method. */
  selected_shipping_method?: string | null;

  /** The shipping address for the order. Present if the order is for goods to be shipped. */
  shipping?: Shipping | null;

  /** A list of supported shipping methods for this order. The desired shipping method can be specified either by updating the order, or when paying it. */
  shipping_methods?: ShippingMethod[] | null;

  /** Current order status. One of `created`, `paid`, `canceled`, `fulfilled`, or `returned`. More details in the [Orders Guide](https://stripe.com/docs/orders/guide#understanding-order-statuses). */
  status: string;

  /** The timestamps at which the order status was updated. */
  status_transitions?: StatusTransitions | null;

  /**
   * Time at which the object was last updated. Measured in seconds since the Unix epoch.
   * @format unix-time
   */
  updated?: number | null;

  /** The user's order ID if it is different from the Stripe order ID. */
  upstream_id?: string;
}

/**
* A representation of the constituent items of any given order. Can be used to
represent [SKUs](https://stripe.com/docs/api#skus), shipping costs, or taxes owed on the order.

Related guide: [Orders](https://stripe.com/docs/orders/guide).
*/
export interface OrderItem {
  /** A positive integer in the smallest currency unit (that is, 100 cents for $1.00, or 1 for ¥1, Japanese Yen being a zero-decimal currency) representing the total amount for the line item. */
  amount: number;

  /** Three-letter [ISO currency code](https://www.iso.org/iso-4217-currency-codes.html), in lowercase. Must be a [supported currency](https://stripe.com/docs/currencies). */
  currency: string;

  /** Description of the line item, meant to be displayable to the user (e.g., `"Express shipping"`). */
  description: string;

  /** String representing the object's type. Objects of the same type share the same value. */
  object: "order_item";

  /** The ID of the associated object for this line item. Expandable if not null (e.g., expandable to a SKU). */
  parent?: string | Sku | null;

  /** A positive integer representing the number of instances of `parent` that are included in this order item. Applicable/present only if `type` is `sku`. */
  quantity?: number | null;

  /** The type of line item. One of `sku`, `tax`, `shipping`, or `discount`. */
  type: string;
}

/**
* A return represents the full or partial return of a number of [order items](https://stripe.com/docs/api#order_items).
Returns always belong to an order, and may optionally contain a refund.

Related guide: [Handling Returns](https://stripe.com/docs/orders/guide#handling-returns).
*/
export interface OrderReturn {
  /** A positive integer in the smallest currency unit (that is, 100 cents for $1.00, or 1 for ¥1, Japanese Yen being a zero-decimal currency) representing the total amount for the returned line item. */
  amount: number;

  /**
   * Time at which the object was created. Measured in seconds since the Unix epoch.
   * @format unix-time
   */
  created: number;

  /** Three-letter [ISO currency code](https://www.iso.org/iso-4217-currency-codes.html), in lowercase. Must be a [supported currency](https://stripe.com/docs/currencies). */
  currency: string;

  /** Unique identifier for the object. */
  id: string;

  /** The items included in this order return. */
  items: OrderItem[];

  /** Has the value `true` if the object exists in live mode or the value `false` if the object exists in test mode. */
  livemode: boolean;

  /** String representing the object's type. Objects of the same type share the same value. */
  object: "order_return";

  /** The order that this return includes items from. */
  order?: string | Order | null;

  /** The ID of the refund issued for this return. */
  refund?: string | Refund | null;
}

export interface PackageDimensions {
  /** Height, in inches. */
  height: number;

  /** Length, in inches. */
  length: number;

  /** Weight, in ounces. */
  weight: number;

  /** Width, in inches. */
  width: number;
}

export interface PaymentFlowsAutomaticPaymentMethodsPaymentIntent {
  /** Automatically calculates compatible payment methods */
  enabled: boolean;
}

export type PaymentFlowsPrivatePaymentMethodsAlipay = object;

export interface PaymentFlowsPrivatePaymentMethodsAlipayDetails {
  /** Uniquely identifies this particular Alipay account. You can use this attribute to check whether two Alipay accounts are the same. */
  buyer_id?: string;

  /** Uniquely identifies this particular Alipay account. You can use this attribute to check whether two Alipay accounts are the same. */
  fingerprint?: string | null;

  /** Transaction ID of this particular Alipay transaction. */
  transaction_id?: string | null;
}

export interface PaymentFlowsPrivatePaymentMethodsKlarnaDob {
  /** The day of birth, between 1 and 31. */
  day?: number | null;

  /** The month of birth, between 1 and 12. */
  month?: number | null;

  /** The four-digit year of birth. */
  year?: number | null;
}

/**
* A PaymentIntent guides you through the process of collecting a payment from your customer.
We recommend that you create exactly one PaymentIntent for each order or
customer session in your system. You can reference the PaymentIntent later to
see the history of payment attempts for a particular session.

A PaymentIntent transitions through
[multiple statuses](https://stripe.com/docs/payments/intents#intent-statuses)
throughout its lifetime as it interfaces with Stripe.js to perform
authentication flows and ultimately creates at most one successful charge.

Related guide: [Payment Intents API](https://stripe.com/docs/payments/payment-intents).
*/
export interface PaymentIntent {
  /** Amount intended to be collected by this PaymentIntent. A positive integer representing how much to charge in the [smallest currency unit](https://stripe.com/docs/currencies#zero-decimal) (e.g., 100 cents to charge $1.00 or 100 to charge ¥100, a zero-decimal currency). The minimum amount is $0.50 US or [equivalent in charge currency](https://stripe.com/docs/currencies#minimum-and-maximum-charge-amounts). The amount value supports up to eight digits (e.g., a value of 99999999 for a USD charge of $999,999.99). */
  amount: number;

  /** Amount that can be captured from this PaymentIntent. */
  amount_capturable?: number;

  /** Amount that was collected by this PaymentIntent. */
  amount_received?: number;

  /** ID of the Connect application that created the PaymentIntent. */
  application?: string | Application | null;

  /** The amount of the application fee (if any) that will be requested to be applied to the payment and transferred to the application owner's Stripe account. The amount of the application fee collected will be capped at the total payment amount. For more information, see the PaymentIntents [use case for connected accounts](https://stripe.com/docs/payments/connected-accounts). */
  application_fee_amount?: number | null;

  /** Settings to configure compatible payment methods from the [Stripe Dashboard](https://dashboard.stripe.com/settings/payment_methods) */
  automatic_payment_methods?: PaymentFlowsAutomaticPaymentMethodsPaymentIntent | null;

  /**
   * Populated when `status` is `canceled`, this is the time at which the PaymentIntent was canceled. Measured in seconds since the Unix epoch.
   * @format unix-time
   */
  canceled_at?: number | null;

  /** Reason for cancellation of this PaymentIntent, either user-provided (`duplicate`, `fraudulent`, `requested_by_customer`, or `abandoned`) or generated by Stripe internally (`failed_invoice`, `void_invoice`, or `automatic`). */
  cancellation_reason?:
    | "abandoned"
    | "automatic"
    | "duplicate"
    | "failed_invoice"
    | "fraudulent"
    | "requested_by_customer"
    | "void_invoice"
    | null;

  /** Controls when the funds will be captured from the customer's account. */
  capture_method: "automatic" | "manual";

  /**
   * PaymentFlowsPaymentIntentResourceChargeList
   * Charges that were created by this PaymentIntent, if any.
   */
  charges?: { data: Charge[]; has_more: boolean; object: "list"; url: string };

  /**
   * The client secret of this PaymentIntent. Used for client-side retrieval using a publishable key.
   *
   * The client secret can be used to complete a payment from your frontend. It should not be stored, logged, embedded in URLs, or exposed to anyone other than the customer. Make sure that you have TLS enabled on any page that includes the client secret.
   * Refer to our docs to [accept a payment](https://stripe.com/docs/payments/accept-a-payment?integration=elements) and learn about how `client_secret` should be handled.
   */
  client_secret?: string | null;
  confirmation_method: "automatic" | "manual";

  /**
   * Time at which the object was created. Measured in seconds since the Unix epoch.
   * @format unix-time
   */
  created: number;

  /** Three-letter [ISO currency code](https://www.iso.org/iso-4217-currency-codes.html), in lowercase. Must be a [supported currency](https://stripe.com/docs/currencies). */
  currency: string;

  /**
   * ID of the Customer this PaymentIntent belongs to, if one exists.
   *
   * Payment methods attached to other Customers cannot be used with this PaymentIntent.
   * If present in combination with [setup_future_usage](https://stripe.com/docs/api#payment_intent_object-setup_future_usage), this PaymentIntent's payment method will be attached to the Customer after the PaymentIntent has been confirmed and any required actions from the user are complete.
   */
  customer?: string | Customer | DeletedCustomer | (Customer & DeletedCustomer) | null;

  /** An arbitrary string attached to the object. Often useful for displaying to users. */
  description?: string | null;

  /** Unique identifier for the object. */
  id: string;

  /** ID of the invoice that created this PaymentIntent, if it exists. */
  invoice?: string | Invoice | null;

  /** The payment error encountered in the previous PaymentIntent confirmation. It will be cleared if the PaymentIntent is later updated for any reason. */
  last_payment_error?: ApiErrors | null;

  /** Has the value `true` if the object exists in live mode or the value `false` if the object exists in test mode. */
  livemode: boolean;

  /** Set of [key-value pairs](https://stripe.com/docs/api/metadata) that you can attach to an object. This can be useful for storing additional information about the object in a structured format. For more information, see the [documentation](https://stripe.com/docs/payments/payment-intents/creating-payment-intents#storing-information-in-metadata). */
  metadata?: Record<string, string>;

  /** If present, this property tells you what actions you need to take in order for your customer to fulfill a payment using the provided source. */
  next_action?: PaymentIntentNextAction | null;

  /** String representing the object's type. Objects of the same type share the same value. */
  object: "payment_intent";

  /** The account (if any) for which the funds of the PaymentIntent are intended. See the PaymentIntents [use case for connected accounts](https://stripe.com/docs/payments/connected-accounts) for details. */
  on_behalf_of?: string | Account | null;

  /** ID of the payment method used in this PaymentIntent. */
  payment_method?: string | PaymentMethod | null;

  /** Payment-method-specific configuration for this PaymentIntent. */
  payment_method_options?: PaymentIntentPaymentMethodOptions | null;

  /** The list of payment method types (e.g. card) that this PaymentIntent is allowed to use. */
  payment_method_types: string[];

  /** If present, this property tells you about the processing state of the payment. */
  processing?: PaymentIntentProcessing | null;

  /** Email address that the receipt for the resulting payment will be sent to. If `receipt_email` is specified for a payment in live mode, a receipt will be sent regardless of your [email settings](https://dashboard.stripe.com/account/emails). */
  receipt_email?: string | null;

  /** ID of the review associated with this PaymentIntent, if any. */
  review?: string | Review | null;

  /**
   * Indicates that you intend to make future payments with this PaymentIntent's payment method.
   *
   * Providing this parameter will [attach the payment method](https://stripe.com/docs/payments/save-during-payment) to the PaymentIntent's Customer, if present, after the PaymentIntent is confirmed and any required actions from the user are complete. If no Customer was provided, the payment method can still be [attached](https://stripe.com/docs/api/payment_methods/attach) to a Customer after the transaction completes.
   * When processing card payments, Stripe also uses `setup_future_usage` to dynamically optimize your payment flow and comply with regional legislation and network rules, such as [SCA](https://stripe.com/docs/strong-customer-authentication).
   */
  setup_future_usage?: "off_session" | "on_session" | null;

  /** Shipping information for this PaymentIntent. */
  shipping?: Shipping | null;

  /** For non-card charges, you can use this value as the complete description that appears on your customers’ statements. Must contain at least one letter, maximum 22 characters. */
  statement_descriptor?: string | null;

  /** Provides information about a card payment that customers see on their statements. Concatenated with the prefix (shortened descriptor) or statement descriptor that’s set on the account to form the complete statement descriptor. Maximum 22 characters for the concatenated descriptor. */
  statement_descriptor_suffix?: string | null;

  /** Status of this PaymentIntent, one of `requires_payment_method`, `requires_confirmation`, `requires_action`, `processing`, `requires_capture`, `canceled`, or `succeeded`. Read more about each PaymentIntent [status](https://stripe.com/docs/payments/intents#intent-statuses). */
  status:
    | "canceled"
    | "processing"
    | "requires_action"
    | "requires_capture"
    | "requires_confirmation"
    | "requires_payment_method"
    | "succeeded";

  /** The data with which to automatically create a Transfer when the payment is finalized. See the PaymentIntents [use case for connected accounts](https://stripe.com/docs/payments/connected-accounts) for details. */
  transfer_data?: TransferData | null;

  /** A string that identifies the resulting payment as part of a group. See the PaymentIntents [use case for connected accounts](https://stripe.com/docs/payments/connected-accounts) for details. */
  transfer_group?: string | null;
}

export type PaymentIntentCardProcessing = object;

export interface PaymentIntentNextAction {
  alipay_handle_redirect?: PaymentIntentNextActionAlipayHandleRedirect;
  boleto_display_details?: PaymentIntentNextActionBoleto;
  oxxo_display_details?: PaymentIntentNextActionDisplayOxxoDetails;
  redirect_to_url?: PaymentIntentNextActionRedirectToUrl;

  /** Type of the next action to perform, one of `redirect_to_url`, `use_stripe_sdk`, `alipay_handle_redirect`, `oxxo_display_details`, or `verify_with_microdeposits`. */
  type: string;

  /** When confirming a PaymentIntent with Stripe.js, Stripe.js depends on the contents of this dictionary to invoke authentication flows. The shape of the contents is subject to change and is only intended to be used by Stripe.js. */
  use_stripe_sdk?: object;
  verify_with_microdeposits?: PaymentIntentNextActionVerifyWithMicrodeposits;
  wechat_pay_display_qr_code?: PaymentIntentNextActionWechatPayDisplayQrCode;
  wechat_pay_redirect_to_android_app?: PaymentIntentNextActionWechatPayRedirectToAndroidApp;
  wechat_pay_redirect_to_ios_app?: PaymentIntentNextActionWechatPayRedirectToIosApp;
}

export interface PaymentIntentNextActionAlipayHandleRedirect {
  /** The native data to be used with Alipay SDK you must redirect your customer to in order to authenticate the payment in an Android App. */
  native_data?: string | null;

  /** The native URL you must redirect your customer to in order to authenticate the payment in an iOS App. */
  native_url?: string | null;

  /** If the customer does not exit their browser while authenticating, they will be redirected to this specified URL after completion. */
  return_url?: string | null;

  /** The URL you must redirect your customer to in order to authenticate the payment. */
  url?: string | null;
}

export interface PaymentIntentNextActionBoleto {
  /**
   * The timestamp after which the boleto expires.
   * @format unix-time
   */
  expires_at?: number | null;

  /** The URL to the hosted boleto voucher page, which allows customers to view the boleto voucher. */
  hosted_voucher_url?: string | null;

  /** The boleto number. */
  number?: string | null;

  /** The URL to the downloadable boleto voucher PDF. */
  pdf?: string | null;
}

export interface PaymentIntentNextActionDisplayOxxoDetails {
  /**
   * The timestamp after which the OXXO voucher expires.
   * @format unix-time
   */
  expires_after?: number | null;

  /** The URL for the hosted OXXO voucher page, which allows customers to view and print an OXXO voucher. */
  hosted_voucher_url?: string | null;

  /** OXXO reference number. */
  number?: string | null;
}

export interface PaymentIntentNextActionRedirectToUrl {
  /** If the customer does not exit their browser while authenticating, they will be redirected to this specified URL after completion. */
  return_url?: string | null;

  /** The URL you must redirect your customer to in order to authenticate the payment. */
  url?: string | null;
}

export interface PaymentIntentNextActionVerifyWithMicrodeposits {
  /**
   * The timestamp when the microdeposits are expected to land.
   * @format unix-time
   */
  arrival_date: number;

  /** The URL for the hosted verification page, which allows customers to verify their bank account. */
  hosted_verification_url: string;
}

export interface PaymentIntentNextActionWechatPayDisplayQrCode {
  /** The data being used to generate QR code */
  data: string;

  /** The base64 image data for a pre-generated QR code */
  image_data_url: string;

  /** The image_url_png string used to render QR code, can be used as <img src="…" /> */
  image_url_png: string;

  /** The image_url_svg string used to render QR code, can be used as <img src="…" /> */
  image_url_svg: string;
}

export interface PaymentIntentNextActionWechatPayRedirectToAndroidApp {
  /** app_id is the APP ID registered on WeChat open platform */
  app_id: string;

  /** nonce_str is a random string */
  nonce_str: string;

  /** package is static value */
  package: string;

  /** an unique merchant ID assigned by Wechat Pay */
  partner_id: string;

  /** an unique trading ID assigned by Wechat Pay */
  prepay_id: string;

  /** A signature */
  sign: string;

  /** Specifies the current time in epoch format */
  timestamp: string;
}

export interface PaymentIntentNextActionWechatPayRedirectToIosApp {
  /** An universal link that redirect to Wechat Pay APP */
  native_url: string;
}

export interface PaymentIntentPaymentMethodOptions {
  acss_debit?:
    | PaymentIntentPaymentMethodOptionsAcssDebit
    | PaymentIntentTypeSpecificPaymentMethodOptionsClient
    | (PaymentIntentPaymentMethodOptionsAcssDebit & PaymentIntentTypeSpecificPaymentMethodOptionsClient);
  afterpay_clearpay?:
    | PaymentMethodOptionsAfterpayClearpay
    | PaymentIntentTypeSpecificPaymentMethodOptionsClient
    | (PaymentMethodOptionsAfterpayClearpay & PaymentIntentTypeSpecificPaymentMethodOptionsClient);
  alipay?:
    | PaymentMethodOptionsAlipay
    | PaymentIntentTypeSpecificPaymentMethodOptionsClient
    | (PaymentMethodOptionsAlipay & PaymentIntentTypeSpecificPaymentMethodOptionsClient);
  au_becs_debit?:
    | PaymentIntentPaymentMethodOptionsAuBecsDebit
    | PaymentIntentTypeSpecificPaymentMethodOptionsClient
    | (PaymentIntentPaymentMethodOptionsAuBecsDebit & PaymentIntentTypeSpecificPaymentMethodOptionsClient);
  bacs_debit?:
    | PaymentMethodOptionsBacsDebit
    | PaymentIntentTypeSpecificPaymentMethodOptionsClient
    | (PaymentMethodOptionsBacsDebit & PaymentIntentTypeSpecificPaymentMethodOptionsClient);
  bancontact?:
    | PaymentMethodOptionsBancontact
    | PaymentIntentTypeSpecificPaymentMethodOptionsClient
    | (PaymentMethodOptionsBancontact & PaymentIntentTypeSpecificPaymentMethodOptionsClient);
  boleto?:
    | PaymentMethodOptionsBoleto
    | PaymentIntentTypeSpecificPaymentMethodOptionsClient
    | (PaymentMethodOptionsBoleto & PaymentIntentTypeSpecificPaymentMethodOptionsClient);
  card?:
    | PaymentIntentPaymentMethodOptionsCard
    | PaymentIntentTypeSpecificPaymentMethodOptionsClient
    | (PaymentIntentPaymentMethodOptionsCard & PaymentIntentTypeSpecificPaymentMethodOptionsClient);
  card_present?:
    | PaymentMethodOptionsCardPresent
    | PaymentIntentTypeSpecificPaymentMethodOptionsClient
    | (PaymentMethodOptionsCardPresent & PaymentIntentTypeSpecificPaymentMethodOptionsClient);
  eps?:
    | PaymentIntentPaymentMethodOptionsEps
    | PaymentIntentTypeSpecificPaymentMethodOptionsClient
    | (PaymentIntentPaymentMethodOptionsEps & PaymentIntentTypeSpecificPaymentMethodOptionsClient);
  fpx?:
    | PaymentMethodOptionsFpx
    | PaymentIntentTypeSpecificPaymentMethodOptionsClient
    | (PaymentMethodOptionsFpx & PaymentIntentTypeSpecificPaymentMethodOptionsClient);
  giropay?:
    | PaymentMethodOptionsGiropay
    | PaymentIntentTypeSpecificPaymentMethodOptionsClient
    | (PaymentMethodOptionsGiropay & PaymentIntentTypeSpecificPaymentMethodOptionsClient);
  grabpay?:
    | PaymentMethodOptionsGrabpay
    | PaymentIntentTypeSpecificPaymentMethodOptionsClient
    | (PaymentMethodOptionsGrabpay & PaymentIntentTypeSpecificPaymentMethodOptionsClient);
  ideal?:
    | PaymentMethodOptionsIdeal
    | PaymentIntentTypeSpecificPaymentMethodOptionsClient
    | (PaymentMethodOptionsIdeal & PaymentIntentTypeSpecificPaymentMethodOptionsClient);
  interac_present?:
    | PaymentMethodOptionsInteracPresent
    | PaymentIntentTypeSpecificPaymentMethodOptionsClient
    | (PaymentMethodOptionsInteracPresent & PaymentIntentTypeSpecificPaymentMethodOptionsClient);
  klarna?:
    | PaymentMethodOptionsKlarna
    | PaymentIntentTypeSpecificPaymentMethodOptionsClient
    | (PaymentMethodOptionsKlarna & PaymentIntentTypeSpecificPaymentMethodOptionsClient);
  oxxo?:
    | PaymentMethodOptionsOxxo
    | PaymentIntentTypeSpecificPaymentMethodOptionsClient
    | (PaymentMethodOptionsOxxo & PaymentIntentTypeSpecificPaymentMethodOptionsClient);
  p24?:
    | PaymentMethodOptionsP24
    | PaymentIntentTypeSpecificPaymentMethodOptionsClient
    | (PaymentMethodOptionsP24 & PaymentIntentTypeSpecificPaymentMethodOptionsClient);
  sepa_debit?:
    | PaymentIntentPaymentMethodOptionsSepaDebit
    | PaymentIntentTypeSpecificPaymentMethodOptionsClient
    | (PaymentIntentPaymentMethodOptionsSepaDebit & PaymentIntentTypeSpecificPaymentMethodOptionsClient);
  sofort?:
    | PaymentMethodOptionsSofort
    | PaymentIntentTypeSpecificPaymentMethodOptionsClient
    | (PaymentMethodOptionsSofort & PaymentIntentTypeSpecificPaymentMethodOptionsClient);
  wechat_pay?:
    | PaymentMethodOptionsWechatPay
    | PaymentIntentTypeSpecificPaymentMethodOptionsClient
    | (PaymentMethodOptionsWechatPay & PaymentIntentTypeSpecificPaymentMethodOptionsClient);
}

export interface PaymentIntentPaymentMethodOptionsAcssDebit {
  mandate_options?: PaymentIntentPaymentMethodOptionsMandateOptionsAcssDebit;

  /** Bank account verification method. */
  verification_method?: "automatic" | "instant" | "microdeposits";
}

export type PaymentIntentPaymentMethodOptionsAuBecsDebit = object;

export interface PaymentIntentPaymentMethodOptionsCard {
  /**
   * Installment details for this payment (Mexico only).
   *
   * For more information, see the [installments integration guide](https://stripe.com/docs/payments/installments).
   */
  installments?: PaymentMethodOptionsCardInstallments | null;

  /** Selected network to process this payment intent on. Depends on the available networks of the card attached to the payment intent. Can be only set confirm-time. */
  network?:
    | "amex"
    | "cartes_bancaires"
    | "diners"
    | "discover"
    | "interac"
    | "jcb"
    | "mastercard"
    | "unionpay"
    | "unknown"
    | "visa"
    | null;

  /** We strongly recommend that you rely on our SCA Engine to automatically prompt your customers for authentication based on risk level and [other requirements](https://stripe.com/docs/strong-customer-authentication). However, if you wish to request 3D Secure based on logic from your own fraud engine, provide this option. Permitted values include: `automatic` or `any`. If not provided, defaults to `automatic`. Read our guide on [manually requesting 3D Secure](https://stripe.com/docs/payments/3d-secure#manual-three-ds) for more information on how this configuration interacts with Radar and our SCA Engine. */
  request_three_d_secure?: "any" | "automatic" | "challenge_only" | null;

  /**
   * Indicates that you intend to make future payments with this PaymentIntent's payment method.
   *
   * Providing this parameter will [attach the payment method](https://stripe.com/docs/payments/save-during-payment) to the PaymentIntent's Customer, if present, after the PaymentIntent is confirmed and any required actions from the user are complete. If no Customer was provided, the payment method can still be [attached](https://stripe.com/docs/api/payment_methods/attach) to a Customer after the transaction completes.
   * When processing card payments, Stripe also uses `setup_future_usage` to dynamically optimize your payment flow and comply with regional legislation and network rules, such as [SCA](https://stripe.com/docs/strong-customer-authentication).
   */
  setup_future_usage?: "none" | "off_session" | "on_session";
}

export type PaymentIntentPaymentMethodOptionsEps = object;

export interface PaymentIntentPaymentMethodOptionsMandateOptionsAcssDebit {
  /** A URL for custom mandate text */
  custom_mandate_url?: string;

  /** Description of the interval. Only required if the 'payment_schedule' parameter is 'interval' or 'combined'. */
  interval_description?: string | null;

  /** Payment schedule for the mandate. */
  payment_schedule?: "combined" | "interval" | "sporadic" | null;

  /** Transaction type of the mandate. */
  transaction_type?: "business" | "personal" | null;
}

export type PaymentIntentPaymentMethodOptionsMandateOptionsSepaDebit = object;

export interface PaymentIntentPaymentMethodOptionsSepaDebit {
  mandate_options?: PaymentIntentPaymentMethodOptionsMandateOptionsSepaDebit;
}

export interface PaymentIntentProcessing {
  card?: PaymentIntentCardProcessing;

  /** Type of the payment method for which payment is in `processing` state, one of `card`. */
  type: "card";
}

export interface PaymentIntentTypeSpecificPaymentMethodOptionsClient {
  /**
   * Indicates that you intend to make future payments with this PaymentIntent's payment method.
   *
   * Providing this parameter will [attach the payment method](https://stripe.com/docs/payments/save-during-payment) to the PaymentIntent's Customer, if present, after the PaymentIntent is confirmed and any required actions from the user are complete. If no Customer was provided, the payment method can still be [attached](https://stripe.com/docs/api/payment_methods/attach) to a Customer after the transaction completes.
   * When processing card payments, Stripe also uses `setup_future_usage` to dynamically optimize your payment flow and comply with regional legislation and network rules, such as [SCA](https://stripe.com/docs/strong-customer-authentication).
   */
  setup_future_usage?: "none" | "off_session" | "on_session";
}

/**
 * A payment link allows you create payment pages through a url you can share with customers.
 */
export interface PaymentLink {
  /** Whether the payment link's `url` is active. If `false`, customers visiting the url will be redirected. */
  active: boolean;
  after_completion: PaymentLinksResourceAfterCompletion;

  /** Whether user redeemable promotion codes are enabled. */
  allow_promotion_codes: boolean;

  /** The amount of the application fee (if any) that will be requested to be applied to the payment and transferred to the application owner's Stripe account. */
  application_fee_amount?: number | null;

  /** This represents the percentage of the subscription invoice subtotal that will be transferred to the application owner's Stripe account. */
  application_fee_percent?: number | null;
  automatic_tax: PaymentLinksResourceAutomaticTax;

  /** Configuration for collecting the customer's billing address. */
  billing_address_collection: "auto" | "required";

  /** Unique identifier for the object. */
  id: string;

  /**
   * PaymentLinksResourceListLineItems
   * The line items representing what is being sold.
   */
  line_items?: { data: Item[]; has_more: boolean; object: "list"; url: string };

  /** Has the value `true` if the object exists in live mode or the value `false` if the object exists in test mode. */
  livemode: boolean;

  /** Set of [key-value pairs](https://stripe.com/docs/api/metadata) that you can attach to an object. This can be useful for storing additional information about the object in a structured format. */
  metadata: Record<string, string>;

  /** String representing the object's type. Objects of the same type share the same value. */
  object: "payment_link";

  /** The account on behalf of which to charge. See the [Connect documentation](https://support.stripe.com/questions/sending-invoices-on-behalf-of-connected-accounts) for details. */
  on_behalf_of?: string | Account | null;

  /** The list of payment method types that customers can use. When `null`, your [payment methods settings](https://dashboard.stripe.com/settings/payment_methods) will be used. */
  payment_method_types?: "card"[] | null;

  /** Configuration for collecting the customer's shipping address. */
  shipping_address_collection?: PaymentLinksResourceShippingAddressCollection | null;

  /** When creating a subscription, the specified configuration data will be used. There must be at least one line item with a recurring price to use `subscription_data`. */
  subscription_data?: PaymentLinksResourceSubscriptionData | null;

  /** The account (if any) the payments will be attributed to for tax reporting, and where funds from each payment will be transferred to. */
  transfer_data?: PaymentLinksResourceTransferData | null;

  /** The public url that can be shared with customers. */
  url: string;
}

export interface PaymentLinksResourceAfterCompletion {
  hosted_confirmation?: PaymentLinksResourceCompletionBehaviorConfirmationPage;
  redirect?: PaymentLinksResourceCompletionBehaviorRedirect;

  /** The specified behavior after the purchase is complete. */
  type: "hosted_confirmation" | "redirect";
}

export interface PaymentLinksResourceAutomaticTax {
  /** If `true`, tax will be calculated automatically using the customer's location. */
  enabled: boolean;
}

export interface PaymentLinksResourceCompletionBehaviorConfirmationPage {
  /** The custom message that is displayed to the customer after the purchase is complete. */
  custom_message?: string | null;
}

export interface PaymentLinksResourceCompletionBehaviorRedirect {
  /** The `url` the customer will be redirected to after the purchase is complete. */
  url: string;
}

export interface PaymentLinksResourceShippingAddressCollection {
  /** An array of two-letter ISO country codes representing which countries Checkout should provide as options for shipping locations. Unsupported country codes: `AS, CX, CC, CU, HM, IR, KP, MH, FM, NF, MP, PW, SD, SY, UM, VI`. */
  allowed_countries: (
    | "AC"
    | "AD"
    | "AE"
    | "AF"
    | "AG"
    | "AI"
    | "AL"
    | "AM"
    | "AO"
    | "AQ"
    | "AR"
    | "AT"
    | "AU"
    | "AW"
    | "AX"
    | "AZ"
    | "BA"
    | "BB"
    | "BD"
    | "BE"
    | "BF"
    | "BG"
    | "BH"
    | "BI"
    | "BJ"
    | "BL"
    | "BM"
    | "BN"
    | "BO"
    | "BQ"
    | "BR"
    | "BS"
    | "BT"
    | "BV"
    | "BW"
    | "BY"
    | "BZ"
    | "CA"
    | "CD"
    | "CF"
    | "CG"
    | "CH"
    | "CI"
    | "CK"
    | "CL"
    | "CM"
    | "CN"
    | "CO"
    | "CR"
    | "CV"
    | "CW"
    | "CY"
    | "CZ"
    | "DE"
    | "DJ"
    | "DK"
    | "DM"
    | "DO"
    | "DZ"
    | "EC"
    | "EE"
    | "EG"
    | "EH"
    | "ER"
    | "ES"
    | "ET"
    | "FI"
    | "FJ"
    | "FK"
    | "FO"
    | "FR"
    | "GA"
    | "GB"
    | "GD"
    | "GE"
    | "GF"
    | "GG"
    | "GH"
    | "GI"
    | "GL"
    | "GM"
    | "GN"
    | "GP"
    | "GQ"
    | "GR"
    | "GS"
    | "GT"
    | "GU"
    | "GW"
    | "GY"
    | "HK"
    | "HN"
    | "HR"
    | "HT"
    | "HU"
    | "ID"
    | "IE"
    | "IL"
    | "IM"
    | "IN"
    | "IO"
    | "IQ"
    | "IS"
    | "IT"
    | "JE"
    | "JM"
    | "JO"
    | "JP"
    | "KE"
    | "KG"
    | "KH"
    | "KI"
    | "KM"
    | "KN"
    | "KR"
    | "KW"
    | "KY"
    | "KZ"
    | "LA"
    | "LB"
    | "LC"
    | "LI"
    | "LK"
    | "LR"
    | "LS"
    | "LT"
    | "LU"
    | "LV"
    | "LY"
    | "MA"
    | "MC"
    | "MD"
    | "ME"
    | "MF"
    | "MG"
    | "MK"
    | "ML"
    | "MM"
    | "MN"
    | "MO"
    | "MQ"
    | "MR"
    | "MS"
    | "MT"
    | "MU"
    | "MV"
    | "MW"
    | "MX"
    | "MY"
    | "MZ"
    | "NA"
    | "NC"
    | "NE"
    | "NG"
    | "NI"
    | "NL"
    | "NO"
    | "NP"
    | "NR"
    | "NU"
    | "NZ"
    | "OM"
    | "PA"
    | "PE"
    | "PF"
    | "PG"
    | "PH"
    | "PK"
    | "PL"
    | "PM"
    | "PN"
    | "PR"
    | "PS"
    | "PT"
    | "PY"
    | "QA"
    | "RE"
    | "RO"
    | "RS"
    | "RU"
    | "RW"
    | "SA"
    | "SB"
    | "SC"
    | "SE"
    | "SG"
    | "SH"
    | "SI"
    | "SJ"
    | "SK"
    | "SL"
    | "SM"
    | "SN"
    | "SO"
    | "SR"
    | "SS"
    | "ST"
    | "SV"
    | "SX"
    | "SZ"
    | "TA"
    | "TC"
    | "TD"
    | "TF"
    | "TG"
    | "TH"
    | "TJ"
    | "TK"
    | "TL"
    | "TM"
    | "TN"
    | "TO"
    | "TR"
    | "TT"
    | "TV"
    | "TW"
    | "TZ"
    | "UA"
    | "UG"
    | "US"
    | "UY"
    | "UZ"
    | "VA"
    | "VC"
    | "VE"
    | "VG"
    | "VN"
    | "VU"
    | "WF"
    | "WS"
    | "XK"
    | "YE"
    | "YT"
    | "ZA"
    | "ZM"
    | "ZW"
    | "ZZ"
  )[];
}

export interface PaymentLinksResourceSubscriptionData {
  /** When creating a subscription, the specified configuration data will be used. There must be at least one line item with a recurring price to use `subscription_data`. */
  trial_period_days?: number | null;
}

export interface PaymentLinksResourceTransferData {
  /** The amount in %s that will be transferred to the destination account. By default, the entire amount is transferred to the destination. */
  amount?: number | null;

  /** The connected account receiving the transfer. */
  destination: string | Account;
}

/**
* PaymentMethod objects represent your customer's payment instruments.
They can be used with [PaymentIntents](https://stripe.com/docs/payments/payment-intents) to collect payments or saved to
Customer objects to store instrument details for future payments.

Related guides: [Payment Methods](https://stripe.com/docs/payments/payment-methods) and [More Payment Scenarios](https://stripe.com/docs/payments/more-payment-scenarios).
*/
export interface PaymentMethod {
  acss_debit?: PaymentMethodAcssDebit;
  afterpay_clearpay?: PaymentMethodAfterpayClearpay;
  alipay?: PaymentFlowsPrivatePaymentMethodsAlipay;
  au_becs_debit?: PaymentMethodAuBecsDebit;
  bacs_debit?: PaymentMethodBacsDebit;
  bancontact?: PaymentMethodBancontact;
  billing_details: BillingDetails;
  boleto?: PaymentMethodBoleto;
  card?: PaymentMethodCard;
  card_present?: PaymentMethodCardPresent;

  /**
   * Time at which the object was created. Measured in seconds since the Unix epoch.
   * @format unix-time
   */
  created: number;

  /** The ID of the Customer to which this PaymentMethod is saved. This will not be set when the PaymentMethod has not been saved to a Customer. */
  customer?: string | Customer | null;
  eps?: PaymentMethodEps;
  fpx?: PaymentMethodFpx;
  giropay?: PaymentMethodGiropay;
  grabpay?: PaymentMethodGrabpay;

  /** Unique identifier for the object. */
  id: string;
  ideal?: PaymentMethodIdeal;
  interac_present?: PaymentMethodInteracPresent;
  klarna?: PaymentMethodKlarna;

  /** Has the value `true` if the object exists in live mode or the value `false` if the object exists in test mode. */
  livemode: boolean;

  /** Set of [key-value pairs](https://stripe.com/docs/api/metadata) that you can attach to an object. This can be useful for storing additional information about the object in a structured format. */
  metadata?: Record<string, string>;

  /** String representing the object's type. Objects of the same type share the same value. */
  object: "payment_method";
  oxxo?: PaymentMethodOxxo;
  p24?: PaymentMethodP24;
  sepa_debit?: PaymentMethodSepaDebit;
  sofort?: PaymentMethodSofort;

  /** The type of the PaymentMethod. An additional hash is included on the PaymentMethod with a name matching this value. It contains additional information specific to the PaymentMethod type. */
  type:
    | "acss_debit"
    | "afterpay_clearpay"
    | "alipay"
    | "au_becs_debit"
    | "bacs_debit"
    | "bancontact"
    | "boleto"
    | "card"
    | "card_present"
    | "eps"
    | "fpx"
    | "giropay"
    | "grabpay"
    | "ideal"
    | "interac_present"
    | "klarna"
    | "oxxo"
    | "p24"
    | "sepa_debit"
    | "sofort"
    | "wechat_pay";
  wechat_pay?: PaymentMethodWechatPay;
}

export interface PaymentMethodAcssDebit {
  /** Name of the bank associated with the bank account. */
  bank_name?: string | null;

  /** Uniquely identifies this particular bank account. You can use this attribute to check whether two bank accounts are the same. */
  fingerprint?: string | null;

  /** Institution number of the bank account. */
  institution_number?: string | null;

  /** Last four digits of the bank account number. */
  last4?: string | null;

  /** Transit number of the bank account. */
  transit_number?: string | null;
}

export type PaymentMethodAfterpayClearpay = object;

export interface PaymentMethodAuBecsDebit {
  /** Six-digit number identifying bank and branch associated with this bank account. */
  bsb_number?: string | null;

  /** Uniquely identifies this particular bank account. You can use this attribute to check whether two bank accounts are the same. */
  fingerprint?: string | null;

  /** Last four digits of the bank account number. */
  last4?: string | null;
}

export interface PaymentMethodBacsDebit {
  /** Uniquely identifies this particular bank account. You can use this attribute to check whether two bank accounts are the same. */
  fingerprint?: string | null;

  /** Last four digits of the bank account number. */
  last4?: string | null;

  /** Sort code of the bank account. (e.g., `10-20-30`) */
  sort_code?: string | null;
}

export type PaymentMethodBancontact = object;

export interface PaymentMethodBoleto {
  /** Uniquely identifies the customer tax id (CNPJ or CPF) */
  tax_id: string;
}

export interface PaymentMethodCard {
  /** Card brand. Can be `amex`, `diners`, `discover`, `jcb`, `mastercard`, `unionpay`, `visa`, or `unknown`. */
  brand: string;

  /** Checks on Card address and CVC if provided. */
  checks?: PaymentMethodCardChecks | null;

  /** Two-letter ISO code representing the country of the card. You could use this attribute to get a sense of the international breakdown of cards you've collected. */
  country?: string | null;

  /** Two-digit number representing the card's expiration month. */
  exp_month: number;

  /** Four-digit number representing the card's expiration year. */
  exp_year: number;

  /**
   * Uniquely identifies this particular card number. You can use this attribute to check whether two customers who’ve signed up with you are using the same card number, for example. For payment methods that tokenize card information (Apple Pay, Google Pay), the tokenized number might be provided instead of the underlying card number.
   *
   * *Starting May 1, 2021, card fingerprint in India for Connect will change to allow two fingerprints for the same card --- one for India and one for the rest of the world.*
   */
  fingerprint?: string | null;

  /** Card funding type. Can be `credit`, `debit`, `prepaid`, or `unknown`. */
  funding: string;

  /** Details of the original PaymentMethod that created this object. */
  generated_from?: PaymentMethodCardGeneratedCard | null;

  /** The last four digits of the card. */
  last4: string;

  /** Contains information about card networks that can be used to process the payment. */
  networks?: Networks | null;

  /** Contains details on how this Card maybe be used for 3D Secure authentication. */
  three_d_secure_usage?: ThreeDSecureUsage | null;

  /** If this Card is part of a card wallet, this contains the details of the card wallet. */
  wallet?: PaymentMethodCardWallet | null;
}

export interface PaymentMethodCardChecks {
  /** If a address line1 was provided, results of the check, one of `pass`, `fail`, `unavailable`, or `unchecked`. */
  address_line1_check?: string | null;

  /** If a address postal code was provided, results of the check, one of `pass`, `fail`, `unavailable`, or `unchecked`. */
  address_postal_code_check?: string | null;

  /** If a CVC was provided, results of the check, one of `pass`, `fail`, `unavailable`, or `unchecked`. */
  cvc_check?: string | null;
}

export interface PaymentMethodCardGeneratedCard {
  /** The charge that created this object. */
  charge?: string | null;

  /** Transaction-specific details of the payment method used in the payment. */
  payment_method_details?: CardGeneratedFromPaymentMethodDetails | null;

  /** The ID of the SetupAttempt that generated this PaymentMethod, if any. */
  setup_attempt?: string | SetupAttempt | null;
}

export type PaymentMethodCardPresent = object;

export interface PaymentMethodCardWallet {
  amex_express_checkout?: PaymentMethodCardWalletAmexExpressCheckout;
  apple_pay?: PaymentMethodCardWalletApplePay;

  /** (For tokenized numbers only.) The last four digits of the device account number. */
  dynamic_last4?: string | null;
  google_pay?: PaymentMethodCardWalletGooglePay;
  masterpass?: PaymentMethodCardWalletMasterpass;
  samsung_pay?: PaymentMethodCardWalletSamsungPay;

  /** The type of the card wallet, one of `amex_express_checkout`, `apple_pay`, `google_pay`, `masterpass`, `samsung_pay`, or `visa_checkout`. An additional hash is included on the Wallet subhash with a name matching this value. It contains additional information specific to the card wallet type. */
  type: "amex_express_checkout" | "apple_pay" | "google_pay" | "masterpass" | "samsung_pay" | "visa_checkout";
  visa_checkout?: PaymentMethodCardWalletVisaCheckout;
}

export type PaymentMethodCardWalletAmexExpressCheckout = object;

export type PaymentMethodCardWalletApplePay = object;

export type PaymentMethodCardWalletGooglePay = object;

export interface PaymentMethodCardWalletMasterpass {
  /** Owner's verified billing address. Values are verified or provided by the wallet directly (if supported) at the time of authorization or settlement. They cannot be set or mutated. */
  billing_address?: Address | null;

  /** Owner's verified email. Values are verified or provided by the wallet directly (if supported) at the time of authorization or settlement. They cannot be set or mutated. */
  email?: string | null;

  /** Owner's verified full name. Values are verified or provided by the wallet directly (if supported) at the time of authorization or settlement. They cannot be set or mutated. */
  name?: string | null;

  /** Owner's verified shipping address. Values are verified or provided by the wallet directly (if supported) at the time of authorization or settlement. They cannot be set or mutated. */
  shipping_address?: Address | null;
}

export type PaymentMethodCardWalletSamsungPay = object;

export interface PaymentMethodCardWalletVisaCheckout {
  /** Owner's verified billing address. Values are verified or provided by the wallet directly (if supported) at the time of authorization or settlement. They cannot be set or mutated. */
  billing_address?: Address | null;

  /** Owner's verified email. Values are verified or provided by the wallet directly (if supported) at the time of authorization or settlement. They cannot be set or mutated. */
  email?: string | null;

  /** Owner's verified full name. Values are verified or provided by the wallet directly (if supported) at the time of authorization or settlement. They cannot be set or mutated. */
  name?: string | null;

  /** Owner's verified shipping address. Values are verified or provided by the wallet directly (if supported) at the time of authorization or settlement. They cannot be set or mutated. */
  shipping_address?: Address | null;
}

export interface PaymentMethodDetails {
  ach_credit_transfer?: PaymentMethodDetailsAchCreditTransfer;
  ach_debit?: PaymentMethodDetailsAchDebit;
  acss_debit?: PaymentMethodDetailsAcssDebit;
  afterpay_clearpay?: PaymentMethodDetailsAfterpayClearpay;
  alipay?: PaymentFlowsPrivatePaymentMethodsAlipayDetails;
  au_becs_debit?: PaymentMethodDetailsAuBecsDebit;
  bacs_debit?: PaymentMethodDetailsBacsDebit;
  bancontact?: PaymentMethodDetailsBancontact;
  boleto?: PaymentMethodDetailsBoleto;
  card?: PaymentMethodDetailsCard;
  card_present?: PaymentMethodDetailsCardPresent;
  eps?: PaymentMethodDetailsEps;
  fpx?: PaymentMethodDetailsFpx;
  giropay?: PaymentMethodDetailsGiropay;
  grabpay?: PaymentMethodDetailsGrabpay;
  ideal?: PaymentMethodDetailsIdeal;
  interac_present?: PaymentMethodDetailsInteracPresent;
  klarna?: PaymentMethodDetailsKlarna;
  multibanco?: PaymentMethodDetailsMultibanco;
  oxxo?: PaymentMethodDetailsOxxo;
  p24?: PaymentMethodDetailsP24;
  sepa_debit?: PaymentMethodDetailsSepaDebit;
  sofort?: PaymentMethodDetailsSofort;
  stripe_account?: PaymentMethodDetailsStripeAccount;

  /**
   * The type of transaction-specific details of the payment method used in the payment, one of `ach_credit_transfer`, `ach_debit`, `acss_debit`, `alipay`, `au_becs_debit`, `bancontact`, `card`, `card_present`, `eps`, `giropay`, `ideal`, `klarna`, `multibanco`, `p24`, `sepa_debit`, `sofort`, `stripe_account`, or `wechat`.
   * An additional hash is included on `payment_method_details` with a name matching this value.
   * It contains information specific to the payment method.
   */
  type: string;
  wechat?: PaymentMethodDetailsWechat;
  wechat_pay?: PaymentMethodDetailsWechatPay;
}

export interface PaymentMethodDetailsAchCreditTransfer {
  /** Account number to transfer funds to. */
  account_number?: string | null;

  /** Name of the bank associated with the routing number. */
  bank_name?: string | null;

  /** Routing transit number for the bank account to transfer funds to. */
  routing_number?: string | null;

  /** SWIFT code of the bank associated with the routing number. */
  swift_code?: string | null;
}

export interface PaymentMethodDetailsAchDebit {
  /** Type of entity that holds the account. This can be either `individual` or `company`. */
  account_holder_type?: "company" | "individual" | null;

  /** Name of the bank associated with the bank account. */
  bank_name?: string | null;

  /** Two-letter ISO code representing the country the bank account is located in. */
  country?: string | null;

  /** Uniquely identifies this particular bank account. You can use this attribute to check whether two bank accounts are the same. */
  fingerprint?: string | null;

  /** Last four digits of the bank account number. */
  last4?: string | null;

  /** Routing transit number of the bank account. */
  routing_number?: string | null;
}

export interface PaymentMethodDetailsAcssDebit {
  /** Name of the bank associated with the bank account. */
  bank_name?: string | null;

  /** Uniquely identifies this particular bank account. You can use this attribute to check whether two bank accounts are the same. */
  fingerprint?: string | null;

  /** Institution number of the bank account */
  institution_number?: string | null;

  /** Last four digits of the bank account number. */
  last4?: string | null;

  /** ID of the mandate used to make this payment. */
  mandate?: string;

  /** Transit number of the bank account. */
  transit_number?: string | null;
}

export interface PaymentMethodDetailsAfterpayClearpay {
  /** Order identifier shown to the merchant in Afterpay’s online portal. */
  reference?: string | null;
}

export interface PaymentMethodDetailsAuBecsDebit {
  /** Bank-State-Branch number of the bank account. */
  bsb_number?: string | null;

  /** Uniquely identifies this particular bank account. You can use this attribute to check whether two bank accounts are the same. */
  fingerprint?: string | null;

  /** Last four digits of the bank account number. */
  last4?: string | null;

  /** ID of the mandate used to make this payment. */
  mandate?: string;
}

export interface PaymentMethodDetailsBacsDebit {
  /** Uniquely identifies this particular bank account. You can use this attribute to check whether two bank accounts are the same. */
  fingerprint?: string | null;

  /** Last four digits of the bank account number. */
  last4?: string | null;

  /** ID of the mandate used to make this payment. */
  mandate?: string | null;

  /** Sort code of the bank account. (e.g., `10-20-30`) */
  sort_code?: string | null;
}

export interface PaymentMethodDetailsBancontact {
  /** Bank code of bank associated with the bank account. */
  bank_code?: string | null;

  /** Name of the bank associated with the bank account. */
  bank_name?: string | null;

  /** Bank Identifier Code of the bank associated with the bank account. */
  bic?: string | null;

  /** The ID of the SEPA Direct Debit PaymentMethod which was generated by this Charge. */
  generated_sepa_debit?: string | PaymentMethod | null;

  /** The mandate for the SEPA Direct Debit PaymentMethod which was generated by this Charge. */
  generated_sepa_debit_mandate?: string | Mandate | null;

  /** Last four characters of the IBAN. */
  iban_last4?: string | null;

  /**
   * Preferred language of the Bancontact authorization page that the customer is redirected to.
   * Can be one of `en`, `de`, `fr`, or `nl`
   */
  preferred_language?: "de" | "en" | "fr" | "nl" | null;

  /**
   * Owner's verified full name. Values are verified or provided by Bancontact directly
   * (if supported) at the time of authorization or settlement. They cannot be set or mutated.
   */
  verified_name?: string | null;
}

export interface PaymentMethodDetailsBoleto {
  /** The tax ID of the customer (CPF for individuals consumers or CNPJ for businesses consumers) */
  tax_id: string;
}

export interface PaymentMethodDetailsCard {
  /** Card brand. Can be `amex`, `diners`, `discover`, `jcb`, `mastercard`, `unionpay`, `visa`, or `unknown`. */
  brand?: string | null;

  /** Check results by Card networks on Card address and CVC at time of payment. */
  checks?: PaymentMethodDetailsCardChecks | null;

  /** Two-letter ISO code representing the country of the card. You could use this attribute to get a sense of the international breakdown of cards you've collected. */
  country?: string | null;

  /** Two-digit number representing the card's expiration month. */
  exp_month: number;

  /** Four-digit number representing the card's expiration year. */
  exp_year: number;

  /**
   * Uniquely identifies this particular card number. You can use this attribute to check whether two customers who’ve signed up with you are using the same card number, for example. For payment methods that tokenize card information (Apple Pay, Google Pay), the tokenized number might be provided instead of the underlying card number.
   *
   * *Starting May 1, 2021, card fingerprint in India for Connect will change to allow two fingerprints for the same card --- one for India and one for the rest of the world.*
   */
  fingerprint?: string | null;

  /** Card funding type. Can be `credit`, `debit`, `prepaid`, or `unknown`. */
  funding?: string | null;

  /**
   * Installment details for this payment (Mexico only).
   *
   * For more information, see the [installments integration guide](https://stripe.com/docs/payments/installments).
   */
  installments?: PaymentMethodDetailsCardInstallments | null;

  /** The last four digits of the card. */
  last4?: string | null;

  /** Identifies which network this charge was processed on. Can be `amex`, `cartes_bancaires`, `diners`, `discover`, `interac`, `jcb`, `mastercard`, `unionpay`, `visa`, or `unknown`. */
  network?: string | null;

  /** Populated if this transaction used 3D Secure authentication. */
  three_d_secure?: ThreeDSecureDetails | null;

  /** If this Card is part of a card wallet, this contains the details of the card wallet. */
  wallet?: PaymentMethodDetailsCardWallet | null;
}

export interface PaymentMethodDetailsCardChecks {
  /** If a address line1 was provided, results of the check, one of `pass`, `fail`, `unavailable`, or `unchecked`. */
  address_line1_check?: string | null;

  /** If a address postal code was provided, results of the check, one of `pass`, `fail`, `unavailable`, or `unchecked`. */
  address_postal_code_check?: string | null;

  /** If a CVC was provided, results of the check, one of `pass`, `fail`, `unavailable`, or `unchecked`. */
  cvc_check?: string | null;
}

export interface PaymentMethodDetailsCardInstallments {
  /** Installment plan selected for the payment. */
  plan?: PaymentMethodDetailsCardInstallmentsPlan | null;
}

export interface PaymentMethodDetailsCardInstallmentsPlan {
  /** For `fixed_count` installment plans, this is the number of installment payments your customer will make to their credit card. */
  count?: number | null;

  /**
   * For `fixed_count` installment plans, this is the interval between installment payments your customer will make to their credit card.
   * One of `month`.
   */
  interval?: "month" | null;

  /** Type of installment plan, one of `fixed_count`. */
  type: "fixed_count";
}

export interface PaymentMethodDetailsCardPresent {
  /** The authorized amount */
  amount_authorized?: number | null;

  /** Card brand. Can be `amex`, `diners`, `discover`, `jcb`, `mastercard`, `unionpay`, `visa`, or `unknown`. */
  brand?: string | null;

  /** The cardholder name as read from the card, in [ISO 7813](https://en.wikipedia.org/wiki/ISO/IEC_7813) format. May include alphanumeric characters, special characters and first/last name separator (`/`). In some cases, the cardholder name may not be available depending on how the issuer has configured the card. Cardholder name is typically not available on swipe or contactless payments, such as those made with Apple Pay and Google Pay. */
  cardholder_name?: string | null;

  /** Two-letter ISO code representing the country of the card. You could use this attribute to get a sense of the international breakdown of cards you've collected. */
  country?: string | null;

  /** Authorization response cryptogram. */
  emv_auth_data?: string | null;

  /** Two-digit number representing the card's expiration month. */
  exp_month: number;

  /** Four-digit number representing the card's expiration year. */
  exp_year: number;

  /**
   * Uniquely identifies this particular card number. You can use this attribute to check whether two customers who’ve signed up with you are using the same card number, for example. For payment methods that tokenize card information (Apple Pay, Google Pay), the tokenized number might be provided instead of the underlying card number.
   *
   * *Starting May 1, 2021, card fingerprint in India for Connect will change to allow two fingerprints for the same card --- one for India and one for the rest of the world.*
   */
  fingerprint?: string | null;

  /** Card funding type. Can be `credit`, `debit`, `prepaid`, or `unknown`. */
  funding?: string | null;

  /** ID of a card PaymentMethod generated from the card_present PaymentMethod that may be attached to a Customer for future transactions. Only present if it was possible to generate a card PaymentMethod. */
  generated_card?: string | null;

  /** The last four digits of the card. */
  last4?: string | null;

  /** Identifies which network this charge was processed on. Can be `amex`, `cartes_bancaires`, `diners`, `discover`, `interac`, `jcb`, `mastercard`, `unionpay`, `visa`, or `unknown`. */
  network?: string | null;

  /** Defines whether the authorized amount can be over-captured or not */
  overcapture_supported?: boolean | null;

  /** How card details were read in this transaction. */
  read_method?:
    | "contact_emv"
    | "contactless_emv"
    | "contactless_magstripe_mode"
    | "magnetic_stripe_fallback"
    | "magnetic_stripe_track2"
    | null;

  /** A collection of fields required to be displayed on receipts. Only required for EMV transactions. */
  receipt?: PaymentMethodDetailsCardPresentReceipt | null;
}

export interface PaymentMethodDetailsCardPresentReceipt {
  /** The type of account being debited or credited */
  account_type?: "checking" | "credit" | "prepaid" | "unknown";

  /** EMV tag 9F26, cryptogram generated by the integrated circuit chip. */
  application_cryptogram?: string | null;

  /** Mnenomic of the Application Identifier. */
  application_preferred_name?: string | null;

  /** Identifier for this transaction. */
  authorization_code?: string | null;

  /** EMV tag 8A. A code returned by the card issuer. */
  authorization_response_code?: string | null;

  /** How the cardholder verified ownership of the card. */
  cardholder_verification_method?: string | null;

  /** EMV tag 84. Similar to the application identifier stored on the integrated circuit chip. */
  dedicated_file_name?: string | null;

  /** The outcome of a series of EMV functions performed by the card reader. */
  terminal_verification_results?: string | null;

  /** An indication of various EMV functions performed during the transaction. */
  transaction_status_information?: string | null;
}

export interface PaymentMethodDetailsCardWallet {
  amex_express_checkout?: PaymentMethodDetailsCardWalletAmexExpressCheckout;
  apple_pay?: PaymentMethodDetailsCardWalletApplePay;

  /** (For tokenized numbers only.) The last four digits of the device account number. */
  dynamic_last4?: string | null;
  google_pay?: PaymentMethodDetailsCardWalletGooglePay;
  masterpass?: PaymentMethodDetailsCardWalletMasterpass;
  samsung_pay?: PaymentMethodDetailsCardWalletSamsungPay;

  /** The type of the card wallet, one of `amex_express_checkout`, `apple_pay`, `google_pay`, `masterpass`, `samsung_pay`, or `visa_checkout`. An additional hash is included on the Wallet subhash with a name matching this value. It contains additional information specific to the card wallet type. */
  type: "amex_express_checkout" | "apple_pay" | "google_pay" | "masterpass" | "samsung_pay" | "visa_checkout";
  visa_checkout?: PaymentMethodDetailsCardWalletVisaCheckout;
}

export type PaymentMethodDetailsCardWalletAmexExpressCheckout = object;

export type PaymentMethodDetailsCardWalletApplePay = object;

export type PaymentMethodDetailsCardWalletGooglePay = object;

export interface PaymentMethodDetailsCardWalletMasterpass {
  /** Owner's verified billing address. Values are verified or provided by the wallet directly (if supported) at the time of authorization or settlement. They cannot be set or mutated. */
  billing_address?: Address | null;

  /** Owner's verified email. Values are verified or provided by the wallet directly (if supported) at the time of authorization or settlement. They cannot be set or mutated. */
  email?: string | null;

  /** Owner's verified full name. Values are verified or provided by the wallet directly (if supported) at the time of authorization or settlement. They cannot be set or mutated. */
  name?: string | null;

  /** Owner's verified shipping address. Values are verified or provided by the wallet directly (if supported) at the time of authorization or settlement. They cannot be set or mutated. */
  shipping_address?: Address | null;
}

export type PaymentMethodDetailsCardWalletSamsungPay = object;

export interface PaymentMethodDetailsCardWalletVisaCheckout {
  /** Owner's verified billing address. Values are verified or provided by the wallet directly (if supported) at the time of authorization or settlement. They cannot be set or mutated. */
  billing_address?: Address | null;

  /** Owner's verified email. Values are verified or provided by the wallet directly (if supported) at the time of authorization or settlement. They cannot be set or mutated. */
  email?: string | null;

  /** Owner's verified full name. Values are verified or provided by the wallet directly (if supported) at the time of authorization or settlement. They cannot be set or mutated. */
  name?: string | null;

  /** Owner's verified shipping address. Values are verified or provided by the wallet directly (if supported) at the time of authorization or settlement. They cannot be set or mutated. */
  shipping_address?: Address | null;
}

export interface PaymentMethodDetailsEps {
  /** The customer's bank. Should be one of `arzte_und_apotheker_bank`, `austrian_anadi_bank_ag`, `bank_austria`, `bankhaus_carl_spangler`, `bankhaus_schelhammer_und_schattera_ag`, `bawag_psk_ag`, `bks_bank_ag`, `brull_kallmus_bank_ag`, `btv_vier_lander_bank`, `capital_bank_grawe_gruppe_ag`, `dolomitenbank`, `easybank_ag`, `erste_bank_und_sparkassen`, `hypo_alpeadriabank_international_ag`, `hypo_noe_lb_fur_niederosterreich_u_wien`, `hypo_oberosterreich_salzburg_steiermark`, `hypo_tirol_bank_ag`, `hypo_vorarlberg_bank_ag`, `hypo_bank_burgenland_aktiengesellschaft`, `marchfelder_bank`, `oberbank_ag`, `raiffeisen_bankengruppe_osterreich`, `schoellerbank_ag`, `sparda_bank_wien`, `volksbank_gruppe`, `volkskreditbank_ag`, or `vr_bank_braunau`. */
  bank?:
    | "arzte_und_apotheker_bank"
    | "austrian_anadi_bank_ag"
    | "bank_austria"
    | "bankhaus_carl_spangler"
    | "bankhaus_schelhammer_und_schattera_ag"
    | "bawag_psk_ag"
    | "bks_bank_ag"
    | "brull_kallmus_bank_ag"
    | "btv_vier_lander_bank"
    | "capital_bank_grawe_gruppe_ag"
    | "dolomitenbank"
    | "easybank_ag"
    | "erste_bank_und_sparkassen"
    | "hypo_alpeadriabank_international_ag"
    | "hypo_bank_burgenland_aktiengesellschaft"
    | "hypo_noe_lb_fur_niederosterreich_u_wien"
    | "hypo_oberosterreich_salzburg_steiermark"
    | "hypo_tirol_bank_ag"
    | "hypo_vorarlberg_bank_ag"
    | "marchfelder_bank"
    | "oberbank_ag"
    | "raiffeisen_bankengruppe_osterreich"
    | "schoellerbank_ag"
    | "sparda_bank_wien"
    | "volksbank_gruppe"
    | "volkskreditbank_ag"
    | "vr_bank_braunau"
    | null;

  /**
   * Owner's verified full name. Values are verified or provided by EPS directly
   * (if supported) at the time of authorization or settlement. They cannot be set or mutated.
   * EPS rarely provides this information so the attribute is usually empty.
   */
  verified_name?: string | null;
}

export interface PaymentMethodDetailsFpx {
  /** The customer's bank. Can be one of `affin_bank`, `agrobank`, `alliance_bank`, `ambank`, `bank_islam`, `bank_muamalat`, `bank_rakyat`, `bsn`, `cimb`, `hong_leong_bank`, `hsbc`, `kfh`, `maybank2u`, `ocbc`, `public_bank`, `rhb`, `standard_chartered`, `uob`, `deutsche_bank`, `maybank2e`, or `pb_enterprise`. */
  bank:
    | "affin_bank"
    | "agrobank"
    | "alliance_bank"
    | "ambank"
    | "bank_islam"
    | "bank_muamalat"
    | "bank_rakyat"
    | "bsn"
    | "cimb"
    | "deutsche_bank"
    | "hong_leong_bank"
    | "hsbc"
    | "kfh"
    | "maybank2e"
    | "maybank2u"
    | "ocbc"
    | "pb_enterprise"
    | "public_bank"
    | "rhb"
    | "standard_chartered"
    | "uob";

  /** Unique transaction id generated by FPX for every request from the merchant */
  transaction_id?: string | null;
}

export interface PaymentMethodDetailsGiropay {
  /** Bank code of bank associated with the bank account. */
  bank_code?: string | null;

  /** Name of the bank associated with the bank account. */
  bank_name?: string | null;

  /** Bank Identifier Code of the bank associated with the bank account. */
  bic?: string | null;

  /**
   * Owner's verified full name. Values are verified or provided by Giropay directly
   * (if supported) at the time of authorization or settlement. They cannot be set or mutated.
   * Giropay rarely provides this information so the attribute is usually empty.
   */
  verified_name?: string | null;
}

export interface PaymentMethodDetailsGrabpay {
  /** Unique transaction id generated by GrabPay */
  transaction_id?: string | null;
}

export interface PaymentMethodDetailsIdeal {
  /** The customer's bank. Can be one of `abn_amro`, `asn_bank`, `bunq`, `handelsbanken`, `ing`, `knab`, `moneyou`, `rabobank`, `regiobank`, `revolut`, `sns_bank`, `triodos_bank`, or `van_lanschot`. */
  bank?:
    | "abn_amro"
    | "asn_bank"
    | "bunq"
    | "handelsbanken"
    | "ing"
    | "knab"
    | "moneyou"
    | "rabobank"
    | "regiobank"
    | "revolut"
    | "sns_bank"
    | "triodos_bank"
    | "van_lanschot"
    | null;

  /** The Bank Identifier Code of the customer's bank. */
  bic?:
    | "ABNANL2A"
    | "ASNBNL21"
    | "BUNQNL2A"
    | "FVLBNL22"
    | "HANDNL2A"
    | "INGBNL2A"
    | "KNABNL2H"
    | "MOYONL21"
    | "RABONL2U"
    | "RBRBNL21"
    | "REVOLT21"
    | "SNSBNL2A"
    | "TRIONL2U"
    | null;

  /** The ID of the SEPA Direct Debit PaymentMethod which was generated by this Charge. */
  generated_sepa_debit?: string | PaymentMethod | null;

  /** The mandate for the SEPA Direct Debit PaymentMethod which was generated by this Charge. */
  generated_sepa_debit_mandate?: string | Mandate | null;

  /** Last four characters of the IBAN. */
  iban_last4?: string | null;

  /**
   * Owner's verified full name. Values are verified or provided by iDEAL directly
   * (if supported) at the time of authorization or settlement. They cannot be set or mutated.
   */
  verified_name?: string | null;
}

export interface PaymentMethodDetailsInteracPresent {
  /** Card brand. Can be `interac`, `mastercard` or `visa`. */
  brand?: string | null;

  /** The cardholder name as read from the card, in [ISO 7813](https://en.wikipedia.org/wiki/ISO/IEC_7813) format. May include alphanumeric characters, special characters and first/last name separator (`/`). In some cases, the cardholder name may not be available depending on how the issuer has configured the card. Cardholder name is typically not available on swipe or contactless payments, such as those made with Apple Pay and Google Pay. */
  cardholder_name?: string | null;

  /** Two-letter ISO code representing the country of the card. You could use this attribute to get a sense of the international breakdown of cards you've collected. */
  country?: string | null;

  /** Authorization response cryptogram. */
  emv_auth_data?: string | null;

  /** Two-digit number representing the card's expiration month. */
  exp_month: number;

  /** Four-digit number representing the card's expiration year. */
  exp_year: number;

  /**
   * Uniquely identifies this particular card number. You can use this attribute to check whether two customers who’ve signed up with you are using the same card number, for example. For payment methods that tokenize card information (Apple Pay, Google Pay), the tokenized number might be provided instead of the underlying card number.
   *
   * *Starting May 1, 2021, card fingerprint in India for Connect will change to allow two fingerprints for the same card --- one for India and one for the rest of the world.*
   */
  fingerprint?: string | null;

  /** Card funding type. Can be `credit`, `debit`, `prepaid`, or `unknown`. */
  funding?: string | null;

  /** ID of a card PaymentMethod generated from the card_present PaymentMethod that may be attached to a Customer for future transactions. Only present if it was possible to generate a card PaymentMethod. */
  generated_card?: string | null;

  /** The last four digits of the card. */
  last4?: string | null;

  /** Identifies which network this charge was processed on. Can be `amex`, `cartes_bancaires`, `diners`, `discover`, `interac`, `jcb`, `mastercard`, `unionpay`, `visa`, or `unknown`. */
  network?: string | null;

  /** EMV tag 5F2D. Preferred languages specified by the integrated circuit chip. */
  preferred_locales?: string[] | null;

  /** How card details were read in this transaction. */
  read_method?:
    | "contact_emv"
    | "contactless_emv"
    | "contactless_magstripe_mode"
    | "magnetic_stripe_fallback"
    | "magnetic_stripe_track2"
    | null;

  /** A collection of fields required to be displayed on receipts. Only required for EMV transactions. */
  receipt?: PaymentMethodDetailsInteracPresentReceipt | null;
}

export interface PaymentMethodDetailsInteracPresentReceipt {
  /** The type of account being debited or credited */
  account_type?: "checking" | "savings" | "unknown";

  /** EMV tag 9F26, cryptogram generated by the integrated circuit chip. */
  application_cryptogram?: string | null;

  /** Mnenomic of the Application Identifier. */
  application_preferred_name?: string | null;

  /** Identifier for this transaction. */
  authorization_code?: string | null;

  /** EMV tag 8A. A code returned by the card issuer. */
  authorization_response_code?: string | null;

  /** How the cardholder verified ownership of the card. */
  cardholder_verification_method?: string | null;

  /** EMV tag 84. Similar to the application identifier stored on the integrated circuit chip. */
  dedicated_file_name?: string | null;

  /** The outcome of a series of EMV functions performed by the card reader. */
  terminal_verification_results?: string | null;

  /** An indication of various EMV functions performed during the transaction. */
  transaction_status_information?: string | null;
}

export interface PaymentMethodDetailsKlarna {
  /**
   * The Klarna payment method used for this transaction.
   * Can be one of `pay_later`, `pay_now`, `pay_with_financing`, or `pay_in_installments`
   */
  payment_method_category?: string | null;

  /**
   * Preferred language of the Klarna authorization page that the customer is redirected to.
   * Can be one of `de-AT`, `en-AT`, `nl-BE`, `fr-BE`, `en-BE`, `de-DE`, `en-DE`, `da-DK`, `en-DK`, `es-ES`, `en-ES`, `fi-FI`, `sv-FI`, `en-FI`, `en-GB`, `en-IE`, `it-IT`, `en-IT`, `nl-NL`, `en-NL`, `nb-NO`, `en-NO`, `sv-SE`, `en-SE`, `en-US`, `es-US`, `fr-FR`, or `en-FR`
   */
  preferred_locale?: string | null;
}

export interface PaymentMethodDetailsMultibanco {
  /** Entity number associated with this Multibanco payment. */
  entity?: string | null;

  /** Reference number associated with this Multibanco payment. */
  reference?: string | null;
}

export interface PaymentMethodDetailsOxxo {
  /** OXXO reference number */
  number?: string | null;
}

export interface PaymentMethodDetailsP24 {
  /** The customer's bank. Can be one of `ing`, `citi_handlowy`, `tmobile_usbugi_bankowe`, `plus_bank`, `etransfer_pocztowy24`, `banki_spbdzielcze`, `bank_nowy_bfg_sa`, `getin_bank`, `blik`, `noble_pay`, `ideabank`, `envelobank`, `santander_przelew24`, `nest_przelew`, `mbank_mtransfer`, `inteligo`, `pbac_z_ipko`, `bnp_paribas`, `credit_agricole`, `toyota_bank`, `bank_pekao_sa`, `volkswagen_bank`, `bank_millennium`, `alior_bank`, or `boz`. */
  bank?:
    | "alior_bank"
    | "bank_millennium"
    | "bank_nowy_bfg_sa"
    | "bank_pekao_sa"
    | "banki_spbdzielcze"
    | "blik"
    | "bnp_paribas"
    | "boz"
    | "citi_handlowy"
    | "credit_agricole"
    | "envelobank"
    | "etransfer_pocztowy24"
    | "getin_bank"
    | "ideabank"
    | "ing"
    | "inteligo"
    | "mbank_mtransfer"
    | "nest_przelew"
    | "noble_pay"
    | "pbac_z_ipko"
    | "plus_bank"
    | "santander_przelew24"
    | "tmobile_usbugi_bankowe"
    | "toyota_bank"
    | "volkswagen_bank"
    | null;

  /** Unique reference for this Przelewy24 payment. */
  reference?: string | null;

  /**
   * Owner's verified full name. Values are verified or provided by Przelewy24 directly
   * (if supported) at the time of authorization or settlement. They cannot be set or mutated.
   * Przelewy24 rarely provides this information so the attribute is usually empty.
   */
  verified_name?: string | null;
}

export interface PaymentMethodDetailsSepaDebit {
  /** Bank code of bank associated with the bank account. */
  bank_code?: string | null;

  /** Branch code of bank associated with the bank account. */
  branch_code?: string | null;

  /** Two-letter ISO code representing the country the bank account is located in. */
  country?: string | null;

  /** Uniquely identifies this particular bank account. You can use this attribute to check whether two bank accounts are the same. */
  fingerprint?: string | null;

  /** Last four characters of the IBAN. */
  last4?: string | null;

  /** ID of the mandate used to make this payment. */
  mandate?: string | null;
}

export interface PaymentMethodDetailsSofort {
  /** Bank code of bank associated with the bank account. */
  bank_code?: string | null;

  /** Name of the bank associated with the bank account. */
  bank_name?: string | null;

  /** Bank Identifier Code of the bank associated with the bank account. */
  bic?: string | null;

  /** Two-letter ISO code representing the country the bank account is located in. */
  country?: string | null;

  /** The ID of the SEPA Direct Debit PaymentMethod which was generated by this Charge. */
  generated_sepa_debit?: string | PaymentMethod | null;

  /** The mandate for the SEPA Direct Debit PaymentMethod which was generated by this Charge. */
  generated_sepa_debit_mandate?: string | Mandate | null;

  /** Last four characters of the IBAN. */
  iban_last4?: string | null;

  /**
   * Preferred language of the SOFORT authorization page that the customer is redirected to.
   * Can be one of `de`, `en`, `es`, `fr`, `it`, `nl`, or `pl`
   */
  preferred_language?: "de" | "en" | "es" | "fr" | "it" | "nl" | "pl" | null;

  /**
   * Owner's verified full name. Values are verified or provided by SOFORT directly
   * (if supported) at the time of authorization or settlement. They cannot be set or mutated.
   */
  verified_name?: string | null;
}

export type PaymentMethodDetailsStripeAccount = object;

export type PaymentMethodDetailsWechat = object;

export interface PaymentMethodDetailsWechatPay {
  /** Uniquely identifies this particular WeChat Pay account. You can use this attribute to check whether two WeChat accounts are the same. */
  fingerprint?: string | null;

  /** Transaction ID of this particular WeChat Pay transaction. */
  transaction_id?: string | null;
}

export interface PaymentMethodEps {
  /** The customer's bank. Should be one of `arzte_und_apotheker_bank`, `austrian_anadi_bank_ag`, `bank_austria`, `bankhaus_carl_spangler`, `bankhaus_schelhammer_und_schattera_ag`, `bawag_psk_ag`, `bks_bank_ag`, `brull_kallmus_bank_ag`, `btv_vier_lander_bank`, `capital_bank_grawe_gruppe_ag`, `dolomitenbank`, `easybank_ag`, `erste_bank_und_sparkassen`, `hypo_alpeadriabank_international_ag`, `hypo_noe_lb_fur_niederosterreich_u_wien`, `hypo_oberosterreich_salzburg_steiermark`, `hypo_tirol_bank_ag`, `hypo_vorarlberg_bank_ag`, `hypo_bank_burgenland_aktiengesellschaft`, `marchfelder_bank`, `oberbank_ag`, `raiffeisen_bankengruppe_osterreich`, `schoellerbank_ag`, `sparda_bank_wien`, `volksbank_gruppe`, `volkskreditbank_ag`, or `vr_bank_braunau`. */
  bank?:
    | "arzte_und_apotheker_bank"
    | "austrian_anadi_bank_ag"
    | "bank_austria"
    | "bankhaus_carl_spangler"
    | "bankhaus_schelhammer_und_schattera_ag"
    | "bawag_psk_ag"
    | "bks_bank_ag"
    | "brull_kallmus_bank_ag"
    | "btv_vier_lander_bank"
    | "capital_bank_grawe_gruppe_ag"
    | "dolomitenbank"
    | "easybank_ag"
    | "erste_bank_und_sparkassen"
    | "hypo_alpeadriabank_international_ag"
    | "hypo_bank_burgenland_aktiengesellschaft"
    | "hypo_noe_lb_fur_niederosterreich_u_wien"
    | "hypo_oberosterreich_salzburg_steiermark"
    | "hypo_tirol_bank_ag"
    | "hypo_vorarlberg_bank_ag"
    | "marchfelder_bank"
    | "oberbank_ag"
    | "raiffeisen_bankengruppe_osterreich"
    | "schoellerbank_ag"
    | "sparda_bank_wien"
    | "volksbank_gruppe"
    | "volkskreditbank_ag"
    | "vr_bank_braunau"
    | null;
}

export interface PaymentMethodFpx {
  /** The customer's bank, if provided. Can be one of `affin_bank`, `agrobank`, `alliance_bank`, `ambank`, `bank_islam`, `bank_muamalat`, `bank_rakyat`, `bsn`, `cimb`, `hong_leong_bank`, `hsbc`, `kfh`, `maybank2u`, `ocbc`, `public_bank`, `rhb`, `standard_chartered`, `uob`, `deutsche_bank`, `maybank2e`, or `pb_enterprise`. */
  bank:
    | "affin_bank"
    | "agrobank"
    | "alliance_bank"
    | "ambank"
    | "bank_islam"
    | "bank_muamalat"
    | "bank_rakyat"
    | "bsn"
    | "cimb"
    | "deutsche_bank"
    | "hong_leong_bank"
    | "hsbc"
    | "kfh"
    | "maybank2e"
    | "maybank2u"
    | "ocbc"
    | "pb_enterprise"
    | "public_bank"
    | "rhb"
    | "standard_chartered"
    | "uob";
}

export type PaymentMethodGiropay = object;

export type PaymentMethodGrabpay = object;

export interface PaymentMethodIdeal {
  /** The customer's bank, if provided. Can be one of `abn_amro`, `asn_bank`, `bunq`, `handelsbanken`, `ing`, `knab`, `moneyou`, `rabobank`, `regiobank`, `revolut`, `sns_bank`, `triodos_bank`, or `van_lanschot`. */
  bank?:
    | "abn_amro"
    | "asn_bank"
    | "bunq"
    | "handelsbanken"
    | "ing"
    | "knab"
    | "moneyou"
    | "rabobank"
    | "regiobank"
    | "revolut"
    | "sns_bank"
    | "triodos_bank"
    | "van_lanschot"
    | null;

  /** The Bank Identifier Code of the customer's bank, if the bank was provided. */
  bic?:
    | "ABNANL2A"
    | "ASNBNL21"
    | "BUNQNL2A"
    | "FVLBNL22"
    | "HANDNL2A"
    | "INGBNL2A"
    | "KNABNL2H"
    | "MOYONL21"
    | "RABONL2U"
    | "RBRBNL21"
    | "REVOLT21"
    | "SNSBNL2A"
    | "TRIONL2U"
    | null;
}

export type PaymentMethodInteracPresent = object;

export interface PaymentMethodKlarna {
  /** The customer's date of birth, if provided. */
  dob?: PaymentFlowsPrivatePaymentMethodsKlarnaDob | null;
}

export interface PaymentMethodOptionsAfterpayClearpay {
  /**
   * Order identifier shown to the merchant in Afterpay’s online portal. We recommend using a value that helps you answer any questions a customer might have about
   * the payment. The identifier is limited to 128 characters and may contain only letters, digits, underscores, backslashes and dashes.
   */
  reference?: string | null;
}

export type PaymentMethodOptionsAlipay = object;

export type PaymentMethodOptionsBacsDebit = object;

export interface PaymentMethodOptionsBancontact {
  /** Preferred language of the Bancontact authorization page that the customer is redirected to. */
  preferred_language: "de" | "en" | "fr" | "nl";
}

export interface PaymentMethodOptionsBoleto {
  /** The number of calendar days before a Boleto voucher expires. For example, if you create a Boleto voucher on Monday and you set expires_after_days to 2, the Boleto voucher will expire on Wednesday at 23:59 America/Sao_Paulo time. */
  expires_after_days: number;
}

export interface PaymentMethodOptionsCardInstallments {
  /** Installment plans that may be selected for this PaymentIntent. */
  available_plans?: PaymentMethodDetailsCardInstallmentsPlan[] | null;

  /** Whether Installments are enabled for this PaymentIntent. */
  enabled: boolean;

  /** Installment plan selected for this PaymentIntent. */
  plan?: PaymentMethodDetailsCardInstallmentsPlan | null;
}

export type PaymentMethodOptionsCardPresent = object;

export type PaymentMethodOptionsFpx = object;

export type PaymentMethodOptionsGiropay = object;

export type PaymentMethodOptionsGrabpay = object;

export type PaymentMethodOptionsIdeal = object;

export type PaymentMethodOptionsInteracPresent = object;

export interface PaymentMethodOptionsKlarna {
  /** Preferred locale of the Klarna checkout page that the customer is redirected to. */
  preferred_locale?: string | null;
}

export interface PaymentMethodOptionsOxxo {
  /** The number of calendar days before an OXXO invoice expires. For example, if you create an OXXO invoice on Monday and you set expires_after_days to 2, the OXXO invoice will expire on Wednesday at 23:59 America/Mexico_City time. */
  expires_after_days: number;
}

export type PaymentMethodOptionsP24 = object;

export interface PaymentMethodOptionsSofort {
  /** Preferred language of the SOFORT authorization page that the customer is redirected to. */
  preferred_language?: "de" | "en" | "es" | "fr" | "it" | "nl" | "pl" | null;
}

export interface PaymentMethodOptionsWechatPay {
  /** The app ID registered with WeChat Pay. Only required when client is ios or android. */
  app_id?: string | null;

  /** The client type that the end customer will pay from */
  client?: "android" | "ios" | "web" | null;
}

export type PaymentMethodOxxo = object;

export interface PaymentMethodP24 {
  /** The customer's bank, if provided. */
  bank?:
    | "alior_bank"
    | "bank_millennium"
    | "bank_nowy_bfg_sa"
    | "bank_pekao_sa"
    | "banki_spbdzielcze"
    | "blik"
    | "bnp_paribas"
    | "boz"
    | "citi_handlowy"
    | "credit_agricole"
    | "envelobank"
    | "etransfer_pocztowy24"
    | "getin_bank"
    | "ideabank"
    | "ing"
    | "inteligo"
    | "mbank_mtransfer"
    | "nest_przelew"
    | "noble_pay"
    | "pbac_z_ipko"
    | "plus_bank"
    | "santander_przelew24"
    | "tmobile_usbugi_bankowe"
    | "toyota_bank"
    | "volkswagen_bank"
    | null;
}

export interface PaymentMethodSepaDebit {
  /** Bank code of bank associated with the bank account. */
  bank_code?: string | null;

  /** Branch code of bank associated with the bank account. */
  branch_code?: string | null;

  /** Two-letter ISO code representing the country the bank account is located in. */
  country?: string | null;

  /** Uniquely identifies this particular bank account. You can use this attribute to check whether two bank accounts are the same. */
  fingerprint?: string | null;

  /** Information about the object that generated this PaymentMethod. */
  generated_from?: SepaDebitGeneratedFrom | null;

  /** Last four characters of the IBAN. */
  last4?: string | null;
}

export interface PaymentMethodSofort {
  /** Two-letter ISO code representing the country the bank account is located in. */
  country?: string | null;
}

export type PaymentMethodWechatPay = object;

export interface PaymentPagesCheckoutSessionAfterExpiration {
  /** When set, configuration used to recover the Checkout Session on expiry. */
  recovery?: PaymentPagesCheckoutSessionAfterExpirationRecovery | null;
}

export interface PaymentPagesCheckoutSessionAfterExpirationRecovery {
  /** Enables user redeemable promotion codes on the recovered Checkout Sessions. Defaults to `false` */
  allow_promotion_codes: boolean;

  /**
   * If `true`, a recovery url will be generated to recover this Checkout Session if it
   * expires before a transaction is completed. It will be attached to the
   * Checkout Session object upon expiration.
   */
  enabled: boolean;

  /**
   * The timestamp at which the recovery URL will expire.
   * @format unix-time
   */
  expires_at?: number | null;

  /** URL that creates a new Checkout Session when clicked that is a copy of this expired Checkout Session */
  url?: string | null;
}

export interface PaymentPagesCheckoutSessionAutomaticTax {
  /** Indicates whether automatic tax is enabled for the session */
  enabled: boolean;

  /** The status of the most recent automated tax calculation for this session. */
  status?: "complete" | "failed" | "requires_location_inputs" | null;
}

export interface PaymentPagesCheckoutSessionConsent {
  /**
   * If `opt_in`, the customer consents to receiving promotional communications
   * from the merchant about this Checkout Session.
   */
  promotions?: "opt_in" | "opt_out" | null;
}

export interface PaymentPagesCheckoutSessionConsentCollection {
  /**
   * If set to `auto`, enables the collection of customer consent for promotional communications. The Checkout
   * Session will determine whether to display an option to opt into promotional communication
   * from the merchant depending on the customer's locale. Only available to US merchants.
   */
  promotions?: "auto" | null;
}

export interface PaymentPagesCheckoutSessionCustomerDetails {
  /**
   * The email associated with the Customer, if one exists, on the Checkout Session at the time of checkout or at time of session expiry.
   * Otherwise, if the customer has consented to promotional content, this value is the most recent valid email provided by the customer on the Checkout form.
   */
  email?: string | null;

  /** The customer's phone number at the time of checkout */
  phone?: string | null;

  /** The customer’s tax exempt status at time of checkout. */
  tax_exempt?: "exempt" | "none" | "reverse" | null;

  /** The customer’s tax IDs at time of checkout. */
  tax_ids?: PaymentPagesCheckoutSessionTaxId[] | null;
}

export interface PaymentPagesCheckoutSessionPhoneNumberCollection {
  /** Indicates whether phone number collection is enabled for the session */
  enabled: boolean;
}

export interface PaymentPagesCheckoutSessionShippingAddressCollection {
  /**
   * An array of two-letter ISO country codes representing which countries Checkout should provide as options for
   * shipping locations. Unsupported country codes: `AS, CX, CC, CU, HM, IR, KP, MH, FM, NF, MP, PW, SD, SY, UM, VI`.
   */
  allowed_countries: (
    | "AC"
    | "AD"
    | "AE"
    | "AF"
    | "AG"
    | "AI"
    | "AL"
    | "AM"
    | "AO"
    | "AQ"
    | "AR"
    | "AT"
    | "AU"
    | "AW"
    | "AX"
    | "AZ"
    | "BA"
    | "BB"
    | "BD"
    | "BE"
    | "BF"
    | "BG"
    | "BH"
    | "BI"
    | "BJ"
    | "BL"
    | "BM"
    | "BN"
    | "BO"
    | "BQ"
    | "BR"
    | "BS"
    | "BT"
    | "BV"
    | "BW"
    | "BY"
    | "BZ"
    | "CA"
    | "CD"
    | "CF"
    | "CG"
    | "CH"
    | "CI"
    | "CK"
    | "CL"
    | "CM"
    | "CN"
    | "CO"
    | "CR"
    | "CV"
    | "CW"
    | "CY"
    | "CZ"
    | "DE"
    | "DJ"
    | "DK"
    | "DM"
    | "DO"
    | "DZ"
    | "EC"
    | "EE"
    | "EG"
    | "EH"
    | "ER"
    | "ES"
    | "ET"
    | "FI"
    | "FJ"
    | "FK"
    | "FO"
    | "FR"
    | "GA"
    | "GB"
    | "GD"
    | "GE"
    | "GF"
    | "GG"
    | "GH"
    | "GI"
    | "GL"
    | "GM"
    | "GN"
    | "GP"
    | "GQ"
    | "GR"
    | "GS"
    | "GT"
    | "GU"
    | "GW"
    | "GY"
    | "HK"
    | "HN"
    | "HR"
    | "HT"
    | "HU"
    | "ID"
    | "IE"
    | "IL"
    | "IM"
    | "IN"
    | "IO"
    | "IQ"
    | "IS"
    | "IT"
    | "JE"
    | "JM"
    | "JO"
    | "JP"
    | "KE"
    | "KG"
    | "KH"
    | "KI"
    | "KM"
    | "KN"
    | "KR"
    | "KW"
    | "KY"
    | "KZ"
    | "LA"
    | "LB"
    | "LC"
    | "LI"
    | "LK"
    | "LR"
    | "LS"
    | "LT"
    | "LU"
    | "LV"
    | "LY"
    | "MA"
    | "MC"
    | "MD"
    | "ME"
    | "MF"
    | "MG"
    | "MK"
    | "ML"
    | "MM"
    | "MN"
    | "MO"
    | "MQ"
    | "MR"
    | "MS"
    | "MT"
    | "MU"
    | "MV"
    | "MW"
    | "MX"
    | "MY"
    | "MZ"
    | "NA"
    | "NC"
    | "NE"
    | "NG"
    | "NI"
    | "NL"
    | "NO"
    | "NP"
    | "NR"
    | "NU"
    | "NZ"
    | "OM"
    | "PA"
    | "PE"
    | "PF"
    | "PG"
    | "PH"
    | "PK"
    | "PL"
    | "PM"
    | "PN"
    | "PR"
    | "PS"
    | "PT"
    | "PY"
    | "QA"
    | "RE"
    | "RO"
    | "RS"
    | "RU"
    | "RW"
    | "SA"
    | "SB"
    | "SC"
    | "SE"
    | "SG"
    | "SH"
    | "SI"
    | "SJ"
    | "SK"
    | "SL"
    | "SM"
    | "SN"
    | "SO"
    | "SR"
    | "SS"
    | "ST"
    | "SV"
    | "SX"
    | "SZ"
    | "TA"
    | "TC"
    | "TD"
    | "TF"
    | "TG"
    | "TH"
    | "TJ"
    | "TK"
    | "TL"
    | "TM"
    | "TN"
    | "TO"
    | "TR"
    | "TT"
    | "TV"
    | "TW"
    | "TZ"
    | "UA"
    | "UG"
    | "US"
    | "UY"
    | "UZ"
    | "VA"
    | "VC"
    | "VE"
    | "VG"
    | "VN"
    | "VU"
    | "WF"
    | "WS"
    | "XK"
    | "YE"
    | "YT"
    | "ZA"
    | "ZM"
    | "ZW"
    | "ZZ"
  )[];
}

export interface PaymentPagesCheckoutSessionShippingOption {
  /** A non-negative integer in cents representing how much to charge. */
  shipping_amount: number;

  /** The shipping rate. */
  shipping_rate: string | ShippingRate;
}

export interface PaymentPagesCheckoutSessionTaxId {
  /** The type of the tax ID, one of `eu_vat`, `br_cnpj`, `br_cpf`, `gb_vat`, `nz_gst`, `au_abn`, `au_arn`, `in_gst`, `no_vat`, `za_vat`, `ch_vat`, `mx_rfc`, `sg_uen`, `ru_inn`, `ru_kpp`, `ca_bn`, `hk_br`, `es_cif`, `tw_vat`, `th_vat`, `jp_cn`, `jp_rn`, `li_uid`, `my_itn`, `us_ein`, `kr_brn`, `ca_qst`, `ca_gst_hst`, `ca_pst_bc`, `ca_pst_mb`, `ca_pst_sk`, `my_sst`, `sg_gst`, `ae_trn`, `cl_tin`, `sa_vat`, `id_npwp`, `my_frp`, `il_vat`, `ge_vat`, `ua_vat`, or `unknown` */
  type:
    | "ae_trn"
    | "au_abn"
    | "au_arn"
    | "br_cnpj"
    | "br_cpf"
    | "ca_bn"
    | "ca_gst_hst"
    | "ca_pst_bc"
    | "ca_pst_mb"
    | "ca_pst_sk"
    | "ca_qst"
    | "ch_vat"
    | "cl_tin"
    | "es_cif"
    | "eu_vat"
    | "gb_vat"
    | "ge_vat"
    | "hk_br"
    | "id_npwp"
    | "il_vat"
    | "in_gst"
    | "jp_cn"
    | "jp_rn"
    | "kr_brn"
    | "li_uid"
    | "mx_rfc"
    | "my_frp"
    | "my_itn"
    | "my_sst"
    | "no_vat"
    | "nz_gst"
    | "ru_inn"
    | "ru_kpp"
    | "sa_vat"
    | "sg_gst"
    | "sg_uen"
    | "th_vat"
    | "tw_vat"
    | "ua_vat"
    | "unknown"
    | "us_ein"
    | "za_vat";

  /** The value of the tax ID. */
  value?: string | null;
}

export interface PaymentPagesCheckoutSessionTaxIdCollection {
  /** Indicates whether tax ID collection is enabled for the session */
  enabled: boolean;
}

export interface PaymentPagesCheckoutSessionTotalDetails {
  /** This is the sum of all the line item discounts. */
  amount_discount: number;

  /** This is the sum of all the line item shipping amounts. */
  amount_shipping?: number | null;

  /** This is the sum of all the line item tax amounts. */
  amount_tax: number;
  breakdown?: PaymentPagesCheckoutSessionTotalDetailsResourceBreakdown;
}

export interface PaymentPagesCheckoutSessionTotalDetailsResourceBreakdown {
  /** The aggregated line item discounts. */
  discounts: LineItemsDiscountAmount[];

  /** The aggregated line item tax amounts by rate. */
  taxes: LineItemsTaxAmount[];
}

export type PaymentSource =
  | Account
  | AlipayAccount
  | BankAccount
  | BitcoinReceiver
  | Card
  | Source
  | (Account & AlipayAccount & BankAccount & BitcoinReceiver & Card & Source);

/**
* A `Payout` object is created when you receive funds from Stripe, or when you
initiate a payout to either a bank account or debit card of a [connected
Stripe account](/docs/connect/bank-debit-card-payouts). You can retrieve individual payouts,
as well as list all payouts. Payouts are made on [varying
schedules](/docs/connect/manage-payout-schedule), depending on your country and
industry.

Related guide: [Receiving Payouts](https://stripe.com/docs/payouts).
*/
export interface Payout {
  /** Amount (in %s) to be transferred to your bank account or debit card. */
  amount: number;

  /**
   * Date the payout is expected to arrive in the bank. This factors in delays like weekends or bank holidays.
   * @format unix-time
   */
  arrival_date: number;

  /** Returns `true` if the payout was created by an [automated payout schedule](https://stripe.com/docs/payouts#payout-schedule), and `false` if it was [requested manually](https://stripe.com/docs/payouts#manual-payouts). */
  automatic: boolean;

  /** ID of the balance transaction that describes the impact of this payout on your account balance. */
  balance_transaction?: string | BalanceTransaction | null;

  /**
   * Time at which the object was created. Measured in seconds since the Unix epoch.
   * @format unix-time
   */
  created: number;

  /** Three-letter [ISO currency code](https://www.iso.org/iso-4217-currency-codes.html), in lowercase. Must be a [supported currency](https://stripe.com/docs/currencies). */
  currency: string;

  /** An arbitrary string attached to the object. Often useful for displaying to users. */
  description?: string | null;

  /** ID of the bank account or card the payout was sent to. */
  destination?:
    | string
    | BankAccount
    | Card
    | DeletedBankAccount
    | DeletedCard
    | (BankAccount & Card & DeletedBankAccount & DeletedCard)
    | null;

  /** If the payout failed or was canceled, this will be the ID of the balance transaction that reversed the initial balance transaction, and puts the funds from the failed payout back in your balance. */
  failure_balance_transaction?: string | BalanceTransaction | null;

  /** Error code explaining reason for payout failure if available. See [Types of payout failures](https://stripe.com/docs/api#payout_failures) for a list of failure codes. */
  failure_code?: string | null;

  /** Message to user further explaining reason for payout failure if available. */
  failure_message?: string | null;

  /** Unique identifier for the object. */
  id: string;

  /** Has the value `true` if the object exists in live mode or the value `false` if the object exists in test mode. */
  livemode: boolean;

  /** Set of [key-value pairs](https://stripe.com/docs/api/metadata) that you can attach to an object. This can be useful for storing additional information about the object in a structured format. */
  metadata?: Record<string, string>;

  /** The method used to send this payout, which can be `standard` or `instant`. `instant` is only supported for payouts to debit cards. (See [Instant payouts for marketplaces](https://stripe.com/blog/instant-payouts-for-marketplaces) for more information.) */
  method: string;

  /** String representing the object's type. Objects of the same type share the same value. */
  object: "payout";

  /** If the payout reverses another, this is the ID of the original payout. */
  original_payout?: string | Payout | null;

  /** If the payout was reversed, this is the ID of the payout that reverses this payout. */
  reversed_by?: string | Payout | null;

  /** The source balance this payout came from. One of `card`, `fpx`, or `bank_account`. */
  source_type: string;

  /** Extra information about a payout to be displayed on the user's bank statement. */
  statement_descriptor?: string | null;

  /** Current status of the payout: `paid`, `pending`, `in_transit`, `canceled` or `failed`. A payout is `pending` until it is submitted to the bank, when it becomes `in_transit`. The status then changes to `paid` if the transaction goes through, or to `failed` or `canceled` (within 5 business days). Some failed payouts may initially show as `paid` but then change to `failed`. */
  status: string;

  /** Can be `bank_account` or `card`. */
  type: "bank_account" | "card";
}

export interface Period {
  /**
   * The end date of this usage period. All usage up to and including this point in time is included.
   * @format unix-time
   */
  end?: number | null;

  /**
   * The start date of this usage period. All usage after this point in time is included.
   * @format unix-time
   */
  start?: number | null;
}

/**
* This is an object representing a person associated with a Stripe account.

A platform cannot access a Standard or Express account's persons after the account starts onboarding, such as after generating an account link for the account.
See the [Standard onboarding](https://stripe.com/docs/connect/standard-accounts) or [Express onboarding documentation](https://stripe.com/docs/connect/express-accounts) for information about platform pre-filling and account onboarding steps.

Related guide: [Handling Identity Verification with the API](https://stripe.com/docs/connect/identity-verification-api#person-information).
*/
export interface Person {
  /** The account the person is associated with. */
  account: string;
  address?: Address;
  address_kana?: LegalEntityJapanAddress | null;
  address_kanji?: LegalEntityJapanAddress | null;

  /**
   * Time at which the object was created. Measured in seconds since the Unix epoch.
   * @format unix-time
   */
  created: number;
  dob?: LegalEntityDob;

  /** The person's email address. */
  email?: string | null;

  /** The person's first name. */
  first_name?: string | null;

  /** The Kana variation of the person's first name (Japan only). */
  first_name_kana?: string | null;

  /** The Kanji variation of the person's first name (Japan only). */
  first_name_kanji?: string | null;

  /** A list of alternate names or aliases that the person is known by. */
  full_name_aliases?: string[];
  future_requirements?: PersonFutureRequirements | null;

  /** The person's gender (International regulations require either "male" or "female"). */
  gender?: string | null;

  /** Unique identifier for the object. */
  id: string;

  /** Whether the person's `id_number` was provided. */
  id_number_provided?: boolean;

  /** The person's last name. */
  last_name?: string | null;

  /** The Kana variation of the person's last name (Japan only). */
  last_name_kana?: string | null;

  /** The Kanji variation of the person's last name (Japan only). */
  last_name_kanji?: string | null;

  /** The person's maiden name. */
  maiden_name?: string | null;

  /** Set of [key-value pairs](https://stripe.com/docs/api/metadata) that you can attach to an object. This can be useful for storing additional information about the object in a structured format. */
  metadata?: Record<string, string>;

  /** The country where the person is a national. */
  nationality?: string | null;

  /** String representing the object's type. Objects of the same type share the same value. */
  object: "person";

  /** The person's phone number. */
  phone?: string | null;

  /** Indicates if the person or any of their representatives, family members, or other closely related persons, declares that they hold or have held an important public job or function, in any jurisdiction. */
  political_exposure?: "existing" | "none";
  relationship?: PersonRelationship;
  requirements?: PersonRequirements | null;

  /** Whether the last four digits of the person's Social Security number have been provided (U.S. only). */
  ssn_last_4_provided?: boolean;
  verification?: LegalEntityPersonVerification;
}

export interface PersonFutureRequirements {
  /** Fields that are due and can be satisfied by providing the corresponding alternative fields instead. */
  alternatives?: AccountRequirementsAlternative[] | null;

  /** Fields that need to be collected to keep the person's account enabled. If not collected by the account's `future_requirements[current_deadline]`, these fields will transition to the main `requirements` hash, and may immediately become `past_due`, but the account may also be given a grace period depending on the account's enablement state prior to transition. */
  currently_due: string[];

  /** Fields that are `currently_due` and need to be collected again because validation or verification failed. */
  errors: AccountRequirementsError[];

  /** Fields that need to be collected assuming all volume thresholds are reached. As they become required, they appear in `currently_due` as well, and the account's `future_requirements[current_deadline]` becomes set. */
  eventually_due: string[];

  /** Fields that weren't collected by the account's `requirements.current_deadline`. These fields need to be collected to enable the person's account. New fields will never appear here; `future_requirements.past_due` will always be a subset of `requirements.past_due`. */
  past_due: string[];

  /** Fields that may become required depending on the results of verification or review. Will be an empty array unless an asynchronous verification is pending. If verification fails, these fields move to `eventually_due` or `currently_due`. */
  pending_verification: string[];
}

export interface PersonRelationship {
  /** Whether the person is a director of the account's legal entity. Directors are typically members of the governing board of the company, or responsible for ensuring the company meets its regulatory obligations. */
  director?: boolean | null;

  /** Whether the person has significant responsibility to control, manage, or direct the organization. */
  executive?: boolean | null;

  /** Whether the person is an owner of the account’s legal entity. */
  owner?: boolean | null;

  /** The percent owned by the person of the account's legal entity. */
  percent_ownership?: number | null;

  /** Whether the person is authorized as the primary representative of the account. This is the person nominated by the business to provide information about themselves, and general information about the account. There can only be one representative at any given time. At the time the account is created, this person should be set to the person responsible for opening the account. */
  representative?: boolean | null;

  /** The person's title (e.g., CEO, Support Engineer). */
  title?: string | null;
}

export interface PersonRequirements {
  /** Fields that are due and can be satisfied by providing the corresponding alternative fields instead. */
  alternatives?: AccountRequirementsAlternative[] | null;

  /** Fields that need to be collected to keep the person's account enabled. If not collected by the account's `current_deadline`, these fields appear in `past_due` as well, and the account is disabled. */
  currently_due: string[];

  /** Fields that are `currently_due` and need to be collected again because validation or verification failed. */
  errors: AccountRequirementsError[];

  /** Fields that need to be collected assuming all volume thresholds are reached. As they become required, they appear in `currently_due` as well, and the account's `current_deadline` becomes set. */
  eventually_due: string[];

  /** Fields that weren't collected by the account's `current_deadline`. These fields need to be collected to enable the person's account. */
  past_due: string[];

  /** Fields that may become required depending on the results of verification or review. Will be an empty array unless an asynchronous verification is pending. If verification fails, these fields move to `eventually_due`, `currently_due`, or `past_due`. */
  pending_verification: string[];
}

/**
* You can now model subscriptions more flexibly using the [Prices API](https://stripe.com/docs/api#prices). It replaces the Plans API and is backwards compatible to simplify your migration.

Plans define the base price, currency, and billing cycle for recurring purchases of products.
[Products](https://stripe.com/docs/api#products) help you track inventory or provisioning, and plans help you track pricing. Different physical goods or levels of service should be represented by products, and pricing options should be represented by plans. This approach lets you change prices without having to change your provisioning scheme.

For example, you might have a single "gold" product that has plans for $10/month, $100/year, €9/month, and €90/year.

Related guides: [Set up a subscription](https://stripe.com/docs/billing/subscriptions/set-up-subscription) and more about [products and prices](https://stripe.com/docs/billing/prices-guide).
*/
export interface Plan {
  /** Whether the plan can be used for new purchases. */
  active: boolean;

  /** Specifies a usage aggregation strategy for plans of `usage_type=metered`. Allowed values are `sum` for summing up all usage during a period, `last_during_period` for using the last usage record reported within a period, `last_ever` for using the last usage record ever (across period bounds) or `max` which uses the usage record with the maximum reported usage during a period. Defaults to `sum`. */
  aggregate_usage?: "last_during_period" | "last_ever" | "max" | "sum" | null;

  /** The unit amount in %s to be charged, represented as a whole integer if possible. Only set if `billing_scheme=per_unit`. */
  amount?: number | null;

  /**
   * The unit amount in %s to be charged, represented as a decimal string with at most 12 decimal places. Only set if `billing_scheme=per_unit`.
   * @format decimal
   */
  amount_decimal?: string | null;

  /** Describes how to compute the price per period. Either `per_unit` or `tiered`. `per_unit` indicates that the fixed amount (specified in `amount`) will be charged per unit in `quantity` (for plans with `usage_type=licensed`), or per unit of total usage (for plans with `usage_type=metered`). `tiered` indicates that the unit pricing will be computed using a tiering strategy as defined using the `tiers` and `tiers_mode` attributes. */
  billing_scheme: "per_unit" | "tiered";

  /**
   * Time at which the object was created. Measured in seconds since the Unix epoch.
   * @format unix-time
   */
  created: number;

  /** Three-letter [ISO currency code](https://www.iso.org/iso-4217-currency-codes.html), in lowercase. Must be a [supported currency](https://stripe.com/docs/currencies). */
  currency: string;

  /** Unique identifier for the object. */
  id: string;

  /** The frequency at which a subscription is billed. One of `day`, `week`, `month` or `year`. */
  interval: "day" | "month" | "week" | "year";

  /** The number of intervals (specified in the `interval` attribute) between subscription billings. For example, `interval=month` and `interval_count=3` bills every 3 months. */
  interval_count: number;

  /** Has the value `true` if the object exists in live mode or the value `false` if the object exists in test mode. */
  livemode: boolean;

  /** Set of [key-value pairs](https://stripe.com/docs/api/metadata) that you can attach to an object. This can be useful for storing additional information about the object in a structured format. */
  metadata?: Record<string, string>;

  /** A brief description of the plan, hidden from customers. */
  nickname?: string | null;

  /** String representing the object's type. Objects of the same type share the same value. */
  object: "plan";

  /** The product whose pricing this plan determines. */
  product?: string | Product | DeletedProduct | (Product & DeletedProduct) | null;

  /** Each element represents a pricing tier. This parameter requires `billing_scheme` to be set to `tiered`. See also the documentation for `billing_scheme`. */
  tiers?: PlanTier[];

  /** Defines if the tiering price should be `graduated` or `volume` based. In `volume`-based tiering, the maximum quantity within a period determines the per unit price. In `graduated` tiering, pricing can change as the quantity grows. */
  tiers_mode?: "graduated" | "volume" | null;

  /** Apply a transformation to the reported usage or set quantity before computing the amount billed. Cannot be combined with `tiers`. */
  transform_usage?: TransformUsage | null;

  /** Default number of trial days when subscribing a customer to this plan using [`trial_from_plan=true`](https://stripe.com/docs/api#create_subscription-trial_from_plan). */
  trial_period_days?: number | null;

  /** Configures how the quantity per period should be determined. Can be either `metered` or `licensed`. `licensed` automatically bills the `quantity` set when adding it to a subscription. `metered` aggregates the total usage based on usage records. Defaults to `licensed`. */
  usage_type: "licensed" | "metered";
}

export interface PlanTier {
  /** Price for the entire tier. */
  flat_amount?: number | null;

  /**
   * Same as `flat_amount`, but contains a decimal value with at most 12 decimal places.
   * @format decimal
   */
  flat_amount_decimal?: string | null;

  /** Per unit price for units relevant to the tier. */
  unit_amount?: number | null;

  /**
   * Same as `unit_amount`, but contains a decimal value with at most 12 decimal places.
   * @format decimal
   */
  unit_amount_decimal?: string | null;

  /** Up to and including to this quantity will be contained in the tier. */
  up_to?: number | null;
}

export interface PlatformTaxFee {
  /** The Connected account that incurred this charge. */
  account: string;

  /** Unique identifier for the object. */
  id: string;

  /** String representing the object's type. Objects of the same type share the same value. */
  object: "platform_tax_fee";

  /** The payment object that caused this tax to be inflicted. */
  source_transaction: string;

  /** The type of tax (VAT). */
  type: string;
}

export interface PortalBusinessProfile {
  /** The messaging shown to customers in the portal. */
  headline?: string | null;

  /** A link to the business’s publicly available privacy policy. */
  privacy_policy_url: string;

  /** A link to the business’s publicly available terms of service. */
  terms_of_service_url: string;
}

export interface PortalCustomerUpdate {
  /** The types of customer updates that are supported. When empty, customers are not updateable. */
  allowed_updates: ("address" | "email" | "phone" | "shipping" | "tax_id")[];

  /** Whether the feature is enabled. */
  enabled: boolean;
}

export interface PortalFeatures {
  customer_update: PortalCustomerUpdate;
  invoice_history: PortalInvoiceList;
  payment_method_update: PortalPaymentMethodUpdate;
  subscription_cancel: PortalSubscriptionCancel;
  subscription_pause: PortalSubscriptionPause;
  subscription_update: PortalSubscriptionUpdate;
}

export interface PortalInvoiceList {
  /** Whether the feature is enabled. */
  enabled: boolean;
}

export interface PortalPaymentMethodUpdate {
  /** Whether the feature is enabled. */
  enabled: boolean;
}

export interface PortalSubscriptionCancel {
  cancellation_reason: PortalSubscriptionCancellationReason;

  /** Whether the feature is enabled. */
  enabled: boolean;

  /** Whether to cancel subscriptions immediately or at the end of the billing period. */
  mode: "at_period_end" | "immediately";

  /** Whether to create prorations when canceling subscriptions. Possible values are `none` and `create_prorations`. */
  proration_behavior: "always_invoice" | "create_prorations" | "none";
}

export interface PortalSubscriptionCancellationReason {
  /** Whether the feature is enabled. */
  enabled: boolean;

  /** Which cancellation reasons will be given as options to the customer. */
  options: (
    | "customer_service"
    | "low_quality"
    | "missing_features"
    | "other"
    | "switched_service"
    | "too_complex"
    | "too_expensive"
    | "unused"
  )[];
}

export interface PortalSubscriptionPause {
  /** Whether the feature is enabled. */
  enabled: boolean;
}

export interface PortalSubscriptionUpdate {
  /** The types of subscription updates that are supported for items listed in the `products` attribute. When empty, subscriptions are not updateable. */
  default_allowed_updates: ("price" | "promotion_code" | "quantity")[];

  /** Whether the feature is enabled. */
  enabled: boolean;

  /** The list of products that support subscription updates. */
  products?: PortalSubscriptionUpdateProduct[] | null;

  /** Determines how to handle prorations resulting from subscription updates. Valid values are `none`, `create_prorations`, and `always_invoice`. */
  proration_behavior: "always_invoice" | "create_prorations" | "none";
}

export interface PortalSubscriptionUpdateProduct {
  /** The list of price IDs which, when subscribed to, a subscription can be updated. */
  prices: string[];

  /** The product ID. */
  product: string;
}

/**
* Prices define the unit cost, currency, and (optional) billing cycle for both recurring and one-time purchases of products.
[Products](https://stripe.com/docs/api#products) help you track inventory or provisioning, and prices help you track payment terms. Different physical goods or levels of service should be represented by products, and pricing options should be represented by prices. This approach lets you change prices without having to change your provisioning scheme.

For example, you might have a single "gold" product that has prices for $10/month, $100/year, and €9 once.

Related guides: [Set up a subscription](https://stripe.com/docs/billing/subscriptions/set-up-subscription), [create an invoice](https://stripe.com/docs/billing/invoices/create), and more about [products and prices](https://stripe.com/docs/billing/prices-guide).
*/
export interface Price {
  /** Whether the price can be used for new purchases. */
  active: boolean;

  /** Describes how to compute the price per period. Either `per_unit` or `tiered`. `per_unit` indicates that the fixed amount (specified in `unit_amount` or `unit_amount_decimal`) will be charged per unit in `quantity` (for prices with `usage_type=licensed`), or per unit of total usage (for prices with `usage_type=metered`). `tiered` indicates that the unit pricing will be computed using a tiering strategy as defined using the `tiers` and `tiers_mode` attributes. */
  billing_scheme: "per_unit" | "tiered";

  /**
   * Time at which the object was created. Measured in seconds since the Unix epoch.
   * @format unix-time
   */
  created: number;

  /** Three-letter [ISO currency code](https://www.iso.org/iso-4217-currency-codes.html), in lowercase. Must be a [supported currency](https://stripe.com/docs/currencies). */
  currency: string;

  /** Unique identifier for the object. */
  id: string;

  /** Has the value `true` if the object exists in live mode or the value `false` if the object exists in test mode. */
  livemode: boolean;

  /** A lookup key used to retrieve prices dynamically from a static string. This may be up to 200 characters. */
  lookup_key?: string | null;

  /** Set of [key-value pairs](https://stripe.com/docs/api/metadata) that you can attach to an object. This can be useful for storing additional information about the object in a structured format. */
  metadata: Record<string, string>;

  /** A brief description of the price, hidden from customers. */
  nickname?: string | null;

  /** String representing the object's type. Objects of the same type share the same value. */
  object: "price";

  /** The ID of the product this price is associated with. */
  product: string | Product | DeletedProduct | (Product & DeletedProduct);

  /** The recurring components of a price such as `interval` and `usage_type`. */
  recurring?: Recurring | null;

  /** Specifies whether the price is considered inclusive of taxes or exclusive of taxes. One of `inclusive`, `exclusive`, or `unspecified`. Once specified as either `inclusive` or `exclusive`, it cannot be changed. */
  tax_behavior?: "exclusive" | "inclusive" | "unspecified" | null;

  /** Each element represents a pricing tier. This parameter requires `billing_scheme` to be set to `tiered`. See also the documentation for `billing_scheme`. */
  tiers?: PriceTier[];

  /** Defines if the tiering price should be `graduated` or `volume` based. In `volume`-based tiering, the maximum quantity within a period determines the per unit price. In `graduated` tiering, pricing can change as the quantity grows. */
  tiers_mode?: "graduated" | "volume" | null;

  /** Apply a transformation to the reported usage or set quantity before computing the amount billed. Cannot be combined with `tiers`. */
  transform_quantity?: TransformQuantity | null;

  /** One of `one_time` or `recurring` depending on whether the price is for a one-time purchase or a recurring (subscription) purchase. */
  type: "one_time" | "recurring";

  /** The unit amount in %s to be charged, represented as a whole integer if possible. Only set if `billing_scheme=per_unit`. */
  unit_amount?: number | null;

  /**
   * The unit amount in %s to be charged, represented as a decimal string with at most 12 decimal places. Only set if `billing_scheme=per_unit`.
   * @format decimal
   */
  unit_amount_decimal?: string | null;
}

export interface PriceTier {
  /** Price for the entire tier. */
  flat_amount?: number | null;

  /**
   * Same as `flat_amount`, but contains a decimal value with at most 12 decimal places.
   * @format decimal
   */
  flat_amount_decimal?: string | null;

  /** Per unit price for units relevant to the tier. */
  unit_amount?: number | null;

  /**
   * Same as `unit_amount`, but contains a decimal value with at most 12 decimal places.
   * @format decimal
   */
  unit_amount_decimal?: string | null;

  /** Up to and including to this quantity will be contained in the tier. */
  up_to?: number | null;
}

/**
* Products describe the specific goods or services you offer to your customers.
For example, you might offer a Standard and Premium version of your goods or service; each version would be a separate Product.
They can be used in conjunction with [Prices](https://stripe.com/docs/api#prices) to configure pricing in Checkout and Subscriptions.

Related guides: [Set up a subscription](https://stripe.com/docs/billing/subscriptions/set-up-subscription) or accept [one-time payments with Checkout](https://stripe.com/docs/payments/checkout/client#create-products) and more about [Products and Prices](https://stripe.com/docs/billing/prices-guide)
*/
export interface Product {
  /** Whether the product is currently available for purchase. */
  active: boolean;

  /**
   * Time at which the object was created. Measured in seconds since the Unix epoch.
   * @format unix-time
   */
  created: number;

  /** The product's description, meant to be displayable to the customer. Use this field to optionally store a long form explanation of the product being sold for your own rendering purposes. */
  description?: string | null;

  /** Unique identifier for the object. */
  id: string;

  /** A list of up to 8 URLs of images for this product, meant to be displayable to the customer. */
  images: string[];

  /** Has the value `true` if the object exists in live mode or the value `false` if the object exists in test mode. */
  livemode: boolean;

  /** Set of [key-value pairs](https://stripe.com/docs/api/metadata) that you can attach to an object. This can be useful for storing additional information about the object in a structured format. */
  metadata: Record<string, string>;

  /** The product's name, meant to be displayable to the customer. Whenever this product is sold via a subscription, name will show up on associated invoice line item descriptions. */
  name: string;

  /** String representing the object's type. Objects of the same type share the same value. */
  object: "product";

  /** The dimensions of this product for shipping purposes. */
  package_dimensions?: PackageDimensions | null;

  /** Whether this product is shipped (i.e., physical goods). */
  shippable?: boolean | null;

  /** Extra information about a product which will appear on your customer's credit card statement. In the case that multiple products are billed at once, the first statement descriptor will be used. */
  statement_descriptor?: string | null;

  /** A [tax code](https://stripe.com/docs/tax/tax-codes) ID. */
  tax_code?: string | TaxCode | null;

  /** A label that represents units of this product in Stripe and on customers’ receipts and invoices. When set, this will be included in associated invoice line item descriptions. */
  unit_label?: string | null;

  /**
   * Time at which the object was last updated. Measured in seconds since the Unix epoch.
   * @format unix-time
   */
  updated: number;

  /** A URL of a publicly-accessible webpage for this product. */
  url?: string | null;
}

/**
* A Promotion Code represents a customer-redeemable code for a coupon. It can be used to
create multiple codes for a single coupon.
*/
export interface PromotionCode {
  /** Whether the promotion code is currently active. A promotion code is only active if the coupon is also valid. */
  active: boolean;

  /** The customer-facing code. Regardless of case, this code must be unique across all active promotion codes for each customer. */
  code: string;

  /**
   * A coupon contains information about a percent-off or amount-off discount you
   * might want to apply to a customer. Coupons may be applied to [invoices](https://stripe.com/docs/api#invoices) or
   * [orders](https://stripe.com/docs/api#create_order_legacy-coupon). Coupons do not work with conventional one-off [charges](https://stripe.com/docs/api#create_charge).
   */
  coupon: Coupon;

  /**
   * Time at which the object was created. Measured in seconds since the Unix epoch.
   * @format unix-time
   */
  created: number;

  /** The customer that this promotion code can be used by. */
  customer?: string | Customer | DeletedCustomer | (Customer & DeletedCustomer) | null;

  /**
   * Date at which the promotion code can no longer be redeemed.
   * @format unix-time
   */
  expires_at?: number | null;

  /** Unique identifier for the object. */
  id: string;

  /** Has the value `true` if the object exists in live mode or the value `false` if the object exists in test mode. */
  livemode: boolean;

  /** Maximum number of times this promotion code can be redeemed. */
  max_redemptions?: number | null;

  /** Set of [key-value pairs](https://stripe.com/docs/api/metadata) that you can attach to an object. This can be useful for storing additional information about the object in a structured format. */
  metadata?: Record<string, string>;

  /** String representing the object's type. Objects of the same type share the same value. */
  object: "promotion_code";
  restrictions: PromotionCodesResourceRestrictions;

  /** Number of times this promotion code has been used. */
  times_redeemed: number;
}

export interface PromotionCodesResourceRestrictions {
  /** A Boolean indicating if the Promotion Code should only be redeemed for Customers without any successful payments or invoices */
  first_time_transaction: boolean;

  /** Minimum amount required to redeem this Promotion Code into a Coupon (e.g., a purchase must be $100 or more to work). */
  minimum_amount?: number | null;

  /** Three-letter [ISO code](https://stripe.com/docs/currencies) for minimum_amount */
  minimum_amount_currency?: string | null;
}

/**
* A Quote is a way to model prices that you'd like to provide to a customer.
Once accepted, it will automatically create an invoice, subscription or subscription schedule.
*/
export interface Quote {
  /** Total before any discounts or taxes are applied. */
  amount_subtotal: number;

  /** Total after discounts and taxes are applied. */
  amount_total: number;

  /** The amount of the application fee (if any) that will be requested to be applied to the payment and transferred to the application owner's Stripe account. Only applicable if there are no line items with recurring prices on the quote. */
  application_fee_amount?: number | null;

  /** A non-negative decimal between 0 and 100, with at most two decimal places. This represents the percentage of the subscription invoice subtotal that will be transferred to the application owner's Stripe account. Only applicable if there are line items with recurring prices on the quote. */
  application_fee_percent?: number | null;
  automatic_tax: QuotesResourceAutomaticTax;

  /** Either `charge_automatically`, or `send_invoice`. When charging automatically, Stripe will attempt to pay invoices at the end of the subscription cycle or on finalization using the default payment method attached to the subscription or customer. When sending an invoice, Stripe will email your customer an invoice with payment instructions. Defaults to `charge_automatically`. */
  collection_method: "charge_automatically" | "send_invoice";
  computed: QuotesResourceComputed;

  /**
   * Time at which the object was created. Measured in seconds since the Unix epoch.
   * @format unix-time
   */
  created: number;

  /** Three-letter [ISO currency code](https://www.iso.org/iso-4217-currency-codes.html), in lowercase. Must be a [supported currency](https://stripe.com/docs/currencies). */
  currency?: string | null;

  /** The customer which this quote belongs to. A customer is required before finalizing the quote. Once specified, it cannot be changed. */
  customer?: string | Customer | DeletedCustomer | (Customer & DeletedCustomer) | null;

  /** The tax rates applied to this quote. */
  default_tax_rates?: (string | TaxRate)[];

  /** A description that will be displayed on the quote PDF. */
  description?: string | null;

  /** The discounts applied to this quote. */
  discounts: (string | Discount)[];

  /**
   * The date on which the quote will be canceled if in `open` or `draft` status. Measured in seconds since the Unix epoch.
   * @format unix-time
   */
  expires_at: number;

  /** A footer that will be displayed on the quote PDF. */
  footer?: string | null;

  /** Details of the quote that was cloned. See the [cloning documentation](https://stripe.com/docs/quotes/clone) for more details. */
  from_quote?: QuotesResourceFromQuote | null;

  /** A header that will be displayed on the quote PDF. */
  header?: string | null;

  /** Unique identifier for the object. */
  id: string;

  /** The invoice that was created from this quote. */
  invoice?: string | Invoice | DeletedInvoice | (Invoice & DeletedInvoice) | null;

  /** All invoices will be billed using the specified settings. */
  invoice_settings?: InvoiceSettingQuoteSetting | null;

  /**
   * QuotesResourceListLineItems
   * A list of items the customer is being quoted for.
   */
  line_items?: { data: Item[]; has_more: boolean; object: "list"; url: string };

  /** Has the value `true` if the object exists in live mode or the value `false` if the object exists in test mode. */
  livemode: boolean;

  /** Set of [key-value pairs](https://stripe.com/docs/api/metadata) that you can attach to an object. This can be useful for storing additional information about the object in a structured format. */
  metadata: Record<string, string>;

  /** A unique number that identifies this particular quote. This number is assigned once the quote is [finalized](https://stripe.com/docs/quotes/overview#finalize). */
  number?: string | null;

  /** String representing the object's type. Objects of the same type share the same value. */
  object: "quote";

  /** The account on behalf of which to charge. See the [Connect documentation](https://support.stripe.com/questions/sending-invoices-on-behalf-of-connected-accounts) for details. */
  on_behalf_of?: string | Account | null;

  /** The status of the quote. */
  status: "accepted" | "canceled" | "draft" | "open";
  status_transitions: QuotesResourceStatusTransitions;

  /** The subscription that was created or updated from this quote. */
  subscription?: string | Subscription | null;
  subscription_data: QuotesResourceSubscriptionData;

  /** The subscription schedule that was created or updated from this quote. */
  subscription_schedule?: string | SubscriptionSchedule | null;
  total_details: QuotesResourceTotalDetails;

  /** The account (if any) the payments will be attributed to for tax reporting, and where funds from each payment will be transferred to for each of the invoices. */
  transfer_data?: QuotesResourceTransferData | null;
}

export interface QuotesResourceAutomaticTax {
  /** Automatically calculate taxes */
  enabled: boolean;

  /** The status of the most recent automated tax calculation for this quote. */
  status?: "complete" | "failed" | "requires_location_inputs" | null;
}

export interface QuotesResourceComputed {
  /** The definitive totals and line items the customer will be charged on a recurring basis. Takes into account the line items with recurring prices and discounts with `duration=forever` coupons only. Defaults to `null` if no inputted line items with recurring prices. */
  recurring?: QuotesResourceRecurring | null;
  upfront: QuotesResourceUpfront;
}

export interface QuotesResourceFromQuote {
  /** Whether this quote is a revision of a different quote. */
  is_revision: boolean;

  /** The quote that was cloned. */
  quote: string | Quote;
}

export interface QuotesResourceRecurring {
  /** Total before any discounts or taxes are applied. */
  amount_subtotal: number;

  /** Total after discounts and taxes are applied. */
  amount_total: number;

  /** The frequency at which a subscription is billed. One of `day`, `week`, `month` or `year`. */
  interval: "day" | "month" | "week" | "year";

  /** The number of intervals (specified in the `interval` attribute) between subscription billings. For example, `interval=month` and `interval_count=3` bills every 3 months. */
  interval_count: number;
  total_details: QuotesResourceTotalDetails;
}

export interface QuotesResourceStatusTransitions {
  /**
   * The time that the quote was accepted. Measured in seconds since Unix epoch.
   * @format unix-time
   */
  accepted_at?: number | null;

  /**
   * The time that the quote was canceled. Measured in seconds since Unix epoch.
   * @format unix-time
   */
  canceled_at?: number | null;

  /**
   * The time that the quote was finalized. Measured in seconds since Unix epoch.
   * @format unix-time
   */
  finalized_at?: number | null;
}

export interface QuotesResourceSubscriptionData {
  /**
   * When creating a new subscription, the date of which the subscription schedule will start after the quote is accepted. This date is ignored if it is in the past when the quote is accepted. Measured in seconds since the Unix epoch.
   * @format unix-time
   */
  effective_date?: number | null;

  /** Integer representing the number of trial period days before the customer is charged for the first time. */
  trial_period_days?: number | null;
}

export interface QuotesResourceTotalDetails {
  /** This is the sum of all the line item discounts. */
  amount_discount: number;

  /** This is the sum of all the line item shipping amounts. */
  amount_shipping?: number | null;

  /** This is the sum of all the line item tax amounts. */
  amount_tax: number;
  breakdown?: QuotesResourceTotalDetailsResourceBreakdown;
}

export interface QuotesResourceTotalDetailsResourceBreakdown {
  /** The aggregated line item discounts. */
  discounts: LineItemsDiscountAmount[];

  /** The aggregated line item tax amounts by rate. */
  taxes: LineItemsTaxAmount[];
}

export interface QuotesResourceTransferData {
  /** The amount in %s that will be transferred to the destination account when the invoice is paid. By default, the entire amount is transferred to the destination. */
  amount?: number | null;

  /** A non-negative decimal between 0 and 100, with at most two decimal places. This represents the percentage of the subscription invoice subtotal that will be transferred to the destination account. By default, the entire amount will be transferred to the destination. */
  amount_percent?: number | null;

  /** The account where funds from the payment will be transferred to upon payment success. */
  destination: string | Account;
}

export interface QuotesResourceUpfront {
  /** Total before any discounts or taxes are applied. */
  amount_subtotal: number;

  /** Total after discounts and taxes are applied. */
  amount_total: number;

  /**
   * QuotesResourceListLineItems
   * The line items that will appear on the next invoice after this quote is accepted. This does not include pending invoice items that exist on the customer but may still be included in the next invoice.
   */
  line_items?: { data: Item[]; has_more: boolean; object: "list"; url: string };
  total_details: QuotesResourceTotalDetails;
}

/**
* An early fraud warning indicates that the card issuer has notified us that a
charge may be fraudulent.

Related guide: [Early Fraud Warnings](https://stripe.com/docs/disputes/measuring#early-fraud-warnings).
*/
export interface RadarEarlyFraudWarning {
  /** An EFW is actionable if it has not received a dispute and has not been fully refunded. You may wish to proactively refund a charge that receives an EFW, in order to avoid receiving a dispute later. */
  actionable: boolean;

  /** ID of the charge this early fraud warning is for, optionally expanded. */
  charge: string | Charge;

  /**
   * Time at which the object was created. Measured in seconds since the Unix epoch.
   * @format unix-time
   */
  created: number;

  /** The type of fraud labelled by the issuer. One of `card_never_received`, `fraudulent_card_application`, `made_with_counterfeit_card`, `made_with_lost_card`, `made_with_stolen_card`, `misc`, `unauthorized_use_of_card`. */
  fraud_type: string;

  /** Unique identifier for the object. */
  id: string;

  /** Has the value `true` if the object exists in live mode or the value `false` if the object exists in test mode. */
  livemode: boolean;

  /** String representing the object's type. Objects of the same type share the same value. */
  object: "radar.early_fraud_warning";

  /** ID of the Payment Intent this early fraud warning is for, optionally expanded. */
  payment_intent?: string | PaymentIntent;
}

/**
* Value lists allow you to group values together which can then be referenced in rules.

Related guide: [Default Stripe Lists](https://stripe.com/docs/radar/lists#managing-list-items).
*/
export interface RadarValueList {
  /** The name of the value list for use in rules. */
  alias: string;

  /**
   * Time at which the object was created. Measured in seconds since the Unix epoch.
   * @format unix-time
   */
  created: number;

  /** The name or email address of the user who created this value list. */
  created_by: string;

  /** Unique identifier for the object. */
  id: string;

  /** The type of items in the value list. One of `card_fingerprint`, `card_bin`, `email`, `ip_address`, `country`, `string`, `case_sensitive_string`, or `customer_id`. */
  item_type:
    | "card_bin"
    | "card_fingerprint"
    | "case_sensitive_string"
    | "country"
    | "customer_id"
    | "email"
    | "ip_address"
    | "string";

  /**
   * RadarListListItemList
   * List of items contained within this value list.
   */
  list_items: { data: RadarValueListItem[]; has_more: boolean; object: "list"; url: string };

  /** Has the value `true` if the object exists in live mode or the value `false` if the object exists in test mode. */
  livemode: boolean;

  /** Set of [key-value pairs](https://stripe.com/docs/api/metadata) that you can attach to an object. This can be useful for storing additional information about the object in a structured format. */
  metadata: Record<string, string>;

  /** The name of the value list. */
  name: string;

  /** String representing the object's type. Objects of the same type share the same value. */
  object: "radar.value_list";
}

/**
* Value list items allow you to add specific values to a given Radar value list, which can then be used in rules.

Related guide: [Managing List Items](https://stripe.com/docs/radar/lists#managing-list-items).
*/
export interface RadarValueListItem {
  /**
   * Time at which the object was created. Measured in seconds since the Unix epoch.
   * @format unix-time
   */
  created: number;

  /** The name or email address of the user who added this item to the value list. */
  created_by: string;

  /** Unique identifier for the object. */
  id: string;

  /** Has the value `true` if the object exists in live mode or the value `false` if the object exists in test mode. */
  livemode: boolean;

  /** String representing the object's type. Objects of the same type share the same value. */
  object: "radar.value_list_item";

  /** The value of the item. */
  value: string;

  /** The identifier of the value list this item belongs to. */
  value_list: string;
}

export interface RadarReviewResourceLocation {
  /** The city where the payment originated. */
  city?: string | null;

  /** Two-letter ISO code representing the country where the payment originated. */
  country?: string | null;

  /** The geographic latitude where the payment originated. */
  latitude?: number | null;

  /** The geographic longitude where the payment originated. */
  longitude?: number | null;

  /** The state/county/province/region where the payment originated. */
  region?: string | null;
}

export interface RadarReviewResourceSession {
  /** The browser used in this browser session (e.g., `Chrome`). */
  browser?: string | null;

  /** Information about the device used for the browser session (e.g., `Samsung SM-G930T`). */
  device?: string | null;

  /** The platform for the browser session (e.g., `Macintosh`). */
  platform?: string | null;

  /** The version for the browser session (e.g., `61.0.3163.100`). */
  version?: string | null;
}

/**
* With `Recipient` objects, you can transfer money from your Stripe account to a
third-party bank account or debit card. The API allows you to create, delete,
and update your recipients. You can retrieve individual recipients as well as
a list of all your recipients.

**`Recipient` objects have been deprecated in favor of
[Connect](https://stripe.com/docs/connect), specifically Connect's much more powerful
[Account objects](https://stripe.com/docs/api#account). Stripe accounts that don't already use
recipients can no longer begin doing so. Please use `Account` objects
instead.**
*/
export interface Recipient {
  /** Hash describing the current account on the recipient, if there is one. */
  active_account?: BankAccount | null;

  /** CardList */
  cards?: { data: Card[]; has_more: boolean; object: "list"; url: string };

  /**
   * Time at which the object was created. Measured in seconds since the Unix epoch.
   * @format unix-time
   */
  created: number;

  /** The default card to use for creating transfers to this recipient. */
  default_card?: string | Card | null;

  /** An arbitrary string attached to the object. Often useful for displaying to users. */
  description?: string | null;
  email?: string | null;

  /** Unique identifier for the object. */
  id: string;

  /** Has the value `true` if the object exists in live mode or the value `false` if the object exists in test mode. */
  livemode: boolean;

  /** Set of [key-value pairs](https://stripe.com/docs/api/metadata) that you can attach to an object. This can be useful for storing additional information about the object in a structured format. */
  metadata: Record<string, string>;

  /** The ID of the [Custom account](https://stripe.com/docs/connect/custom-accounts) this recipient was migrated to. If set, the recipient can no longer be updated, nor can transfers be made to it: use the Custom account instead. */
  migrated_to?: string | Account | null;

  /** Full, legal name of the recipient. */
  name?: string | null;

  /** String representing the object's type. Objects of the same type share the same value. */
  object: "recipient";
  rolled_back_from?: string | Account;

  /** Type of the recipient, one of `individual` or `corporation`. */
  type: string;
}

export interface Recurring {
  /** Specifies a usage aggregation strategy for prices of `usage_type=metered`. Allowed values are `sum` for summing up all usage during a period, `last_during_period` for using the last usage record reported within a period, `last_ever` for using the last usage record ever (across period bounds) or `max` which uses the usage record with the maximum reported usage during a period. Defaults to `sum`. */
  aggregate_usage?: "last_during_period" | "last_ever" | "max" | "sum" | null;

  /** The frequency at which a subscription is billed. One of `day`, `week`, `month` or `year`. */
  interval: "day" | "month" | "week" | "year";

  /** The number of intervals (specified in the `interval` attribute) between subscription billings. For example, `interval=month` and `interval_count=3` bills every 3 months. */
  interval_count: number;

  /** Configures how the quantity per period should be determined. Can be either `metered` or `licensed`. `licensed` automatically bills the `quantity` set when adding it to a subscription. `metered` aggregates the total usage based on usage records. Defaults to `licensed`. */
  usage_type: "licensed" | "metered";
}

/**
* `Refund` objects allow you to refund a charge that has previously been created
but not yet refunded. Funds will be refunded to the credit or debit card that
was originally charged.

Related guide: [Refunds](https://stripe.com/docs/refunds).
*/
export interface Refund {
  /** Amount, in %s. */
  amount: number;

  /** Balance transaction that describes the impact on your account balance. */
  balance_transaction?: string | BalanceTransaction | null;

  /** ID of the charge that was refunded. */
  charge?: string | Charge | null;

  /**
   * Time at which the object was created. Measured in seconds since the Unix epoch.
   * @format unix-time
   */
  created: number;

  /** Three-letter [ISO currency code](https://www.iso.org/iso-4217-currency-codes.html), in lowercase. Must be a [supported currency](https://stripe.com/docs/currencies). */
  currency: string;

  /** An arbitrary string attached to the object. Often useful for displaying to users. (Available on non-card refunds only) */
  description?: string;

  /** If the refund failed, this balance transaction describes the adjustment made on your account balance that reverses the initial balance transaction. */
  failure_balance_transaction?: string | BalanceTransaction;

  /** If the refund failed, the reason for refund failure if known. Possible values are `lost_or_stolen_card`, `expired_or_canceled_card`, or `unknown`. */
  failure_reason?: string;

  /** Unique identifier for the object. */
  id: string;

  /** Set of [key-value pairs](https://stripe.com/docs/api/metadata) that you can attach to an object. This can be useful for storing additional information about the object in a structured format. */
  metadata?: Record<string, string>;

  /** String representing the object's type. Objects of the same type share the same value. */
  object: "refund";

  /** ID of the PaymentIntent that was refunded. */
  payment_intent?: string | PaymentIntent | null;

  /** Reason for the refund, either user-provided (`duplicate`, `fraudulent`, or `requested_by_customer`) or generated by Stripe internally (`expired_uncaptured_charge`). */
  reason?: string | null;

  /** This is the transaction number that appears on email receipts sent for this refund. */
  receipt_number?: string | null;

  /** The transfer reversal that is associated with the refund. Only present if the charge came from another Stripe account. See the Connect documentation for details. */
  source_transfer_reversal?: string | TransferReversal | null;

  /** Status of the refund. For credit card refunds, this can be `pending`, `succeeded`, or `failed`. For other types of refunds, it can be `pending`, `succeeded`, `failed`, or `canceled`. Refer to our [refunds](https://stripe.com/docs/refunds#failed-refunds) documentation for more details. */
  status?: string | null;

  /** If the accompanying transfer was reversed, the transfer reversal object. Only applicable if the charge was created using the destination parameter. */
  transfer_reversal?: string | TransferReversal | null;
}

/**
* The Report Run object represents an instance of a report type generated with
specific run parameters. Once the object is created, Stripe begins processing the report.
When the report has finished running, it will give you a reference to a file
where you can retrieve your results. For an overview, see
[API Access to Reports](https://stripe.com/docs/reporting/statements/api).

Note that certain report types can only be run based on your live-mode data (not test-mode
data), and will error when queried without a [live-mode API key](https://stripe.com/docs/keys#test-live-modes).
*/
export interface ReportingReportRun {
  /**
   * Time at which the object was created. Measured in seconds since the Unix epoch.
   * @format unix-time
   */
  created: number;

  /**
   * If something should go wrong during the run, a message about the failure (populated when
   *  `status=failed`).
   */
  error?: string | null;

  /** Unique identifier for the object. */
  id: string;

  /** `true` if the report is run on live mode data and `false` if it is run on test mode data. */
  livemode: boolean;

  /** String representing the object's type. Objects of the same type share the same value. */
  object: "reporting.report_run";
  parameters: FinancialReportingFinanceReportRunRunParameters;

  /** The ID of the [report type](https://stripe.com/docs/reports/report-types) to run, such as `"balance.summary.1"`. */
  report_type: string;

  /**
   * The file object representing the result of the report run (populated when
   *  `status=succeeded`).
   */
  result?: File | null;

  /**
   * Status of this report run. This will be `pending` when the run is initially created.
   *  When the run finishes, this will be set to `succeeded` and the `result` field will be populated.
   *  Rarely, we may encounter an error, at which point this will be set to `failed` and the `error` field will be populated.
   */
  status: string;

  /**
   * Timestamp at which this run successfully finished (populated when
   *  `status=succeeded`). Measured in seconds since the Unix epoch.
   * @format unix-time
   */
  succeeded_at?: number | null;
}

/**
* The Report Type resource corresponds to a particular type of report, such as
the "Activity summary" or "Itemized payouts" reports. These objects are
identified by an ID belonging to a set of enumerated values. See
[API Access to Reports documentation](https://stripe.com/docs/reporting/statements/api)
for those Report Type IDs, along with required and optional parameters.

Note that certain report types can only be run based on your live-mode data (not test-mode
data), and will error when queried without a [live-mode API key](https://stripe.com/docs/keys#test-live-modes).
*/
export interface ReportingReportType {
  /**
   * Most recent time for which this Report Type is available. Measured in seconds since the Unix epoch.
   * @format unix-time
   */
  data_available_end: number;

  /**
   * Earliest time for which this Report Type is available. Measured in seconds since the Unix epoch.
   * @format unix-time
   */
  data_available_start: number;

  /** List of column names that are included by default when this Report Type gets run. (If the Report Type doesn't support the `columns` parameter, this will be null.) */
  default_columns?: string[] | null;

  /** The [ID of the Report Type](https://stripe.com/docs/reporting/statements/api#available-report-types), such as `balance.summary.1`. */
  id: string;

  /** Has the value `true` if the object exists in live mode or the value `false` if the object exists in test mode. */
  livemode: boolean;

  /** Human-readable name of the Report Type */
  name: string;

  /** String representing the object's type. Objects of the same type share the same value. */
  object: "reporting.report_type";

  /**
   * When this Report Type was latest updated. Measured in seconds since the Unix epoch.
   * @format unix-time
   */
  updated: number;

  /** Version of the Report Type. Different versions report with the same ID will have the same purpose, but may take different run parameters or have different result schemas. */
  version: number;
}

export interface ReserveTransaction {
  amount: number;

  /** Three-letter [ISO currency code](https://www.iso.org/iso-4217-currency-codes.html), in lowercase. Must be a [supported currency](https://stripe.com/docs/currencies). */
  currency: string;

  /** An arbitrary string attached to the object. Often useful for displaying to users. */
  description?: string | null;

  /** Unique identifier for the object. */
  id: string;

  /** String representing the object's type. Objects of the same type share the same value. */
  object: "reserve_transaction";
}

/**
* Reviews can be used to supplement automated fraud detection with human expertise.

Learn more about [Radar](/radar) and reviewing payments
[here](https://stripe.com/docs/radar/reviews).
*/
export interface Review {
  /** The ZIP or postal code of the card used, if applicable. */
  billing_zip?: string | null;

  /** The charge associated with this review. */
  charge?: string | Charge | null;

  /** The reason the review was closed, or null if it has not yet been closed. One of `approved`, `refunded`, `refunded_as_fraud`, `disputed`, or `redacted`. */
  closed_reason?: "approved" | "disputed" | "redacted" | "refunded" | "refunded_as_fraud" | null;

  /**
   * Time at which the object was created. Measured in seconds since the Unix epoch.
   * @format unix-time
   */
  created: number;

  /** Unique identifier for the object. */
  id: string;

  /** The IP address where the payment originated. */
  ip_address?: string | null;

  /** Information related to the location of the payment. Note that this information is an approximation and attempts to locate the nearest population center - it should not be used to determine a specific address. */
  ip_address_location?: RadarReviewResourceLocation | null;

  /** Has the value `true` if the object exists in live mode or the value `false` if the object exists in test mode. */
  livemode: boolean;

  /** String representing the object's type. Objects of the same type share the same value. */
  object: "review";

  /** If `true`, the review needs action. */
  open: boolean;

  /** The reason the review was opened. One of `rule` or `manual`. */
  opened_reason: "manual" | "rule";

  /** The PaymentIntent ID associated with this review, if one exists. */
  payment_intent?: string | PaymentIntent;

  /** The reason the review is currently open or closed. One of `rule`, `manual`, `approved`, `refunded`, `refunded_as_fraud`, `disputed`, or `redacted`. */
  reason: string;

  /** Information related to the browsing session of the user who initiated the payment. */
  session?: RadarReviewResourceSession | null;
}

export interface Rule {
  /** The action taken on the payment. */
  action: string;

  /** Unique identifier for the object. */
  id: string;

  /** The predicate to evaluate the payment against. */
  predicate: string;
}

/**
* If you have [scheduled a Sigma query](https://stripe.com/docs/sigma/scheduled-queries), you'll
receive a `sigma.scheduled_query_run.created` webhook each time the query
runs. The webhook contains a `ScheduledQueryRun` object, which you can use to
retrieve the query results.
*/
export interface ScheduledQueryRun {
  /**
   * Time at which the object was created. Measured in seconds since the Unix epoch.
   * @format unix-time
   */
  created: number;

  /**
   * When the query was run, Sigma contained a snapshot of your Stripe data at this time.
   * @format unix-time
   */
  data_load_time: number;
  error?: SigmaScheduledQueryRunError;

  /** The file object representing the results of the query. */
  file?: File | null;

  /** Unique identifier for the object. */
  id: string;

  /** Has the value `true` if the object exists in live mode or the value `false` if the object exists in test mode. */
  livemode: boolean;

  /** String representing the object's type. Objects of the same type share the same value. */
  object: "scheduled_query_run";

  /**
   * Time at which the result expires and is no longer available for download.
   * @format unix-time
   */
  result_available_until: number;

  /** SQL for the query. */
  sql: string;

  /** The query's execution status, which will be `completed` for successful runs, and `canceled`, `failed`, or `timed_out` otherwise. */
  status: string;

  /** Title of the query. */
  title: string;
}

export interface SchedulesPhaseAutomaticTax {
  /** Whether Stripe automatically computes tax on invoices created during this phase. */
  enabled: boolean;
}

export interface SepaDebitGeneratedFrom {
  /** The ID of the Charge that generated this PaymentMethod, if any. */
  charge?: string | Charge | null;

  /** The ID of the SetupAttempt that generated this PaymentMethod, if any. */
  setup_attempt?: string | SetupAttempt | null;
}

/**
* A SetupAttempt describes one attempted confirmation of a SetupIntent,
whether that confirmation was successful or unsuccessful. You can use
SetupAttempts to inspect details of a specific attempt at setting up a
payment method using a SetupIntent.
*/
export interface SetupAttempt {
  /** The value of [application](https://stripe.com/docs/api/setup_intents/object#setup_intent_object-application) on the SetupIntent at the time of this confirmation. */
  application?: string | Application | null;

  /**
   * Time at which the object was created. Measured in seconds since the Unix epoch.
   * @format unix-time
   */
  created: number;

  /** The value of [customer](https://stripe.com/docs/api/setup_intents/object#setup_intent_object-customer) on the SetupIntent at the time of this confirmation. */
  customer?: string | Customer | DeletedCustomer | (Customer & DeletedCustomer) | null;

  /** Unique identifier for the object. */
  id: string;

  /** Has the value `true` if the object exists in live mode or the value `false` if the object exists in test mode. */
  livemode: boolean;

  /** String representing the object's type. Objects of the same type share the same value. */
  object: "setup_attempt";

  /** The value of [on_behalf_of](https://stripe.com/docs/api/setup_intents/object#setup_intent_object-on_behalf_of) on the SetupIntent at the time of this confirmation. */
  on_behalf_of?: string | Account | null;

  /** ID of the payment method used with this SetupAttempt. */
  payment_method: string | PaymentMethod;
  payment_method_details: SetupAttemptPaymentMethodDetails;

  /** The error encountered during this attempt to confirm the SetupIntent, if any. */
  setup_error?: ApiErrors | null;

  /** ID of the SetupIntent that this attempt belongs to. */
  setup_intent: string | SetupIntent;

  /** Status of this SetupAttempt, one of `requires_confirmation`, `requires_action`, `processing`, `succeeded`, `failed`, or `abandoned`. */
  status: string;

  /** The value of [usage](https://stripe.com/docs/api/setup_intents/object#setup_intent_object-usage) on the SetupIntent at the time of this confirmation, one of `off_session` or `on_session`. */
  usage: string;
}

export interface SetupAttemptPaymentMethodDetails {
  acss_debit?: SetupAttemptPaymentMethodDetailsAcssDebit;
  au_becs_debit?: SetupAttemptPaymentMethodDetailsAuBecsDebit;
  bacs_debit?: SetupAttemptPaymentMethodDetailsBacsDebit;
  bancontact?: SetupAttemptPaymentMethodDetailsBancontact;
  boleto?: SetupAttemptPaymentMethodDetailsBoleto;
  card?: SetupAttemptPaymentMethodDetailsCard;
  card_present?: SetupAttemptPaymentMethodDetailsCardPresent;
  ideal?: SetupAttemptPaymentMethodDetailsIdeal;
  sepa_debit?: SetupAttemptPaymentMethodDetailsSepaDebit;
  sofort?: SetupAttemptPaymentMethodDetailsSofort;

  /** The type of the payment method used in the SetupIntent (e.g., `card`). An additional hash is included on `payment_method_details` with a name matching this value. It contains confirmation-specific information for the payment method. */
  type: string;
}

export type SetupAttemptPaymentMethodDetailsAcssDebit = object;

export type SetupAttemptPaymentMethodDetailsAuBecsDebit = object;

export type SetupAttemptPaymentMethodDetailsBacsDebit = object;

export interface SetupAttemptPaymentMethodDetailsBancontact {
  /** Bank code of bank associated with the bank account. */
  bank_code?: string | null;

  /** Name of the bank associated with the bank account. */
  bank_name?: string | null;

  /** Bank Identifier Code of the bank associated with the bank account. */
  bic?: string | null;

  /** The ID of the SEPA Direct Debit PaymentMethod which was generated by this SetupAttempt. */
  generated_sepa_debit?: string | PaymentMethod | null;

  /** The mandate for the SEPA Direct Debit PaymentMethod which was generated by this SetupAttempt. */
  generated_sepa_debit_mandate?: string | Mandate | null;

  /** Last four characters of the IBAN. */
  iban_last4?: string | null;

  /**
   * Preferred language of the Bancontact authorization page that the customer is redirected to.
   * Can be one of `en`, `de`, `fr`, or `nl`
   */
  preferred_language?: "de" | "en" | "fr" | "nl" | null;

  /**
   * Owner's verified full name. Values are verified or provided by Bancontact directly
   * (if supported) at the time of authorization or settlement. They cannot be set or mutated.
   */
  verified_name?: string | null;
}

export type SetupAttemptPaymentMethodDetailsBoleto = object;

export interface SetupAttemptPaymentMethodDetailsCard {
  /** Populated if this authorization used 3D Secure authentication. */
  three_d_secure?: ThreeDSecureDetails | null;
}

export interface SetupAttemptPaymentMethodDetailsCardPresent {
  /** The ID of the Card PaymentMethod which was generated by this SetupAttempt. */
  generated_card?: string | PaymentMethod | null;
}

export interface SetupAttemptPaymentMethodDetailsIdeal {
  /** The customer's bank. Can be one of `abn_amro`, `asn_bank`, `bunq`, `handelsbanken`, `ing`, `knab`, `moneyou`, `rabobank`, `regiobank`, `revolut`, `sns_bank`, `triodos_bank`, or `van_lanschot`. */
  bank?:
    | "abn_amro"
    | "asn_bank"
    | "bunq"
    | "handelsbanken"
    | "ing"
    | "knab"
    | "moneyou"
    | "rabobank"
    | "regiobank"
    | "revolut"
    | "sns_bank"
    | "triodos_bank"
    | "van_lanschot"
    | null;

  /** The Bank Identifier Code of the customer's bank. */
  bic?:
    | "ABNANL2A"
    | "ASNBNL21"
    | "BUNQNL2A"
    | "FVLBNL22"
    | "HANDNL2A"
    | "INGBNL2A"
    | "KNABNL2H"
    | "MOYONL21"
    | "RABONL2U"
    | "RBRBNL21"
    | "REVOLT21"
    | "SNSBNL2A"
    | "TRIONL2U"
    | null;

  /** The ID of the SEPA Direct Debit PaymentMethod which was generated by this SetupAttempt. */
  generated_sepa_debit?: string | PaymentMethod | null;

  /** The mandate for the SEPA Direct Debit PaymentMethod which was generated by this SetupAttempt. */
  generated_sepa_debit_mandate?: string | Mandate | null;

  /** Last four characters of the IBAN. */
  iban_last4?: string | null;

  /**
   * Owner's verified full name. Values are verified or provided by iDEAL directly
   * (if supported) at the time of authorization or settlement. They cannot be set or mutated.
   */
  verified_name?: string | null;
}

export type SetupAttemptPaymentMethodDetailsSepaDebit = object;

export interface SetupAttemptPaymentMethodDetailsSofort {
  /** Bank code of bank associated with the bank account. */
  bank_code?: string | null;

  /** Name of the bank associated with the bank account. */
  bank_name?: string | null;

  /** Bank Identifier Code of the bank associated with the bank account. */
  bic?: string | null;

  /** The ID of the SEPA Direct Debit PaymentMethod which was generated by this SetupAttempt. */
  generated_sepa_debit?: string | PaymentMethod | null;

  /** The mandate for the SEPA Direct Debit PaymentMethod which was generated by this SetupAttempt. */
  generated_sepa_debit_mandate?: string | Mandate | null;

  /** Last four characters of the IBAN. */
  iban_last4?: string | null;

  /**
   * Preferred language of the Sofort authorization page that the customer is redirected to.
   * Can be one of `en`, `de`, `fr`, or `nl`
   */
  preferred_language?: "de" | "en" | "fr" | "nl" | null;

  /**
   * Owner's verified full name. Values are verified or provided by Sofort directly
   * (if supported) at the time of authorization or settlement. They cannot be set or mutated.
   */
  verified_name?: string | null;
}

/**
* A SetupIntent guides you through the process of setting up and saving a customer's payment credentials for future payments.
For example, you could use a SetupIntent to set up and save your customer's card without immediately collecting a payment.
Later, you can use [PaymentIntents](https://stripe.com/docs/api#payment_intents) to drive the payment flow.

Create a SetupIntent as soon as you're ready to collect your customer's payment credentials.
Do not maintain long-lived, unconfirmed SetupIntents as they may no longer be valid.
The SetupIntent then transitions through multiple [statuses](https://stripe.com/docs/payments/intents#intent-statuses) as it guides
you through the setup process.

Successful SetupIntents result in payment credentials that are optimized for future payments.
For example, cardholders in [certain regions](/guides/strong-customer-authentication) may need to be run through
[Strong Customer Authentication](https://stripe.com/docs/strong-customer-authentication) at the time of payment method collection
in order to streamline later [off-session payments](https://stripe.com/docs/payments/setup-intents).
If the SetupIntent is used with a [Customer](https://stripe.com/docs/api#setup_intent_object-customer), upon success,
it will automatically attach the resulting payment method to that Customer.
We recommend using SetupIntents or [setup_future_usage](https://stripe.com/docs/api#payment_intent_object-setup_future_usage) on
PaymentIntents to save payment methods in order to prevent saving invalid or unoptimized payment methods.

By using SetupIntents, you ensure that your customers experience the minimum set of required friction,
even as regulations change over time.

Related guide: [Setup Intents API](https://stripe.com/docs/payments/setup-intents).
*/
export interface SetupIntent {
  /** ID of the Connect application that created the SetupIntent. */
  application?: string | Application | null;

  /** Reason for cancellation of this SetupIntent, one of `abandoned`, `requested_by_customer`, or `duplicate`. */
  cancellation_reason?: "abandoned" | "duplicate" | "requested_by_customer" | null;

  /**
   * The client secret of this SetupIntent. Used for client-side retrieval using a publishable key.
   *
   * The client secret can be used to complete payment setup from your frontend. It should not be stored, logged, embedded in URLs, or exposed to anyone other than the customer. Make sure that you have TLS enabled on any page that includes the client secret.
   */
  client_secret?: string | null;

  /**
   * Time at which the object was created. Measured in seconds since the Unix epoch.
   * @format unix-time
   */
  created: number;

  /**
   * ID of the Customer this SetupIntent belongs to, if one exists.
   *
   * If present, the SetupIntent's payment method will be attached to the Customer on successful setup. Payment methods attached to other Customers cannot be used with this SetupIntent.
   */
  customer?: string | Customer | DeletedCustomer | (Customer & DeletedCustomer) | null;

  /** An arbitrary string attached to the object. Often useful for displaying to users. */
  description?: string | null;

  /** Unique identifier for the object. */
  id: string;

  /** The error encountered in the previous SetupIntent confirmation. */
  last_setup_error?: ApiErrors | null;

  /** The most recent SetupAttempt for this SetupIntent. */
  latest_attempt?: string | SetupAttempt | null;

  /** Has the value `true` if the object exists in live mode or the value `false` if the object exists in test mode. */
  livemode: boolean;

  /** ID of the multi use Mandate generated by the SetupIntent. */
  mandate?: string | Mandate | null;

  /** Set of [key-value pairs](https://stripe.com/docs/api/metadata) that you can attach to an object. This can be useful for storing additional information about the object in a structured format. */
  metadata?: Record<string, string>;

  /** If present, this property tells you what actions you need to take in order for your customer to continue payment setup. */
  next_action?: SetupIntentNextAction | null;

  /** String representing the object's type. Objects of the same type share the same value. */
  object: "setup_intent";

  /** The account (if any) for which the setup is intended. */
  on_behalf_of?: string | Account | null;

  /** ID of the payment method used with this SetupIntent. */
  payment_method?: string | PaymentMethod | null;

  /** Payment-method-specific configuration for this SetupIntent. */
  payment_method_options?: SetupIntentPaymentMethodOptions | null;

  /** The list of payment method types (e.g. card) that this SetupIntent is allowed to set up. */
  payment_method_types: string[];

  /** ID of the single_use Mandate generated by the SetupIntent. */
  single_use_mandate?: string | Mandate | null;

  /** [Status](https://stripe.com/docs/payments/intents#intent-statuses) of this SetupIntent, one of `requires_payment_method`, `requires_confirmation`, `requires_action`, `processing`, `canceled`, or `succeeded`. */
  status:
    | "canceled"
    | "processing"
    | "requires_action"
    | "requires_confirmation"
    | "requires_payment_method"
    | "succeeded";

  /**
   * Indicates how the payment method is intended to be used in the future.
   *
   * Use `on_session` if you intend to only reuse the payment method when the customer is in your checkout flow. Use `off_session` if your customer may or may not be in your checkout flow. If not provided, this value defaults to `off_session`.
   */
  usage: string;
}

export interface SetupIntentNextAction {
  redirect_to_url?: SetupIntentNextActionRedirectToUrl;

  /** Type of the next action to perform, one of `redirect_to_url`, `use_stripe_sdk`, `alipay_handle_redirect`, `oxxo_display_details`, or `verify_with_microdeposits`. */
  type: string;

  /** When confirming a SetupIntent with Stripe.js, Stripe.js depends on the contents of this dictionary to invoke authentication flows. The shape of the contents is subject to change and is only intended to be used by Stripe.js. */
  use_stripe_sdk?: object;
  verify_with_microdeposits?: SetupIntentNextActionVerifyWithMicrodeposits;
}

export interface SetupIntentNextActionRedirectToUrl {
  /** If the customer does not exit their browser while authenticating, they will be redirected to this specified URL after completion. */
  return_url?: string | null;

  /** The URL you must redirect your customer to in order to authenticate. */
  url?: string | null;
}

export interface SetupIntentNextActionVerifyWithMicrodeposits {
  /**
   * The timestamp when the microdeposits are expected to land.
   * @format unix-time
   */
  arrival_date: number;

  /** The URL for the hosted verification page, which allows customers to verify their bank account. */
  hosted_verification_url: string;
}

export interface SetupIntentPaymentMethodOptions {
  acss_debit?: SetupIntentPaymentMethodOptionsAcssDebit;
  card?: SetupIntentPaymentMethodOptionsCard;
  sepa_debit?: SetupIntentPaymentMethodOptionsSepaDebit;
}

export interface SetupIntentPaymentMethodOptionsAcssDebit {
  /** Currency supported by the bank account */
  currency?: "cad" | "usd" | null;
  mandate_options?: SetupIntentPaymentMethodOptionsMandateOptionsAcssDebit;

  /** Bank account verification method. */
  verification_method?: "automatic" | "instant" | "microdeposits";
}

export interface SetupIntentPaymentMethodOptionsCard {
  /** We strongly recommend that you rely on our SCA Engine to automatically prompt your customers for authentication based on risk level and [other requirements](https://stripe.com/docs/strong-customer-authentication). However, if you wish to request 3D Secure based on logic from your own fraud engine, provide this option. Permitted values include: `automatic` or `any`. If not provided, defaults to `automatic`. Read our guide on [manually requesting 3D Secure](https://stripe.com/docs/payments/3d-secure#manual-three-ds) for more information on how this configuration interacts with Radar and our SCA Engine. */
  request_three_d_secure?: "any" | "automatic" | "challenge_only" | null;
}

export interface SetupIntentPaymentMethodOptionsMandateOptionsAcssDebit {
  /** A URL for custom mandate text */
  custom_mandate_url?: string;

  /** List of Stripe products where this mandate can be selected automatically. */
  default_for?: ("invoice" | "subscription")[];

  /** Description of the interval. Only required if the 'payment_schedule' parameter is 'interval' or 'combined'. */
  interval_description?: string | null;

  /** Payment schedule for the mandate. */
  payment_schedule?: "combined" | "interval" | "sporadic" | null;

  /** Transaction type of the mandate. */
  transaction_type?: "business" | "personal" | null;
}

export type SetupIntentPaymentMethodOptionsMandateOptionsSepaDebit = object;

export interface SetupIntentPaymentMethodOptionsSepaDebit {
  mandate_options?: SetupIntentPaymentMethodOptionsMandateOptionsSepaDebit;
}

export interface Shipping {
  address?: Address;

  /** The delivery service that shipped a physical product, such as Fedex, UPS, USPS, etc. */
  carrier?: string | null;

  /** Recipient name. */
  name?: string | null;

  /** Recipient phone (including extension). */
  phone?: string | null;

  /** The tracking number for a physical product, obtained from the delivery service. If multiple tracking numbers were generated for this purchase, please separate them with commas. */
  tracking_number?: string | null;
}

export interface ShippingMethod {
  /** A positive integer in the smallest currency unit (that is, 100 cents for $1.00, or 1 for ¥1, Japanese Yen being a zero-decimal currency) representing the total amount for the line item. */
  amount: number;

  /** Three-letter [ISO currency code](https://www.iso.org/iso-4217-currency-codes.html), in lowercase. Must be a [supported currency](https://stripe.com/docs/currencies). */
  currency: string;

  /** The estimated delivery date for the given shipping method. Can be either a specific date or a range. */
  delivery_estimate?: DeliveryEstimate | null;

  /** An arbitrary string attached to the object. Often useful for displaying to users. */
  description: string;

  /** Unique identifier for the object. */
  id: string;
}

/**
* Shipping rates describe the price of shipping presented to your customers and can be
applied to [Checkout Sessions](https://stripe.com/docs/payments/checkout/shipping) to collect shipping costs.
*/
export interface ShippingRate {
  /** Whether the shipping rate can be used for new purchases. Defaults to `true`. */
  active: boolean;

  /**
   * Time at which the object was created. Measured in seconds since the Unix epoch.
   * @format unix-time
   */
  created: number;

  /** The estimated range for how long shipping will take, meant to be displayable to the customer. This will appear on CheckoutSessions. */
  delivery_estimate?: ShippingRateDeliveryEstimate | null;

  /** The name of the shipping rate, meant to be displayable to the customer. This will appear on CheckoutSessions. */
  display_name?: string | null;
  fixed_amount?: ShippingRateFixedAmount;

  /** Unique identifier for the object. */
  id: string;

  /** Has the value `true` if the object exists in live mode or the value `false` if the object exists in test mode. */
  livemode: boolean;

  /** Set of [key-value pairs](https://stripe.com/docs/api/metadata) that you can attach to an object. This can be useful for storing additional information about the object in a structured format. */
  metadata: Record<string, string>;

  /** String representing the object's type. Objects of the same type share the same value. */
  object: "shipping_rate";

  /** Specifies whether the rate is considered inclusive of taxes or exclusive of taxes. One of `inclusive`, `exclusive`, or `unspecified`. */
  tax_behavior?: "exclusive" | "inclusive" | "unspecified" | null;

  /** A [tax code](https://stripe.com/docs/tax/tax-codes) ID. The Shipping tax code is `txcd_92010001`. */
  tax_code?: string | TaxCode | null;

  /** The type of calculation to use on the shipping rate. Can only be `fixed_amount` for now. */
  type: "fixed_amount";
}

export interface ShippingRateDeliveryEstimate {
  /** The upper bound of the estimated range. If empty, represents no upper bound i.e., infinite. */
  maximum?: ShippingRateDeliveryEstimateBound | null;

  /** The lower bound of the estimated range. If empty, represents no lower bound. */
  minimum?: ShippingRateDeliveryEstimateBound | null;
}

export interface ShippingRateDeliveryEstimateBound {
  /** A unit of time. */
  unit: "business_day" | "day" | "hour" | "month" | "week";

  /** Must be greater than 0. */
  value: number;
}

export interface ShippingRateFixedAmount {
  /** A non-negative integer in cents representing how much to charge. */
  amount: number;

  /** Three-letter [ISO currency code](https://www.iso.org/iso-4217-currency-codes.html), in lowercase. Must be a [supported currency](https://stripe.com/docs/currencies). */
  currency: string;
}

export interface SigmaScheduledQueryRunError {
  /** Information about the run failure. */
  message: string;
}

/**
* Stores representations of [stock keeping units](http://en.wikipedia.org/wiki/Stock_keeping_unit).
SKUs describe specific product variations, taking into account any combination of: attributes,
currency, and cost. For example, a product may be a T-shirt, whereas a specific SKU represents
the `size: large`, `color: red` version of that shirt.

Can also be used to manage inventory.

Related guide: [Tax, Shipping, and Inventory](https://stripe.com/docs/orders).
*/
export interface Sku {
  /** Whether the SKU is available for purchase. */
  active: boolean;

  /** A dictionary of attributes and values for the attributes defined by the product. If, for example, a product's attributes are `["size", "gender"]`, a valid SKU has the following dictionary of attributes: `{"size": "Medium", "gender": "Unisex"}`. */
  attributes: Record<string, string>;

  /**
   * Time at which the object was created. Measured in seconds since the Unix epoch.
   * @format unix-time
   */
  created: number;

  /** Three-letter [ISO currency code](https://www.iso.org/iso-4217-currency-codes.html), in lowercase. Must be a [supported currency](https://stripe.com/docs/currencies). */
  currency: string;

  /** Unique identifier for the object. */
  id: string;

  /** The URL of an image for this SKU, meant to be displayable to the customer. */
  image?: string | null;
  inventory: SkuInventory;

  /** Has the value `true` if the object exists in live mode or the value `false` if the object exists in test mode. */
  livemode: boolean;

  /** Set of [key-value pairs](https://stripe.com/docs/api/metadata) that you can attach to an object. This can be useful for storing additional information about the object in a structured format. */
  metadata: Record<string, string>;

  /** String representing the object's type. Objects of the same type share the same value. */
  object: "sku";

  /** The dimensions of this SKU for shipping purposes. */
  package_dimensions?: PackageDimensions | null;

  /** The cost of the item as a positive integer in the smallest currency unit (that is, 100 cents to charge $1.00, or 100 to charge ¥100, Japanese Yen being a zero-decimal currency). */
  price: number;

  /** The ID of the product this SKU is associated with. The product must be currently active. */
  product: string | Product;

  /**
   * Time at which the object was last updated. Measured in seconds since the Unix epoch.
   * @format unix-time
   */
  updated: number;
}

export interface SkuInventory {
  /** The count of inventory available. Will be present if and only if `type` is `finite`. */
  quantity?: number | null;

  /** Inventory type. Possible values are `finite`, `bucket` (not quantified), and `infinite`. */
  type: string;

  /** An indicator of the inventory available. Possible values are `in_stock`, `limited`, and `out_of_stock`. Will be present if and only if `type` is `bucket`. */
  value?: string | null;
}

/**
* `Source` objects allow you to accept a variety of payment methods. They
represent a customer's payment instrument, and can be used with the Stripe API
just like a `Card` object: once chargeable, they can be charged, or can be
attached to customers.

Related guides: [Sources API](https://stripe.com/docs/sources) and [Sources & Customers](https://stripe.com/docs/sources/customers).
*/
export interface Source {
  ach_credit_transfer?: SourceTypeAchCreditTransfer;
  ach_debit?: SourceTypeAchDebit;
  acss_debit?: SourceTypeAcssDebit;
  alipay?: SourceTypeAlipay;

  /** A positive integer in the smallest currency unit (that is, 100 cents for $1.00, or 1 for ¥1, Japanese Yen being a zero-decimal currency) representing the total amount associated with the source. This is the amount for which the source will be chargeable once ready. Required for `single_use` sources. */
  amount?: number | null;
  au_becs_debit?: SourceTypeAuBecsDebit;
  bancontact?: SourceTypeBancontact;
  card?: SourceTypeCard;
  card_present?: SourceTypeCardPresent;

  /** The client secret of the source. Used for client-side retrieval using a publishable key. */
  client_secret: string;
  code_verification?: SourceCodeVerificationFlow;

  /**
   * Time at which the object was created. Measured in seconds since the Unix epoch.
   * @format unix-time
   */
  created: number;

  /** Three-letter [ISO code for the currency](https://stripe.com/docs/currencies) associated with the source. This is the currency for which the source will be chargeable once ready. Required for `single_use` sources. */
  currency?: string | null;

  /** The ID of the customer to which this source is attached. This will not be present when the source has not been attached to a customer. */
  customer?: string;
  eps?: SourceTypeEps;

  /** The authentication `flow` of the source. `flow` is one of `redirect`, `receiver`, `code_verification`, `none`. */
  flow: string;
  giropay?: SourceTypeGiropay;

  /** Unique identifier for the object. */
  id: string;
  ideal?: SourceTypeIdeal;
  klarna?: SourceTypeKlarna;

  /** Has the value `true` if the object exists in live mode or the value `false` if the object exists in test mode. */
  livemode: boolean;

  /** Set of [key-value pairs](https://stripe.com/docs/api/metadata) that you can attach to an object. This can be useful for storing additional information about the object in a structured format. */
  metadata?: Record<string, string>;
  multibanco?: SourceTypeMultibanco;

  /** String representing the object's type. Objects of the same type share the same value. */
  object: "source";

  /** Information about the owner of the payment instrument that may be used or required by particular source types. */
  owner?: SourceOwner | null;
  p24?: SourceTypeP24;
  receiver?: SourceReceiverFlow;
  redirect?: SourceRedirectFlow;
  sepa_debit?: SourceTypeSepaDebit;
  sofort?: SourceTypeSofort;
  source_order?: SourceOrder;

  /** Extra information about a source. This will appear on your customer's statement every time you charge the source. */
  statement_descriptor?: string | null;

  /** The status of the source, one of `canceled`, `chargeable`, `consumed`, `failed`, or `pending`. Only `chargeable` sources can be used to create a charge. */
  status: string;
  three_d_secure?: SourceTypeThreeDSecure;

  /** The `type` of the source. The `type` is a payment method, one of `ach_credit_transfer`, `ach_debit`, `alipay`, `bancontact`, `card`, `card_present`, `eps`, `giropay`, `ideal`, `multibanco`, `klarna`, `p24`, `sepa_debit`, `sofort`, `three_d_secure`, or `wechat`. An additional hash is included on the source with a name matching this value. It contains additional information specific to the [payment method](https://stripe.com/docs/sources) used. */
  type:
    | "ach_credit_transfer"
    | "ach_debit"
    | "acss_debit"
    | "alipay"
    | "au_becs_debit"
    | "bancontact"
    | "card"
    | "card_present"
    | "eps"
    | "giropay"
    | "ideal"
    | "klarna"
    | "multibanco"
    | "p24"
    | "sepa_debit"
    | "sofort"
    | "three_d_secure"
    | "wechat";

  /** Either `reusable` or `single_use`. Whether this source should be reusable or not. Some source types may or may not be reusable by construction, while others may leave the option at creation. If an incompatible value is passed, an error will be returned. */
  usage?: string | null;
  wechat?: SourceTypeWechat;
}

export interface SourceCodeVerificationFlow {
  /** The number of attempts remaining to authenticate the source object with a verification code. */
  attempts_remaining: number;

  /** The status of the code verification, either `pending` (awaiting verification, `attempts_remaining` should be greater than 0), `succeeded` (successful verification) or `failed` (failed verification, cannot be verified anymore as `attempts_remaining` should be 0). */
  status: string;
}

/**
* Source mandate notifications should be created when a notification related to
a source mandate must be sent to the payer. They will trigger a webhook or
deliver an email to the customer.
*/
export interface SourceMandateNotification {
  acss_debit?: SourceMandateNotificationAcssDebitData;

  /** A positive integer in the smallest currency unit (that is, 100 cents for $1.00, or 1 for ¥1, Japanese Yen being a zero-decimal currency) representing the amount associated with the mandate notification. The amount is expressed in the currency of the underlying source. Required if the notification type is `debit_initiated`. */
  amount?: number | null;
  bacs_debit?: SourceMandateNotificationBacsDebitData;

  /**
   * Time at which the object was created. Measured in seconds since the Unix epoch.
   * @format unix-time
   */
  created: number;

  /** Unique identifier for the object. */
  id: string;

  /** Has the value `true` if the object exists in live mode or the value `false` if the object exists in test mode. */
  livemode: boolean;

  /** String representing the object's type. Objects of the same type share the same value. */
  object: "source_mandate_notification";

  /** The reason of the mandate notification. Valid reasons are `mandate_confirmed` or `debit_initiated`. */
  reason: string;
  sepa_debit?: SourceMandateNotificationSepaDebitData;

  /**
   * `Source` objects allow you to accept a variety of payment methods. They
   * represent a customer's payment instrument, and can be used with the Stripe API
   * just like a `Card` object: once chargeable, they can be charged, or can be
   * attached to customers.
   *
   * Related guides: [Sources API](https://stripe.com/docs/sources) and [Sources & Customers](https://stripe.com/docs/sources/customers).
   */
  source: Source;

  /** The status of the mandate notification. Valid statuses are `pending` or `submitted`. */
  status: string;

  /** The type of source this mandate notification is attached to. Should be the source type identifier code for the payment method, such as `three_d_secure`. */
  type: string;
}

export interface SourceMandateNotificationAcssDebitData {
  /** The statement descriptor associate with the debit. */
  statement_descriptor?: string;
}

export interface SourceMandateNotificationBacsDebitData {
  /** Last 4 digits of the account number associated with the debit. */
  last4?: string;
}

export interface SourceMandateNotificationSepaDebitData {
  /** SEPA creditor ID. */
  creditor_identifier?: string;

  /** Last 4 digits of the account number associated with the debit. */
  last4?: string;

  /** Mandate reference associated with the debit. */
  mandate_reference?: string;
}

export interface SourceOrder {
  /** A positive integer in the smallest currency unit (that is, 100 cents for $1.00, or 1 for ¥1, Japanese Yen being a zero-decimal currency) representing the total amount for the order. */
  amount: number;

  /** Three-letter [ISO currency code](https://www.iso.org/iso-4217-currency-codes.html), in lowercase. Must be a [supported currency](https://stripe.com/docs/currencies). */
  currency: string;

  /** The email address of the customer placing the order. */
  email?: string;

  /** List of items constituting the order. */
  items?: SourceOrderItem[] | null;
  shipping?: Shipping;
}

export interface SourceOrderItem {
  /** The amount (price) for this order item. */
  amount?: number | null;

  /** This currency of this order item. Required when `amount` is present. */
  currency?: string | null;

  /** Human-readable description for this order item. */
  description?: string | null;

  /** The ID of the associated object for this line item. Expandable if not null (e.g., expandable to a SKU). */
  parent?: string | null;

  /** The quantity of this order item. When type is `sku`, this is the number of instances of the SKU to be ordered. */
  quantity?: number;

  /** The type of this order item. Must be `sku`, `tax`, or `shipping`. */
  type?: string | null;
}

export interface SourceOwner {
  /** Owner's address. */
  address?: Address | null;

  /** Owner's email address. */
  email?: string | null;

  /** Owner's full name. */
  name?: string | null;

  /** Owner's phone number (including extension). */
  phone?: string | null;

  /** Verified owner's address. Verified values are verified or provided by the payment method directly (and if supported) at the time of authorization or settlement. They cannot be set or mutated. */
  verified_address?: Address | null;

  /** Verified owner's email address. Verified values are verified or provided by the payment method directly (and if supported) at the time of authorization or settlement. They cannot be set or mutated. */
  verified_email?: string | null;

  /** Verified owner's full name. Verified values are verified or provided by the payment method directly (and if supported) at the time of authorization or settlement. They cannot be set or mutated. */
  verified_name?: string | null;

  /** Verified owner's phone number (including extension). Verified values are verified or provided by the payment method directly (and if supported) at the time of authorization or settlement. They cannot be set or mutated. */
  verified_phone?: string | null;
}

export interface SourceReceiverFlow {
  /** The address of the receiver source. This is the value that should be communicated to the customer to send their funds to. */
  address?: string | null;

  /** The total amount that was moved to your balance. This is almost always equal to the amount charged. In rare cases when customers deposit excess funds and we are unable to refund those, those funds get moved to your balance and show up in amount_charged as well. The amount charged is expressed in the source's currency. */
  amount_charged: number;

  /** The total amount received by the receiver source. `amount_received = amount_returned + amount_charged` should be true for consumed sources unless customers deposit excess funds. The amount received is expressed in the source's currency. */
  amount_received: number;

  /** The total amount that was returned to the customer. The amount returned is expressed in the source's currency. */
  amount_returned: number;

  /** Type of refund attribute method, one of `email`, `manual`, or `none`. */
  refund_attributes_method: string;

  /** Type of refund attribute status, one of `missing`, `requested`, or `available`. */
  refund_attributes_status: string;
}

export interface SourceRedirectFlow {
  /** The failure reason for the redirect, either `user_abort` (the customer aborted or dropped out of the redirect flow), `declined` (the authentication failed or the transaction was declined), or `processing_error` (the redirect failed due to a technical error). Present only if the redirect status is `failed`. */
  failure_reason?: string | null;

  /** The URL you provide to redirect the customer to after they authenticated their payment. */
  return_url: string;

  /** The status of the redirect, either `pending` (ready to be used by your customer to authenticate the transaction), `succeeded` (succesful authentication, cannot be reused) or `not_required` (redirect should not be used) or `failed` (failed authentication, cannot be reused). */
  status: string;

  /** The URL provided to you to redirect a customer to as part of a `redirect` authentication flow. */
  url: string;
}

/**
* Some payment methods have no required amount that a customer must send.
Customers can be instructed to send any amount, and it can be made up of
multiple transactions. As such, sources can have multiple associated
transactions.
*/
export interface SourceTransaction {
  ach_credit_transfer?: SourceTransactionAchCreditTransferData;

  /** A positive integer in the smallest currency unit (that is, 100 cents for $1.00, or 1 for ¥1, Japanese Yen being a zero-decimal currency) representing the amount your customer has pushed to the receiver. */
  amount: number;
  chf_credit_transfer?: SourceTransactionChfCreditTransferData;

  /**
   * Time at which the object was created. Measured in seconds since the Unix epoch.
   * @format unix-time
   */
  created: number;

  /** Three-letter [ISO currency code](https://www.iso.org/iso-4217-currency-codes.html), in lowercase. Must be a [supported currency](https://stripe.com/docs/currencies). */
  currency: string;
  gbp_credit_transfer?: SourceTransactionGbpCreditTransferData;

  /** Unique identifier for the object. */
  id: string;

  /** Has the value `true` if the object exists in live mode or the value `false` if the object exists in test mode. */
  livemode: boolean;

  /** String representing the object's type. Objects of the same type share the same value. */
  object: "source_transaction";
  paper_check?: SourceTransactionPaperCheckData;
  sepa_credit_transfer?: SourceTransactionSepaCreditTransferData;

  /** The ID of the source this transaction is attached to. */
  source: string;

  /** The status of the transaction, one of `succeeded`, `pending`, or `failed`. */
  status: string;

  /** The type of source this transaction is attached to. */
  type:
    | "ach_credit_transfer"
    | "ach_debit"
    | "alipay"
    | "bancontact"
    | "card"
    | "card_present"
    | "eps"
    | "giropay"
    | "ideal"
    | "klarna"
    | "multibanco"
    | "p24"
    | "sepa_debit"
    | "sofort"
    | "three_d_secure"
    | "wechat";
}

export interface SourceTransactionAchCreditTransferData {
  /** Customer data associated with the transfer. */
  customer_data?: string;

  /** Bank account fingerprint associated with the transfer. */
  fingerprint?: string;

  /** Last 4 digits of the account number associated with the transfer. */
  last4?: string;

  /** Routing number associated with the transfer. */
  routing_number?: string;
}

export interface SourceTransactionChfCreditTransferData {
  /** Reference associated with the transfer. */
  reference?: string;

  /** Sender's country address. */
  sender_address_country?: string;

  /** Sender's line 1 address. */
  sender_address_line1?: string;

  /** Sender's bank account IBAN. */
  sender_iban?: string;

  /** Sender's name. */
  sender_name?: string;
}

export interface SourceTransactionGbpCreditTransferData {
  /** Bank account fingerprint associated with the Stripe owned bank account receiving the transfer. */
  fingerprint?: string;

  /** The credit transfer rails the sender used to push this transfer. The possible rails are: Faster Payments, BACS, CHAPS, and wire transfers. Currently only Faster Payments is supported. */
  funding_method?: string;

  /** Last 4 digits of sender account number associated with the transfer. */
  last4?: string;

  /** Sender entered arbitrary information about the transfer. */
  reference?: string;

  /** Sender account number associated with the transfer. */
  sender_account_number?: string;

  /** Sender name associated with the transfer. */
  sender_name?: string;

  /** Sender sort code associated with the transfer. */
  sender_sort_code?: string;
}

export interface SourceTransactionPaperCheckData {
  /** Time at which the deposited funds will be available for use. Measured in seconds since the Unix epoch. */
  available_at?: string;

  /** Comma-separated list of invoice IDs associated with the paper check. */
  invoices?: string;
}

export interface SourceTransactionSepaCreditTransferData {
  /** Reference associated with the transfer. */
  reference?: string;

  /** Sender's bank account IBAN. */
  sender_iban?: string;

  /** Sender's name. */
  sender_name?: string;
}

export interface SourceTypeAchCreditTransfer {
  account_number?: string | null;
  bank_name?: string | null;
  fingerprint?: string | null;
  refund_account_holder_name?: string | null;
  refund_account_holder_type?: string | null;
  refund_routing_number?: string | null;
  routing_number?: string | null;
  swift_code?: string | null;
}

export interface SourceTypeAchDebit {
  bank_name?: string | null;
  country?: string | null;
  fingerprint?: string | null;
  last4?: string | null;
  routing_number?: string | null;
  type?: string | null;
}

export interface SourceTypeAcssDebit {
  bank_address_city?: string | null;
  bank_address_line_1?: string | null;
  bank_address_line_2?: string | null;
  bank_address_postal_code?: string | null;
  bank_name?: string | null;
  category?: string | null;
  country?: string | null;
  fingerprint?: string | null;
  last4?: string | null;
  routing_number?: string | null;
}

export interface SourceTypeAlipay {
  data_string?: string | null;
  native_url?: string | null;
  statement_descriptor?: string | null;
}

export interface SourceTypeAuBecsDebit {
  bsb_number?: string | null;
  fingerprint?: string | null;
  last4?: string | null;
}

export interface SourceTypeBancontact {
  bank_code?: string | null;
  bank_name?: string | null;
  bic?: string | null;
  iban_last4?: string | null;
  preferred_language?: string | null;
  statement_descriptor?: string | null;
}

export interface SourceTypeCard {
  address_line1_check?: string | null;
  address_zip_check?: string | null;
  brand?: string | null;
  country?: string | null;
  cvc_check?: string | null;
  dynamic_last4?: string | null;
  exp_month?: number | null;
  exp_year?: number | null;
  fingerprint?: string;
  funding?: string | null;
  last4?: string | null;
  name?: string | null;
  three_d_secure?: string;
  tokenization_method?: string | null;
}

export interface SourceTypeCardPresent {
  application_cryptogram?: string;
  application_preferred_name?: string;
  authorization_code?: string | null;
  authorization_response_code?: string;
  brand?: string | null;
  country?: string | null;
  cvm_type?: string;
  data_type?: string | null;
  dedicated_file_name?: string;
  emv_auth_data?: string;
  evidence_customer_signature?: string | null;
  evidence_transaction_certificate?: string | null;
  exp_month?: number | null;
  exp_year?: number | null;
  fingerprint?: string;
  funding?: string | null;
  last4?: string | null;
  pos_device_id?: string | null;
  pos_entry_mode?: string;
  read_method?: string | null;
  reader?: string | null;
  terminal_verification_results?: string;
  transaction_status_information?: string;
}

export interface SourceTypeEps {
  reference?: string | null;
  statement_descriptor?: string | null;
}

export interface SourceTypeGiropay {
  bank_code?: string | null;
  bank_name?: string | null;
  bic?: string | null;
  statement_descriptor?: string | null;
}

export interface SourceTypeIdeal {
  bank?: string | null;
  bic?: string | null;
  iban_last4?: string | null;
  statement_descriptor?: string | null;
}

export interface SourceTypeKlarna {
  background_image_url?: string;
  client_token?: string | null;
  first_name?: string;
  last_name?: string;
  locale?: string;
  logo_url?: string;
  page_title?: string;
  pay_later_asset_urls_descriptive?: string;
  pay_later_asset_urls_standard?: string;
  pay_later_name?: string;
  pay_later_redirect_url?: string;
  pay_now_asset_urls_descriptive?: string;
  pay_now_asset_urls_standard?: string;
  pay_now_name?: string;
  pay_now_redirect_url?: string;
  pay_over_time_asset_urls_descriptive?: string;
  pay_over_time_asset_urls_standard?: string;
  pay_over_time_name?: string;
  pay_over_time_redirect_url?: string;
  payment_method_categories?: string;
  purchase_country?: string;
  purchase_type?: string;
  redirect_url?: string;
  shipping_delay?: number;
  shipping_first_name?: string;
  shipping_last_name?: string;
}

export interface SourceTypeMultibanco {
  entity?: string | null;
  reference?: string | null;
  refund_account_holder_address_city?: string | null;
  refund_account_holder_address_country?: string | null;
  refund_account_holder_address_line1?: string | null;
  refund_account_holder_address_line2?: string | null;
  refund_account_holder_address_postal_code?: string | null;
  refund_account_holder_address_state?: string | null;
  refund_account_holder_name?: string | null;
  refund_iban?: string | null;
}

export interface SourceTypeP24 {
  reference?: string | null;
}

export interface SourceTypeSepaDebit {
  bank_code?: string | null;
  branch_code?: string | null;
  country?: string | null;
  fingerprint?: string | null;
  last4?: string | null;
  mandate_reference?: string | null;
  mandate_url?: string | null;
}

export interface SourceTypeSofort {
  bank_code?: string | null;
  bank_name?: string | null;
  bic?: string | null;
  country?: string | null;
  iban_last4?: string | null;
  preferred_language?: string | null;
  statement_descriptor?: string | null;
}

export interface SourceTypeThreeDSecure {
  address_line1_check?: string | null;
  address_zip_check?: string | null;
  authenticated?: boolean | null;
  brand?: string | null;
  card?: string | null;
  country?: string | null;
  customer?: string | null;
  cvc_check?: string | null;
  dynamic_last4?: string | null;
  exp_month?: number | null;
  exp_year?: number | null;
  fingerprint?: string;
  funding?: string | null;
  last4?: string | null;
  name?: string | null;
  three_d_secure?: string;
  tokenization_method?: string | null;
}

export interface SourceTypeWechat {
  prepay_id?: string;
  qr_code_url?: string | null;
  statement_descriptor?: string;
}

export interface StatusTransitions {
  /**
   * The time that the order was canceled.
   * @format unix-time
   */
  canceled?: number | null;

  /**
   * The time that the order was fulfilled.
   * @format unix-time
   */
  fulfiled?: number | null;

  /**
   * The time that the order was paid.
   * @format unix-time
   */
  paid?: number | null;

  /**
   * The time that the order was returned.
   * @format unix-time
   */
  returned?: number | null;
}

/**
* Subscriptions allow you to charge a customer on a recurring basis.

Related guide: [Creating Subscriptions](https://stripe.com/docs/billing/subscriptions/creating).
*/
export interface Subscription {
  /** A non-negative decimal between 0 and 100, with at most two decimal places. This represents the percentage of the subscription invoice subtotal that will be transferred to the application owner's Stripe account. */
  application_fee_percent?: number | null;
  automatic_tax: SubscriptionAutomaticTax;

  /**
   * Determines the date of the first full invoice, and, for plans with `month` or `year` intervals, the day of the month for subsequent invoices.
   * @format unix-time
   */
  billing_cycle_anchor: number;

  /** Define thresholds at which an invoice will be sent, and the subscription advanced to a new billing period */
  billing_thresholds?: SubscriptionBillingThresholds | null;

  /**
   * A date in the future at which the subscription will automatically get canceled
   * @format unix-time
   */
  cancel_at?: number | null;

  /** If the subscription has been canceled with the `at_period_end` flag set to `true`, `cancel_at_period_end` on the subscription will be true. You can use this attribute to determine whether a subscription that has a status of active is scheduled to be canceled at the end of the current period. */
  cancel_at_period_end: boolean;

  /**
   * If the subscription has been canceled, the date of that cancellation. If the subscription was canceled with `cancel_at_period_end`, `canceled_at` will reflect the time of the most recent update request, not the end of the subscription period when the subscription is automatically moved to a canceled state.
   * @format unix-time
   */
  canceled_at?: number | null;

  /** Either `charge_automatically`, or `send_invoice`. When charging automatically, Stripe will attempt to pay this subscription at the end of the cycle using the default source attached to the customer. When sending an invoice, Stripe will email your customer an invoice with payment instructions. */
  collection_method: "charge_automatically" | "send_invoice";

  /**
   * Time at which the object was created. Measured in seconds since the Unix epoch.
   * @format unix-time
   */
  created: number;

  /**
   * End of the current period that the subscription has been invoiced for. At the end of this period, a new invoice will be created.
   * @format unix-time
   */
  current_period_end: number;

  /**
   * Start of the current period that the subscription has been invoiced for.
   * @format unix-time
   */
  current_period_start: number;

  /** ID of the customer who owns the subscription. */
  customer: string | Customer | DeletedCustomer | (Customer & DeletedCustomer);

  /** Number of days a customer has to pay invoices generated by this subscription. This value will be `null` for subscriptions where `collection_method=charge_automatically`. */
  days_until_due?: number | null;

  /** ID of the default payment method for the subscription. It must belong to the customer associated with the subscription. This takes precedence over `default_source`. If neither are set, invoices will use the customer's [invoice_settings.default_payment_method](https://stripe.com/docs/api/customers/object#customer_object-invoice_settings-default_payment_method) or [default_source](https://stripe.com/docs/api/customers/object#customer_object-default_source). */
  default_payment_method?: string | PaymentMethod | null;

  /** ID of the default payment source for the subscription. It must belong to the customer associated with the subscription and be in a chargeable state. If `default_payment_method` is also set, `default_payment_method` will take precedence. If neither are set, invoices will use the customer's [invoice_settings.default_payment_method](https://stripe.com/docs/api/customers/object#customer_object-invoice_settings-default_payment_method) or [default_source](https://stripe.com/docs/api/customers/object#customer_object-default_source). */
  default_source?:
    | string
    | AlipayAccount
    | BankAccount
    | BitcoinReceiver
    | Card
    | Source
    | (AlipayAccount & BankAccount & BitcoinReceiver & Card & Source)
    | null;

  /** The tax rates that will apply to any subscription item that does not have `tax_rates` set. Invoices created will have their `default_tax_rates` populated from the subscription. */
  default_tax_rates?: TaxRate[] | null;

  /** Describes the current discount applied to this subscription, if there is one. When billing, a discount applied to a subscription overrides a discount applied on a customer-wide basis. */
  discount?: Discount | null;

  /**
   * If the subscription has ended, the date the subscription ended.
   * @format unix-time
   */
  ended_at?: number | null;

  /** Unique identifier for the object. */
  id: string;

  /**
   * SubscriptionItemList
   * List of subscription items, each with an attached price.
   */
  items: { data: SubscriptionItem[]; has_more: boolean; object: "list"; url: string };

  /** The most recent invoice this subscription has generated. */
  latest_invoice?: string | Invoice | null;

  /** Has the value `true` if the object exists in live mode or the value `false` if the object exists in test mode. */
  livemode: boolean;

  /** Set of [key-value pairs](https://stripe.com/docs/api/metadata) that you can attach to an object. This can be useful for storing additional information about the object in a structured format. */
  metadata: Record<string, string>;

  /**
   * Specifies the approximate timestamp on which any pending invoice items will be billed according to the schedule provided at `pending_invoice_item_interval`.
   * @format unix-time
   */
  next_pending_invoice_item_invoice?: number | null;

  /** String representing the object's type. Objects of the same type share the same value. */
  object: "subscription";

  /** If specified, payment collection for this subscription will be paused. */
  pause_collection?: SubscriptionsResourcePauseCollection | null;

  /** Payment settings passed on to invoices created by the subscription. */
  payment_settings?: SubscriptionsResourcePaymentSettings | null;

  /** Specifies an interval for how often to bill for any pending invoice items. It is analogous to calling [Create an invoice](https://stripe.com/docs/api#create_invoice) for the given subscription at the specified interval. */
  pending_invoice_item_interval?: SubscriptionPendingInvoiceItemInterval | null;

  /** You can use this [SetupIntent](https://stripe.com/docs/api/setup_intents) to collect user authentication when creating a subscription without immediate payment or updating a subscription's payment method, allowing you to optimize for off-session payments. Learn more in the [SCA Migration Guide](https://stripe.com/docs/billing/migration/strong-customer-authentication#scenario-2). */
  pending_setup_intent?: string | SetupIntent | null;

  /** If specified, [pending updates](https://stripe.com/docs/billing/subscriptions/pending-updates) that will be applied to the subscription once the `latest_invoice` has been paid. */
  pending_update?: SubscriptionsResourcePendingUpdate | null;

  /** The schedule attached to the subscription */
  schedule?: string | SubscriptionSchedule | null;

  /**
   * Date when the subscription was first created. The date might differ from the `created` date due to backdating.
   * @format unix-time
   */
  start_date: number;

  /**
   * Possible values are `incomplete`, `incomplete_expired`, `trialing`, `active`, `past_due`, `canceled`, or `unpaid`.
   *
   * For `collection_method=charge_automatically` a subscription moves into `incomplete` if the initial payment attempt fails. A subscription in this state can only have metadata and default_source updated. Once the first invoice is paid, the subscription moves into an `active` state. If the first invoice is not paid within 23 hours, the subscription transitions to `incomplete_expired`. This is a terminal state, the open invoice will be voided and no further invoices will be generated.
   * A subscription that is currently in a trial period is `trialing` and moves to `active` when the trial period is over.
   * If subscription `collection_method=charge_automatically` it becomes `past_due` when payment to renew it fails and `canceled` or `unpaid` (depending on your subscriptions settings) when Stripe has exhausted all payment retry attempts.
   * If subscription `collection_method=send_invoice` it becomes `past_due` when its invoice is not paid by the due date, and `canceled` or `unpaid` if it is still not paid by an additional deadline after that. Note that when a subscription has a status of `unpaid`, no subsequent invoices will be attempted (invoices will be created, but then immediately automatically closed). After receiving updated payment information from a customer, you may choose to reopen and pay their closed invoices.
   */
  status: "active" | "canceled" | "incomplete" | "incomplete_expired" | "past_due" | "trialing" | "unpaid";

  /** The account (if any) the subscription's payments will be attributed to for tax reporting, and where funds from each payment will be transferred to for each of the subscription's invoices. */
  transfer_data?: SubscriptionTransferData | null;

  /**
   * If the subscription has a trial, the end of that trial.
   * @format unix-time
   */
  trial_end?: number | null;

  /**
   * If the subscription has a trial, the beginning of that trial.
   * @format unix-time
   */
  trial_start?: number | null;
}

export interface SubscriptionAutomaticTax {
  /** Whether Stripe automatically computes tax on this subscription. */
  enabled: boolean;
}

export interface SubscriptionBillingThresholds {
  /** Monetary threshold that triggers the subscription to create an invoice */
  amount_gte?: number | null;

  /** Indicates if the `billing_cycle_anchor` should be reset when a threshold is reached. If true, `billing_cycle_anchor` will be updated to the date/time the threshold was last reached; otherwise, the value will remain unchanged. This value may not be `true` if the subscription contains items with plans that have `aggregate_usage=last_ever`. */
  reset_billing_cycle_anchor?: boolean | null;
}

/**
* Subscription items allow you to create customer subscriptions with more than
one plan, making it easy to represent complex billing relationships.
*/
export interface SubscriptionItem {
  /** Define thresholds at which an invoice will be sent, and the related subscription advanced to a new billing period */
  billing_thresholds?: SubscriptionItemBillingThresholds | null;

  /** Time at which the object was created. Measured in seconds since the Unix epoch. */
  created: number;

  /** Unique identifier for the object. */
  id: string;

  /** Set of [key-value pairs](https://stripe.com/docs/api/metadata) that you can attach to an object. This can be useful for storing additional information about the object in a structured format. */
  metadata: Record<string, string>;

  /** String representing the object's type. Objects of the same type share the same value. */
  object: "subscription_item";

  /**
   * Prices define the unit cost, currency, and (optional) billing cycle for both recurring and one-time purchases of products.
   * [Products](https://stripe.com/docs/api#products) help you track inventory or provisioning, and prices help you track payment terms. Different physical goods or levels of service should be represented by products, and pricing options should be represented by prices. This approach lets you change prices without having to change your provisioning scheme.
   *
   * For example, you might have a single "gold" product that has prices for $10/month, $100/year, and €9 once.
   * Related guides: [Set up a subscription](https://stripe.com/docs/billing/subscriptions/set-up-subscription), [create an invoice](https://stripe.com/docs/billing/invoices/create), and more about [products and prices](https://stripe.com/docs/billing/prices-guide).
   */
  price: Price;

  /** The [quantity](https://stripe.com/docs/subscriptions/quantities) of the plan to which the customer should be subscribed. */
  quantity?: number;

  /** The `subscription` this `subscription_item` belongs to. */
  subscription: string;

  /** The tax rates which apply to this `subscription_item`. When set, the `default_tax_rates` on the subscription do not apply to this `subscription_item`. */
  tax_rates?: TaxRate[] | null;
}

export interface SubscriptionItemBillingThresholds {
  /** Usage threshold that triggers the subscription to create an invoice */
  usage_gte?: number | null;
}

export interface SubscriptionPaymentMethodOptionsCard {
  mandate_options?: InvoiceMandateOptionsCard;

  /** We strongly recommend that you rely on our SCA Engine to automatically prompt your customers for authentication based on risk level and [other requirements](https://stripe.com/docs/strong-customer-authentication). However, if you wish to request 3D Secure based on logic from your own fraud engine, provide this option. Read our guide on [manually requesting 3D Secure](https://stripe.com/docs/payments/3d-secure#manual-three-ds) for more information on how this configuration interacts with Radar and our SCA Engine. */
  request_three_d_secure?: "any" | "automatic" | null;
}

export interface SubscriptionPendingInvoiceItemInterval {
  /** Specifies invoicing frequency. Either `day`, `week`, `month` or `year`. */
  interval: "day" | "month" | "week" | "year";

  /** The number of intervals between invoices. For example, `interval=month` and `interval_count=3` bills every 3 months. Maximum of one year interval allowed (1 year, 12 months, or 52 weeks). */
  interval_count: number;
}

/**
* A subscription schedule allows you to create and manage the lifecycle of a subscription by predefining expected changes.

Related guide: [Subscription Schedules](https://stripe.com/docs/billing/subscriptions/subscription-schedules).
*/
export interface SubscriptionSchedule {
  /**
   * Time at which the subscription schedule was canceled. Measured in seconds since the Unix epoch.
   * @format unix-time
   */
  canceled_at?: number | null;

  /**
   * Time at which the subscription schedule was completed. Measured in seconds since the Unix epoch.
   * @format unix-time
   */
  completed_at?: number | null;

  /**
   * Time at which the object was created. Measured in seconds since the Unix epoch.
   * @format unix-time
   */
  created: number;

  /** Object representing the start and end dates for the current phase of the subscription schedule, if it is `active`. */
  current_phase?: SubscriptionScheduleCurrentPhase | null;

  /** ID of the customer who owns the subscription schedule. */
  customer: string | Customer | DeletedCustomer | (Customer & DeletedCustomer);
  default_settings: SubscriptionSchedulesResourceDefaultSettings;

  /** Behavior of the subscription schedule and underlying subscription when it ends. Possible values are `release` and `cancel`. */
  end_behavior: "cancel" | "none" | "release" | "renew";

  /** Unique identifier for the object. */
  id: string;

  /** Has the value `true` if the object exists in live mode or the value `false` if the object exists in test mode. */
  livemode: boolean;

  /** Set of [key-value pairs](https://stripe.com/docs/api/metadata) that you can attach to an object. This can be useful for storing additional information about the object in a structured format. */
  metadata?: Record<string, string>;

  /** String representing the object's type. Objects of the same type share the same value. */
  object: "subscription_schedule";

  /** Configuration for the subscription schedule's phases. */
  phases: SubscriptionSchedulePhaseConfiguration[];

  /**
   * Time at which the subscription schedule was released. Measured in seconds since the Unix epoch.
   * @format unix-time
   */
  released_at?: number | null;

  /** ID of the subscription once managed by the subscription schedule (if it is released). */
  released_subscription?: string | null;

  /** The present status of the subscription schedule. Possible values are `not_started`, `active`, `completed`, `released`, and `canceled`. You can read more about the different states in our [behavior guide](https://stripe.com/docs/billing/subscriptions/subscription-schedules). */
  status: "active" | "canceled" | "completed" | "not_started" | "released";

  /** ID of the subscription managed by the subscription schedule. */
  subscription?: string | Subscription | null;
}

/**
 * An Add Invoice Item describes the prices and quantities that will be added as pending invoice items when entering a phase.
 */
export interface SubscriptionScheduleAddInvoiceItem {
  /** ID of the price used to generate the invoice item. */
  price: string | Price | DeletedPrice | (Price & DeletedPrice);

  /** The quantity of the invoice item. */
  quantity?: number | null;

  /** The tax rates which apply to the item. When set, the `default_tax_rates` do not apply to this item. */
  tax_rates?: TaxRate[] | null;
}

/**
 * A phase item describes the price and quantity of a phase.
 */
export interface SubscriptionScheduleConfigurationItem {
  /** Define thresholds at which an invoice will be sent, and the related subscription advanced to a new billing period */
  billing_thresholds?: SubscriptionItemBillingThresholds | null;

  /** ID of the price to which the customer should be subscribed. */
  price: string | Price | DeletedPrice | (Price & DeletedPrice);

  /** Quantity of the plan to which the customer should be subscribed. */
  quantity?: number;

  /** The tax rates which apply to this `phase_item`. When set, the `default_tax_rates` on the phase do not apply to this `phase_item`. */
  tax_rates?: TaxRate[] | null;
}

export interface SubscriptionScheduleCurrentPhase {
  /**
   * The end of this phase of the subscription schedule.
   * @format unix-time
   */
  end_date: number;

  /**
   * The start of this phase of the subscription schedule.
   * @format unix-time
   */
  start_date: number;
}

/**
 * A phase describes the plans, coupon, and trialing status of a subscription for a predefined time period.
 */
export interface SubscriptionSchedulePhaseConfiguration {
  /** A list of prices and quantities that will generate invoice items appended to the first invoice for this phase. */
  add_invoice_items: SubscriptionScheduleAddInvoiceItem[];

  /** A non-negative decimal between 0 and 100, with at most two decimal places. This represents the percentage of the subscription invoice subtotal that will be transferred to the application owner's Stripe account during this phase of the schedule. */
  application_fee_percent?: number | null;
  automatic_tax?: SchedulesPhaseAutomaticTax;

  /** Possible values are `phase_start` or `automatic`. If `phase_start` then billing cycle anchor of the subscription is set to the start of the phase when entering the phase. If `automatic` then the billing cycle anchor is automatically modified as needed when entering the phase. For more information, see the billing cycle [documentation](https://stripe.com/docs/billing/subscriptions/billing-cycle). */
  billing_cycle_anchor?: "automatic" | "phase_start" | null;

  /** Define thresholds at which an invoice will be sent, and the subscription advanced to a new billing period */
  billing_thresholds?: SubscriptionBillingThresholds | null;

  /** Either `charge_automatically`, or `send_invoice`. When charging automatically, Stripe will attempt to pay the underlying subscription at the end of each billing cycle using the default source attached to the customer. When sending an invoice, Stripe will email your customer an invoice with payment instructions. */
  collection_method?: "charge_automatically" | "send_invoice" | null;

  /** ID of the coupon to use during this phase of the subscription schedule. */
  coupon?: string | Coupon | DeletedCoupon | (Coupon & DeletedCoupon) | null;

  /** ID of the default payment method for the subscription schedule. It must belong to the customer associated with the subscription schedule. If not set, invoices will use the default payment method in the customer's invoice settings. */
  default_payment_method?: string | PaymentMethod | null;

  /** The default tax rates to apply to the subscription during this phase of the subscription schedule. */
  default_tax_rates?: TaxRate[] | null;

  /**
   * The end of this phase of the subscription schedule.
   * @format unix-time
   */
  end_date: number;

  /** The invoice settings applicable during this phase. */
  invoice_settings?: InvoiceSettingSubscriptionScheduleSetting | null;

  /** Subscription items to configure the subscription to during this phase of the subscription schedule. */
  items: SubscriptionScheduleConfigurationItem[];

  /** If the subscription schedule will prorate when transitioning to this phase. Possible values are `create_prorations` and `none`. */
  proration_behavior: "always_invoice" | "create_prorations" | "none";

  /**
   * The start of this phase of the subscription schedule.
   * @format unix-time
   */
  start_date: number;

  /** The account (if any) the associated subscription's payments will be attributed to for tax reporting, and where funds from each payment will be transferred to for each of the subscription's invoices. */
  transfer_data?: SubscriptionTransferData | null;

  /**
   * When the trial ends within the phase.
   * @format unix-time
   */
  trial_end?: number | null;
}

export interface SubscriptionSchedulesResourceDefaultSettings {
  /** A non-negative decimal between 0 and 100, with at most two decimal places. This represents the percentage of the subscription invoice subtotal that will be transferred to the application owner's Stripe account during this phase of the schedule. */
  application_fee_percent?: number | null;
  automatic_tax?: SubscriptionSchedulesResourceDefaultSettingsAutomaticTax;

  /** Possible values are `phase_start` or `automatic`. If `phase_start` then billing cycle anchor of the subscription is set to the start of the phase when entering the phase. If `automatic` then the billing cycle anchor is automatically modified as needed when entering the phase. For more information, see the billing cycle [documentation](https://stripe.com/docs/billing/subscriptions/billing-cycle). */
  billing_cycle_anchor: "automatic" | "phase_start";

  /** Define thresholds at which an invoice will be sent, and the subscription advanced to a new billing period */
  billing_thresholds?: SubscriptionBillingThresholds | null;

  /** Either `charge_automatically`, or `send_invoice`. When charging automatically, Stripe will attempt to pay the underlying subscription at the end of each billing cycle using the default source attached to the customer. When sending an invoice, Stripe will email your customer an invoice with payment instructions. */
  collection_method?: "charge_automatically" | "send_invoice" | null;

  /** ID of the default payment method for the subscription schedule. If not set, invoices will use the default payment method in the customer's invoice settings. */
  default_payment_method?: string | PaymentMethod | null;

  /** The subscription schedule's default invoice settings. */
  invoice_settings?: InvoiceSettingSubscriptionScheduleSetting | null;

  /** The account (if any) the associated subscription's payments will be attributed to for tax reporting, and where funds from each payment will be transferred to for each of the subscription's invoices. */
  transfer_data?: SubscriptionTransferData | null;
}

export interface SubscriptionSchedulesResourceDefaultSettingsAutomaticTax {
  /** Whether Stripe automatically computes tax on invoices created during this phase. */
  enabled: boolean;
}

export interface SubscriptionTransferData {
  /** A non-negative decimal between 0 and 100, with at most two decimal places. This represents the percentage of the subscription invoice subtotal that will be transferred to the destination account. By default, the entire amount is transferred to the destination. */
  amount_percent?: number | null;

  /** The account where funds from the payment will be transferred to upon payment success. */
  destination: string | Account;
}

/**
* The Pause Collection settings determine how we will pause collection for this subscription and for how long the subscription
should be paused.
*/
export interface SubscriptionsResourcePauseCollection {
  /** The payment collection behavior for this subscription while paused. One of `keep_as_draft`, `mark_uncollectible`, or `void`. */
  behavior: "keep_as_draft" | "mark_uncollectible" | "void";

  /**
   * The time after which the subscription will resume collecting payments.
   * @format unix-time
   */
  resumes_at?: number | null;
}

export interface SubscriptionsResourcePaymentMethodOptions {
  /** This sub-hash contains details about the Canadian pre-authorized debit payment method options to pass to invoices created by the subscription. */
  acss_debit?: InvoicePaymentMethodOptionsAcssDebit | null;

  /** This sub-hash contains details about the Bancontact payment method options to pass to invoices created by the subscription. */
  bancontact?: InvoicePaymentMethodOptionsBancontact | null;

  /** This sub-hash contains details about the Card payment method options to pass to invoices created by the subscription. */
  card?: SubscriptionPaymentMethodOptionsCard | null;
}

export interface SubscriptionsResourcePaymentSettings {
  /** Payment-method-specific configuration to provide to invoices created by the subscription. */
  payment_method_options?: SubscriptionsResourcePaymentMethodOptions | null;

  /** The list of payment method types to provide to every invoice created by the subscription. If not set, Stripe attempts to automatically determine the types to use by looking at the invoice’s default payment method, the subscription’s default payment method, the customer’s default payment method, and your [invoice template settings](https://dashboard.stripe.com/settings/billing/invoice). */
  payment_method_types?:
    | (
        | "ach_credit_transfer"
        | "ach_debit"
        | "acss_debit"
        | "au_becs_debit"
        | "bacs_debit"
        | "bancontact"
        | "boleto"
        | "card"
        | "fpx"
        | "giropay"
        | "ideal"
        | "sepa_debit"
        | "sofort"
        | "wechat_pay"
      )[]
    | null;
}

/**
* Pending Updates store the changes pending from a previous update that will be applied
to the Subscription upon successful payment.
*/
export interface SubscriptionsResourcePendingUpdate {
  /**
   * If the update is applied, determines the date of the first full invoice, and, for plans with `month` or `year` intervals, the day of the month for subsequent invoices.
   * @format unix-time
   */
  billing_cycle_anchor?: number | null;

  /**
   * The point after which the changes reflected by this update will be discarded and no longer applied.
   * @format unix-time
   */
  expires_at: number;

  /** List of subscription items, each with an attached plan, that will be set if the update is applied. */
  subscription_items?: SubscriptionItem[] | null;

  /**
   * Unix timestamp representing the end of the trial period the customer will get before being charged for the first time, if the update is applied.
   * @format unix-time
   */
  trial_end?: number | null;

  /** Indicates if a plan's `trial_period_days` should be applied to the subscription. Setting `trial_end` per subscription is preferred, and this defaults to `false`. Setting this flag to `true` together with `trial_end` is not allowed. See [Using trial periods on subscriptions](https://stripe.com/docs/billing/subscriptions/trials) to learn more. */
  trial_from_plan?: boolean | null;
}

/**
 * [Tax codes](https://stripe.com/docs/tax/tax-codes) classify goods and services for tax purposes.
 */
export interface TaxCode {
  /** A detailed description of which types of products the tax code represents. */
  description: string;

  /** Unique identifier for the object. */
  id: string;

  /** A short name for the tax code. */
  name: string;

  /** String representing the object's type. Objects of the same type share the same value. */
  object: "tax_code";
}

export interface TaxDeductedAtSource {
  /** Unique identifier for the object. */
  id: string;

  /** String representing the object's type. Objects of the same type share the same value. */
  object: "tax_deducted_at_source";

  /**
   * The end of the invoicing period. This TDS applies to Stripe fees collected during this invoicing period.
   * @format unix-time
   */
  period_end: number;

  /**
   * The start of the invoicing period. This TDS applies to Stripe fees collected during this invoicing period.
   * @format unix-time
   */
  period_start: number;

  /** The TAN that was supplied to Stripe when TDS was assessed */
  tax_deduction_account_number: string;
}

/**
* You can add one or multiple tax IDs to a [customer](https://stripe.com/docs/api/customers).
A customer's tax IDs are displayed on invoices and credit notes issued for the customer.

Related guide: [Customer Tax Identification Numbers](https://stripe.com/docs/billing/taxes/tax-ids).
*/
export interface TaxId {
  /** Two-letter ISO code representing the country of the tax ID. */
  country?: string | null;

  /**
   * Time at which the object was created. Measured in seconds since the Unix epoch.
   * @format unix-time
   */
  created: number;

  /** ID of the customer. */
  customer?: string | Customer | null;

  /** Unique identifier for the object. */
  id: string;

  /** Has the value `true` if the object exists in live mode or the value `false` if the object exists in test mode. */
  livemode: boolean;

  /** String representing the object's type. Objects of the same type share the same value. */
  object: "tax_id";

  /** Type of the tax ID, one of `ae_trn`, `au_abn`, `au_arn`, `br_cnpj`, `br_cpf`, `ca_bn`, `ca_gst_hst`, `ca_pst_bc`, `ca_pst_mb`, `ca_pst_sk`, `ca_qst`, `ch_vat`, `cl_tin`, `es_cif`, `eu_vat`, `gb_vat`, `ge_vat`, `hk_br`, `id_npwp`, `il_vat`, `in_gst`, `jp_cn`, `jp_rn`, `kr_brn`, `li_uid`, `mx_rfc`, `my_frp`, `my_itn`, `my_sst`, `no_vat`, `nz_gst`, `ru_inn`, `ru_kpp`, `sa_vat`, `sg_gst`, `sg_uen`, `th_vat`, `tw_vat`, `ua_vat`, `us_ein`, or `za_vat`. Note that some legacy tax IDs have type `unknown` */
  type:
    | "ae_trn"
    | "au_abn"
    | "au_arn"
    | "br_cnpj"
    | "br_cpf"
    | "ca_bn"
    | "ca_gst_hst"
    | "ca_pst_bc"
    | "ca_pst_mb"
    | "ca_pst_sk"
    | "ca_qst"
    | "ch_vat"
    | "cl_tin"
    | "es_cif"
    | "eu_vat"
    | "gb_vat"
    | "ge_vat"
    | "hk_br"
    | "id_npwp"
    | "il_vat"
    | "in_gst"
    | "jp_cn"
    | "jp_rn"
    | "kr_brn"
    | "li_uid"
    | "mx_rfc"
    | "my_frp"
    | "my_itn"
    | "my_sst"
    | "no_vat"
    | "nz_gst"
    | "ru_inn"
    | "ru_kpp"
    | "sa_vat"
    | "sg_gst"
    | "sg_uen"
    | "th_vat"
    | "tw_vat"
    | "ua_vat"
    | "unknown"
    | "us_ein"
    | "za_vat";

  /** Value of the tax ID. */
  value: string;

  /** Tax ID verification information. */
  verification?: TaxIdVerification | null;
}

export interface TaxIdVerification {
  /** Verification status, one of `pending`, `verified`, `unverified`, or `unavailable`. */
  status: "pending" | "unavailable" | "unverified" | "verified";

  /** Verified address. */
  verified_address?: string | null;

  /** Verified name. */
  verified_name?: string | null;
}

/**
* Tax rates can be applied to [invoices](https://stripe.com/docs/billing/invoices/tax-rates), [subscriptions](https://stripe.com/docs/billing/subscriptions/taxes) and [Checkout Sessions](https://stripe.com/docs/payments/checkout/set-up-a-subscription#tax-rates) to collect tax.

Related guide: [Tax Rates](https://stripe.com/docs/billing/taxes/tax-rates).
*/
export interface TaxRate {
  /** Defaults to `true`. When set to `false`, this tax rate cannot be used with new applications or Checkout Sessions, but will still work for subscriptions and invoices that already have it set. */
  active: boolean;

  /** Two-letter country code ([ISO 3166-1 alpha-2](https://en.wikipedia.org/wiki/ISO_3166-1_alpha-2)). */
  country?: string | null;

  /**
   * Time at which the object was created. Measured in seconds since the Unix epoch.
   * @format unix-time
   */
  created: number;

  /** An arbitrary string attached to the tax rate for your internal use only. It will not be visible to your customers. */
  description?: string | null;

  /** The display name of the tax rates as it will appear to your customer on their receipt email, PDF, and the hosted invoice page. */
  display_name: string;

  /** Unique identifier for the object. */
  id: string;

  /** This specifies if the tax rate is inclusive or exclusive. */
  inclusive: boolean;

  /** The jurisdiction for the tax rate. You can use this label field for tax reporting purposes. It also appears on your customer’s invoice. */
  jurisdiction?: string | null;

  /** Has the value `true` if the object exists in live mode or the value `false` if the object exists in test mode. */
  livemode: boolean;

  /** Set of [key-value pairs](https://stripe.com/docs/api/metadata) that you can attach to an object. This can be useful for storing additional information about the object in a structured format. */
  metadata?: Record<string, string>;

  /** String representing the object's type. Objects of the same type share the same value. */
  object: "tax_rate";

  /** This represents the tax rate percent out of 100. */
  percentage: number;

  /** [ISO 3166-2 subdivision code](https://en.wikipedia.org/wiki/ISO_3166-2:US), without country prefix. For example, "NY" for New York, United States. */
  state?: string | null;

  /** The high-level tax type, such as `vat` or `sales_tax`. */
  tax_type?: "gst" | "hst" | "jct" | "pst" | "qst" | "rst" | "sales_tax" | "vat" | null;
}

/**
* A Connection Token is used by the Stripe Terminal SDK to connect to a reader.

Related guide: [Fleet Management](https://stripe.com/docs/terminal/fleet/locations).
*/
export interface TerminalConnectionToken {
  /** The id of the location that this connection token is scoped to. Note that location scoping only applies to internet-connected readers. For more details, see [the docs on scoping connection tokens](https://stripe.com/docs/terminal/fleet/locations#connection-tokens). */
  location?: string;

  /** String representing the object's type. Objects of the same type share the same value. */
  object: "terminal.connection_token";

  /** Your application should pass this token to the Stripe Terminal SDK. */
  secret: string;
}

/**
* A Location represents a grouping of readers.

Related guide: [Fleet Management](https://stripe.com/docs/terminal/fleet/locations).
*/
export interface TerminalLocation {
  address: Address;

  /** The display name of the location. */
  display_name: string;

  /** Unique identifier for the object. */
  id: string;

  /** Has the value `true` if the object exists in live mode or the value `false` if the object exists in test mode. */
  livemode: boolean;

  /** Set of [key-value pairs](https://stripe.com/docs/api/metadata) that you can attach to an object. This can be useful for storing additional information about the object in a structured format. */
  metadata: Record<string, string>;

  /** String representing the object's type. Objects of the same type share the same value. */
  object: "terminal.location";
}

/**
* A Reader represents a physical device for accepting payment details.

Related guide: [Connecting to a Reader](https://stripe.com/docs/terminal/payments/connect-reader).
*/
export interface TerminalReader {
  /** The current software version of the reader. */
  device_sw_version?: string | null;

  /** Type of reader, one of `bbpos_chipper2x`, `bbpos_wisepos_e`, or `verifone_P400`. */
  device_type: "bbpos_chipper2x" | "bbpos_wisepos_e" | "verifone_P400";

  /** Unique identifier for the object. */
  id: string;

  /** The local IP address of the reader. */
  ip_address?: string | null;

  /** Custom label given to the reader for easier identification. */
  label: string;

  /** Has the value `true` if the object exists in live mode or the value `false` if the object exists in test mode. */
  livemode: boolean;

  /** The location identifier of the reader. */
  location?: string | TerminalLocation | null;

  /** Set of [key-value pairs](https://stripe.com/docs/api/metadata) that you can attach to an object. This can be useful for storing additional information about the object in a structured format. */
  metadata: Record<string, string>;

  /** String representing the object's type. Objects of the same type share the same value. */
  object: "terminal.reader";

  /** Serial number of the reader. */
  serial_number: string;

  /** The networking status of the reader. */
  status?: string | null;
}

/**
* Cardholder authentication via 3D Secure is initiated by creating a `3D Secure`
object. Once the object has been created, you can use it to authenticate the
cardholder and create a charge.
*/
export interface ThreeDSecure {
  /** Amount of the charge that you will create when authentication completes. */
  amount: number;

  /** True if the cardholder went through the authentication flow and their bank indicated that authentication succeeded. */
  authenticated: boolean;

  /**
   * You can store multiple cards on a customer in order to charge the customer
   * later. You can also store multiple debit cards on a recipient in order to
   * transfer to those cards later.
   *
   * Related guide: [Card Payments with Sources](https://stripe.com/docs/sources/cards).
   */
  card: Card;

  /**
   * Time at which the object was created. Measured in seconds since the Unix epoch.
   * @format unix-time
   */
  created: number;

  /** Three-letter [ISO currency code](https://www.iso.org/iso-4217-currency-codes.html), in lowercase. Must be a [supported currency](https://stripe.com/docs/currencies). */
  currency: string;

  /** Unique identifier for the object. */
  id: string;

  /** Has the value `true` if the object exists in live mode or the value `false` if the object exists in test mode. */
  livemode: boolean;

  /** String representing the object's type. Objects of the same type share the same value. */
  object: "three_d_secure";

  /** If present, this is the URL that you should send the cardholder to for authentication. If you are going to use Stripe.js to display the authentication page in an iframe, you should use the value "_callback". */
  redirect_url?: string | null;

  /** Possible values are `redirect_pending`, `succeeded`, or `failed`. When the cardholder can be authenticated, the object starts with status `redirect_pending`. When liability will be shifted to the cardholder's bank (either because the cardholder was successfully authenticated, or because the bank has not implemented 3D Secure, the object wlil be in status `succeeded`. `failed` indicates that authentication was attempted unsuccessfully. */
  status: string;
}

export interface ThreeDSecureDetails {
  /**
   * For authenticated transactions: how the customer was authenticated by
   * the issuing bank.
   */
  authentication_flow?: "challenge" | "frictionless" | null;

  /** Indicates the outcome of 3D Secure authentication. */
  result?: "attempt_acknowledged" | "authenticated" | "failed" | "not_supported" | "processing_error" | null;

  /**
   * Additional information about why 3D Secure succeeded or failed based
   * on the `result`.
   */
  result_reason?:
    | "abandoned"
    | "bypassed"
    | "canceled"
    | "card_not_enrolled"
    | "network_not_supported"
    | "protocol_error"
    | "rejected"
    | null;

  /** The version of 3D Secure that was used. */
  version?: "1.0.2" | "2.1.0" | "2.2.0" | null;
}

export interface ThreeDSecureUsage {
  /** Whether 3D Secure is supported on this card. */
  supported: boolean;
}

/**
* Tokenization is the process Stripe uses to collect sensitive card or bank
account details, or personally identifiable information (PII), directly from
your customers in a secure manner. A token representing this information is
returned to your server to use. You should use our
[recommended payments integrations](https://stripe.com/docs/payments) to perform this process
client-side. This ensures that no sensitive card data touches your server,
and allows your integration to operate in a PCI-compliant way.

If you cannot use client-side tokenization, you can also create tokens using
the API with either your publishable or secret API key. Keep in mind that if
your integration uses this method, you are responsible for any PCI compliance
that may be required, and you must keep your secret API key safe. Unlike with
client-side tokenization, your customer's information is not sent directly to
Stripe, so we cannot determine how it is handled or stored.

Tokens cannot be stored or used more than once. To store card or bank account
information for later use, you can create [Customer](https://stripe.com/docs/api#customers)
objects or [Custom accounts](https://stripe.com/docs/api#external_accounts). Note that
[Radar](https://stripe.com/docs/radar), our integrated solution for automatic fraud protection,
performs best with integrations that use client-side tokenization.

Related guide: [Accept a payment](https://stripe.com/docs/payments/accept-a-payment-charges#web-create-token)
*/
export interface Token {
  /**
   * These bank accounts are payment methods on `Customer` objects.
   *
   * On the other hand [External Accounts](https://stripe.com/docs/api#external_accounts) are transfer
   * destinations on `Account` objects for [Custom accounts](https://stripe.com/docs/connect/custom-accounts).
   * They can be bank accounts or debit cards as well, and are documented in the links above.
   * Related guide: [Bank Debits and Transfers](https://stripe.com/docs/payments/bank-debits-transfers).
   */
  bank_account?: BankAccount;

  /**
   * You can store multiple cards on a customer in order to charge the customer
   * later. You can also store multiple debit cards on a recipient in order to
   * transfer to those cards later.
   *
   * Related guide: [Card Payments with Sources](https://stripe.com/docs/sources/cards).
   */
  card?: Card;

  /** IP address of the client that generated the token. */
  client_ip?: string | null;

  /**
   * Time at which the object was created. Measured in seconds since the Unix epoch.
   * @format unix-time
   */
  created: number;

  /** Unique identifier for the object. */
  id: string;

  /** Has the value `true` if the object exists in live mode or the value `false` if the object exists in test mode. */
  livemode: boolean;

  /** String representing the object's type. Objects of the same type share the same value. */
  object: "token";

  /** Type of the token: `account`, `bank_account`, `card`, or `pii`. */
  type: string;

  /** Whether this token has already been used (tokens can be used only once). */
  used: boolean;
}

/**
* To top up your Stripe balance, you create a top-up object. You can retrieve
individual top-ups, as well as list all top-ups. Top-ups are identified by a
unique, random ID.

Related guide: [Topping Up your Platform Account](https://stripe.com/docs/connect/top-ups).
*/
export interface Topup {
  /** Amount transferred. */
  amount: number;

  /** ID of the balance transaction that describes the impact of this top-up on your account balance. May not be specified depending on status of top-up. */
  balance_transaction?: string | BalanceTransaction | null;

  /**
   * Time at which the object was created. Measured in seconds since the Unix epoch.
   * @format unix-time
   */
  created: number;

  /** Three-letter [ISO currency code](https://www.iso.org/iso-4217-currency-codes.html), in lowercase. Must be a [supported currency](https://stripe.com/docs/currencies). */
  currency: string;

  /** An arbitrary string attached to the object. Often useful for displaying to users. */
  description?: string | null;

  /** Date the funds are expected to arrive in your Stripe account for payouts. This factors in delays like weekends or bank holidays. May not be specified depending on status of top-up. */
  expected_availability_date?: number | null;

  /** Error code explaining reason for top-up failure if available (see [the errors section](https://stripe.com/docs/api#errors) for a list of codes). */
  failure_code?: string | null;

  /** Message to user further explaining reason for top-up failure if available. */
  failure_message?: string | null;

  /** Unique identifier for the object. */
  id: string;

  /** Has the value `true` if the object exists in live mode or the value `false` if the object exists in test mode. */
  livemode: boolean;

  /** Set of [key-value pairs](https://stripe.com/docs/api/metadata) that you can attach to an object. This can be useful for storing additional information about the object in a structured format. */
  metadata: Record<string, string>;

  /** String representing the object's type. Objects of the same type share the same value. */
  object: "topup";

  /**
   * `Source` objects allow you to accept a variety of payment methods. They
   * represent a customer's payment instrument, and can be used with the Stripe API
   * just like a `Card` object: once chargeable, they can be charged, or can be
   * attached to customers.
   *
   * Related guides: [Sources API](https://stripe.com/docs/sources) and [Sources & Customers](https://stripe.com/docs/sources/customers).
   */
  source: Source;

  /** Extra information about a top-up. This will appear on your source's bank statement. It must contain at least one letter. */
  statement_descriptor?: string | null;

  /** The status of the top-up is either `canceled`, `failed`, `pending`, `reversed`, or `succeeded`. */
  status: "canceled" | "failed" | "pending" | "reversed" | "succeeded";

  /** A string that identifies this top-up as part of a group. */
  transfer_group?: string | null;
}

/**
* A `Transfer` object is created when you move funds between Stripe accounts as
part of Connect.

Before April 6, 2017, transfers also represented movement of funds from a
Stripe account to a card or bank account. This behavior has since been split
out into a [Payout](https://stripe.com/docs/api#payout_object) object, with corresponding payout endpoints. For more
information, read about the
[transfer/payout split](https://stripe.com/docs/transfer-payout-split).

Related guide: [Creating Separate Charges and Transfers](https://stripe.com/docs/connect/charges-transfers).
*/
export interface Transfer {
  /** Amount in %s to be transferred. */
  amount: number;

  /** Amount in %s reversed (can be less than the amount attribute on the transfer if a partial reversal was issued). */
  amount_reversed: number;

  /** Balance transaction that describes the impact of this transfer on your account balance. */
  balance_transaction?: string | BalanceTransaction | null;

  /**
   * Time that this record of the transfer was first created.
   * @format unix-time
   */
  created: number;

  /** Three-letter [ISO currency code](https://www.iso.org/iso-4217-currency-codes.html), in lowercase. Must be a [supported currency](https://stripe.com/docs/currencies). */
  currency: string;

  /** An arbitrary string attached to the object. Often useful for displaying to users. */
  description?: string | null;

  /** ID of the Stripe account the transfer was sent to. */
  destination?: string | Account | null;

  /** If the destination is a Stripe account, this will be the ID of the payment that the destination account received for the transfer. */
  destination_payment?: string | Charge;

  /** Unique identifier for the object. */
  id: string;

  /** Has the value `true` if the object exists in live mode or the value `false` if the object exists in test mode. */
  livemode: boolean;

  /** Set of [key-value pairs](https://stripe.com/docs/api/metadata) that you can attach to an object. This can be useful for storing additional information about the object in a structured format. */
  metadata: Record<string, string>;

  /** String representing the object's type. Objects of the same type share the same value. */
  object: "transfer";

  /**
   * TransferReversalList
   * A list of reversals that have been applied to the transfer.
   */
  reversals: { data: TransferReversal[]; has_more: boolean; object: "list"; url: string };

  /** Whether the transfer has been fully reversed. If the transfer is only partially reversed, this attribute will still be false. */
  reversed: boolean;

  /** ID of the charge or payment that was used to fund the transfer. If null, the transfer was funded from the available balance. */
  source_transaction?: string | Charge | null;

  /** The source balance this transfer came from. One of `card`, `fpx`, or `bank_account`. */
  source_type?: string | null;

  /** A string that identifies this transaction as part of a group. See the [Connect documentation](https://stripe.com/docs/connect/charges-transfers#transfer-options) for details. */
  transfer_group?: string | null;
}

export interface TransferData {
  /** Amount intended to be collected by this PaymentIntent. A positive integer representing how much to charge in the [smallest currency unit](https://stripe.com/docs/currencies#zero-decimal) (e.g., 100 cents to charge $1.00 or 100 to charge ¥100, a zero-decimal currency). The minimum amount is $0.50 US or [equivalent in charge currency](https://stripe.com/docs/currencies#minimum-and-maximum-charge-amounts). The amount value supports up to eight digits (e.g., a value of 99999999 for a USD charge of $999,999.99). */
  amount?: number;

  /**
   * The account (if any) the payment will be attributed to for tax
   * reporting, and where funds from the payment will be transferred to upon
   * payment success.
   */
  destination: string | Account;
}

/**
* [Stripe Connect](https://stripe.com/docs/connect) platforms can reverse transfers made to a
connected account, either entirely or partially, and can also specify whether
to refund any related application fees. Transfer reversals add to the
platform's balance and subtract from the destination account's balance.

Reversing a transfer that was made for a [destination
charge](/docs/connect/destination-charges) is allowed only up to the amount of
the charge. It is possible to reverse a
[transfer_group](https://stripe.com/docs/connect/charges-transfers#transfer-options)
transfer only if the destination account has enough balance to cover the
reversal.

Related guide: [Reversing Transfers](https://stripe.com/docs/connect/charges-transfers#reversing-transfers).
*/
export interface TransferReversal {
  /** Amount, in %s. */
  amount: number;

  /** Balance transaction that describes the impact on your account balance. */
  balance_transaction?: string | BalanceTransaction | null;

  /**
   * Time at which the object was created. Measured in seconds since the Unix epoch.
   * @format unix-time
   */
  created: number;

  /** Three-letter [ISO currency code](https://www.iso.org/iso-4217-currency-codes.html), in lowercase. Must be a [supported currency](https://stripe.com/docs/currencies). */
  currency: string;

  /** Linked payment refund for the transfer reversal. */
  destination_payment_refund?: string | Refund | null;

  /** Unique identifier for the object. */
  id: string;

  /** Set of [key-value pairs](https://stripe.com/docs/api/metadata) that you can attach to an object. This can be useful for storing additional information about the object in a structured format. */
  metadata?: Record<string, string>;

  /** String representing the object's type. Objects of the same type share the same value. */
  object: "transfer_reversal";

  /** ID of the refund responsible for the transfer reversal. */
  source_refund?: string | Refund | null;

  /** ID of the transfer that was reversed. */
  transfer: string | Transfer;
}

export interface TransferSchedule {
  /** The number of days charges for the account will be held before being paid out. */
  delay_days: number;

  /** How frequently funds will be paid out. One of `manual` (payouts only created via API call), `daily`, `weekly`, or `monthly`. */
  interval: string;

  /** The day of the month funds will be paid out. Only shown if `interval` is monthly. Payouts scheduled between the 29th and 31st of the month are sent on the last day of shorter months. */
  monthly_anchor?: number;

  /** The day of the week funds will be paid out, of the style 'monday', 'tuesday', etc. Only shown if `interval` is weekly. */
  weekly_anchor?: string;
}

export interface TransformQuantity {
  /** Divide usage by this number. */
  divide_by: number;

  /** After division, either round the result `up` or `down`. */
  round: "down" | "up";
}

export interface TransformUsage {
  /** Divide usage by this number. */
  divide_by: number;

  /** After division, either round the result `up` or `down`. */
  round: "down" | "up";
}

/**
* Usage records allow you to report customer usage and metrics to Stripe for
metered billing of subscription prices.

Related guide: [Metered Billing](https://stripe.com/docs/billing/subscriptions/metered-billing).
*/
export interface UsageRecord {
  /** Unique identifier for the object. */
  id: string;

  /** Has the value `true` if the object exists in live mode or the value `false` if the object exists in test mode. */
  livemode: boolean;

  /** String representing the object's type. Objects of the same type share the same value. */
  object: "usage_record";

  /** The usage quantity for the specified date. */
  quantity: number;

  /** The ID of the subscription item this usage record contains data for. */
  subscription_item: string;

  /**
   * The timestamp when this usage occurred.
   * @format unix-time
   */
  timestamp: number;
}

export interface UsageRecordSummary {
  /** Unique identifier for the object. */
  id: string;

  /** The invoice in which this usage period has been billed for. */
  invoice?: string | null;

  /** Has the value `true` if the object exists in live mode or the value `false` if the object exists in test mode. */
  livemode: boolean;

  /** String representing the object's type. Objects of the same type share the same value. */
  object: "usage_record_summary";
  period: Period;

  /** The ID of the subscription item this summary is describing. */
  subscription_item: string;

  /** The total usage within this usage period. */
  total_usage: number;
}

export interface VerificationSessionRedaction {
  /** Indicates whether this object and its related objects have been redacted or not. */
  status: "processing" | "redacted";
}

/**
* You can configure [webhook endpoints](https://stripe.com/docs/webhooks/) via the API to be
notified about events that happen in your Stripe account or connected
accounts.

Most users configure webhooks from [the dashboard](https://dashboard.stripe.com/webhooks), which provides a user interface for registering and testing your webhook endpoints.

Related guide: [Setting up Webhooks](https://stripe.com/docs/webhooks/configure).
*/
export interface WebhookEndpoint {
  /** The API version events are rendered as for this webhook endpoint. */
  api_version?: string | null;

  /** The ID of the associated Connect application. */
  application?: string | null;

  /**
   * Time at which the object was created. Measured in seconds since the Unix epoch.
   * @format unix-time
   */
  created: number;

  /** An optional description of what the webhook is used for. */
  description?: string | null;

  /** The list of events to enable for this endpoint. `['*']` indicates that all events are enabled, except those that require explicit selection. */
  enabled_events: string[];

  /** Unique identifier for the object. */
  id: string;

  /** Has the value `true` if the object exists in live mode or the value `false` if the object exists in test mode. */
  livemode: boolean;

  /** Set of [key-value pairs](https://stripe.com/docs/api/metadata) that you can attach to an object. This can be useful for storing additional information about the object in a structured format. */
  metadata: Record<string, string>;

  /** String representing the object's type. Objects of the same type share the same value. */
  object: "webhook_endpoint";

  /** The endpoint's secret, used to generate [webhook signatures](https://stripe.com/docs/webhooks/signatures). Only returned at creation. */
  secret?: string;

  /** The status of the webhook. It can be `enabled` or `disabled`. */
  status: string;

  /** The URL of the webhook endpoint. */
  url: string;
}

export namespace V1 {
  /**
   * @description <p>Initiate 3D Secure authentication.</p>
   * @name Post3DSecure
   * @request POST:/v1/3d_secure
   * @secure
   * @response `200` `ThreeDSecure` Successful response.
   * @response `default` `Error` Error response.
   */
  export namespace Post3DSecure {
    export type RequestParams = {};
    export type RequestQuery = {};
    export type RequestBody = {
      amount: number;
      card?: string;
      currency: string;
      customer?: string;
      expand?: string[];
      return_url: string;
    };
    export type RequestHeaders = {};
    export type ResponseBody = ThreeDSecure;
  }
  /**
   * @description <p>Retrieves a 3D Secure object.</p>
   * @name Get3DSecureThreeDSecure
   * @request GET:/v1/3d_secure/{three_d_secure}
   * @secure
   * @response `200` `ThreeDSecure` Successful response.
   * @response `default` `Error` Error response.
   */
  export namespace Get3DSecureThreeDSecure {
    export type RequestParams = { threeDSecure: string };
    export type RequestQuery = { expand?: string[] };
    export type RequestBody = CardMandatePaymentMethodDetails;
    export type RequestHeaders = {};
    export type ResponseBody = ThreeDSecure;
  }
  /**
   * @description <p>With <a href="/docs/connect">Connect</a>, you can delete accounts you manage.</p> <p>Accounts created using test-mode keys can be deleted at any time. Custom or Express accounts created using live-mode keys can only be deleted once all balances are zero.</p> <p>If you want to delete your own account, use the <a href="https://dashboard.stripe.com/account">account information tab in your account settings</a> instead.</p>
   * @name DeleteAccount
   * @request DELETE:/v1/account
   * @secure
   * @response `200` `DeletedAccount` Successful response.
   * @response `default` `Error` Error response.
   */
  export namespace DeleteAccount {
    export type RequestParams = {};
    export type RequestQuery = {};
    export type RequestBody = { account?: string };
    export type RequestHeaders = {};
    export type ResponseBody = DeletedAccount;
  }
  /**
   * @description <p>Retrieves the details of an account.</p>
   * @name GetAccount
   * @request GET:/v1/account
   * @secure
   * @response `200` `Account` Successful response.
   * @response `default` `Error` Error response.
   */
  export namespace GetAccount {
    export type RequestParams = {};
    export type RequestQuery = { expand?: string[] };
    export type RequestBody = CardMandatePaymentMethodDetails;
    export type RequestHeaders = {};
    export type ResponseBody = Account;
  }
  /**
   * @description <p>Updates a <a href="/docs/connect/accounts">connected account</a> by setting the values of the parameters passed. Any parameters not provided are left unchanged. Most parameters can be changed only for Custom accounts. (These are marked <strong>Custom Only</strong> below.) Parameters marked <strong>Custom and Express</strong> are not supported for Standard accounts.</p> <p>To update your own account, use the <a href="https://dashboard.stripe.com/account">Dashboard</a>. Refer to our <a href="/docs/connect/updating-accounts">Connect</a> documentation to learn more about updating accounts.</p>
   * @name PostAccount
   * @request POST:/v1/account
   * @secure
   * @response `200` `Account` Successful response.
   * @response `default` `Error` Error response.
   */
  export namespace PostAccount {
    export type RequestParams = {};
    export type RequestQuery = {};
    export type RequestBody = {
      account_token?: string;
      bank_account?:
        | {
            account_holder_name?: string;
            account_holder_type?: "company" | "individual";
            account_number: string;
            account_type?: "checking" | "futsu" | "savings" | "toza";
            country: string;
            currency?: string;
            object?: "bank_account";
            routing_number?: string;
          }
        | string;
      business_profile?: {
        mcc?: string;
        name?: string;
        product_description?: string;
        support_address?: {
          city?: string;
          country?: string;
          line1?: string;
          line2?: string;
          postal_code?: string;
          state?: string;
        };
        support_email?: string;
        support_phone?: string;
        support_url?: string | "";
        url?: string;
      };
      business_type?: "company" | "government_entity" | "individual" | "non_profit";
      capabilities?: {
        acss_debit_payments?: { requested?: boolean };
        afterpay_clearpay_payments?: { requested?: boolean };
        au_becs_debit_payments?: { requested?: boolean };
        bacs_debit_payments?: { requested?: boolean };
        bancontact_payments?: { requested?: boolean };
        boleto_payments?: { requested?: boolean };
        card_issuing?: { requested?: boolean };
        card_payments?: { requested?: boolean };
        cartes_bancaires_payments?: { requested?: boolean };
        eps_payments?: { requested?: boolean };
        fpx_payments?: { requested?: boolean };
        giropay_payments?: { requested?: boolean };
        grabpay_payments?: { requested?: boolean };
        ideal_payments?: { requested?: boolean };
        jcb_payments?: { requested?: boolean };
        klarna_payments?: { requested?: boolean };
        legacy_payments?: { requested?: boolean };
        oxxo_payments?: { requested?: boolean };
        p24_payments?: { requested?: boolean };
        sepa_debit_payments?: { requested?: boolean };
        sofort_payments?: { requested?: boolean };
        tax_reporting_us_1099_k?: { requested?: boolean };
        tax_reporting_us_1099_misc?: { requested?: boolean };
        transfers?: { requested?: boolean };
      };
      company?: {
        address?: {
          city?: string;
          country?: string;
          line1?: string;
          line2?: string;
          postal_code?: string;
          state?: string;
        };
        address_kana?: {
          city?: string;
          country?: string;
          line1?: string;
          line2?: string;
          postal_code?: string;
          state?: string;
          town?: string;
        };
        address_kanji?: {
          city?: string;
          country?: string;
          line1?: string;
          line2?: string;
          postal_code?: string;
          state?: string;
          town?: string;
        };
        directors_provided?: boolean;
        executives_provided?: boolean;
        name?: string;
        name_kana?: string;
        name_kanji?: string;
        owners_provided?: boolean;
        ownership_declaration?: { date?: number; ip?: string; user_agent?: string };
        phone?: string;
        registration_number?: string;
        structure?:
          | ""
          | "free_zone_establishment"
          | "free_zone_llc"
          | "government_instrumentality"
          | "governmental_unit"
          | "incorporated_non_profit"
          | "limited_liability_partnership"
          | "llc"
          | "multi_member_llc"
          | "private_company"
          | "private_corporation"
          | "private_partnership"
          | "public_company"
          | "public_corporation"
          | "public_partnership"
          | "single_member_llc"
          | "sole_establishment"
          | "sole_proprietorship"
          | "tax_exempt_government_instrumentality"
          | "unincorporated_association"
          | "unincorporated_non_profit";
        tax_id?: string;
        tax_id_registrar?: string;
        vat_id?: string;
        verification?: { document?: { back?: string; front?: string } };
      };
      default_currency?: string;
      documents?: {
        bank_account_ownership_verification?: { files?: string[] };
        company_license?: { files?: string[] };
        company_memorandum_of_association?: { files?: string[] };
        company_ministerial_decree?: { files?: string[] };
        company_registration_verification?: { files?: string[] };
        company_tax_id_verification?: { files?: string[] };
        proof_of_registration?: { files?: string[] };
      };
      email?: string;
      expand?: string[];
      external_account?: string;
      individual?: {
        address?: {
          city?: string;
          country?: string;
          line1?: string;
          line2?: string;
          postal_code?: string;
          state?: string;
        };
        address_kana?: {
          city?: string;
          country?: string;
          line1?: string;
          line2?: string;
          postal_code?: string;
          state?: string;
          town?: string;
        };
        address_kanji?: {
          city?: string;
          country?: string;
          line1?: string;
          line2?: string;
          postal_code?: string;
          state?: string;
          town?: string;
        };
        dob?: { day: number; month: number; year: number } | "" | ({ day: number; month: number; year: number } & "");
        email?: string;
        first_name?: string;
        first_name_kana?: string;
        first_name_kanji?: string;
        full_name_aliases?: string[] | "" | (string[] & "");
        gender?: string;
        id_number?: string;
        last_name?: string;
        last_name_kana?: string;
        last_name_kanji?: string;
        maiden_name?: string;
        metadata?: Record<string, string> | "" | (Record<string, string> & "");
        phone?: string;
        political_exposure?: "existing" | "none";
        ssn_last_4?: string;
        verification?: {
          additional_document?: { back?: string; front?: string };
          document?: { back?: string; front?: string };
        };
      };
      metadata?: Record<string, string> | "" | (Record<string, string> & "");
      settings?: {
        branding?: { icon?: string; logo?: string; primary_color?: string; secondary_color?: string };
        card_issuing?: { tos_acceptance?: { date?: number; ip?: string; user_agent?: string } };
        card_payments?: {
          decline_on?: { avs_failure?: boolean; cvc_failure?: boolean };
          statement_descriptor_prefix?: string;
        };
        payments?: {
          statement_descriptor?: string;
          statement_descriptor_kana?: string;
          statement_descriptor_kanji?: string;
        };
        payouts?: {
          debit_negative_balances?: boolean;
          schedule?: {
            delay_days?: "minimum" | number;
            interval?: "daily" | "manual" | "monthly" | "weekly";
            monthly_anchor?: number;
            weekly_anchor?: "friday" | "monday" | "saturday" | "sunday" | "thursday" | "tuesday" | "wednesday";
          };
          statement_descriptor?: string;
        };
      };
      tos_acceptance?: { date?: number; ip?: string; service_agreement?: string; user_agent?: string };
    };
    export type RequestHeaders = {};
    export type ResponseBody = Account;
  }
  /**
   * @description <p>Create an external account for a given account.</p>
   * @name PostAccountBankAccounts
   * @request POST:/v1/account/bank_accounts
   * @secure
   * @response `200` `ExternalAccount` Successful response.
   * @response `default` `Error` Error response.
   */
  export namespace PostAccountBankAccounts {
    export type RequestParams = {};
    export type RequestQuery = {};
    export type RequestBody = {
      bank_account?:
        | {
            account_holder_name?: string;
            account_holder_type?: "company" | "individual";
            account_number: string;
            account_type?: "checking" | "futsu" | "savings" | "toza";
            country: string;
            currency?: string;
            object?: "bank_account";
            routing_number?: string;
          }
        | string;
      default_for_currency?: boolean;
      expand?: string[];
      external_account?: string;
      metadata?: Record<string, string>;
    };
    export type RequestHeaders = {};
    export type ResponseBody = ExternalAccount;
  }
  /**
   * @description <p>Delete a specified external account for a given account.</p>
   * @name DeleteAccountBankAccountsId
   * @request DELETE:/v1/account/bank_accounts/{id}
   * @secure
   * @response `200` `DeletedExternalAccount` Successful response.
   * @response `default` `Error` Error response.
   */
  export namespace DeleteAccountBankAccountsId {
    export type RequestParams = { id: string };
    export type RequestQuery = {};
    export type RequestBody = CardMandatePaymentMethodDetails;
    export type RequestHeaders = {};
    export type ResponseBody = DeletedExternalAccount;
  }
  /**
   * @description <p>Retrieve a specified external account for a given account.</p>
   * @name GetAccountBankAccountsId
   * @request GET:/v1/account/bank_accounts/{id}
   * @secure
   * @response `200` `ExternalAccount` Successful response.
   * @response `default` `Error` Error response.
   */
  export namespace GetAccountBankAccountsId {
    export type RequestParams = { id: string };
    export type RequestQuery = { expand?: string[] };
    export type RequestBody = CardMandatePaymentMethodDetails;
    export type RequestHeaders = {};
    export type ResponseBody = ExternalAccount;
  }
  /**
   * @description <p>Updates the metadata, account holder name, account holder type of a bank account belonging to a <a href="/docs/connect/custom-accounts">Custom account</a>, and optionally sets it as the default for its currency. Other bank account details are not editable by design.</p> <p>You can re-enable a disabled bank account by performing an update call without providing any arguments or changes.</p>
   * @name PostAccountBankAccountsId
   * @request POST:/v1/account/bank_accounts/{id}
   * @secure
   * @response `200` `ExternalAccount` Successful response.
   * @response `default` `Error` Error response.
   */
  export namespace PostAccountBankAccountsId {
    export type RequestParams = { id: string };
    export type RequestQuery = {};
    export type RequestBody = {
      account_holder_name?: string;
      account_holder_type?: "" | "company" | "individual";
      account_type?: "checking" | "futsu" | "savings" | "toza";
      address_city?: string;
      address_country?: string;
      address_line1?: string;
      address_line2?: string;
      address_state?: string;
      address_zip?: string;
      default_for_currency?: boolean;
      exp_month?: string;
      exp_year?: string;
      expand?: string[];
      metadata?: Record<string, string> | "" | (Record<string, string> & "");
      name?: string;
    };
    export type RequestHeaders = {};
    export type ResponseBody = ExternalAccount;
  }
  /**
   * @description <p>Returns a list of capabilities associated with the account. The capabilities are returned sorted by creation date, with the most recent capability appearing first.</p>
   * @name GetAccountCapabilities
   * @request GET:/v1/account/capabilities
   * @secure
   * @response `200` `{ data: (Capability)[], has_more: boolean, object: "list", url: string }` Successful response.
   * @response `default` `Error` Error response.
   */
  export namespace GetAccountCapabilities {
    export type RequestParams = {};
    export type RequestQuery = { expand?: string[] };
    export type RequestBody = CardMandatePaymentMethodDetails;
    export type RequestHeaders = {};
    export type ResponseBody = { data: Capability[]; has_more: boolean; object: "list"; url: string };
  }
  /**
   * @description <p>Retrieves information about the specified Account Capability.</p>
   * @name GetAccountCapabilitiesCapability
   * @request GET:/v1/account/capabilities/{capability}
   * @secure
   * @response `200` `Capability` Successful response.
   * @response `default` `Error` Error response.
   */
  export namespace GetAccountCapabilitiesCapability {
    export type RequestParams = { capability: string };
    export type RequestQuery = { expand?: string[] };
    export type RequestBody = CardMandatePaymentMethodDetails;
    export type RequestHeaders = {};
    export type ResponseBody = Capability;
  }
  /**
   * @description <p>Updates an existing Account Capability.</p>
   * @name PostAccountCapabilitiesCapability
   * @request POST:/v1/account/capabilities/{capability}
   * @secure
   * @response `200` `Capability` Successful response.
   * @response `default` `Error` Error response.
   */
  export namespace PostAccountCapabilitiesCapability {
    export type RequestParams = { capability: string };
    export type RequestQuery = {};
    export type RequestBody = { expand?: string[]; requested?: boolean };
    export type RequestHeaders = {};
    export type ResponseBody = Capability;
  }
  /**
   * @description <p>List external accounts for an account.</p>
   * @name GetAccountExternalAccounts
   * @request GET:/v1/account/external_accounts
   * @secure
   * @response `200` `{ data: ((BankAccount | Card | (BankAccount & Card)))[], has_more: boolean, object: "list", url: string }` Successful response.
   * @response `default` `Error` Error response.
   */
  export namespace GetAccountExternalAccounts {
    export type RequestParams = {};
    export type RequestQuery = { ending_before?: string; expand?: string[]; limit?: number; starting_after?: string };
    export type RequestBody = CardMandatePaymentMethodDetails;
    export type RequestHeaders = {};
    export type ResponseBody = {
      data: (BankAccount | Card | (BankAccount & Card))[];
      has_more: boolean;
      object: "list";
      url: string;
    };
  }
  /**
   * @description <p>Create an external account for a given account.</p>
   * @name PostAccountExternalAccounts
   * @request POST:/v1/account/external_accounts
   * @secure
   * @response `200` `ExternalAccount` Successful response.
   * @response `default` `Error` Error response.
   */
  export namespace PostAccountExternalAccounts {
    export type RequestParams = {};
    export type RequestQuery = {};
    export type RequestBody = {
      bank_account?:
        | {
            account_holder_name?: string;
            account_holder_type?: "company" | "individual";
            account_number: string;
            account_type?: "checking" | "futsu" | "savings" | "toza";
            country: string;
            currency?: string;
            object?: "bank_account";
            routing_number?: string;
          }
        | string;
      default_for_currency?: boolean;
      expand?: string[];
      external_account?: string;
      metadata?: Record<string, string>;
    };
    export type RequestHeaders = {};
    export type ResponseBody = ExternalAccount;
  }
  /**
   * @description <p>Delete a specified external account for a given account.</p>
   * @name DeleteAccountExternalAccountsId
   * @request DELETE:/v1/account/external_accounts/{id}
   * @secure
   * @response `200` `DeletedExternalAccount` Successful response.
   * @response `default` `Error` Error response.
   */
  export namespace DeleteAccountExternalAccountsId {
    export type RequestParams = { id: string };
    export type RequestQuery = {};
    export type RequestBody = CardMandatePaymentMethodDetails;
    export type RequestHeaders = {};
    export type ResponseBody = DeletedExternalAccount;
  }
  /**
   * @description <p>Retrieve a specified external account for a given account.</p>
   * @name GetAccountExternalAccountsId
   * @request GET:/v1/account/external_accounts/{id}
   * @secure
   * @response `200` `ExternalAccount` Successful response.
   * @response `default` `Error` Error response.
   */
  export namespace GetAccountExternalAccountsId {
    export type RequestParams = { id: string };
    export type RequestQuery = { expand?: string[] };
    export type RequestBody = CardMandatePaymentMethodDetails;
    export type RequestHeaders = {};
    export type ResponseBody = ExternalAccount;
  }
  /**
   * @description <p>Updates the metadata, account holder name, account holder type of a bank account belonging to a <a href="/docs/connect/custom-accounts">Custom account</a>, and optionally sets it as the default for its currency. Other bank account details are not editable by design.</p> <p>You can re-enable a disabled bank account by performing an update call without providing any arguments or changes.</p>
   * @name PostAccountExternalAccountsId
   * @request POST:/v1/account/external_accounts/{id}
   * @secure
   * @response `200` `ExternalAccount` Successful response.
   * @response `default` `Error` Error response.
   */
  export namespace PostAccountExternalAccountsId {
    export type RequestParams = { id: string };
    export type RequestQuery = {};
    export type RequestBody = {
      account_holder_name?: string;
      account_holder_type?: "" | "company" | "individual";
      account_type?: "checking" | "futsu" | "savings" | "toza";
      address_city?: string;
      address_country?: string;
      address_line1?: string;
      address_line2?: string;
      address_state?: string;
      address_zip?: string;
      default_for_currency?: boolean;
      exp_month?: string;
      exp_year?: string;
      expand?: string[];
      metadata?: Record<string, string> | "" | (Record<string, string> & "");
      name?: string;
    };
    export type RequestHeaders = {};
    export type ResponseBody = ExternalAccount;
  }
  /**
   * @description <p>Creates a single-use login link for an Express account to access their Stripe dashboard.</p> <p><strong>You may only create login links for <a href="/docs/connect/express-accounts">Express accounts</a> connected to your platform</strong>.</p>
   * @name PostAccountLoginLinks
   * @request POST:/v1/account/login_links
   * @secure
   * @response `200` `LoginLink` Successful response.
   * @response `default` `Error` Error response.
   */
  export namespace PostAccountLoginLinks {
    export type RequestParams = {};
    export type RequestQuery = {};
    export type RequestBody = { account: string; expand?: string[]; redirect_url?: string };
    export type RequestHeaders = {};
    export type ResponseBody = LoginLink;
  }
  /**
   * @description <p>Returns a list of people associated with the account’s legal entity. The people are returned sorted by creation date, with the most recent people appearing first.</p>
   * @name GetAccountPeople
   * @request GET:/v1/account/people
   * @secure
   * @response `200` `{ data: (Person)[], has_more: boolean, object: "list", url: string }` Successful response.
   * @response `default` `Error` Error response.
   */
  export namespace GetAccountPeople {
    export type RequestParams = {};
    export type RequestQuery = {
      ending_before?: string;
      expand?: string[];
      limit?: number;
      relationship?: { director?: boolean; executive?: boolean; owner?: boolean; representative?: boolean };
      starting_after?: string;
    };
    export type RequestBody = CardMandatePaymentMethodDetails;
    export type RequestHeaders = {};
    export type ResponseBody = { data: Person[]; has_more: boolean; object: "list"; url: string };
  }
  /**
   * @description <p>Creates a new person.</p>
   * @name PostAccountPeople
   * @request POST:/v1/account/people
   * @secure
   * @response `200` `Person` Successful response.
   * @response `default` `Error` Error response.
   */
  export namespace PostAccountPeople {
    export type RequestParams = {};
    export type RequestQuery = {};
    export type RequestBody = {
      account?: string;
      address?: {
        city?: string;
        country?: string;
        line1?: string;
        line2?: string;
        postal_code?: string;
        state?: string;
      };
      address_kana?: {
        city?: string;
        country?: string;
        line1?: string;
        line2?: string;
        postal_code?: string;
        state?: string;
        town?: string;
      };
      address_kanji?: {
        city?: string;
        country?: string;
        line1?: string;
        line2?: string;
        postal_code?: string;
        state?: string;
        town?: string;
      };
      dob?: { day: number; month: number; year: number } | "" | ({ day: number; month: number; year: number } & "");
      documents?: {
        company_authorization?: { files?: string[] };
        passport?: { files?: string[] };
        visa?: { files?: string[] };
      };
      email?: string;
      expand?: string[];
      first_name?: string;
      first_name_kana?: string;
      first_name_kanji?: string;
      full_name_aliases?: string[] | "" | (string[] & "");
      gender?: string;
      id_number?: string;
      last_name?: string;
      last_name_kana?: string;
      last_name_kanji?: string;
      maiden_name?: string;
      metadata?: Record<string, string> | "" | (Record<string, string> & "");
      nationality?: string;
      person_token?: string;
      phone?: string;
      political_exposure?: string;
      relationship?: {
        director?: boolean;
        executive?: boolean;
        owner?: boolean;
        percent_ownership?: number | "";
        representative?: boolean;
        title?: string;
      };
      ssn_last_4?: string;
      verification?: {
        additional_document?: { back?: string; front?: string };
        document?: { back?: string; front?: string };
      };
    };
    export type RequestHeaders = {};
    export type ResponseBody = Person;
  }
  /**
   * @description <p>Deletes an existing person’s relationship to the account’s legal entity. Any person with a relationship for an account can be deleted through the API, except if the person is the <code>account_opener</code>. If your integration is using the <code>executive</code> parameter, you cannot delete the only verified <code>executive</code> on file.</p>
   * @name DeleteAccountPeoplePerson
   * @request DELETE:/v1/account/people/{person}
   * @secure
   * @response `200` `DeletedPerson` Successful response.
   * @response `default` `Error` Error response.
   */
  export namespace DeleteAccountPeoplePerson {
    export type RequestParams = { person: string };
    export type RequestQuery = {};
    export type RequestBody = CardMandatePaymentMethodDetails;
    export type RequestHeaders = {};
    export type ResponseBody = DeletedPerson;
  }
  /**
   * @description <p>Retrieves an existing person.</p>
   * @name GetAccountPeoplePerson
   * @request GET:/v1/account/people/{person}
   * @secure
   * @response `200` `Person` Successful response.
   * @response `default` `Error` Error response.
   */
  export namespace GetAccountPeoplePerson {
    export type RequestParams = { person: string };
    export type RequestQuery = { expand?: string[] };
    export type RequestBody = CardMandatePaymentMethodDetails;
    export type RequestHeaders = {};
    export type ResponseBody = Person;
  }
  /**
   * @description <p>Updates an existing person.</p>
   * @name PostAccountPeoplePerson
   * @request POST:/v1/account/people/{person}
   * @secure
   * @response `200` `Person` Successful response.
   * @response `default` `Error` Error response.
   */
  export namespace PostAccountPeoplePerson {
    export type RequestParams = { person: string };
    export type RequestQuery = {};
    export type RequestBody = {
      account?: string;
      address?: {
        city?: string;
        country?: string;
        line1?: string;
        line2?: string;
        postal_code?: string;
        state?: string;
      };
      address_kana?: {
        city?: string;
        country?: string;
        line1?: string;
        line2?: string;
        postal_code?: string;
        state?: string;
        town?: string;
      };
      address_kanji?: {
        city?: string;
        country?: string;
        line1?: string;
        line2?: string;
        postal_code?: string;
        state?: string;
        town?: string;
      };
      dob?: { day: number; month: number; year: number } | "" | ({ day: number; month: number; year: number } & "");
      documents?: {
        company_authorization?: { files?: string[] };
        passport?: { files?: string[] };
        visa?: { files?: string[] };
      };
      email?: string;
      expand?: string[];
      first_name?: string;
      first_name_kana?: string;
      first_name_kanji?: string;
      full_name_aliases?: string[] | "" | (string[] & "");
      gender?: string;
      id_number?: string;
      last_name?: string;
      last_name_kana?: string;
      last_name_kanji?: string;
      maiden_name?: string;
      metadata?: Record<string, string> | "" | (Record<string, string> & "");
      nationality?: string;
      person_token?: string;
      phone?: string;
      political_exposure?: string;
      relationship?: {
        director?: boolean;
        executive?: boolean;
        owner?: boolean;
        percent_ownership?: number | "";
        representative?: boolean;
        title?: string;
      };
      ssn_last_4?: string;
      verification?: {
        additional_document?: { back?: string; front?: string };
        document?: { back?: string; front?: string };
      };
    };
    export type RequestHeaders = {};
    export type ResponseBody = Person;
  }
  /**
   * @description <p>Returns a list of people associated with the account’s legal entity. The people are returned sorted by creation date, with the most recent people appearing first.</p>
   * @name GetAccountPersons
   * @request GET:/v1/account/persons
   * @secure
   * @response `200` `{ data: (Person)[], has_more: boolean, object: "list", url: string }` Successful response.
   * @response `default` `Error` Error response.
   */
  export namespace GetAccountPersons {
    export type RequestParams = {};
    export type RequestQuery = {
      ending_before?: string;
      expand?: string[];
      limit?: number;
      relationship?: { director?: boolean; executive?: boolean; owner?: boolean; representative?: boolean };
      starting_after?: string;
    };
    export type RequestBody = CardMandatePaymentMethodDetails;
    export type RequestHeaders = {};
    export type ResponseBody = { data: Person[]; has_more: boolean; object: "list"; url: string };
  }
  /**
   * @description <p>Creates a new person.</p>
   * @name PostAccountPersons
   * @request POST:/v1/account/persons
   * @secure
   * @response `200` `Person` Successful response.
   * @response `default` `Error` Error response.
   */
  export namespace PostAccountPersons {
    export type RequestParams = {};
    export type RequestQuery = {};
    export type RequestBody = {
      account?: string;
      address?: {
        city?: string;
        country?: string;
        line1?: string;
        line2?: string;
        postal_code?: string;
        state?: string;
      };
      address_kana?: {
        city?: string;
        country?: string;
        line1?: string;
        line2?: string;
        postal_code?: string;
        state?: string;
        town?: string;
      };
      address_kanji?: {
        city?: string;
        country?: string;
        line1?: string;
        line2?: string;
        postal_code?: string;
        state?: string;
        town?: string;
      };
      dob?: { day: number; month: number; year: number } | "" | ({ day: number; month: number; year: number } & "");
      documents?: {
        company_authorization?: { files?: string[] };
        passport?: { files?: string[] };
        visa?: { files?: string[] };
      };
      email?: string;
      expand?: string[];
      first_name?: string;
      first_name_kana?: string;
      first_name_kanji?: string;
      full_name_aliases?: string[] | "" | (string[] & "");
      gender?: string;
      id_number?: string;
      last_name?: string;
      last_name_kana?: string;
      last_name_kanji?: string;
      maiden_name?: string;
      metadata?: Record<string, string> | "" | (Record<string, string> & "");
      nationality?: string;
      person_token?: string;
      phone?: string;
      political_exposure?: string;
      relationship?: {
        director?: boolean;
        executive?: boolean;
        owner?: boolean;
        percent_ownership?: number | "";
        representative?: boolean;
        title?: string;
      };
      ssn_last_4?: string;
      verification?: {
        additional_document?: { back?: string; front?: string };
        document?: { back?: string; front?: string };
      };
    };
    export type RequestHeaders = {};
    export type ResponseBody = Person;
  }
  /**
   * @description <p>Deletes an existing person’s relationship to the account’s legal entity. Any person with a relationship for an account can be deleted through the API, except if the person is the <code>account_opener</code>. If your integration is using the <code>executive</code> parameter, you cannot delete the only verified <code>executive</code> on file.</p>
   * @name DeleteAccountPersonsPerson
   * @request DELETE:/v1/account/persons/{person}
   * @secure
   * @response `200` `DeletedPerson` Successful response.
   * @response `default` `Error` Error response.
   */
  export namespace DeleteAccountPersonsPerson {
    export type RequestParams = { person: string };
    export type RequestQuery = {};
    export type RequestBody = CardMandatePaymentMethodDetails;
    export type RequestHeaders = {};
    export type ResponseBody = DeletedPerson;
  }
  /**
   * @description <p>Retrieves an existing person.</p>
   * @name GetAccountPersonsPerson
   * @request GET:/v1/account/persons/{person}
   * @secure
   * @response `200` `Person` Successful response.
   * @response `default` `Error` Error response.
   */
  export namespace GetAccountPersonsPerson {
    export type RequestParams = { person: string };
    export type RequestQuery = { expand?: string[] };
    export type RequestBody = CardMandatePaymentMethodDetails;
    export type RequestHeaders = {};
    export type ResponseBody = Person;
  }
  /**
   * @description <p>Updates an existing person.</p>
   * @name PostAccountPersonsPerson
   * @request POST:/v1/account/persons/{person}
   * @secure
   * @response `200` `Person` Successful response.
   * @response `default` `Error` Error response.
   */
  export namespace PostAccountPersonsPerson {
    export type RequestParams = { person: string };
    export type RequestQuery = {};
    export type RequestBody = {
      account?: string;
      address?: {
        city?: string;
        country?: string;
        line1?: string;
        line2?: string;
        postal_code?: string;
        state?: string;
      };
      address_kana?: {
        city?: string;
        country?: string;
        line1?: string;
        line2?: string;
        postal_code?: string;
        state?: string;
        town?: string;
      };
      address_kanji?: {
        city?: string;
        country?: string;
        line1?: string;
        line2?: string;
        postal_code?: string;
        state?: string;
        town?: string;
      };
      dob?: { day: number; month: number; year: number } | "" | ({ day: number; month: number; year: number } & "");
      documents?: {
        company_authorization?: { files?: string[] };
        passport?: { files?: string[] };
        visa?: { files?: string[] };
      };
      email?: string;
      expand?: string[];
      first_name?: string;
      first_name_kana?: string;
      first_name_kanji?: string;
      full_name_aliases?: string[] | "" | (string[] & "");
      gender?: string;
      id_number?: string;
      last_name?: string;
      last_name_kana?: string;
      last_name_kanji?: string;
      maiden_name?: string;
      metadata?: Record<string, string> | "" | (Record<string, string> & "");
      nationality?: string;
      person_token?: string;
      phone?: string;
      political_exposure?: string;
      relationship?: {
        director?: boolean;
        executive?: boolean;
        owner?: boolean;
        percent_ownership?: number | "";
        representative?: boolean;
        title?: string;
      };
      ssn_last_4?: string;
      verification?: {
        additional_document?: { back?: string; front?: string };
        document?: { back?: string; front?: string };
      };
    };
    export type RequestHeaders = {};
    export type ResponseBody = Person;
  }
  /**
   * @description <p>Creates an AccountLink object that includes a single-use Stripe URL that the platform can redirect their user to in order to take them through the Connect Onboarding flow.</p>
   * @name PostAccountLinks
   * @request POST:/v1/account_links
   * @secure
   * @response `200` `AccountLink` Successful response.
   * @response `default` `Error` Error response.
   */
  export namespace PostAccountLinks {
    export type RequestParams = {};
    export type RequestQuery = {};
    export type RequestBody = {
      account: string;
      collect?: "currently_due" | "eventually_due";
      expand?: string[];
      refresh_url?: string;
      return_url?: string;
      type: "account_onboarding" | "account_update";
    };
    export type RequestHeaders = {};
    export type ResponseBody = AccountLink;
  }
  /**
   * @description <p>Returns a list of accounts connected to your platform via <a href="/docs/connect">Connect</a>. If you’re not a platform, the list is empty.</p>
   * @name GetAccounts
   * @request GET:/v1/accounts
   * @secure
   * @response `200` `{ data: (Account)[], has_more: boolean, object: "list", url: string }` Successful response.
   * @response `default` `Error` Error response.
   */
  export namespace GetAccounts {
    export type RequestParams = {};
    export type RequestQuery = {
      created?: { gt?: number; gte?: number; lt?: number; lte?: number } | number;
      ending_before?: string;
      expand?: string[];
      limit?: number;
      starting_after?: string;
    };
    export type RequestBody = CardMandatePaymentMethodDetails;
    export type RequestHeaders = {};
    export type ResponseBody = { data: Account[]; has_more: boolean; object: "list"; url: string };
  }
  /**
   * @description <p>With <a href="/docs/connect">Connect</a>, you can create Stripe accounts for your users. To do this, you’ll first need to <a href="https://dashboard.stripe.com/account/applications/settings">register your platform</a>.</p>
   * @name PostAccounts
   * @request POST:/v1/accounts
   * @secure
   * @response `200` `Account` Successful response.
   * @response `default` `Error` Error response.
   */
  export namespace PostAccounts {
    export type RequestParams = {};
    export type RequestQuery = {};
    export type RequestBody = {
      account_token?: string;
      bank_account?:
        | {
            account_holder_name?: string;
            account_holder_type?: "company" | "individual";
            account_number: string;
            account_type?: "checking" | "futsu" | "savings" | "toza";
            country: string;
            currency?: string;
            object?: "bank_account";
            routing_number?: string;
          }
        | string;
      business_profile?: {
        mcc?: string;
        name?: string;
        product_description?: string;
        support_address?: {
          city?: string;
          country?: string;
          line1?: string;
          line2?: string;
          postal_code?: string;
          state?: string;
        };
        support_email?: string;
        support_phone?: string;
        support_url?: string | "";
        url?: string;
      };
      business_type?: "company" | "government_entity" | "individual" | "non_profit";
      capabilities?: {
        acss_debit_payments?: { requested?: boolean };
        afterpay_clearpay_payments?: { requested?: boolean };
        au_becs_debit_payments?: { requested?: boolean };
        bacs_debit_payments?: { requested?: boolean };
        bancontact_payments?: { requested?: boolean };
        boleto_payments?: { requested?: boolean };
        card_issuing?: { requested?: boolean };
        card_payments?: { requested?: boolean };
        cartes_bancaires_payments?: { requested?: boolean };
        eps_payments?: { requested?: boolean };
        fpx_payments?: { requested?: boolean };
        giropay_payments?: { requested?: boolean };
        grabpay_payments?: { requested?: boolean };
        ideal_payments?: { requested?: boolean };
        jcb_payments?: { requested?: boolean };
        klarna_payments?: { requested?: boolean };
        legacy_payments?: { requested?: boolean };
        oxxo_payments?: { requested?: boolean };
        p24_payments?: { requested?: boolean };
        sepa_debit_payments?: { requested?: boolean };
        sofort_payments?: { requested?: boolean };
        tax_reporting_us_1099_k?: { requested?: boolean };
        tax_reporting_us_1099_misc?: { requested?: boolean };
        transfers?: { requested?: boolean };
      };
      company?: {
        address?: {
          city?: string;
          country?: string;
          line1?: string;
          line2?: string;
          postal_code?: string;
          state?: string;
        };
        address_kana?: {
          city?: string;
          country?: string;
          line1?: string;
          line2?: string;
          postal_code?: string;
          state?: string;
          town?: string;
        };
        address_kanji?: {
          city?: string;
          country?: string;
          line1?: string;
          line2?: string;
          postal_code?: string;
          state?: string;
          town?: string;
        };
        directors_provided?: boolean;
        executives_provided?: boolean;
        name?: string;
        name_kana?: string;
        name_kanji?: string;
        owners_provided?: boolean;
        ownership_declaration?: { date?: number; ip?: string; user_agent?: string };
        phone?: string;
        registration_number?: string;
        structure?:
          | ""
          | "free_zone_establishment"
          | "free_zone_llc"
          | "government_instrumentality"
          | "governmental_unit"
          | "incorporated_non_profit"
          | "limited_liability_partnership"
          | "llc"
          | "multi_member_llc"
          | "private_company"
          | "private_corporation"
          | "private_partnership"
          | "public_company"
          | "public_corporation"
          | "public_partnership"
          | "single_member_llc"
          | "sole_establishment"
          | "sole_proprietorship"
          | "tax_exempt_government_instrumentality"
          | "unincorporated_association"
          | "unincorporated_non_profit";
        tax_id?: string;
        tax_id_registrar?: string;
        vat_id?: string;
        verification?: { document?: { back?: string; front?: string } };
      };
      country?: string;
      default_currency?: string;
      documents?: {
        bank_account_ownership_verification?: { files?: string[] };
        company_license?: { files?: string[] };
        company_memorandum_of_association?: { files?: string[] };
        company_ministerial_decree?: { files?: string[] };
        company_registration_verification?: { files?: string[] };
        company_tax_id_verification?: { files?: string[] };
        proof_of_registration?: { files?: string[] };
      };
      email?: string;
      expand?: string[];
      external_account?: string;
      individual?: {
        address?: {
          city?: string;
          country?: string;
          line1?: string;
          line2?: string;
          postal_code?: string;
          state?: string;
        };
        address_kana?: {
          city?: string;
          country?: string;
          line1?: string;
          line2?: string;
          postal_code?: string;
          state?: string;
          town?: string;
        };
        address_kanji?: {
          city?: string;
          country?: string;
          line1?: string;
          line2?: string;
          postal_code?: string;
          state?: string;
          town?: string;
        };
        dob?: { day: number; month: number; year: number } | "" | ({ day: number; month: number; year: number } & "");
        email?: string;
        first_name?: string;
        first_name_kana?: string;
        first_name_kanji?: string;
        full_name_aliases?: string[] | "" | (string[] & "");
        gender?: string;
        id_number?: string;
        last_name?: string;
        last_name_kana?: string;
        last_name_kanji?: string;
        maiden_name?: string;
        metadata?: Record<string, string> | "" | (Record<string, string> & "");
        phone?: string;
        political_exposure?: "existing" | "none";
        ssn_last_4?: string;
        verification?: {
          additional_document?: { back?: string; front?: string };
          document?: { back?: string; front?: string };
        };
      };
      metadata?: Record<string, string> | "" | (Record<string, string> & "");
      settings?: {
        branding?: { icon?: string; logo?: string; primary_color?: string; secondary_color?: string };
        card_issuing?: { tos_acceptance?: { date?: number; ip?: string; user_agent?: string } };
        card_payments?: {
          decline_on?: { avs_failure?: boolean; cvc_failure?: boolean };
          statement_descriptor_prefix?: string;
        };
        payments?: {
          statement_descriptor?: string;
          statement_descriptor_kana?: string;
          statement_descriptor_kanji?: string;
        };
        payouts?: {
          debit_negative_balances?: boolean;
          schedule?: {
            delay_days?: "minimum" | number;
            interval?: "daily" | "manual" | "monthly" | "weekly";
            monthly_anchor?: number;
            weekly_anchor?: "friday" | "monday" | "saturday" | "sunday" | "thursday" | "tuesday" | "wednesday";
          };
          statement_descriptor?: string;
        };
      };
      tos_acceptance?: { date?: number; ip?: string; service_agreement?: string; user_agent?: string };
      type?: "custom" | "express" | "standard";
    };
    export type RequestHeaders = {};
    export type ResponseBody = Account;
  }
  /**
   * @description <p>With <a href="/docs/connect">Connect</a>, you can delete accounts you manage.</p> <p>Accounts created using test-mode keys can be deleted at any time. Custom or Express accounts created using live-mode keys can only be deleted once all balances are zero.</p> <p>If you want to delete your own account, use the <a href="https://dashboard.stripe.com/account">account information tab in your account settings</a> instead.</p>
   * @name DeleteAccountsAccount
   * @request DELETE:/v1/accounts/{account}
   * @secure
   * @response `200` `DeletedAccount` Successful response.
   * @response `default` `Error` Error response.
   */
  export namespace DeleteAccountsAccount {
    export type RequestParams = { account: string };
    export type RequestQuery = {};
    export type RequestBody = CardMandatePaymentMethodDetails;
    export type RequestHeaders = {};
    export type ResponseBody = DeletedAccount;
  }
  /**
   * @description <p>Retrieves the details of an account.</p>
   * @name GetAccountsAccount
   * @request GET:/v1/accounts/{account}
   * @secure
   * @response `200` `Account` Successful response.
   * @response `default` `Error` Error response.
   */
  export namespace GetAccountsAccount {
    export type RequestParams = { account: string };
    export type RequestQuery = { expand?: string[] };
    export type RequestBody = CardMandatePaymentMethodDetails;
    export type RequestHeaders = {};
    export type ResponseBody = Account;
  }
  /**
   * @description <p>Updates a <a href="/docs/connect/accounts">connected account</a> by setting the values of the parameters passed. Any parameters not provided are left unchanged. Most parameters can be changed only for Custom accounts. (These are marked <strong>Custom Only</strong> below.) Parameters marked <strong>Custom and Express</strong> are not supported for Standard accounts.</p> <p>To update your own account, use the <a href="https://dashboard.stripe.com/account">Dashboard</a>. Refer to our <a href="/docs/connect/updating-accounts">Connect</a> documentation to learn more about updating accounts.</p>
   * @name PostAccountsAccount
   * @request POST:/v1/accounts/{account}
   * @secure
   * @response `200` `Account` Successful response.
   * @response `default` `Error` Error response.
   */
  export namespace PostAccountsAccount {
    export type RequestParams = { account: string };
    export type RequestQuery = {};
    export type RequestBody = {
      account_token?: string;
      bank_account?:
        | {
            account_holder_name?: string;
            account_holder_type?: "company" | "individual";
            account_number: string;
            account_type?: "checking" | "futsu" | "savings" | "toza";
            country: string;
            currency?: string;
            object?: "bank_account";
            routing_number?: string;
          }
        | string;
      business_profile?: {
        mcc?: string;
        name?: string;
        product_description?: string;
        support_address?: {
          city?: string;
          country?: string;
          line1?: string;
          line2?: string;
          postal_code?: string;
          state?: string;
        };
        support_email?: string;
        support_phone?: string;
        support_url?: string | "";
        url?: string;
      };
      business_type?: "company" | "government_entity" | "individual" | "non_profit";
      capabilities?: {
        acss_debit_payments?: { requested?: boolean };
        afterpay_clearpay_payments?: { requested?: boolean };
        au_becs_debit_payments?: { requested?: boolean };
        bacs_debit_payments?: { requested?: boolean };
        bancontact_payments?: { requested?: boolean };
        boleto_payments?: { requested?: boolean };
        card_issuing?: { requested?: boolean };
        card_payments?: { requested?: boolean };
        cartes_bancaires_payments?: { requested?: boolean };
        eps_payments?: { requested?: boolean };
        fpx_payments?: { requested?: boolean };
        giropay_payments?: { requested?: boolean };
        grabpay_payments?: { requested?: boolean };
        ideal_payments?: { requested?: boolean };
        jcb_payments?: { requested?: boolean };
        klarna_payments?: { requested?: boolean };
        legacy_payments?: { requested?: boolean };
        oxxo_payments?: { requested?: boolean };
        p24_payments?: { requested?: boolean };
        sepa_debit_payments?: { requested?: boolean };
        sofort_payments?: { requested?: boolean };
        tax_reporting_us_1099_k?: { requested?: boolean };
        tax_reporting_us_1099_misc?: { requested?: boolean };
        transfers?: { requested?: boolean };
      };
      company?: {
        address?: {
          city?: string;
          country?: string;
          line1?: string;
          line2?: string;
          postal_code?: string;
          state?: string;
        };
        address_kana?: {
          city?: string;
          country?: string;
          line1?: string;
          line2?: string;
          postal_code?: string;
          state?: string;
          town?: string;
        };
        address_kanji?: {
          city?: string;
          country?: string;
          line1?: string;
          line2?: string;
          postal_code?: string;
          state?: string;
          town?: string;
        };
        directors_provided?: boolean;
        executives_provided?: boolean;
        name?: string;
        name_kana?: string;
        name_kanji?: string;
        owners_provided?: boolean;
        ownership_declaration?: { date?: number; ip?: string; user_agent?: string };
        phone?: string;
        registration_number?: string;
        structure?:
          | ""
          | "free_zone_establishment"
          | "free_zone_llc"
          | "government_instrumentality"
          | "governmental_unit"
          | "incorporated_non_profit"
          | "limited_liability_partnership"
          | "llc"
          | "multi_member_llc"
          | "private_company"
          | "private_corporation"
          | "private_partnership"
          | "public_company"
          | "public_corporation"
          | "public_partnership"
          | "single_member_llc"
          | "sole_establishment"
          | "sole_proprietorship"
          | "tax_exempt_government_instrumentality"
          | "unincorporated_association"
          | "unincorporated_non_profit";
        tax_id?: string;
        tax_id_registrar?: string;
        vat_id?: string;
        verification?: { document?: { back?: string; front?: string } };
      };
      default_currency?: string;
      documents?: {
        bank_account_ownership_verification?: { files?: string[] };
        company_license?: { files?: string[] };
        company_memorandum_of_association?: { files?: string[] };
        company_ministerial_decree?: { files?: string[] };
        company_registration_verification?: { files?: string[] };
        company_tax_id_verification?: { files?: string[] };
        proof_of_registration?: { files?: string[] };
      };
      email?: string;
      expand?: string[];
      external_account?: string;
      individual?: {
        address?: {
          city?: string;
          country?: string;
          line1?: string;
          line2?: string;
          postal_code?: string;
          state?: string;
        };
        address_kana?: {
          city?: string;
          country?: string;
          line1?: string;
          line2?: string;
          postal_code?: string;
          state?: string;
          town?: string;
        };
        address_kanji?: {
          city?: string;
          country?: string;
          line1?: string;
          line2?: string;
          postal_code?: string;
          state?: string;
          town?: string;
        };
        dob?: { day: number; month: number; year: number } | "" | ({ day: number; month: number; year: number } & "");
        email?: string;
        first_name?: string;
        first_name_kana?: string;
        first_name_kanji?: string;
        full_name_aliases?: string[] | "" | (string[] & "");
        gender?: string;
        id_number?: string;
        last_name?: string;
        last_name_kana?: string;
        last_name_kanji?: string;
        maiden_name?: string;
        metadata?: Record<string, string> | "" | (Record<string, string> & "");
        phone?: string;
        political_exposure?: "existing" | "none";
        ssn_last_4?: string;
        verification?: {
          additional_document?: { back?: string; front?: string };
          document?: { back?: string; front?: string };
        };
      };
      metadata?: Record<string, string> | "" | (Record<string, string> & "");
      settings?: {
        branding?: { icon?: string; logo?: string; primary_color?: string; secondary_color?: string };
        card_issuing?: { tos_acceptance?: { date?: number; ip?: string; user_agent?: string } };
        card_payments?: {
          decline_on?: { avs_failure?: boolean; cvc_failure?: boolean };
          statement_descriptor_prefix?: string;
        };
        payments?: {
          statement_descriptor?: string;
          statement_descriptor_kana?: string;
          statement_descriptor_kanji?: string;
        };
        payouts?: {
          debit_negative_balances?: boolean;
          schedule?: {
            delay_days?: "minimum" | number;
            interval?: "daily" | "manual" | "monthly" | "weekly";
            monthly_anchor?: number;
            weekly_anchor?: "friday" | "monday" | "saturday" | "sunday" | "thursday" | "tuesday" | "wednesday";
          };
          statement_descriptor?: string;
        };
      };
      tos_acceptance?: { date?: number; ip?: string; service_agreement?: string; user_agent?: string };
    };
    export type RequestHeaders = {};
    export type ResponseBody = Account;
  }
  /**
   * @description <p>Create an external account for a given account.</p>
   * @name PostAccountsAccountBankAccounts
   * @request POST:/v1/accounts/{account}/bank_accounts
   * @secure
   * @response `200` `ExternalAccount` Successful response.
   * @response `default` `Error` Error response.
   */
  export namespace PostAccountsAccountBankAccounts {
    export type RequestParams = { account: string };
    export type RequestQuery = {};
    export type RequestBody = {
      bank_account?:
        | {
            account_holder_name?: string;
            account_holder_type?: "company" | "individual";
            account_number: string;
            account_type?: "checking" | "futsu" | "savings" | "toza";
            country: string;
            currency?: string;
            object?: "bank_account";
            routing_number?: string;
          }
        | string;
      default_for_currency?: boolean;
      expand?: string[];
      external_account?: string;
      metadata?: Record<string, string>;
    };
    export type RequestHeaders = {};
    export type ResponseBody = ExternalAccount;
  }
  /**
   * @description <p>Delete a specified external account for a given account.</p>
   * @name DeleteAccountsAccountBankAccountsId
   * @request DELETE:/v1/accounts/{account}/bank_accounts/{id}
   * @secure
   * @response `200` `DeletedExternalAccount` Successful response.
   * @response `default` `Error` Error response.
   */
  export namespace DeleteAccountsAccountBankAccountsId {
    export type RequestParams = { account: string; id: string };
    export type RequestQuery = {};
    export type RequestBody = CardMandatePaymentMethodDetails;
    export type RequestHeaders = {};
    export type ResponseBody = DeletedExternalAccount;
  }
  /**
   * @description <p>Retrieve a specified external account for a given account.</p>
   * @name GetAccountsAccountBankAccountsId
   * @request GET:/v1/accounts/{account}/bank_accounts/{id}
   * @secure
   * @response `200` `ExternalAccount` Successful response.
   * @response `default` `Error` Error response.
   */
  export namespace GetAccountsAccountBankAccountsId {
    export type RequestParams = { account: string; id: string };
    export type RequestQuery = { expand?: string[] };
    export type RequestBody = CardMandatePaymentMethodDetails;
    export type RequestHeaders = {};
    export type ResponseBody = ExternalAccount;
  }
  /**
   * @description <p>Updates the metadata, account holder name, account holder type of a bank account belonging to a <a href="/docs/connect/custom-accounts">Custom account</a>, and optionally sets it as the default for its currency. Other bank account details are not editable by design.</p> <p>You can re-enable a disabled bank account by performing an update call without providing any arguments or changes.</p>
   * @name PostAccountsAccountBankAccountsId
   * @request POST:/v1/accounts/{account}/bank_accounts/{id}
   * @secure
   * @response `200` `ExternalAccount` Successful response.
   * @response `default` `Error` Error response.
   */
  export namespace PostAccountsAccountBankAccountsId {
    export type RequestParams = { account: string; id: string };
    export type RequestQuery = {};
    export type RequestBody = {
      account_holder_name?: string;
      account_holder_type?: "" | "company" | "individual";
      account_type?: "checking" | "futsu" | "savings" | "toza";
      address_city?: string;
      address_country?: string;
      address_line1?: string;
      address_line2?: string;
      address_state?: string;
      address_zip?: string;
      default_for_currency?: boolean;
      exp_month?: string;
      exp_year?: string;
      expand?: string[];
      metadata?: Record<string, string> | "" | (Record<string, string> & "");
      name?: string;
    };
    export type RequestHeaders = {};
    export type ResponseBody = ExternalAccount;
  }
  /**
   * @description <p>Returns a list of capabilities associated with the account. The capabilities are returned sorted by creation date, with the most recent capability appearing first.</p>
   * @name GetAccountsAccountCapabilities
   * @request GET:/v1/accounts/{account}/capabilities
   * @secure
   * @response `200` `{ data: (Capability)[], has_more: boolean, object: "list", url: string }` Successful response.
   * @response `default` `Error` Error response.
   */
  export namespace GetAccountsAccountCapabilities {
    export type RequestParams = { account: string };
    export type RequestQuery = { expand?: string[] };
    export type RequestBody = CardMandatePaymentMethodDetails;
    export type RequestHeaders = {};
    export type ResponseBody = { data: Capability[]; has_more: boolean; object: "list"; url: string };
  }
  /**
   * @description <p>Retrieves information about the specified Account Capability.</p>
   * @name GetAccountsAccountCapabilitiesCapability
   * @request GET:/v1/accounts/{account}/capabilities/{capability}
   * @secure
   * @response `200` `Capability` Successful response.
   * @response `default` `Error` Error response.
   */
  export namespace GetAccountsAccountCapabilitiesCapability {
    export type RequestParams = { account: string; capability: string };
    export type RequestQuery = { expand?: string[] };
    export type RequestBody = CardMandatePaymentMethodDetails;
    export type RequestHeaders = {};
    export type ResponseBody = Capability;
  }
  /**
   * @description <p>Updates an existing Account Capability.</p>
   * @name PostAccountsAccountCapabilitiesCapability
   * @request POST:/v1/accounts/{account}/capabilities/{capability}
   * @secure
   * @response `200` `Capability` Successful response.
   * @response `default` `Error` Error response.
   */
  export namespace PostAccountsAccountCapabilitiesCapability {
    export type RequestParams = { account: string; capability: string };
    export type RequestQuery = {};
    export type RequestBody = { expand?: string[]; requested?: boolean };
    export type RequestHeaders = {};
    export type ResponseBody = Capability;
  }
  /**
   * @description <p>List external accounts for an account.</p>
   * @name GetAccountsAccountExternalAccounts
   * @request GET:/v1/accounts/{account}/external_accounts
   * @secure
   * @response `200` `{ data: ((BankAccount | Card | (BankAccount & Card)))[], has_more: boolean, object: "list", url: string }` Successful response.
   * @response `default` `Error` Error response.
   */
  export namespace GetAccountsAccountExternalAccounts {
    export type RequestParams = { account: string };
    export type RequestQuery = { ending_before?: string; expand?: string[]; limit?: number; starting_after?: string };
    export type RequestBody = CardMandatePaymentMethodDetails;
    export type RequestHeaders = {};
    export type ResponseBody = {
      data: (BankAccount | Card | (BankAccount & Card))[];
      has_more: boolean;
      object: "list";
      url: string;
    };
  }
  /**
   * @description <p>Create an external account for a given account.</p>
   * @name PostAccountsAccountExternalAccounts
   * @request POST:/v1/accounts/{account}/external_accounts
   * @secure
   * @response `200` `ExternalAccount` Successful response.
   * @response `default` `Error` Error response.
   */
  export namespace PostAccountsAccountExternalAccounts {
    export type RequestParams = { account: string };
    export type RequestQuery = {};
    export type RequestBody = {
      bank_account?:
        | {
            account_holder_name?: string;
            account_holder_type?: "company" | "individual";
            account_number: string;
            account_type?: "checking" | "futsu" | "savings" | "toza";
            country: string;
            currency?: string;
            object?: "bank_account";
            routing_number?: string;
          }
        | string;
      default_for_currency?: boolean;
      expand?: string[];
      external_account?: string;
      metadata?: Record<string, string>;
    };
    export type RequestHeaders = {};
    export type ResponseBody = ExternalAccount;
  }
  /**
   * @description <p>Delete a specified external account for a given account.</p>
   * @name DeleteAccountsAccountExternalAccountsId
   * @request DELETE:/v1/accounts/{account}/external_accounts/{id}
   * @secure
   * @response `200` `DeletedExternalAccount` Successful response.
   * @response `default` `Error` Error response.
   */
  export namespace DeleteAccountsAccountExternalAccountsId {
    export type RequestParams = { account: string; id: string };
    export type RequestQuery = {};
    export type RequestBody = CardMandatePaymentMethodDetails;
    export type RequestHeaders = {};
    export type ResponseBody = DeletedExternalAccount;
  }
  /**
   * @description <p>Retrieve a specified external account for a given account.</p>
   * @name GetAccountsAccountExternalAccountsId
   * @request GET:/v1/accounts/{account}/external_accounts/{id}
   * @secure
   * @response `200` `ExternalAccount` Successful response.
   * @response `default` `Error` Error response.
   */
  export namespace GetAccountsAccountExternalAccountsId {
    export type RequestParams = { account: string; id: string };
    export type RequestQuery = { expand?: string[] };
    export type RequestBody = CardMandatePaymentMethodDetails;
    export type RequestHeaders = {};
    export type ResponseBody = ExternalAccount;
  }
  /**
   * @description <p>Updates the metadata, account holder name, account holder type of a bank account belonging to a <a href="/docs/connect/custom-accounts">Custom account</a>, and optionally sets it as the default for its currency. Other bank account details are not editable by design.</p> <p>You can re-enable a disabled bank account by performing an update call without providing any arguments or changes.</p>
   * @name PostAccountsAccountExternalAccountsId
   * @request POST:/v1/accounts/{account}/external_accounts/{id}
   * @secure
   * @response `200` `ExternalAccount` Successful response.
   * @response `default` `Error` Error response.
   */
  export namespace PostAccountsAccountExternalAccountsId {
    export type RequestParams = { account: string; id: string };
    export type RequestQuery = {};
    export type RequestBody = {
      account_holder_name?: string;
      account_holder_type?: "" | "company" | "individual";
      account_type?: "checking" | "futsu" | "savings" | "toza";
      address_city?: string;
      address_country?: string;
      address_line1?: string;
      address_line2?: string;
      address_state?: string;
      address_zip?: string;
      default_for_currency?: boolean;
      exp_month?: string;
      exp_year?: string;
      expand?: string[];
      metadata?: Record<string, string> | "" | (Record<string, string> & "");
      name?: string;
    };
    export type RequestHeaders = {};
    export type ResponseBody = ExternalAccount;
  }
  /**
   * @description <p>Creates a single-use login link for an Express account to access their Stripe dashboard.</p> <p><strong>You may only create login links for <a href="/docs/connect/express-accounts">Express accounts</a> connected to your platform</strong>.</p>
   * @name PostAccountsAccountLoginLinks
   * @request POST:/v1/accounts/{account}/login_links
   * @secure
   * @response `200` `LoginLink` Successful response.
   * @response `default` `Error` Error response.
   */
  export namespace PostAccountsAccountLoginLinks {
    export type RequestParams = { account: string };
    export type RequestQuery = {};
    export type RequestBody = { expand?: string[]; redirect_url?: string };
    export type RequestHeaders = {};
    export type ResponseBody = LoginLink;
  }
  /**
   * @description <p>Returns a list of people associated with the account’s legal entity. The people are returned sorted by creation date, with the most recent people appearing first.</p>
   * @name GetAccountsAccountPeople
   * @request GET:/v1/accounts/{account}/people
   * @secure
   * @response `200` `{ data: (Person)[], has_more: boolean, object: "list", url: string }` Successful response.
   * @response `default` `Error` Error response.
   */
  export namespace GetAccountsAccountPeople {
    export type RequestParams = { account: string };
    export type RequestQuery = {
      ending_before?: string;
      expand?: string[];
      limit?: number;
      relationship?: { director?: boolean; executive?: boolean; owner?: boolean; representative?: boolean };
      starting_after?: string;
    };
    export type RequestBody = CardMandatePaymentMethodDetails;
    export type RequestHeaders = {};
    export type ResponseBody = { data: Person[]; has_more: boolean; object: "list"; url: string };
  }
  /**
   * @description <p>Creates a new person.</p>
   * @name PostAccountsAccountPeople
   * @request POST:/v1/accounts/{account}/people
   * @secure
   * @response `200` `Person` Successful response.
   * @response `default` `Error` Error response.
   */
  export namespace PostAccountsAccountPeople {
    export type RequestParams = { account: string };
    export type RequestQuery = {};
    export type RequestBody = {
      address?: {
        city?: string;
        country?: string;
        line1?: string;
        line2?: string;
        postal_code?: string;
        state?: string;
      };
      address_kana?: {
        city?: string;
        country?: string;
        line1?: string;
        line2?: string;
        postal_code?: string;
        state?: string;
        town?: string;
      };
      address_kanji?: {
        city?: string;
        country?: string;
        line1?: string;
        line2?: string;
        postal_code?: string;
        state?: string;
        town?: string;
      };
      dob?: { day: number; month: number; year: number } | "" | ({ day: number; month: number; year: number } & "");
      documents?: {
        company_authorization?: { files?: string[] };
        passport?: { files?: string[] };
        visa?: { files?: string[] };
      };
      email?: string;
      expand?: string[];
      first_name?: string;
      first_name_kana?: string;
      first_name_kanji?: string;
      full_name_aliases?: string[] | "" | (string[] & "");
      gender?: string;
      id_number?: string;
      last_name?: string;
      last_name_kana?: string;
      last_name_kanji?: string;
      maiden_name?: string;
      metadata?: Record<string, string> | "" | (Record<string, string> & "");
      nationality?: string;
      person_token?: string;
      phone?: string;
      political_exposure?: string;
      relationship?: {
        director?: boolean;
        executive?: boolean;
        owner?: boolean;
        percent_ownership?: number | "";
        representative?: boolean;
        title?: string;
      };
      ssn_last_4?: string;
      verification?: {
        additional_document?: { back?: string; front?: string };
        document?: { back?: string; front?: string };
      };
    };
    export type RequestHeaders = {};
    export type ResponseBody = Person;
  }
  /**
   * @description <p>Deletes an existing person’s relationship to the account’s legal entity. Any person with a relationship for an account can be deleted through the API, except if the person is the <code>account_opener</code>. If your integration is using the <code>executive</code> parameter, you cannot delete the only verified <code>executive</code> on file.</p>
   * @name DeleteAccountsAccountPeoplePerson
   * @request DELETE:/v1/accounts/{account}/people/{person}
   * @secure
   * @response `200` `DeletedPerson` Successful response.
   * @response `default` `Error` Error response.
   */
  export namespace DeleteAccountsAccountPeoplePerson {
    export type RequestParams = { account: string; person: string };
    export type RequestQuery = {};
    export type RequestBody = CardMandatePaymentMethodDetails;
    export type RequestHeaders = {};
    export type ResponseBody = DeletedPerson;
  }
  /**
   * @description <p>Retrieves an existing person.</p>
   * @name GetAccountsAccountPeoplePerson
   * @request GET:/v1/accounts/{account}/people/{person}
   * @secure
   * @response `200` `Person` Successful response.
   * @response `default` `Error` Error response.
   */
  export namespace GetAccountsAccountPeoplePerson {
    export type RequestParams = { account: string; person: string };
    export type RequestQuery = { expand?: string[] };
    export type RequestBody = CardMandatePaymentMethodDetails;
    export type RequestHeaders = {};
    export type ResponseBody = Person;
  }
  /**
   * @description <p>Updates an existing person.</p>
   * @name PostAccountsAccountPeoplePerson
   * @request POST:/v1/accounts/{account}/people/{person}
   * @secure
   * @response `200` `Person` Successful response.
   * @response `default` `Error` Error response.
   */
  export namespace PostAccountsAccountPeoplePerson {
    export type RequestParams = { account: string; person: string };
    export type RequestQuery = {};
    export type RequestBody = {
      address?: {
        city?: string;
        country?: string;
        line1?: string;
        line2?: string;
        postal_code?: string;
        state?: string;
      };
      address_kana?: {
        city?: string;
        country?: string;
        line1?: string;
        line2?: string;
        postal_code?: string;
        state?: string;
        town?: string;
      };
      address_kanji?: {
        city?: string;
        country?: string;
        line1?: string;
        line2?: string;
        postal_code?: string;
        state?: string;
        town?: string;
      };
      dob?: { day: number; month: number; year: number } | "" | ({ day: number; month: number; year: number } & "");
      documents?: {
        company_authorization?: { files?: string[] };
        passport?: { files?: string[] };
        visa?: { files?: string[] };
      };
      email?: string;
      expand?: string[];
      first_name?: string;
      first_name_kana?: string;
      first_name_kanji?: string;
      full_name_aliases?: string[] | "" | (string[] & "");
      gender?: string;
      id_number?: string;
      last_name?: string;
      last_name_kana?: string;
      last_name_kanji?: string;
      maiden_name?: string;
      metadata?: Record<string, string> | "" | (Record<string, string> & "");
      nationality?: string;
      person_token?: string;
      phone?: string;
      political_exposure?: string;
      relationship?: {
        director?: boolean;
        executive?: boolean;
        owner?: boolean;
        percent_ownership?: number | "";
        representative?: boolean;
        title?: string;
      };
      ssn_last_4?: string;
      verification?: {
        additional_document?: { back?: string; front?: string };
        document?: { back?: string; front?: string };
      };
    };
    export type RequestHeaders = {};
    export type ResponseBody = Person;
  }
  /**
   * @description <p>Returns a list of people associated with the account’s legal entity. The people are returned sorted by creation date, with the most recent people appearing first.</p>
   * @name GetAccountsAccountPersons
   * @request GET:/v1/accounts/{account}/persons
   * @secure
   * @response `200` `{ data: (Person)[], has_more: boolean, object: "list", url: string }` Successful response.
   * @response `default` `Error` Error response.
   */
  export namespace GetAccountsAccountPersons {
    export type RequestParams = { account: string };
    export type RequestQuery = {
      ending_before?: string;
      expand?: string[];
      limit?: number;
      relationship?: { director?: boolean; executive?: boolean; owner?: boolean; representative?: boolean };
      starting_after?: string;
    };
    export type RequestBody = CardMandatePaymentMethodDetails;
    export type RequestHeaders = {};
    export type ResponseBody = { data: Person[]; has_more: boolean; object: "list"; url: string };
  }
  /**
   * @description <p>Creates a new person.</p>
   * @name PostAccountsAccountPersons
   * @request POST:/v1/accounts/{account}/persons
   * @secure
   * @response `200` `Person` Successful response.
   * @response `default` `Error` Error response.
   */
  export namespace PostAccountsAccountPersons {
    export type RequestParams = { account: string };
    export type RequestQuery = {};
    export type RequestBody = {
      address?: {
        city?: string;
        country?: string;
        line1?: string;
        line2?: string;
        postal_code?: string;
        state?: string;
      };
      address_kana?: {
        city?: string;
        country?: string;
        line1?: string;
        line2?: string;
        postal_code?: string;
        state?: string;
        town?: string;
      };
      address_kanji?: {
        city?: string;
        country?: string;
        line1?: string;
        line2?: string;
        postal_code?: string;
        state?: string;
        town?: string;
      };
      dob?: { day: number; month: number; year: number } | "" | ({ day: number; month: number; year: number } & "");
      documents?: {
        company_authorization?: { files?: string[] };
        passport?: { files?: string[] };
        visa?: { files?: string[] };
      };
      email?: string;
      expand?: string[];
      first_name?: string;
      first_name_kana?: string;
      first_name_kanji?: string;
      full_name_aliases?: string[] | "" | (string[] & "");
      gender?: string;
      id_number?: string;
      last_name?: string;
      last_name_kana?: string;
      last_name_kanji?: string;
      maiden_name?: string;
      metadata?: Record<string, string> | "" | (Record<string, string> & "");
      nationality?: string;
      person_token?: string;
      phone?: string;
      political_exposure?: string;
      relationship?: {
        director?: boolean;
        executive?: boolean;
        owner?: boolean;
        percent_ownership?: number | "";
        representative?: boolean;
        title?: string;
      };
      ssn_last_4?: string;
      verification?: {
        additional_document?: { back?: string; front?: string };
        document?: { back?: string; front?: string };
      };
    };
    export type RequestHeaders = {};
    export type ResponseBody = Person;
  }
  /**
   * @description <p>Deletes an existing person’s relationship to the account’s legal entity. Any person with a relationship for an account can be deleted through the API, except if the person is the <code>account_opener</code>. If your integration is using the <code>executive</code> parameter, you cannot delete the only verified <code>executive</code> on file.</p>
   * @name DeleteAccountsAccountPersonsPerson
   * @request DELETE:/v1/accounts/{account}/persons/{person}
   * @secure
   * @response `200` `DeletedPerson` Successful response.
   * @response `default` `Error` Error response.
   */
  export namespace DeleteAccountsAccountPersonsPerson {
    export type RequestParams = { account: string; person: string };
    export type RequestQuery = {};
    export type RequestBody = CardMandatePaymentMethodDetails;
    export type RequestHeaders = {};
    export type ResponseBody = DeletedPerson;
  }
  /**
   * @description <p>Retrieves an existing person.</p>
   * @name GetAccountsAccountPersonsPerson
   * @request GET:/v1/accounts/{account}/persons/{person}
   * @secure
   * @response `200` `Person` Successful response.
   * @response `default` `Error` Error response.
   */
  export namespace GetAccountsAccountPersonsPerson {
    export type RequestParams = { account: string; person: string };
    export type RequestQuery = { expand?: string[] };
    export type RequestBody = CardMandatePaymentMethodDetails;
    export type RequestHeaders = {};
    export type ResponseBody = Person;
  }
  /**
   * @description <p>Updates an existing person.</p>
   * @name PostAccountsAccountPersonsPerson
   * @request POST:/v1/accounts/{account}/persons/{person}
   * @secure
   * @response `200` `Person` Successful response.
   * @response `default` `Error` Error response.
   */
  export namespace PostAccountsAccountPersonsPerson {
    export type RequestParams = { account: string; person: string };
    export type RequestQuery = {};
    export type RequestBody = {
      address?: {
        city?: string;
        country?: string;
        line1?: string;
        line2?: string;
        postal_code?: string;
        state?: string;
      };
      address_kana?: {
        city?: string;
        country?: string;
        line1?: string;
        line2?: string;
        postal_code?: string;
        state?: string;
        town?: string;
      };
      address_kanji?: {
        city?: string;
        country?: string;
        line1?: string;
        line2?: string;
        postal_code?: string;
        state?: string;
        town?: string;
      };
      dob?: { day: number; month: number; year: number } | "" | ({ day: number; month: number; year: number } & "");
      documents?: {
        company_authorization?: { files?: string[] };
        passport?: { files?: string[] };
        visa?: { files?: string[] };
      };
      email?: string;
      expand?: string[];
      first_name?: string;
      first_name_kana?: string;
      first_name_kanji?: string;
      full_name_aliases?: string[] | "" | (string[] & "");
      gender?: string;
      id_number?: string;
      last_name?: string;
      last_name_kana?: string;
      last_name_kanji?: string;
      maiden_name?: string;
      metadata?: Record<string, string> | "" | (Record<string, string> & "");
      nationality?: string;
      person_token?: string;
      phone?: string;
      political_exposure?: string;
      relationship?: {
        director?: boolean;
        executive?: boolean;
        owner?: boolean;
        percent_ownership?: number | "";
        representative?: boolean;
        title?: string;
      };
      ssn_last_4?: string;
      verification?: {
        additional_document?: { back?: string; front?: string };
        document?: { back?: string; front?: string };
      };
    };
    export type RequestHeaders = {};
    export type ResponseBody = Person;
  }
  /**
   * @description <p>With <a href="/docs/connect">Connect</a>, you may flag accounts as suspicious.</p> <p>Test-mode Custom and Express accounts can be rejected at any time. Accounts created using live-mode keys may only be rejected once all balances are zero.</p>
   * @name PostAccountsAccountReject
   * @request POST:/v1/accounts/{account}/reject
   * @secure
   * @response `200` `Account` Successful response.
   * @response `default` `Error` Error response.
   */
  export namespace PostAccountsAccountReject {
    export type RequestParams = { account: string };
    export type RequestQuery = {};
    export type RequestBody = { expand?: string[]; reason: string };
    export type RequestHeaders = {};
    export type ResponseBody = Account;
  }
  /**
   * @description <p>List apple pay domains.</p>
   * @name GetApplePayDomains
   * @request GET:/v1/apple_pay/domains
   * @secure
   * @response `200` `{ data: (ApplePayDomain)[], has_more: boolean, object: "list", url: string }` Successful response.
   * @response `default` `Error` Error response.
   */
  export namespace GetApplePayDomains {
    export type RequestParams = {};
    export type RequestQuery = {
      domain_name?: string;
      ending_before?: string;
      expand?: string[];
      limit?: number;
      starting_after?: string;
    };
    export type RequestBody = CardMandatePaymentMethodDetails;
    export type RequestHeaders = {};
    export type ResponseBody = { data: ApplePayDomain[]; has_more: boolean; object: "list"; url: string };
  }
  /**
   * @description <p>Create an apple pay domain.</p>
   * @name PostApplePayDomains
   * @request POST:/v1/apple_pay/domains
   * @secure
   * @response `200` `ApplePayDomain` Successful response.
   * @response `default` `Error` Error response.
   */
  export namespace PostApplePayDomains {
    export type RequestParams = {};
    export type RequestQuery = {};
    export type RequestBody = { domain_name: string; expand?: string[] };
    export type RequestHeaders = {};
    export type ResponseBody = ApplePayDomain;
  }
  /**
   * @description <p>Delete an apple pay domain.</p>
   * @name DeleteApplePayDomainsDomain
   * @request DELETE:/v1/apple_pay/domains/{domain}
   * @secure
   * @response `200` `DeletedApplePayDomain` Successful response.
   * @response `default` `Error` Error response.
   */
  export namespace DeleteApplePayDomainsDomain {
    export type RequestParams = { domain: string };
    export type RequestQuery = {};
    export type RequestBody = CardMandatePaymentMethodDetails;
    export type RequestHeaders = {};
    export type ResponseBody = DeletedApplePayDomain;
  }
  /**
   * @description <p>Retrieve an apple pay domain.</p>
   * @name GetApplePayDomainsDomain
   * @request GET:/v1/apple_pay/domains/{domain}
   * @secure
   * @response `200` `ApplePayDomain` Successful response.
   * @response `default` `Error` Error response.
   */
  export namespace GetApplePayDomainsDomain {
    export type RequestParams = { domain: string };
    export type RequestQuery = { expand?: string[] };
    export type RequestBody = CardMandatePaymentMethodDetails;
    export type RequestHeaders = {};
    export type ResponseBody = ApplePayDomain;
  }
  /**
   * @description <p>Returns a list of application fees you’ve previously collected. The application fees are returned in sorted order, with the most recent fees appearing first.</p>
   * @name GetApplicationFees
   * @request GET:/v1/application_fees
   * @secure
   * @response `200` `{ data: (ApplicationFee)[], has_more: boolean, object: "list", url: string }` Successful response.
   * @response `default` `Error` Error response.
   */
  export namespace GetApplicationFees {
    export type RequestParams = {};
    export type RequestQuery = {
      charge?: string;
      created?: { gt?: number; gte?: number; lt?: number; lte?: number } | number;
      ending_before?: string;
      expand?: string[];
      limit?: number;
      starting_after?: string;
    };
    export type RequestBody = CardMandatePaymentMethodDetails;
    export type RequestHeaders = {};
    export type ResponseBody = { data: ApplicationFee[]; has_more: boolean; object: "list"; url: string };
  }
  /**
   * @description <p>By default, you can see the 10 most recent refunds stored directly on the application fee object, but you can also retrieve details about a specific refund stored on the application fee.</p>
   * @name GetApplicationFeesFeeRefundsId
   * @request GET:/v1/application_fees/{fee}/refunds/{id}
   * @secure
   * @response `200` `FeeRefund` Successful response.
   * @response `default` `Error` Error response.
   */
  export namespace GetApplicationFeesFeeRefundsId {
    export type RequestParams = { fee: string; id: string };
    export type RequestQuery = { expand?: string[] };
    export type RequestBody = CardMandatePaymentMethodDetails;
    export type RequestHeaders = {};
    export type ResponseBody = FeeRefund;
  }
  /**
   * @description <p>Updates the specified application fee refund by setting the values of the parameters passed. Any parameters not provided will be left unchanged.</p> <p>This request only accepts metadata as an argument.</p>
   * @name PostApplicationFeesFeeRefundsId
   * @request POST:/v1/application_fees/{fee}/refunds/{id}
   * @secure
   * @response `200` `FeeRefund` Successful response.
   * @response `default` `Error` Error response.
   */
  export namespace PostApplicationFeesFeeRefundsId {
    export type RequestParams = { fee: string; id: string };
    export type RequestQuery = {};
    export type RequestBody = {
      expand?: string[];
      metadata?: Record<string, string> | "" | (Record<string, string> & "");
    };
    export type RequestHeaders = {};
    export type ResponseBody = FeeRefund;
  }
  /**
   * @description <p>Retrieves the details of an application fee that your account has collected. The same information is returned when refunding the application fee.</p>
   * @name GetApplicationFeesId
   * @request GET:/v1/application_fees/{id}
   * @secure
   * @response `200` `ApplicationFee` Successful response.
   * @response `default` `Error` Error response.
   */
  export namespace GetApplicationFeesId {
    export type RequestParams = { id: string };
    export type RequestQuery = { expand?: string[] };
    export type RequestBody = CardMandatePaymentMethodDetails;
    export type RequestHeaders = {};
    export type ResponseBody = ApplicationFee;
  }
  /**
   * No description
   * @name PostApplicationFeesIdRefund
   * @request POST:/v1/application_fees/{id}/refund
   * @secure
   * @response `200` `ApplicationFee` Successful response.
   * @response `default` `Error` Error response.
   */
  export namespace PostApplicationFeesIdRefund {
    export type RequestParams = { id: string };
    export type RequestQuery = {};
    export type RequestBody = { amount?: number; directive?: string; expand?: string[] };
    export type RequestHeaders = {};
    export type ResponseBody = ApplicationFee;
  }
  /**
   * @description <p>You can see a list of the refunds belonging to a specific application fee. Note that the 10 most recent refunds are always available by default on the application fee object. If you need more than those 10, you can use this API method and the <code>limit</code> and <code>starting_after</code> parameters to page through additional refunds.</p>
   * @name GetApplicationFeesIdRefunds
   * @request GET:/v1/application_fees/{id}/refunds
   * @secure
   * @response `200` `{ data: (FeeRefund)[], has_more: boolean, object: "list", url: string }` Successful response.
   * @response `default` `Error` Error response.
   */
  export namespace GetApplicationFeesIdRefunds {
    export type RequestParams = { id: string };
    export type RequestQuery = { ending_before?: string; expand?: string[]; limit?: number; starting_after?: string };
    export type RequestBody = CardMandatePaymentMethodDetails;
    export type RequestHeaders = {};
    export type ResponseBody = { data: FeeRefund[]; has_more: boolean; object: "list"; url: string };
  }
  /**
   * @description <p>Refunds an application fee that has previously been collected but not yet refunded. Funds will be refunded to the Stripe account from which the fee was originally collected.</p> <p>You can optionally refund only part of an application fee. You can do so multiple times, until the entire fee has been refunded.</p> <p>Once entirely refunded, an application fee can’t be refunded again. This method will raise an error when called on an already-refunded application fee, or when trying to refund more money than is left on an application fee.</p>
   * @name PostApplicationFeesIdRefunds
   * @request POST:/v1/application_fees/{id}/refunds
   * @secure
   * @response `200` `FeeRefund` Successful response.
   * @response `default` `Error` Error response.
   */
  export namespace PostApplicationFeesIdRefunds {
    export type RequestParams = { id: string };
    export type RequestQuery = {};
    export type RequestBody = { amount?: number; expand?: string[]; metadata?: Record<string, string> };
    export type RequestHeaders = {};
    export type ResponseBody = FeeRefund;
  }
  /**
   * @description <p>Retrieves the current account balance, based on the authentication that was used to make the request. For a sample request, see <a href="/docs/connect/account-balances#accounting-for-negative-balances">Accounting for negative balances</a>.</p>
   * @name GetBalance
   * @request GET:/v1/balance
   * @secure
   * @response `200` `Balance` Successful response.
   * @response `default` `Error` Error response.
   */
  export namespace GetBalance {
    export type RequestParams = {};
    export type RequestQuery = { expand?: string[] };
    export type RequestBody = CardMandatePaymentMethodDetails;
    export type RequestHeaders = {};
    export type ResponseBody = Balance;
  }
  /**
   * @description <p>Returns a list of transactions that have contributed to the Stripe account balance (e.g., charges, transfers, and so forth). The transactions are returned in sorted order, with the most recent transactions appearing first.</p> <p>Note that this endpoint was previously called “Balance history” and used the path <code>/v1/balance/history</code>.</p>
   * @name GetBalanceHistory
   * @request GET:/v1/balance/history
   * @secure
   * @response `200` `{ data: (BalanceTransaction)[], has_more: boolean, object: "list", url: string }` Successful response.
   * @response `default` `Error` Error response.
   */
  export namespace GetBalanceHistory {
    export type RequestParams = {};
    export type RequestQuery = {
      created?: { gt?: number; gte?: number; lt?: number; lte?: number } | number;
      currency?: string;
      ending_before?: string;
      expand?: string[];
      limit?: number;
      payout?: string;
      source?: string;
      starting_after?: string;
      type?: string;
    };
    export type RequestBody = CardMandatePaymentMethodDetails;
    export type RequestHeaders = {};
    export type ResponseBody = { data: BalanceTransaction[]; has_more: boolean; object: "list"; url: string };
  }
  /**
   * @description <p>Retrieves the balance transaction with the given ID.</p> <p>Note that this endpoint previously used the path <code>/v1/balance/history/:id</code>.</p>
   * @name GetBalanceHistoryId
   * @request GET:/v1/balance/history/{id}
   * @secure
   * @response `200` `BalanceTransaction` Successful response.
   * @response `default` `Error` Error response.
   */
  export namespace GetBalanceHistoryId {
    export type RequestParams = { id: string };
    export type RequestQuery = { expand?: string[] };
    export type RequestBody = CardMandatePaymentMethodDetails;
    export type RequestHeaders = {};
    export type ResponseBody = BalanceTransaction;
  }
  /**
   * @description <p>Returns a list of transactions that have contributed to the Stripe account balance (e.g., charges, transfers, and so forth). The transactions are returned in sorted order, with the most recent transactions appearing first.</p> <p>Note that this endpoint was previously called “Balance history” and used the path <code>/v1/balance/history</code>.</p>
   * @name GetBalanceTransactions
   * @request GET:/v1/balance_transactions
   * @secure
   * @response `200` `{ data: (BalanceTransaction)[], has_more: boolean, object: "list", url: string }` Successful response.
   * @response `default` `Error` Error response.
   */
  export namespace GetBalanceTransactions {
    export type RequestParams = {};
    export type RequestQuery = {
      created?: { gt?: number; gte?: number; lt?: number; lte?: number } | number;
      currency?: string;
      ending_before?: string;
      expand?: string[];
      limit?: number;
      payout?: string;
      source?: string;
      starting_after?: string;
      type?: string;
    };
    export type RequestBody = CardMandatePaymentMethodDetails;
    export type RequestHeaders = {};
    export type ResponseBody = { data: BalanceTransaction[]; has_more: boolean; object: "list"; url: string };
  }
  /**
   * @description <p>Retrieves the balance transaction with the given ID.</p> <p>Note that this endpoint previously used the path <code>/v1/balance/history/:id</code>.</p>
   * @name GetBalanceTransactionsId
   * @request GET:/v1/balance_transactions/{id}
   * @secure
   * @response `200` `BalanceTransaction` Successful response.
   * @response `default` `Error` Error response.
   */
  export namespace GetBalanceTransactionsId {
    export type RequestParams = { id: string };
    export type RequestQuery = { expand?: string[] };
    export type RequestBody = CardMandatePaymentMethodDetails;
    export type RequestHeaders = {};
    export type ResponseBody = BalanceTransaction;
  }
  /**
   * @description <p>Returns a list of configurations that describe the functionality of the customer portal.</p>
   * @name GetBillingPortalConfigurations
   * @request GET:/v1/billing_portal/configurations
   * @secure
   * @response `200` `{ data: (BillingPortalConfiguration)[], has_more: boolean, object: "list", url: string }` Successful response.
   * @response `default` `Error` Error response.
   */
  export namespace GetBillingPortalConfigurations {
    export type RequestParams = {};
    export type RequestQuery = {
      active?: boolean;
      ending_before?: string;
      expand?: string[];
      is_default?: boolean;
      limit?: number;
      starting_after?: string;
    };
    export type RequestBody = CardMandatePaymentMethodDetails;
    export type RequestHeaders = {};
    export type ResponseBody = { data: BillingPortalConfiguration[]; has_more: boolean; object: "list"; url: string };
  }
  /**
   * @description <p>Creates a configuration that describes the functionality and behavior of a PortalSession</p>
   * @name PostBillingPortalConfigurations
   * @request POST:/v1/billing_portal/configurations
   * @secure
   * @response `200` `BillingPortalConfiguration` Successful response.
   * @response `default` `Error` Error response.
   */
  export namespace PostBillingPortalConfigurations {
    export type RequestParams = {};
    export type RequestQuery = {};
    export type RequestBody = {
      business_profile: { headline?: string; privacy_policy_url: string; terms_of_service_url: string };
      default_return_url?: string | "";
      expand?: string[];
      features: {
        customer_update?: {
          allowed_updates:
            | ("address" | "email" | "phone" | "shipping" | "tax_id")[]
            | ""
            | (("address" | "email" | "phone" | "shipping" | "tax_id")[] & "");
          enabled: boolean;
        };
        invoice_history?: { enabled: boolean };
        payment_method_update?: { enabled: boolean };
        subscription_cancel?: {
          cancellation_reason?: {
            enabled: boolean;
            options:
              | (
                  | "customer_service"
                  | "low_quality"
                  | "missing_features"
                  | "other"
                  | "switched_service"
                  | "too_complex"
                  | "too_expensive"
                  | "unused"
                )[]
              | ""
              | ((
                  | "customer_service"
                  | "low_quality"
                  | "missing_features"
                  | "other"
                  | "switched_service"
                  | "too_complex"
                  | "too_expensive"
                  | "unused"
                )[] &
                  "");
          };
          enabled: boolean;
          mode?: "at_period_end" | "immediately";
          proration_behavior?: "always_invoice" | "create_prorations" | "none";
        };
        subscription_pause?: { enabled?: boolean };
        subscription_update?: {
          default_allowed_updates:
            | ("price" | "promotion_code" | "quantity")[]
            | ""
            | (("price" | "promotion_code" | "quantity")[] & "");
          enabled: boolean;
          products: { prices: string[]; product: string }[] | "" | ({ prices: string[]; product: string }[] & "");
          proration_behavior?: "always_invoice" | "create_prorations" | "none";
        };
      };
      metadata?: Record<string, string>;
    };
    export type RequestHeaders = {};
    export type ResponseBody = BillingPortalConfiguration;
  }
  /**
   * @description <p>Retrieves a configuration that describes the functionality of the customer portal.</p>
   * @name GetBillingPortalConfigurationsConfiguration
   * @request GET:/v1/billing_portal/configurations/{configuration}
   * @secure
   * @response `200` `BillingPortalConfiguration` Successful response.
   * @response `default` `Error` Error response.
   */
  export namespace GetBillingPortalConfigurationsConfiguration {
    export type RequestParams = { configuration: string };
    export type RequestQuery = { expand?: string[] };
    export type RequestBody = CardMandatePaymentMethodDetails;
    export type RequestHeaders = {};
    export type ResponseBody = BillingPortalConfiguration;
  }
  /**
   * @description <p>Updates a configuration that describes the functionality of the customer portal.</p>
   * @name PostBillingPortalConfigurationsConfiguration
   * @request POST:/v1/billing_portal/configurations/{configuration}
   * @secure
   * @response `200` `BillingPortalConfiguration` Successful response.
   * @response `default` `Error` Error response.
   */
  export namespace PostBillingPortalConfigurationsConfiguration {
    export type RequestParams = { configuration: string };
    export type RequestQuery = {};
    export type RequestBody = {
      active?: boolean;
      business_profile?: { headline?: string; privacy_policy_url?: string; terms_of_service_url?: string };
      default_return_url?: string | "";
      expand?: string[];
      features?: {
        customer_update?: {
          allowed_updates?:
            | ("address" | "email" | "phone" | "shipping" | "tax_id")[]
            | ""
            | (("address" | "email" | "phone" | "shipping" | "tax_id")[] & "");
          enabled?: boolean;
        };
        invoice_history?: { enabled: boolean };
        payment_method_update?: { enabled: boolean };
        subscription_cancel?: {
          cancellation_reason?: {
            enabled: boolean;
            options?:
              | (
                  | "customer_service"
                  | "low_quality"
                  | "missing_features"
                  | "other"
                  | "switched_service"
                  | "too_complex"
                  | "too_expensive"
                  | "unused"
                )[]
              | ""
              | ((
                  | "customer_service"
                  | "low_quality"
                  | "missing_features"
                  | "other"
                  | "switched_service"
                  | "too_complex"
                  | "too_expensive"
                  | "unused"
                )[] &
                  "");
          };
          enabled?: boolean;
          mode?: "at_period_end" | "immediately";
          proration_behavior?: "always_invoice" | "create_prorations" | "none";
        };
        subscription_pause?: { enabled?: boolean };
        subscription_update?: {
          default_allowed_updates?:
            | ("price" | "promotion_code" | "quantity")[]
            | ""
            | (("price" | "promotion_code" | "quantity")[] & "");
          enabled?: boolean;
          products?: { prices: string[]; product: string }[] | "" | ({ prices: string[]; product: string }[] & "");
          proration_behavior?: "always_invoice" | "create_prorations" | "none";
        };
      };
      metadata?: Record<string, string> | "" | (Record<string, string> & "");
    };
    export type RequestHeaders = {};
    export type ResponseBody = BillingPortalConfiguration;
  }
  /**
   * @description <p>Creates a session of the customer portal.</p>
   * @name PostBillingPortalSessions
   * @request POST:/v1/billing_portal/sessions
   * @secure
   * @response `200` `BillingPortalSession` Successful response.
   * @response `default` `Error` Error response.
   */
  export namespace PostBillingPortalSessions {
    export type RequestParams = {};
    export type RequestQuery = {};
    export type RequestBody = {
      configuration?: string;
      customer: string;
      expand?: string[];
      locale?:
        | "auto"
        | "bg"
        | "cs"
        | "da"
        | "de"
        | "el"
        | "en"
        | "en-AU"
        | "en-CA"
        | "en-GB"
        | "en-IE"
        | "en-IN"
        | "en-NZ"
        | "en-SG"
        | "es"
        | "es-419"
        | "et"
        | "fi"
        | "fil"
        | "fr"
        | "fr-CA"
        | "hr"
        | "hu"
        | "id"
        | "it"
        | "ja"
        | "ko"
        | "lt"
        | "lv"
        | "ms"
        | "mt"
        | "nb"
        | "nl"
        | "pl"
        | "pt"
        | "pt-BR"
        | "ro"
        | "ru"
        | "sk"
        | "sl"
        | "sv"
        | "th"
        | "tr"
        | "vi"
        | "zh"
        | "zh-HK"
        | "zh-TW";
      on_behalf_of?: string;
      return_url?: string;
    };
    export type RequestHeaders = {};
    export type ResponseBody = BillingPortalSession;
  }
  /**
   * @description <p>Returns a list of your receivers. Receivers are returned sorted by creation date, with the most recently created receivers appearing first.</p>
   * @name GetBitcoinReceivers
   * @request GET:/v1/bitcoin/receivers
   * @deprecated
   * @secure
   * @response `200` `{ data: (BitcoinReceiver)[], has_more: boolean, object: "list", url: string }` Successful response.
   * @response `default` `Error` Error response.
   */
  export namespace GetBitcoinReceivers {
    export type RequestParams = {};
    export type RequestQuery = {
      active?: boolean;
      ending_before?: string;
      expand?: string[];
      filled?: boolean;
      limit?: number;
      starting_after?: string;
      uncaptured_funds?: boolean;
    };
    export type RequestBody = CardMandatePaymentMethodDetails;
    export type RequestHeaders = {};
    export type ResponseBody = { data: BitcoinReceiver[]; has_more: boolean; object: "list"; url: string };
  }
  /**
   * @description <p>Retrieves the Bitcoin receiver with the given ID.</p>
   * @name GetBitcoinReceiversId
   * @request GET:/v1/bitcoin/receivers/{id}
   * @deprecated
   * @secure
   * @response `200` `BitcoinReceiver` Successful response.
   * @response `default` `Error` Error response.
   */
  export namespace GetBitcoinReceiversId {
    export type RequestParams = { id: string };
    export type RequestQuery = { expand?: string[] };
    export type RequestBody = CardMandatePaymentMethodDetails;
    export type RequestHeaders = {};
    export type ResponseBody = BitcoinReceiver;
  }
  /**
   * @description <p>List bitcoin transacitons for a given receiver.</p>
   * @name GetBitcoinReceiversReceiverTransactions
   * @request GET:/v1/bitcoin/receivers/{receiver}/transactions
   * @deprecated
   * @secure
   * @response `200` `{ data: (BitcoinTransaction)[], has_more: boolean, object: "list", url: string }` Successful response.
   * @response `default` `Error` Error response.
   */
  export namespace GetBitcoinReceiversReceiverTransactions {
    export type RequestParams = { receiver: string };
    export type RequestQuery = {
      customer?: string;
      ending_before?: string;
      expand?: string[];
      limit?: number;
      starting_after?: string;
    };
    export type RequestBody = CardMandatePaymentMethodDetails;
    export type RequestHeaders = {};
    export type ResponseBody = { data: BitcoinTransaction[]; has_more: boolean; object: "list"; url: string };
  }
  /**
   * @description <p>List bitcoin transacitons for a given receiver.</p>
   * @name GetBitcoinTransactions
   * @request GET:/v1/bitcoin/transactions
   * @deprecated
   * @secure
   * @response `200` `{ data: (BitcoinTransaction)[], has_more: boolean, object: "list", url: string }` Successful response.
   * @response `default` `Error` Error response.
   */
  export namespace GetBitcoinTransactions {
    export type RequestParams = {};
    export type RequestQuery = {
      customer?: string;
      ending_before?: string;
      expand?: string[];
      limit?: number;
      receiver?: string;
      starting_after?: string;
    };
    export type RequestBody = CardMandatePaymentMethodDetails;
    export type RequestHeaders = {};
    export type ResponseBody = { data: BitcoinTransaction[]; has_more: boolean; object: "list"; url: string };
  }
  /**
   * @description <p>Returns a list of charges you’ve previously created. The charges are returned in sorted order, with the most recent charges appearing first.</p>
   * @name GetCharges
   * @request GET:/v1/charges
   * @secure
   * @response `200` `{ data: (Charge)[], has_more: boolean, object: "list", url: string }` Successful response.
   * @response `default` `Error` Error response.
   */
  export namespace GetCharges {
    export type RequestParams = {};
    export type RequestQuery = {
      created?: { gt?: number; gte?: number; lt?: number; lte?: number } | number;
      customer?: string;
      ending_before?: string;
      expand?: string[];
      limit?: number;
      payment_intent?: string;
      starting_after?: string;
      transfer_group?: string;
    };
    export type RequestBody = CardMandatePaymentMethodDetails;
    export type RequestHeaders = {};
    export type ResponseBody = { data: Charge[]; has_more: boolean; object: "list"; url: string };
  }
  /**
   * @description <p>To charge a credit card or other payment source, you create a <code>Charge</code> object. If your API key is in test mode, the supplied payment source (e.g., card) won’t actually be charged, although everything else will occur as if in live mode. (Stripe assumes that the charge would have completed successfully).</p>
   * @name PostCharges
   * @request POST:/v1/charges
   * @secure
   * @response `200` `Charge` Successful response.
   * @response `default` `Error` Error response.
   */
  export namespace PostCharges {
    export type RequestParams = {};
    export type RequestQuery = {};
    export type RequestBody = {
      amount?: number;
      application_fee?: number;
      application_fee_amount?: number;
      capture?: boolean;
      card?:
        | {
            address_city?: string;
            address_country?: string;
            address_line1?: string;
            address_line2?: string;
            address_state?: string;
            address_zip?: string;
            cvc?: string;
            exp_month: number;
            exp_year: number;
            metadata?: Record<string, string>;
            name?: string;
            number: string;
            object?: "card";
          }
        | string;
      currency?: string;
      customer?: string;
      description?: string;
      destination?: { account: string; amount?: number } | string;
      expand?: string[];
      metadata?: Record<string, string> | "" | (Record<string, string> & "");
      on_behalf_of?: string;
      receipt_email?: string;
      shipping?: {
        address: {
          city?: string;
          country?: string;
          line1?: string;
          line2?: string;
          postal_code?: string;
          state?: string;
        };
        carrier?: string;
        name: string;
        phone?: string;
        tracking_number?: string;
      };
      source?: string;
      statement_descriptor?: string;
      statement_descriptor_suffix?: string;
      transfer_data?: { amount?: number; destination: string };
      transfer_group?: string;
    };
    export type RequestHeaders = {};
    export type ResponseBody = Charge;
  }
  /**
   * @description <p>Retrieves the details of a charge that has previously been created. Supply the unique charge ID that was returned from your previous request, and Stripe will return the corresponding charge information. The same information is returned when creating or refunding the charge.</p>
   * @name GetChargesCharge
   * @request GET:/v1/charges/{charge}
   * @secure
   * @response `200` `Charge` Successful response.
   * @response `default` `Error` Error response.
   */
  export namespace GetChargesCharge {
    export type RequestParams = { charge: string };
    export type RequestQuery = { expand?: string[] };
    export type RequestBody = CardMandatePaymentMethodDetails;
    export type RequestHeaders = {};
    export type ResponseBody = Charge;
  }
  /**
   * @description <p>Updates the specified charge by setting the values of the parameters passed. Any parameters not provided will be left unchanged.</p>
   * @name PostChargesCharge
   * @request POST:/v1/charges/{charge}
   * @secure
   * @response `200` `Charge` Successful response.
   * @response `default` `Error` Error response.
   */
  export namespace PostChargesCharge {
    export type RequestParams = { charge: string };
    export type RequestQuery = {};
    export type RequestBody = {
      customer?: string;
      description?: string;
      expand?: string[];
      fraud_details?: { user_report: "" | "fraudulent" | "safe" };
      metadata?: Record<string, string> | "" | (Record<string, string> & "");
      receipt_email?: string;
      shipping?: {
        address: {
          city?: string;
          country?: string;
          line1?: string;
          line2?: string;
          postal_code?: string;
          state?: string;
        };
        carrier?: string;
        name: string;
        phone?: string;
        tracking_number?: string;
      };
      transfer_group?: string;
    };
    export type RequestHeaders = {};
    export type ResponseBody = Charge;
  }
  /**
   * @description <p>Capture the payment of an existing, uncaptured, charge. This is the second half of the two-step payment flow, where first you <a href="#create_charge">created a charge</a> with the capture option set to false.</p> <p>Uncaptured payments expire a set number of days after they are created (<a href="/docs/charges/placing-a-hold">7 by default</a>). If they are not captured by that point in time, they will be marked as refunded and will no longer be capturable.</p>
   * @name PostChargesChargeCapture
   * @request POST:/v1/charges/{charge}/capture
   * @secure
   * @response `200` `Charge` Successful response.
   * @response `default` `Error` Error response.
   */
  export namespace PostChargesChargeCapture {
    export type RequestParams = { charge: string };
    export type RequestQuery = {};
    export type RequestBody = {
      amount?: number;
      application_fee?: number;
      application_fee_amount?: number;
      expand?: string[];
      receipt_email?: string;
      statement_descriptor?: string;
      statement_descriptor_suffix?: string;
      transfer_data?: { amount?: number };
      transfer_group?: string;
    };
    export type RequestHeaders = {};
    export type ResponseBody = Charge;
  }
  /**
   * @description <p>Retrieve a dispute for a specified charge.</p>
   * @name GetChargesChargeDispute
   * @request GET:/v1/charges/{charge}/dispute
   * @secure
   * @response `200` `Dispute` Successful response.
   * @response `default` `Error` Error response.
   */
  export namespace GetChargesChargeDispute {
    export type RequestParams = { charge: string };
    export type RequestQuery = { expand?: string[] };
    export type RequestBody = CardMandatePaymentMethodDetails;
    export type RequestHeaders = {};
    export type ResponseBody = Dispute;
  }
  /**
   * No description
   * @name PostChargesChargeDispute
   * @request POST:/v1/charges/{charge}/dispute
   * @secure
   * @response `200` `Dispute` Successful response.
   * @response `default` `Error` Error response.
   */
  export namespace PostChargesChargeDispute {
    export type RequestParams = { charge: string };
    export type RequestQuery = {};
    export type RequestBody = {
      evidence?: {
        access_activity_log?: string;
        billing_address?: string;
        cancellation_policy?: string;
        cancellation_policy_disclosure?: string;
        cancellation_rebuttal?: string;
        customer_communication?: string;
        customer_email_address?: string;
        customer_name?: string;
        customer_purchase_ip?: string;
        customer_signature?: string;
        duplicate_charge_documentation?: string;
        duplicate_charge_explanation?: string;
        duplicate_charge_id?: string;
        product_description?: string;
        receipt?: string;
        refund_policy?: string;
        refund_policy_disclosure?: string;
        refund_refusal_explanation?: string;
        service_date?: string;
        service_documentation?: string;
        shipping_address?: string;
        shipping_carrier?: string;
        shipping_date?: string;
        shipping_documentation?: string;
        shipping_tracking_number?: string;
        uncategorized_file?: string;
        uncategorized_text?: string;
      };
      expand?: string[];
      metadata?: Record<string, string> | "" | (Record<string, string> & "");
      submit?: boolean;
    };
    export type RequestHeaders = {};
    export type ResponseBody = Dispute;
  }
  /**
   * No description
   * @name PostChargesChargeDisputeClose
   * @request POST:/v1/charges/{charge}/dispute/close
   * @secure
   * @response `200` `Dispute` Successful response.
   * @response `default` `Error` Error response.
   */
  export namespace PostChargesChargeDisputeClose {
    export type RequestParams = { charge: string };
    export type RequestQuery = {};
    export type RequestBody = { expand?: string[] };
    export type RequestHeaders = {};
    export type ResponseBody = Dispute;
  }
  /**
   * @description <p>When you create a new refund, you must specify a Charge or a PaymentIntent object on which to create it.</p> <p>Creating a new refund will refund a charge that has previously been created but not yet refunded. Funds will be refunded to the credit or debit card that was originally charged.</p> <p>You can optionally refund only part of a charge. You can do so multiple times, until the entire charge has been refunded.</p> <p>Once entirely refunded, a charge can’t be refunded again. This method will raise an error when called on an already-refunded charge, or when trying to refund more money than is left on a charge.</p>
   * @name PostChargesChargeRefund
   * @request POST:/v1/charges/{charge}/refund
   * @secure
   * @response `200` `Charge` Successful response.
   * @response `default` `Error` Error response.
   */
  export namespace PostChargesChargeRefund {
    export type RequestParams = { charge: string };
    export type RequestQuery = {};
    export type RequestBody = {
      amount?: number;
      expand?: string[];
      metadata?: Record<string, string> | "" | (Record<string, string> & "");
      payment_intent?: string;
      reason?: "duplicate" | "fraudulent" | "requested_by_customer";
      refund_application_fee?: boolean;
      reverse_transfer?: boolean;
    };
    export type RequestHeaders = {};
    export type ResponseBody = Charge;
  }
  /**
   * @description <p>You can see a list of the refunds belonging to a specific charge. Note that the 10 most recent refunds are always available by default on the charge object. If you need more than those 10, you can use this API method and the <code>limit</code> and <code>starting_after</code> parameters to page through additional refunds.</p>
   * @name GetChargesChargeRefunds
   * @request GET:/v1/charges/{charge}/refunds
   * @secure
   * @response `200` `{ data: (Refund)[], has_more: boolean, object: "list", url: string }` Successful response.
   * @response `default` `Error` Error response.
   */
  export namespace GetChargesChargeRefunds {
    export type RequestParams = { charge: string };
    export type RequestQuery = { ending_before?: string; expand?: string[]; limit?: number; starting_after?: string };
    export type RequestBody = CardMandatePaymentMethodDetails;
    export type RequestHeaders = {};
    export type ResponseBody = { data: Refund[]; has_more: boolean; object: "list"; url: string };
  }
  /**
   * @description <p>Create a refund.</p>
   * @name PostChargesChargeRefunds
   * @request POST:/v1/charges/{charge}/refunds
   * @secure
   * @response `200` `Refund` Successful response.
   * @response `default` `Error` Error response.
   */
  export namespace PostChargesChargeRefunds {
    export type RequestParams = { charge: string };
    export type RequestQuery = {};
    export type RequestBody = {
      amount?: number;
      expand?: string[];
      metadata?: Record<string, string> | "" | (Record<string, string> & "");
      payment_intent?: string;
      reason?: "duplicate" | "fraudulent" | "requested_by_customer";
      refund_application_fee?: boolean;
      reverse_transfer?: boolean;
    };
    export type RequestHeaders = {};
    export type ResponseBody = Refund;
  }
  /**
   * @description <p>Retrieves the details of an existing refund.</p>
   * @name GetChargesChargeRefundsRefund
   * @request GET:/v1/charges/{charge}/refunds/{refund}
   * @secure
   * @response `200` `Refund` Successful response.
   * @response `default` `Error` Error response.
   */
  export namespace GetChargesChargeRefundsRefund {
    export type RequestParams = { charge: string; refund: string };
    export type RequestQuery = { expand?: string[] };
    export type RequestBody = CardMandatePaymentMethodDetails;
    export type RequestHeaders = {};
    export type ResponseBody = Refund;
  }
  /**
   * @description <p>Update a specified refund.</p>
   * @name PostChargesChargeRefundsRefund
   * @request POST:/v1/charges/{charge}/refunds/{refund}
   * @secure
   * @response `200` `Refund` Successful response.
   * @response `default` `Error` Error response.
   */
  export namespace PostChargesChargeRefundsRefund {
    export type RequestParams = { charge: string; refund: string };
    export type RequestQuery = {};
    export type RequestBody = {
      expand?: string[];
      metadata?: Record<string, string> | "" | (Record<string, string> & "");
    };
    export type RequestHeaders = {};
    export type ResponseBody = Refund;
  }
  /**
   * @description <p>Returns a list of Checkout Sessions.</p>
   * @name GetCheckoutSessions
   * @request GET:/v1/checkout/sessions
   * @secure
   * @response `200` `{ data: (CheckoutSession)[], has_more: boolean, object: "list", url: string }` Successful response.
   * @response `default` `Error` Error response.
   */
  export namespace GetCheckoutSessions {
    export type RequestParams = {};
    export type RequestQuery = {
      ending_before?: string;
      expand?: string[];
      limit?: number;
      payment_intent?: string;
      starting_after?: string;
      subscription?: string;
    };
    export type RequestBody = CardMandatePaymentMethodDetails;
    export type RequestHeaders = {};
    export type ResponseBody = { data: CheckoutSession[]; has_more: boolean; object: "list"; url: string };
  }
  /**
   * @description <p>Creates a Session object.</p>
   * @name PostCheckoutSessions
   * @request POST:/v1/checkout/sessions
   * @secure
   * @response `200` `CheckoutSession` Successful response.
   * @response `default` `Error` Error response.
   */
  export namespace PostCheckoutSessions {
    export type RequestParams = {};
    export type RequestQuery = {};
    export type RequestBody = {
      after_expiration?: { recovery?: { allow_promotion_codes?: boolean; enabled: boolean } };
      allow_promotion_codes?: boolean;
      automatic_tax?: { enabled: boolean };
      billing_address_collection?: "auto" | "required";
      cancel_url: string;
      client_reference_id?: string;
      consent_collection?: { promotions?: "auto" };
      customer?: string;
      customer_creation?: "always" | "if_required";
      customer_email?: string;
      customer_update?: { address?: "auto" | "never"; name?: "auto" | "never"; shipping?: "auto" | "never" };
      discounts?: { coupon?: string; promotion_code?: string }[];
      expand?: string[];
      expires_at?: number;
      line_items?: {
        adjustable_quantity?: { enabled: boolean; maximum?: number; minimum?: number };
        description?: string;
        dynamic_tax_rates?: string[];
        price?: string;
        price_data?: {
          currency: string;
          product?: string;
          product_data?: {
            description?: string;
            images?: string[];
            metadata?: Record<string, string>;
            name: string;
            tax_code?: string;
          };
          recurring?: { interval: "day" | "month" | "week" | "year"; interval_count?: number };
          tax_behavior?: "exclusive" | "inclusive" | "unspecified";
          unit_amount?: number;
          unit_amount_decimal?: string;
        };
        quantity?: number;
        tax_rates?: string[];
      }[];
      locale?:
        | "auto"
        | "bg"
        | "cs"
        | "da"
        | "de"
        | "el"
        | "en"
        | "en-GB"
        | "es"
        | "es-419"
        | "et"
        | "fi"
        | "fil"
        | "fr"
        | "fr-CA"
        | "hr"
        | "hu"
        | "id"
        | "it"
        | "ja"
        | "ko"
        | "lt"
        | "lv"
        | "ms"
        | "mt"
        | "nb"
        | "nl"
        | "pl"
        | "pt"
        | "pt-BR"
        | "ro"
        | "ru"
        | "sk"
        | "sl"
        | "sv"
        | "th"
        | "tr"
        | "vi"
        | "zh"
        | "zh-HK"
        | "zh-TW";
      metadata?: Record<string, string>;
      mode?: "payment" | "setup" | "subscription";
      payment_intent_data?: {
        application_fee_amount?: number;
        capture_method?: "automatic" | "manual";
        description?: string;
        metadata?: Record<string, string>;
        on_behalf_of?: string;
        receipt_email?: string;
        setup_future_usage?: "off_session" | "on_session";
        shipping?: {
          address: {
            city?: string;
            country?: string;
            line1: string;
            line2?: string;
            postal_code?: string;
            state?: string;
          };
          carrier?: string;
          name: string;
          phone?: string;
          tracking_number?: string;
        };
        statement_descriptor?: string;
        statement_descriptor_suffix?: string;
        transfer_data?: { amount?: number; destination: string };
        transfer_group?: string;
      };
      payment_method_options?: {
        acss_debit?: {
          currency?: "cad" | "usd";
          mandate_options?: {
            custom_mandate_url?: string | "";
            default_for?: ("invoice" | "subscription")[];
            interval_description?: string;
            payment_schedule?: "combined" | "interval" | "sporadic";
            transaction_type?: "business" | "personal";
          };
          verification_method?: "automatic" | "instant" | "microdeposits";
        };
        boleto?: { expires_after_days?: number };
        oxxo?: { expires_after_days?: number };
        wechat_pay?: { app_id?: string; client: "android" | "ios" | "web" };
      };
      payment_method_types?: (
        | "acss_debit"
        | "afterpay_clearpay"
        | "alipay"
        | "bacs_debit"
        | "bancontact"
        | "boleto"
        | "card"
        | "eps"
        | "fpx"
        | "giropay"
        | "grabpay"
        | "ideal"
        | "klarna"
        | "oxxo"
        | "p24"
        | "sepa_debit"
        | "sofort"
        | "wechat_pay"
      )[];
      phone_number_collection?: { enabled: boolean };
      setup_intent_data?: { description?: string; metadata?: Record<string, string>; on_behalf_of?: string };
      shipping_address_collection?: {
        allowed_countries: (
          | "AC"
          | "AD"
          | "AE"
          | "AF"
          | "AG"
          | "AI"
          | "AL"
          | "AM"
          | "AO"
          | "AQ"
          | "AR"
          | "AT"
          | "AU"
          | "AW"
          | "AX"
          | "AZ"
          | "BA"
          | "BB"
          | "BD"
          | "BE"
          | "BF"
          | "BG"
          | "BH"
          | "BI"
          | "BJ"
          | "BL"
          | "BM"
          | "BN"
          | "BO"
          | "BQ"
          | "BR"
          | "BS"
          | "BT"
          | "BV"
          | "BW"
          | "BY"
          | "BZ"
          | "CA"
          | "CD"
          | "CF"
          | "CG"
          | "CH"
          | "CI"
          | "CK"
          | "CL"
          | "CM"
          | "CN"
          | "CO"
          | "CR"
          | "CV"
          | "CW"
          | "CY"
          | "CZ"
          | "DE"
          | "DJ"
          | "DK"
          | "DM"
          | "DO"
          | "DZ"
          | "EC"
          | "EE"
          | "EG"
          | "EH"
          | "ER"
          | "ES"
          | "ET"
          | "FI"
          | "FJ"
          | "FK"
          | "FO"
          | "FR"
          | "GA"
          | "GB"
          | "GD"
          | "GE"
          | "GF"
          | "GG"
          | "GH"
          | "GI"
          | "GL"
          | "GM"
          | "GN"
          | "GP"
          | "GQ"
          | "GR"
          | "GS"
          | "GT"
          | "GU"
          | "GW"
          | "GY"
          | "HK"
          | "HN"
          | "HR"
          | "HT"
          | "HU"
          | "ID"
          | "IE"
          | "IL"
          | "IM"
          | "IN"
          | "IO"
          | "IQ"
          | "IS"
          | "IT"
          | "JE"
          | "JM"
          | "JO"
          | "JP"
          | "KE"
          | "KG"
          | "KH"
          | "KI"
          | "KM"
          | "KN"
          | "KR"
          | "KW"
          | "KY"
          | "KZ"
          | "LA"
          | "LB"
          | "LC"
          | "LI"
          | "LK"
          | "LR"
          | "LS"
          | "LT"
          | "LU"
          | "LV"
          | "LY"
          | "MA"
          | "MC"
          | "MD"
          | "ME"
          | "MF"
          | "MG"
          | "MK"
          | "ML"
          | "MM"
          | "MN"
          | "MO"
          | "MQ"
          | "MR"
          | "MS"
          | "MT"
          | "MU"
          | "MV"
          | "MW"
          | "MX"
          | "MY"
          | "MZ"
          | "NA"
          | "NC"
          | "NE"
          | "NG"
          | "NI"
          | "NL"
          | "NO"
          | "NP"
          | "NR"
          | "NU"
          | "NZ"
          | "OM"
          | "PA"
          | "PE"
          | "PF"
          | "PG"
          | "PH"
          | "PK"
          | "PL"
          | "PM"
          | "PN"
          | "PR"
          | "PS"
          | "PT"
          | "PY"
          | "QA"
          | "RE"
          | "RO"
          | "RS"
          | "RU"
          | "RW"
          | "SA"
          | "SB"
          | "SC"
          | "SE"
          | "SG"
          | "SH"
          | "SI"
          | "SJ"
          | "SK"
          | "SL"
          | "SM"
          | "SN"
          | "SO"
          | "SR"
          | "SS"
          | "ST"
          | "SV"
          | "SX"
          | "SZ"
          | "TA"
          | "TC"
          | "TD"
          | "TF"
          | "TG"
          | "TH"
          | "TJ"
          | "TK"
          | "TL"
          | "TM"
          | "TN"
          | "TO"
          | "TR"
          | "TT"
          | "TV"
          | "TW"
          | "TZ"
          | "UA"
          | "UG"
          | "US"
          | "UY"
          | "UZ"
          | "VA"
          | "VC"
          | "VE"
          | "VG"
          | "VN"
          | "VU"
          | "WF"
          | "WS"
          | "XK"
          | "YE"
          | "YT"
          | "ZA"
          | "ZM"
          | "ZW"
          | "ZZ"
        )[];
      };
      shipping_options?: {
        shipping_rate?: string;
        shipping_rate_data?: {
          delivery_estimate?: {
            maximum?: { unit: "business_day" | "day" | "hour" | "month" | "week"; value: number };
            minimum?: { unit: "business_day" | "day" | "hour" | "month" | "week"; value: number };
          };
          display_name: string;
          fixed_amount?: { amount: number; currency: string };
          metadata?: Record<string, string>;
          tax_behavior?: "exclusive" | "inclusive" | "unspecified";
          tax_code?: string;
          type?: "fixed_amount";
        };
      }[];
      submit_type?: "auto" | "book" | "donate" | "pay";
      subscription_data?: {
        application_fee_percent?: number;
        default_tax_rates?: string[];
        items?: { plan: string; quantity?: number; tax_rates?: string[] }[];
        metadata?: Record<string, string>;
        transfer_data?: { amount_percent?: number; destination: string };
        trial_end?: number;
        trial_period_days?: number;
      };
      success_url: string;
      tax_id_collection?: { enabled: boolean };
    };
    export type RequestHeaders = {};
    export type ResponseBody = CheckoutSession;
  }
  /**
   * @description <p>Retrieves a Session object.</p>
   * @name GetCheckoutSessionsSession
   * @request GET:/v1/checkout/sessions/{session}
   * @secure
   * @response `200` `CheckoutSession` Successful response.
   * @response `default` `Error` Error response.
   */
  export namespace GetCheckoutSessionsSession {
    export type RequestParams = { session: string };
    export type RequestQuery = { expand?: string[] };
    export type RequestBody = CardMandatePaymentMethodDetails;
    export type RequestHeaders = {};
    export type ResponseBody = CheckoutSession;
  }
  /**
   * @description <p>A Session can be expired when it is in one of these statuses: <code>open</code> </p> <p>After it expires, a customer can’t complete a Session and customers loading the Session see a message saying the Session is expired.</p>
   * @name PostCheckoutSessionsSessionExpire
   * @request POST:/v1/checkout/sessions/{session}/expire
   * @secure
   * @response `200` `CheckoutSession` Successful response.
   * @response `default` `Error` Error response.
   */
  export namespace PostCheckoutSessionsSessionExpire {
    export type RequestParams = { session: string };
    export type RequestQuery = {};
    export type RequestBody = { expand?: string[] };
    export type RequestHeaders = {};
    export type ResponseBody = CheckoutSession;
  }
  /**
   * @description <p>When retrieving a Checkout Session, there is an includable <strong>line_items</strong> property containing the first handful of those items. There is also a URL where you can retrieve the full (paginated) list of line items.</p>
   * @name GetCheckoutSessionsSessionLineItems
   * @request GET:/v1/checkout/sessions/{session}/line_items
   * @secure
   * @response `200` `{ data: (Item)[], has_more: boolean, object: "list", url: string }` Successful response.
   * @response `default` `Error` Error response.
   */
  export namespace GetCheckoutSessionsSessionLineItems {
    export type RequestParams = { session: string };
    export type RequestQuery = { ending_before?: string; expand?: string[]; limit?: number; starting_after?: string };
    export type RequestBody = CardMandatePaymentMethodDetails;
    export type RequestHeaders = {};
    export type ResponseBody = { data: Item[]; has_more: boolean; object: "list"; url: string };
  }
  /**
   * @description <p>Lists all Country Spec objects available in the API.</p>
   * @name GetCountrySpecs
   * @request GET:/v1/country_specs
   * @secure
   * @response `200` `{ data: (CountrySpec)[], has_more: boolean, object: "list", url: string }` Successful response.
   * @response `default` `Error` Error response.
   */
  export namespace GetCountrySpecs {
    export type RequestParams = {};
    export type RequestQuery = { ending_before?: string; expand?: string[]; limit?: number; starting_after?: string };
    export type RequestBody = CardMandatePaymentMethodDetails;
    export type RequestHeaders = {};
    export type ResponseBody = { data: CountrySpec[]; has_more: boolean; object: "list"; url: string };
  }
  /**
   * @description <p>Returns a Country Spec for a given Country code.</p>
   * @name GetCountrySpecsCountry
   * @request GET:/v1/country_specs/{country}
   * @secure
   * @response `200` `CountrySpec` Successful response.
   * @response `default` `Error` Error response.
   */
  export namespace GetCountrySpecsCountry {
    export type RequestParams = { country: string };
    export type RequestQuery = { expand?: string[] };
    export type RequestBody = CardMandatePaymentMethodDetails;
    export type RequestHeaders = {};
    export type ResponseBody = CountrySpec;
  }
  /**
   * @description <p>Returns a list of your coupons.</p>
   * @name GetCoupons
   * @request GET:/v1/coupons
   * @secure
   * @response `200` `{ data: (Coupon)[], has_more: boolean, object: "list", url: string }` Successful response.
   * @response `default` `Error` Error response.
   */
  export namespace GetCoupons {
    export type RequestParams = {};
    export type RequestQuery = {
      created?: { gt?: number; gte?: number; lt?: number; lte?: number } | number;
      ending_before?: string;
      expand?: string[];
      limit?: number;
      starting_after?: string;
    };
    export type RequestBody = CardMandatePaymentMethodDetails;
    export type RequestHeaders = {};
    export type ResponseBody = { data: Coupon[]; has_more: boolean; object: "list"; url: string };
  }
  /**
   * @description <p>You can create coupons easily via the <a href="https://dashboard.stripe.com/coupons">coupon management</a> page of the Stripe dashboard. Coupon creation is also accessible via the API if you need to create coupons on the fly.</p> <p>A coupon has either a <code>percent_off</code> or an <code>amount_off</code> and <code>currency</code>. If you set an <code>amount_off</code>, that amount will be subtracted from any invoice’s subtotal. For example, an invoice with a subtotal of <currency>100</currency> will have a final total of <currency>0</currency> if a coupon with an <code>amount_off</code> of <amount>200</amount> is applied to it and an invoice with a subtotal of <currency>300</currency> will have a final total of <currency>100</currency> if a coupon with an <code>amount_off</code> of <amount>200</amount> is applied to it.</p>
   * @name PostCoupons
   * @request POST:/v1/coupons
   * @secure
   * @response `200` `Coupon` Successful response.
   * @response `default` `Error` Error response.
   */
  export namespace PostCoupons {
    export type RequestParams = {};
    export type RequestQuery = {};
    export type RequestBody = {
      amount_off?: number;
      applies_to?: { products?: string[] };
      currency?: string;
      duration?: "forever" | "once" | "repeating";
      duration_in_months?: number;
      expand?: string[];
      id?: string;
      max_redemptions?: number;
      metadata?: Record<string, string> | "" | (Record<string, string> & "");
      name?: string;
      percent_off?: number;
      redeem_by?: number;
    };
    export type RequestHeaders = {};
    export type ResponseBody = Coupon;
  }
  /**
   * @description <p>You can delete coupons via the <a href="https://dashboard.stripe.com/coupons">coupon management</a> page of the Stripe dashboard. However, deleting a coupon does not affect any customers who have already applied the coupon; it means that new customers can’t redeem the coupon. You can also delete coupons via the API.</p>
   * @name DeleteCouponsCoupon
   * @request DELETE:/v1/coupons/{coupon}
   * @secure
   * @response `200` `DeletedCoupon` Successful response.
   * @response `default` `Error` Error response.
   */
  export namespace DeleteCouponsCoupon {
    export type RequestParams = { coupon: string };
    export type RequestQuery = {};
    export type RequestBody = CardMandatePaymentMethodDetails;
    export type RequestHeaders = {};
    export type ResponseBody = DeletedCoupon;
  }
  /**
   * @description <p>Retrieves the coupon with the given ID.</p>
   * @name GetCouponsCoupon
   * @request GET:/v1/coupons/{coupon}
   * @secure
   * @response `200` `Coupon` Successful response.
   * @response `default` `Error` Error response.
   */
  export namespace GetCouponsCoupon {
    export type RequestParams = { coupon: string };
    export type RequestQuery = { expand?: string[] };
    export type RequestBody = CardMandatePaymentMethodDetails;
    export type RequestHeaders = {};
    export type ResponseBody = Coupon;
  }
  /**
   * @description <p>Updates the metadata of a coupon. Other coupon details (currency, duration, amount_off) are, by design, not editable.</p>
   * @name PostCouponsCoupon
   * @request POST:/v1/coupons/{coupon}
   * @secure
   * @response `200` `Coupon` Successful response.
   * @response `default` `Error` Error response.
   */
  export namespace PostCouponsCoupon {
    export type RequestParams = { coupon: string };
    export type RequestQuery = {};
    export type RequestBody = {
      expand?: string[];
      metadata?: Record<string, string> | "" | (Record<string, string> & "");
      name?: string;
    };
    export type RequestHeaders = {};
    export type ResponseBody = Coupon;
  }
  /**
   * @description <p>Returns a list of credit notes.</p>
   * @name GetCreditNotes
   * @request GET:/v1/credit_notes
   * @secure
   * @response `200` `{ data: (CreditNote)[], has_more: boolean, object: "list", url: string }` Successful response.
   * @response `default` `Error` Error response.
   */
  export namespace GetCreditNotes {
    export type RequestParams = {};
    export type RequestQuery = {
      customer?: string;
      ending_before?: string;
      expand?: string[];
      invoice?: string;
      limit?: number;
      starting_after?: string;
    };
    export type RequestBody = CardMandatePaymentMethodDetails;
    export type RequestHeaders = {};
    export type ResponseBody = { data: CreditNote[]; has_more: boolean; object: "list"; url: string };
  }
  /**
   * @description <p>Issue a credit note to adjust the amount of a finalized invoice. For a <code>status=open</code> invoice, a credit note reduces its <code>amount_due</code>. For a <code>status=paid</code> invoice, a credit note does not affect its <code>amount_due</code>. Instead, it can result in any combination of the following:</p> <ul> <li>Refund: create a new refund (using <code>refund_amount</code>) or link an existing refund (using <code>refund</code>).</li> <li>Customer balance credit: credit the customer’s balance (using <code>credit_amount</code>) which will be automatically applied to their next invoice when it’s finalized.</li> <li>Outside of Stripe credit: record the amount that is or will be credited outside of Stripe (using <code>out_of_band_amount</code>).</li> </ul> <p>For post-payment credit notes the sum of the refund, credit and outside of Stripe amounts must equal the credit note total.</p> <p>You may issue multiple credit notes for an invoice. Each credit note will increment the invoice’s <code>pre_payment_credit_notes_amount</code> or <code>post_payment_credit_notes_amount</code> depending on its <code>status</code> at the time of credit note creation.</p>
   * @name PostCreditNotes
   * @request POST:/v1/credit_notes
   * @secure
   * @response `200` `CreditNote` Successful response.
   * @response `default` `Error` Error response.
   */
  export namespace PostCreditNotes {
    export type RequestParams = {};
    export type RequestQuery = {};
    export type RequestBody = {
      amount?: number;
      credit_amount?: number;
      expand?: string[];
      invoice: string;
      lines?: {
        amount?: number;
        description?: string;
        invoice_line_item?: string;
        quantity?: number;
        tax_rates?: string[] | "" | (string[] & "");
        type: "custom_line_item" | "invoice_line_item";
        unit_amount?: number;
        unit_amount_decimal?: string;
      }[];
      memo?: string;
      metadata?: Record<string, string>;
      out_of_band_amount?: number;
      reason?: "duplicate" | "fraudulent" | "order_change" | "product_unsatisfactory";
      refund?: string;
      refund_amount?: number;
    };
    export type RequestHeaders = {};
    export type ResponseBody = CreditNote;
  }
  /**
   * @description <p>Get a preview of a credit note without creating it.</p>
   * @name GetCreditNotesPreview
   * @request GET:/v1/credit_notes/preview
   * @secure
   * @response `200` `CreditNote` Successful response.
   * @response `default` `Error` Error response.
   */
  export namespace GetCreditNotesPreview {
    export type RequestParams = {};
    export type RequestQuery = {
      amount?: number;
      credit_amount?: number;
      expand?: string[];
      invoice: string;
      lines?: {
        amount?: number;
        description?: string;
        invoice_line_item?: string;
        quantity?: number;
        tax_rates?: string[] | "" | (string[] & "");
        type: "custom_line_item" | "invoice_line_item";
        unit_amount?: number;
        unit_amount_decimal?: string;
      }[];
      memo?: string;
      metadata?: Record<string, string>;
      out_of_band_amount?: number;
      reason?: "duplicate" | "fraudulent" | "order_change" | "product_unsatisfactory";
      refund?: string;
      refund_amount?: number;
    };
    export type RequestBody = CardMandatePaymentMethodDetails;
    export type RequestHeaders = {};
    export type ResponseBody = CreditNote;
  }
  /**
   * @description <p>When retrieving a credit note preview, you’ll get a <strong>lines</strong> property containing the first handful of those items. This URL you can retrieve the full (paginated) list of line items.</p>
   * @name GetCreditNotesPreviewLines
   * @request GET:/v1/credit_notes/preview/lines
   * @secure
   * @response `200` `{ data: (CreditNoteLineItem)[], has_more: boolean, object: "list", url: string }` Successful response.
   * @response `default` `Error` Error response.
   */
  export namespace GetCreditNotesPreviewLines {
    export type RequestParams = {};
    export type RequestQuery = {
      amount?: number;
      credit_amount?: number;
      ending_before?: string;
      expand?: string[];
      invoice: string;
      limit?: number;
      lines?: {
        amount?: number;
        description?: string;
        invoice_line_item?: string;
        quantity?: number;
        tax_rates?: string[] | "" | (string[] & "");
        type: "custom_line_item" | "invoice_line_item";
        unit_amount?: number;
        unit_amount_decimal?: string;
      }[];
      memo?: string;
      metadata?: Record<string, string>;
      out_of_band_amount?: number;
      reason?: "duplicate" | "fraudulent" | "order_change" | "product_unsatisfactory";
      refund?: string;
      refund_amount?: number;
      starting_after?: string;
    };
    export type RequestBody = CardMandatePaymentMethodDetails;
    export type RequestHeaders = {};
    export type ResponseBody = { data: CreditNoteLineItem[]; has_more: boolean; object: "list"; url: string };
  }
  /**
   * @description <p>When retrieving a credit note, you’ll get a <strong>lines</strong> property containing the the first handful of those items. There is also a URL where you can retrieve the full (paginated) list of line items.</p>
   * @name GetCreditNotesCreditNoteLines
   * @request GET:/v1/credit_notes/{credit_note}/lines
   * @secure
   * @response `200` `{ data: (CreditNoteLineItem)[], has_more: boolean, object: "list", url: string }` Successful response.
   * @response `default` `Error` Error response.
   */
  export namespace GetCreditNotesCreditNoteLines {
    export type RequestParams = { creditNote: string };
    export type RequestQuery = { ending_before?: string; expand?: string[]; limit?: number; starting_after?: string };
    export type RequestBody = CardMandatePaymentMethodDetails;
    export type RequestHeaders = {};
    export type ResponseBody = { data: CreditNoteLineItem[]; has_more: boolean; object: "list"; url: string };
  }
  /**
   * @description <p>Retrieves the credit note object with the given identifier.</p>
   * @name GetCreditNotesId
   * @request GET:/v1/credit_notes/{id}
   * @secure
   * @response `200` `CreditNote` Successful response.
   * @response `default` `Error` Error response.
   */
  export namespace GetCreditNotesId {
    export type RequestParams = { id: string };
    export type RequestQuery = { expand?: string[] };
    export type RequestBody = CardMandatePaymentMethodDetails;
    export type RequestHeaders = {};
    export type ResponseBody = CreditNote;
  }
  /**
   * @description <p>Updates an existing credit note.</p>
   * @name PostCreditNotesId
   * @request POST:/v1/credit_notes/{id}
   * @secure
   * @response `200` `CreditNote` Successful response.
   * @response `default` `Error` Error response.
   */
  export namespace PostCreditNotesId {
    export type RequestParams = { id: string };
    export type RequestQuery = {};
    export type RequestBody = { expand?: string[]; memo?: string; metadata?: Record<string, string> };
    export type RequestHeaders = {};
    export type ResponseBody = CreditNote;
  }
  /**
   * @description <p>Marks a credit note as void. Learn more about <a href="/docs/billing/invoices/credit-notes#voiding">voiding credit notes</a>.</p>
   * @name PostCreditNotesIdVoid
   * @request POST:/v1/credit_notes/{id}/void
   * @secure
   * @response `200` `CreditNote` Successful response.
   * @response `default` `Error` Error response.
   */
  export namespace PostCreditNotesIdVoid {
    export type RequestParams = { id: string };
    export type RequestQuery = {};
    export type RequestBody = { expand?: string[] };
    export type RequestHeaders = {};
    export type ResponseBody = CreditNote;
  }
  /**
   * @description <p>Returns a list of your customers. The customers are returned sorted by creation date, with the most recent customers appearing first.</p>
   * @name GetCustomers
   * @request GET:/v1/customers
   * @secure
   * @response `200` `{ data: (Customer)[], has_more: boolean, object: "list", url: string }` Successful response.
   * @response `default` `Error` Error response.
   */
  export namespace GetCustomers {
    export type RequestParams = {};
    export type RequestQuery = {
      created?: { gt?: number; gte?: number; lt?: number; lte?: number } | number;
      email?: string;
      ending_before?: string;
      expand?: string[];
      limit?: number;
      starting_after?: string;
    };
    export type RequestBody = CardMandatePaymentMethodDetails;
    export type RequestHeaders = {};
    export type ResponseBody = { data: Customer[]; has_more: boolean; object: "list"; url: string };
  }
  /**
   * @description <p>Creates a new customer object.</p>
   * @name PostCustomers
   * @request POST:/v1/customers
   * @secure
   * @response `200` `Customer` Successful response.
   * @response `default` `Error` Error response.
   */
  export namespace PostCustomers {
    export type RequestParams = {};
    export type RequestQuery = {};
    export type RequestBody = {
      address?:
        | { city?: string; country?: string; line1?: string; line2?: string; postal_code?: string; state?: string }
        | ""
        | ({
            city?: string;
            country?: string;
            line1?: string;
            line2?: string;
            postal_code?: string;
            state?: string;
          } & "");
      balance?: number;
      coupon?: string;
      description?: string;
      email?: string;
      expand?: string[];
      invoice_prefix?: string;
      invoice_settings?: {
        custom_fields?: { name: string; value: string }[] | "" | ({ name: string; value: string }[] & "");
        default_payment_method?: string;
        footer?: string;
      };
      metadata?: Record<string, string> | "" | (Record<string, string> & "");
      name?: string;
      next_invoice_sequence?: number;
      payment_method?: string;
      phone?: string;
      preferred_locales?: string[];
      promotion_code?: string;
      shipping?:
        | {
            address: {
              city?: string;
              country?: string;
              line1?: string;
              line2?: string;
              postal_code?: string;
              state?: string;
            };
            name: string;
            phone?: string;
          }
        | ""
        | ({
            address: {
              city?: string;
              country?: string;
              line1?: string;
              line2?: string;
              postal_code?: string;
              state?: string;
            };
            name: string;
            phone?: string;
          } & "");
      source?: string;
      tax?: { ip_address?: string | "" };
      tax_exempt?: "" | "exempt" | "none" | "reverse";
      tax_id_data?: {
        type:
          | "ae_trn"
          | "au_abn"
          | "au_arn"
          | "br_cnpj"
          | "br_cpf"
          | "ca_bn"
          | "ca_gst_hst"
          | "ca_pst_bc"
          | "ca_pst_mb"
          | "ca_pst_sk"
          | "ca_qst"
          | "ch_vat"
          | "cl_tin"
          | "es_cif"
          | "eu_vat"
          | "gb_vat"
          | "ge_vat"
          | "hk_br"
          | "id_npwp"
          | "il_vat"
          | "in_gst"
          | "jp_cn"
          | "jp_rn"
          | "kr_brn"
          | "li_uid"
          | "mx_rfc"
          | "my_frp"
          | "my_itn"
          | "my_sst"
          | "no_vat"
          | "nz_gst"
          | "ru_inn"
          | "ru_kpp"
          | "sa_vat"
          | "sg_gst"
          | "sg_uen"
          | "th_vat"
          | "tw_vat"
          | "ua_vat"
          | "us_ein"
          | "za_vat";
        value: string;
      }[];
    };
    export type RequestHeaders = {};
    export type ResponseBody = Customer;
  }
  /**
   * @description <p>Permanently deletes a customer. It cannot be undone. Also immediately cancels any active subscriptions on the customer.</p>
   * @name DeleteCustomersCustomer
   * @request DELETE:/v1/customers/{customer}
   * @secure
   * @response `200` `DeletedCustomer` Successful response.
   * @response `default` `Error` Error response.
   */
  export namespace DeleteCustomersCustomer {
    export type RequestParams = { customer: string };
    export type RequestQuery = {};
    export type RequestBody = CardMandatePaymentMethodDetails;
    export type RequestHeaders = {};
    export type ResponseBody = DeletedCustomer;
  }
  /**
   * @description <p>Retrieves a Customer object.</p>
   * @name GetCustomersCustomer
   * @request GET:/v1/customers/{customer}
   * @secure
   * @response `200` `(Customer | DeletedCustomer | (Customer & DeletedCustomer))` Successful response.
   * @response `default` `Error` Error response.
   */
  export namespace GetCustomersCustomer {
    export type RequestParams = { customer: string };
    export type RequestQuery = { expand?: string[] };
    export type RequestBody = CardMandatePaymentMethodDetails;
    export type RequestHeaders = {};
    export type ResponseBody = Customer | DeletedCustomer | (Customer & DeletedCustomer);
  }
  /**
   * @description <p>Updates the specified customer by setting the values of the parameters passed. Any parameters not provided will be left unchanged. For example, if you pass the <strong>source</strong> parameter, that becomes the customer’s active source (e.g., a card) to be used for all charges in the future. When you update a customer to a new valid card source by passing the <strong>source</strong> parameter: for each of the customer’s current subscriptions, if the subscription bills automatically and is in the <code>past_due</code> state, then the latest open invoice for the subscription with automatic collection enabled will be retried. This retry will not count as an automatic retry, and will not affect the next regularly scheduled payment for the invoice. Changing the <strong>default_source</strong> for a customer will not trigger this behavior.</p> <p>This request accepts mostly the same arguments as the customer creation call.</p>
   * @name PostCustomersCustomer
   * @request POST:/v1/customers/{customer}
   * @secure
   * @response `200` `Customer` Successful response.
   * @response `default` `Error` Error response.
   */
  export namespace PostCustomersCustomer {
    export type RequestParams = { customer: string };
    export type RequestQuery = {};
    export type RequestBody = {
      address?:
        | { city?: string; country?: string; line1?: string; line2?: string; postal_code?: string; state?: string }
        | ""
        | ({
            city?: string;
            country?: string;
            line1?: string;
            line2?: string;
            postal_code?: string;
            state?: string;
          } & "");
      balance?: number;
      bank_account?:
        | {
            account_holder_name?: string;
            account_holder_type?: "company" | "individual";
            account_number: string;
            country: string;
            currency?: string;
            object?: "bank_account";
            routing_number?: string;
          }
        | string;
      card?:
        | {
            address_city?: string;
            address_country?: string;
            address_line1?: string;
            address_line2?: string;
            address_state?: string;
            address_zip?: string;
            cvc?: string;
            exp_month: number;
            exp_year: number;
            metadata?: Record<string, string>;
            name?: string;
            number: string;
            object?: "card";
          }
        | string;
      coupon?: string;
      default_alipay_account?: string;
      default_bank_account?: string;
      default_card?: string;
      default_source?: string;
      description?: string;
      email?: string;
      expand?: string[];
      invoice_prefix?: string;
      invoice_settings?: {
        custom_fields?: { name: string; value: string }[] | "" | ({ name: string; value: string }[] & "");
        default_payment_method?: string;
        footer?: string;
      };
      metadata?: Record<string, string> | "" | (Record<string, string> & "");
      name?: string;
      next_invoice_sequence?: number;
      phone?: string;
      preferred_locales?: string[];
      promotion_code?: string;
      shipping?:
        | {
            address: {
              city?: string;
              country?: string;
              line1?: string;
              line2?: string;
              postal_code?: string;
              state?: string;
            };
            name: string;
            phone?: string;
          }
        | ""
        | ({
            address: {
              city?: string;
              country?: string;
              line1?: string;
              line2?: string;
              postal_code?: string;
              state?: string;
            };
            name: string;
            phone?: string;
          } & "");
      source?: string;
      tax?: { ip_address?: string | "" };
      tax_exempt?: "" | "exempt" | "none" | "reverse";
      trial_end?: "now" | number;
    };
    export type RequestHeaders = {};
    export type ResponseBody = Customer;
  }
  /**
   * @description <p>Returns a list of transactions that updated the customer’s <a href="/docs/billing/customer/balance">balances</a>.</p>
   * @name GetCustomersCustomerBalanceTransactions
   * @request GET:/v1/customers/{customer}/balance_transactions
   * @secure
   * @response `200` `{ data: (CustomerBalanceTransaction)[], has_more: boolean, object: "list", url: string }` Successful response.
   * @response `default` `Error` Error response.
   */
  export namespace GetCustomersCustomerBalanceTransactions {
    export type RequestParams = { customer: string };
    export type RequestQuery = { ending_before?: string; expand?: string[]; limit?: number; starting_after?: string };
    export type RequestBody = CardMandatePaymentMethodDetails;
    export type RequestHeaders = {};
    export type ResponseBody = { data: CustomerBalanceTransaction[]; has_more: boolean; object: "list"; url: string };
  }
  /**
   * @description <p>Creates an immutable transaction that updates the customer’s credit <a href="/docs/billing/customer/balance">balance</a>.</p>
   * @name PostCustomersCustomerBalanceTransactions
   * @request POST:/v1/customers/{customer}/balance_transactions
   * @secure
   * @response `200` `CustomerBalanceTransaction` Successful response.
   * @response `default` `Error` Error response.
   */
  export namespace PostCustomersCustomerBalanceTransactions {
    export type RequestParams = { customer: string };
    export type RequestQuery = {};
    export type RequestBody = {
      amount: number;
      currency: string;
      description?: string;
      expand?: string[];
      metadata?: Record<string, string> | "" | (Record<string, string> & "");
    };
    export type RequestHeaders = {};
    export type ResponseBody = CustomerBalanceTransaction;
  }
  /**
   * @description <p>Retrieves a specific customer balance transaction that updated the customer’s <a href="/docs/billing/customer/balance">balances</a>.</p>
   * @name GetCustomersCustomerBalanceTransactionsTransaction
   * @request GET:/v1/customers/{customer}/balance_transactions/{transaction}
   * @secure
   * @response `200` `CustomerBalanceTransaction` Successful response.
   * @response `default` `Error` Error response.
   */
  export namespace GetCustomersCustomerBalanceTransactionsTransaction {
    export type RequestParams = { customer: string; transaction: string };
    export type RequestQuery = { expand?: string[] };
    export type RequestBody = CardMandatePaymentMethodDetails;
    export type RequestHeaders = {};
    export type ResponseBody = CustomerBalanceTransaction;
  }
  /**
   * @description <p>Most credit balance transaction fields are immutable, but you may update its <code>description</code> and <code>metadata</code>.</p>
   * @name PostCustomersCustomerBalanceTransactionsTransaction
   * @request POST:/v1/customers/{customer}/balance_transactions/{transaction}
   * @secure
   * @response `200` `CustomerBalanceTransaction` Successful response.
   * @response `default` `Error` Error response.
   */
  export namespace PostCustomersCustomerBalanceTransactionsTransaction {
    export type RequestParams = { customer: string; transaction: string };
    export type RequestQuery = {};
    export type RequestBody = {
      description?: string;
      expand?: string[];
      metadata?: Record<string, string> | "" | (Record<string, string> & "");
    };
    export type RequestHeaders = {};
    export type ResponseBody = CustomerBalanceTransaction;
  }
  /**
   * @description <p>You can see a list of the bank accounts belonging to a Customer. Note that the 10 most recent sources are always available by default on the Customer. If you need more than those 10, you can use this API method and the <code>limit</code> and <code>starting_after</code> parameters to page through additional bank accounts.</p>
   * @name GetCustomersCustomerBankAccounts
   * @request GET:/v1/customers/{customer}/bank_accounts
   * @deprecated
   * @secure
   * @response `200` `{ data: (BankAccount)[], has_more: boolean, object: "list", url: string }` Successful response.
   * @response `default` `Error` Error response.
   */
  export namespace GetCustomersCustomerBankAccounts {
    export type RequestParams = { customer: string };
    export type RequestQuery = { ending_before?: string; expand?: string[]; limit?: number; starting_after?: string };
    export type RequestBody = CardMandatePaymentMethodDetails;
    export type RequestHeaders = {};
    export type ResponseBody = { data: BankAccount[]; has_more: boolean; object: "list"; url: string };
  }
  /**
   * @description <p>When you create a new credit card, you must specify a customer or recipient on which to create it.</p> <p>If the card’s owner has no default card, then the new card will become the default. However, if the owner already has a default, then it will not change. To change the default, you should <a href="/docs/api#update_customer">update the customer</a> to have a new <code>default_source</code>.</p>
   * @name PostCustomersCustomerBankAccounts
   * @request POST:/v1/customers/{customer}/bank_accounts
   * @secure
   * @response `200` `PaymentSource` Successful response.
   * @response `default` `Error` Error response.
   */
  export namespace PostCustomersCustomerBankAccounts {
    export type RequestParams = { customer: string };
    export type RequestQuery = {};
    export type RequestBody = {
      alipay_account?: string;
      bank_account?:
        | {
            account_holder_name?: string;
            account_holder_type?: "company" | "individual";
            account_number: string;
            country: string;
            currency?: string;
            object?: "bank_account";
            routing_number?: string;
          }
        | string;
      card?:
        | {
            address_city?: string;
            address_country?: string;
            address_line1?: string;
            address_line2?: string;
            address_state?: string;
            address_zip?: string;
            cvc?: string;
            exp_month: number;
            exp_year: number;
            metadata?: Record<string, string>;
            name?: string;
            number: string;
            object?: "card";
          }
        | string;
      expand?: string[];
      metadata?: Record<string, string>;
      source?: string;
    };
    export type RequestHeaders = {};
    export type ResponseBody = PaymentSource;
  }
  /**
   * @description <p>Delete a specified source for a given customer.</p>
   * @name DeleteCustomersCustomerBankAccountsId
   * @request DELETE:/v1/customers/{customer}/bank_accounts/{id}
   * @secure
   * @response `200` `(PaymentSource | DeletedPaymentSource | (PaymentSource & DeletedPaymentSource))` Successful response.
   * @response `default` `Error` Error response.
   */
  export namespace DeleteCustomersCustomerBankAccountsId {
    export type RequestParams = { customer: string; id: string };
    export type RequestQuery = {};
    export type RequestBody = { expand?: string[] };
    export type RequestHeaders = {};
    export type ResponseBody = PaymentSource | DeletedPaymentSource | (PaymentSource & DeletedPaymentSource);
  }
  /**
   * @description <p>By default, you can see the 10 most recent sources stored on a Customer directly on the object, but you can also retrieve details about a specific bank account stored on the Stripe account.</p>
   * @name GetCustomersCustomerBankAccountsId
   * @request GET:/v1/customers/{customer}/bank_accounts/{id}
   * @deprecated
   * @secure
   * @response `200` `BankAccount` Successful response.
   * @response `default` `Error` Error response.
   */
  export namespace GetCustomersCustomerBankAccountsId {
    export type RequestParams = { customer: string; id: string };
    export type RequestQuery = { expand?: string[] };
    export type RequestBody = CardMandatePaymentMethodDetails;
    export type RequestHeaders = {};
    export type ResponseBody = BankAccount;
  }
  /**
   * @description <p>Update a specified source for a given customer.</p>
   * @name PostCustomersCustomerBankAccountsId
   * @request POST:/v1/customers/{customer}/bank_accounts/{id}
   * @secure
   * @response `200` `(Card | BankAccount | Source | (Card & BankAccount & Source))` Successful response.
   * @response `default` `Error` Error response.
   */
  export namespace PostCustomersCustomerBankAccountsId {
    export type RequestParams = { customer: string; id: string };
    export type RequestQuery = {};
    export type RequestBody = {
      account_holder_name?: string;
      account_holder_type?: "company" | "individual";
      address_city?: string;
      address_country?: string;
      address_line1?: string;
      address_line2?: string;
      address_state?: string;
      address_zip?: string;
      exp_month?: string;
      exp_year?: string;
      expand?: string[];
      metadata?: Record<string, string> | "" | (Record<string, string> & "");
      name?: string;
      owner?: {
        address?: {
          city?: string;
          country?: string;
          line1?: string;
          line2?: string;
          postal_code?: string;
          state?: string;
        };
        email?: string;
        name?: string;
        phone?: string;
      };
    };
    export type RequestHeaders = {};
    export type ResponseBody = Card | BankAccount | Source | (Card & BankAccount & Source);
  }
  /**
   * @description <p>Verify a specified bank account for a given customer.</p>
   * @name PostCustomersCustomerBankAccountsIdVerify
   * @request POST:/v1/customers/{customer}/bank_accounts/{id}/verify
   * @secure
   * @response `200` `BankAccount` Successful response.
   * @response `default` `Error` Error response.
   */
  export namespace PostCustomersCustomerBankAccountsIdVerify {
    export type RequestParams = { customer: string; id: string };
    export type RequestQuery = {};
    export type RequestBody = { amounts?: number[]; expand?: string[] };
    export type RequestHeaders = {};
    export type ResponseBody = BankAccount;
  }
  /**
   * @description <p>You can see a list of the cards belonging to a customer. Note that the 10 most recent sources are always available on the <code>Customer</code> object. If you need more than those 10, you can use this API method and the <code>limit</code> and <code>starting_after</code> parameters to page through additional cards.</p>
   * @name GetCustomersCustomerCards
   * @request GET:/v1/customers/{customer}/cards
   * @deprecated
   * @secure
   * @response `200` `{ data: (Card)[], has_more: boolean, object: "list", url: string }` Successful response.
   * @response `default` `Error` Error response.
   */
  export namespace GetCustomersCustomerCards {
    export type RequestParams = { customer: string };
    export type RequestQuery = { ending_before?: string; expand?: string[]; limit?: number; starting_after?: string };
    export type RequestBody = CardMandatePaymentMethodDetails;
    export type RequestHeaders = {};
    export type ResponseBody = { data: Card[]; has_more: boolean; object: "list"; url: string };
  }
  /**
   * @description <p>When you create a new credit card, you must specify a customer or recipient on which to create it.</p> <p>If the card’s owner has no default card, then the new card will become the default. However, if the owner already has a default, then it will not change. To change the default, you should <a href="/docs/api#update_customer">update the customer</a> to have a new <code>default_source</code>.</p>
   * @name PostCustomersCustomerCards
   * @request POST:/v1/customers/{customer}/cards
   * @secure
   * @response `200` `PaymentSource` Successful response.
   * @response `default` `Error` Error response.
   */
  export namespace PostCustomersCustomerCards {
    export type RequestParams = { customer: string };
    export type RequestQuery = {};
    export type RequestBody = {
      alipay_account?: string;
      bank_account?:
        | {
            account_holder_name?: string;
            account_holder_type?: "company" | "individual";
            account_number: string;
            country: string;
            currency?: string;
            object?: "bank_account";
            routing_number?: string;
          }
        | string;
      card?:
        | {
            address_city?: string;
            address_country?: string;
            address_line1?: string;
            address_line2?: string;
            address_state?: string;
            address_zip?: string;
            cvc?: string;
            exp_month: number;
            exp_year: number;
            metadata?: Record<string, string>;
            name?: string;
            number: string;
            object?: "card";
          }
        | string;
      expand?: string[];
      metadata?: Record<string, string>;
      source?: string;
    };
    export type RequestHeaders = {};
    export type ResponseBody = PaymentSource;
  }
  /**
   * @description <p>Delete a specified source for a given customer.</p>
   * @name DeleteCustomersCustomerCardsId
   * @request DELETE:/v1/customers/{customer}/cards/{id}
   * @secure
   * @response `200` `(PaymentSource | DeletedPaymentSource | (PaymentSource & DeletedPaymentSource))` Successful response.
   * @response `default` `Error` Error response.
   */
  export namespace DeleteCustomersCustomerCardsId {
    export type RequestParams = { customer: string; id: string };
    export type RequestQuery = {};
    export type RequestBody = { expand?: string[] };
    export type RequestHeaders = {};
    export type ResponseBody = PaymentSource | DeletedPaymentSource | (PaymentSource & DeletedPaymentSource);
  }
  /**
   * @description <p>You can always see the 10 most recent cards directly on a customer; this method lets you retrieve details about a specific card stored on the customer.</p>
   * @name GetCustomersCustomerCardsId
   * @request GET:/v1/customers/{customer}/cards/{id}
   * @deprecated
   * @secure
   * @response `200` `Card` Successful response.
   * @response `default` `Error` Error response.
   */
  export namespace GetCustomersCustomerCardsId {
    export type RequestParams = { customer: string; id: string };
    export type RequestQuery = { expand?: string[] };
    export type RequestBody = CardMandatePaymentMethodDetails;
    export type RequestHeaders = {};
    export type ResponseBody = Card;
  }
  /**
   * @description <p>Update a specified source for a given customer.</p>
   * @name PostCustomersCustomerCardsId
   * @request POST:/v1/customers/{customer}/cards/{id}
   * @secure
   * @response `200` `(Card | BankAccount | Source | (Card & BankAccount & Source))` Successful response.
   * @response `default` `Error` Error response.
   */
  export namespace PostCustomersCustomerCardsId {
    export type RequestParams = { customer: string; id: string };
    export type RequestQuery = {};
    export type RequestBody = {
      account_holder_name?: string;
      account_holder_type?: "company" | "individual";
      address_city?: string;
      address_country?: string;
      address_line1?: string;
      address_line2?: string;
      address_state?: string;
      address_zip?: string;
      exp_month?: string;
      exp_year?: string;
      expand?: string[];
      metadata?: Record<string, string> | "" | (Record<string, string> & "");
      name?: string;
      owner?: {
        address?: {
          city?: string;
          country?: string;
          line1?: string;
          line2?: string;
          postal_code?: string;
          state?: string;
        };
        email?: string;
        name?: string;
        phone?: string;
      };
    };
    export type RequestHeaders = {};
    export type ResponseBody = Card | BankAccount | Source | (Card & BankAccount & Source);
  }
  /**
   * @description <p>Removes the currently applied discount on a customer.</p>
   * @name DeleteCustomersCustomerDiscount
   * @request DELETE:/v1/customers/{customer}/discount
   * @secure
   * @response `200` `DeletedDiscount` Successful response.
   * @response `default` `Error` Error response.
   */
  export namespace DeleteCustomersCustomerDiscount {
    export type RequestParams = { customer: string };
    export type RequestQuery = {};
    export type RequestBody = CardMandatePaymentMethodDetails;
    export type RequestHeaders = {};
    export type ResponseBody = DeletedDiscount;
  }
  /**
   * No description
   * @name GetCustomersCustomerDiscount
   * @request GET:/v1/customers/{customer}/discount
   * @secure
   * @response `200` `Discount` Successful response.
   * @response `default` `Error` Error response.
   */
  export namespace GetCustomersCustomerDiscount {
    export type RequestParams = { customer: string };
    export type RequestQuery = { expand?: string[] };
    export type RequestBody = CardMandatePaymentMethodDetails;
    export type RequestHeaders = {};
    export type ResponseBody = Discount;
  }
  /**
   * @description <p>Returns a list of PaymentMethods for a given Customer</p>
   * @name GetCustomersCustomerPaymentMethods
   * @request GET:/v1/customers/{customer}/payment_methods
   * @secure
   * @response `200` `{ data: (PaymentMethod)[], has_more: boolean, object: "list", url: string }` Successful response.
   * @response `default` `Error` Error response.
   */
  export namespace GetCustomersCustomerPaymentMethods {
    export type RequestParams = { customer: string };
    export type RequestQuery = {
      ending_before?: string;
      expand?: string[];
      limit?: number;
      starting_after?: string;
      type:
        | "acss_debit"
        | "afterpay_clearpay"
        | "alipay"
        | "au_becs_debit"
        | "bacs_debit"
        | "bancontact"
        | "boleto"
        | "card"
        | "eps"
        | "fpx"
        | "giropay"
        | "grabpay"
        | "ideal"
        | "klarna"
        | "oxxo"
        | "p24"
        | "sepa_debit"
        | "sofort"
        | "wechat_pay";
    };
    export type RequestBody = CardMandatePaymentMethodDetails;
    export type RequestHeaders = {};
    export type ResponseBody = { data: PaymentMethod[]; has_more: boolean; object: "list"; url: string };
  }
  /**
   * @description <p>List sources for a specified customer.</p>
   * @name GetCustomersCustomerSources
   * @request GET:/v1/customers/{customer}/sources
   * @secure
   * @response `200` `{ data: ((AlipayAccount | BankAccount | BitcoinReceiver | Card | Source | (AlipayAccount & BankAccount & BitcoinReceiver & Card & Source)))[], has_more: boolean, object: "list", url: string }` Successful response.
   * @response `default` `Error` Error response.
   */
  export namespace GetCustomersCustomerSources {
    export type RequestParams = { customer: string };
    export type RequestQuery = {
      ending_before?: string;
      expand?: string[];
      limit?: number;
      object?: string;
      starting_after?: string;
    };
    export type RequestBody = CardMandatePaymentMethodDetails;
    export type RequestHeaders = {};
    export type ResponseBody = {
      data: (
        | AlipayAccount
        | BankAccount
        | BitcoinReceiver
        | Card
        | Source
        | (AlipayAccount & BankAccount & BitcoinReceiver & Card & Source)
      )[];
      has_more: boolean;
      object: "list";
      url: string;
    };
  }
  /**
   * @description <p>When you create a new credit card, you must specify a customer or recipient on which to create it.</p> <p>If the card’s owner has no default card, then the new card will become the default. However, if the owner already has a default, then it will not change. To change the default, you should <a href="/docs/api#update_customer">update the customer</a> to have a new <code>default_source</code>.</p>
   * @name PostCustomersCustomerSources
   * @request POST:/v1/customers/{customer}/sources
   * @secure
   * @response `200` `PaymentSource` Successful response.
   * @response `default` `Error` Error response.
   */
  export namespace PostCustomersCustomerSources {
    export type RequestParams = { customer: string };
    export type RequestQuery = {};
    export type RequestBody = {
      alipay_account?: string;
      bank_account?:
        | {
            account_holder_name?: string;
            account_holder_type?: "company" | "individual";
            account_number: string;
            country: string;
            currency?: string;
            object?: "bank_account";
            routing_number?: string;
          }
        | string;
      card?:
        | {
            address_city?: string;
            address_country?: string;
            address_line1?: string;
            address_line2?: string;
            address_state?: string;
            address_zip?: string;
            cvc?: string;
            exp_month: number;
            exp_year: number;
            metadata?: Record<string, string>;
            name?: string;
            number: string;
            object?: "card";
          }
        | string;
      expand?: string[];
      metadata?: Record<string, string>;
      source?: string;
    };
    export type RequestHeaders = {};
    export type ResponseBody = PaymentSource;
  }
  /**
   * @description <p>Delete a specified source for a given customer.</p>
   * @name DeleteCustomersCustomerSourcesId
   * @request DELETE:/v1/customers/{customer}/sources/{id}
   * @secure
   * @response `200` `(PaymentSource | DeletedPaymentSource | (PaymentSource & DeletedPaymentSource))` Successful response.
   * @response `default` `Error` Error response.
   */
  export namespace DeleteCustomersCustomerSourcesId {
    export type RequestParams = { customer: string; id: string };
    export type RequestQuery = {};
    export type RequestBody = { expand?: string[] };
    export type RequestHeaders = {};
    export type ResponseBody = PaymentSource | DeletedPaymentSource | (PaymentSource & DeletedPaymentSource);
  }
  /**
   * @description <p>Retrieve a specified source for a given customer.</p>
   * @name GetCustomersCustomerSourcesId
   * @request GET:/v1/customers/{customer}/sources/{id}
   * @secure
   * @response `200` `PaymentSource` Successful response.
   * @response `default` `Error` Error response.
   */
  export namespace GetCustomersCustomerSourcesId {
    export type RequestParams = { customer: string; id: string };
    export type RequestQuery = { expand?: string[] };
    export type RequestBody = CardMandatePaymentMethodDetails;
    export type RequestHeaders = {};
    export type ResponseBody = PaymentSource;
  }
  /**
   * @description <p>Update a specified source for a given customer.</p>
   * @name PostCustomersCustomerSourcesId
   * @request POST:/v1/customers/{customer}/sources/{id}
   * @secure
   * @response `200` `(Card | BankAccount | Source | (Card & BankAccount & Source))` Successful response.
   * @response `default` `Error` Error response.
   */
  export namespace PostCustomersCustomerSourcesId {
    export type RequestParams = { customer: string; id: string };
    export type RequestQuery = {};
    export type RequestBody = {
      account_holder_name?: string;
      account_holder_type?: "company" | "individual";
      address_city?: string;
      address_country?: string;
      address_line1?: string;
      address_line2?: string;
      address_state?: string;
      address_zip?: string;
      exp_month?: string;
      exp_year?: string;
      expand?: string[];
      metadata?: Record<string, string> | "" | (Record<string, string> & "");
      name?: string;
      owner?: {
        address?: {
          city?: string;
          country?: string;
          line1?: string;
          line2?: string;
          postal_code?: string;
          state?: string;
        };
        email?: string;
        name?: string;
        phone?: string;
      };
    };
    export type RequestHeaders = {};
    export type ResponseBody = Card | BankAccount | Source | (Card & BankAccount & Source);
  }
  /**
   * @description <p>Verify a specified bank account for a given customer.</p>
   * @name PostCustomersCustomerSourcesIdVerify
   * @request POST:/v1/customers/{customer}/sources/{id}/verify
   * @secure
   * @response `200` `BankAccount` Successful response.
   * @response `default` `Error` Error response.
   */
  export namespace PostCustomersCustomerSourcesIdVerify {
    export type RequestParams = { customer: string; id: string };
    export type RequestQuery = {};
    export type RequestBody = { amounts?: number[]; expand?: string[] };
    export type RequestHeaders = {};
    export type ResponseBody = BankAccount;
  }
  /**
   * @description <p>You can see a list of the customer’s active subscriptions. Note that the 10 most recent active subscriptions are always available by default on the customer object. If you need more than those 10, you can use the limit and starting_after parameters to page through additional subscriptions.</p>
   * @name GetCustomersCustomerSubscriptions
   * @request GET:/v1/customers/{customer}/subscriptions
   * @secure
   * @response `200` `{ data: (Subscription)[], has_more: boolean, object: "list", url: string }` Successful response.
   * @response `default` `Error` Error response.
   */
  export namespace GetCustomersCustomerSubscriptions {
    export type RequestParams = { customer: string };
    export type RequestQuery = { ending_before?: string; expand?: string[]; limit?: number; starting_after?: string };
    export type RequestBody = CardMandatePaymentMethodDetails;
    export type RequestHeaders = {};
    export type ResponseBody = { data: Subscription[]; has_more: boolean; object: "list"; url: string };
  }
  /**
   * @description <p>Creates a new subscription on an existing customer.</p>
   * @name PostCustomersCustomerSubscriptions
   * @request POST:/v1/customers/{customer}/subscriptions
   * @secure
   * @response `200` `Subscription` Successful response.
   * @response `default` `Error` Error response.
   */
  export namespace PostCustomersCustomerSubscriptions {
    export type RequestParams = { customer: string };
    export type RequestQuery = {};
    export type RequestBody = {
      add_invoice_items?: {
        price?: string;
        price_data?: {
          currency: string;
          product: string;
          tax_behavior?: "exclusive" | "inclusive" | "unspecified";
          unit_amount?: number;
          unit_amount_decimal?: string;
        };
        quantity?: number;
        tax_rates?: string[] | "" | (string[] & "");
      }[];
      application_fee_percent?: number;
      automatic_tax?: { enabled: boolean };
      backdate_start_date?: number;
      billing_cycle_anchor?: number;
      billing_thresholds?:
        | { amount_gte?: number; reset_billing_cycle_anchor?: boolean }
        | ""
        | ({ amount_gte?: number; reset_billing_cycle_anchor?: boolean } & "");
      cancel_at?: number;
      cancel_at_period_end?: boolean;
      collection_method?: "charge_automatically" | "send_invoice";
      coupon?: string;
      days_until_due?: number;
      default_payment_method?: string;
      default_source?: string;
      default_tax_rates?: string[] | "" | (string[] & "");
      expand?: string[];
      items?: {
        billing_thresholds?: { usage_gte: number } | "" | ({ usage_gte: number } & "");
        metadata?: Record<string, string>;
        price?: string;
        price_data?: {
          currency: string;
          product: string;
          recurring: { interval: "day" | "month" | "week" | "year"; interval_count?: number };
          tax_behavior?: "exclusive" | "inclusive" | "unspecified";
          unit_amount?: number;
          unit_amount_decimal?: string;
        };
        quantity?: number;
        tax_rates?: string[] | "" | (string[] & "");
      }[];
      metadata?: Record<string, string> | "" | (Record<string, string> & "");
      off_session?: boolean;
      payment_behavior?: "allow_incomplete" | "default_incomplete" | "error_if_incomplete" | "pending_if_incomplete";
      payment_settings?: {
        payment_method_options?: {
          acss_debit?:
            | {
                mandate_options?: { transaction_type?: "business" | "personal" };
                verification_method?: "automatic" | "instant" | "microdeposits";
              }
            | ""
            | ({
                mandate_options?: { transaction_type?: "business" | "personal" };
                verification_method?: "automatic" | "instant" | "microdeposits";
              } & "");
          bancontact?:
            | { preferred_language?: "de" | "en" | "fr" | "nl" }
            | ""
            | ({ preferred_language?: "de" | "en" | "fr" | "nl" } & "");
          card?:
            | {
                mandate_options?: { amount?: number; amount_type?: "fixed" | "maximum"; description?: string };
                request_three_d_secure?: "any" | "automatic";
              }
            | ""
            | ({
                mandate_options?: { amount?: number; amount_type?: "fixed" | "maximum"; description?: string };
                request_three_d_secure?: "any" | "automatic";
              } & "");
        };
        payment_method_types?:
          | (
              | "ach_credit_transfer"
              | "ach_debit"
              | "acss_debit"
              | "au_becs_debit"
              | "bacs_debit"
              | "bancontact"
              | "boleto"
              | "card"
              | "fpx"
              | "giropay"
              | "ideal"
              | "sepa_debit"
              | "sofort"
              | "wechat_pay"
            )[]
          | ""
          | ((
              | "ach_credit_transfer"
              | "ach_debit"
              | "acss_debit"
              | "au_becs_debit"
              | "bacs_debit"
              | "bancontact"
              | "boleto"
              | "card"
              | "fpx"
              | "giropay"
              | "ideal"
              | "sepa_debit"
              | "sofort"
              | "wechat_pay"
            )[] &
              "");
      };
      pending_invoice_item_interval?:
        | { interval: "day" | "month" | "week" | "year"; interval_count?: number }
        | ""
        | ({ interval: "day" | "month" | "week" | "year"; interval_count?: number } & "");
      promotion_code?: string;
      proration_behavior?: "always_invoice" | "create_prorations" | "none";
      transfer_data?: { amount_percent?: number; destination: string };
      trial_end?: "now" | number;
      trial_from_plan?: boolean;
      trial_period_days?: number;
    };
    export type RequestHeaders = {};
    export type ResponseBody = Subscription;
  }
  /**
   * @description <p>Cancels a customer’s subscription. If you set the <code>at_period_end</code> parameter to <code>true</code>, the subscription will remain active until the end of the period, at which point it will be canceled and not renewed. Otherwise, with the default <code>false</code> value, the subscription is terminated immediately. In either case, the customer will not be charged again for the subscription.</p> <p>Note, however, that any pending invoice items that you’ve created will still be charged for at the end of the period, unless manually <a href="#delete_invoiceitem">deleted</a>. If you’ve set the subscription to cancel at the end of the period, any pending prorations will also be left in place and collected at the end of the period. But if the subscription is set to cancel immediately, pending prorations will be removed.</p> <p>By default, upon subscription cancellation, Stripe will stop automatic collection of all finalized invoices for the customer. This is intended to prevent unexpected payment attempts after the customer has canceled a subscription. However, you can resume automatic collection of the invoices manually after subscription cancellation to have us proceed. Or, you could check for unpaid invoices before allowing the customer to cancel the subscription at all.</p>
   * @name DeleteCustomersCustomerSubscriptionsSubscriptionExposedId
   * @request DELETE:/v1/customers/{customer}/subscriptions/{subscription_exposed_id}
   * @secure
   * @response `200` `Subscription` Successful response.
   * @response `default` `Error` Error response.
   */
  export namespace DeleteCustomersCustomerSubscriptionsSubscriptionExposedId {
    export type RequestParams = { customer: string; subscriptionExposedId: string };
    export type RequestQuery = {};
    export type RequestBody = { expand?: string[]; invoice_now?: boolean; prorate?: boolean };
    export type RequestHeaders = {};
    export type ResponseBody = Subscription;
  }
  /**
   * @description <p>Retrieves the subscription with the given ID.</p>
   * @name GetCustomersCustomerSubscriptionsSubscriptionExposedId
   * @request GET:/v1/customers/{customer}/subscriptions/{subscription_exposed_id}
   * @secure
   * @response `200` `Subscription` Successful response.
   * @response `default` `Error` Error response.
   */
  export namespace GetCustomersCustomerSubscriptionsSubscriptionExposedId {
    export type RequestParams = { customer: string; subscriptionExposedId: string };
    export type RequestQuery = { expand?: string[] };
    export type RequestBody = CardMandatePaymentMethodDetails;
    export type RequestHeaders = {};
    export type ResponseBody = Subscription;
  }
  /**
   * @description <p>Updates an existing subscription on a customer to match the specified parameters. When changing plans or quantities, we will optionally prorate the price we charge next month to make up for any price changes. To preview how the proration will be calculated, use the <a href="#upcoming_invoice">upcoming invoice</a> endpoint.</p>
   * @name PostCustomersCustomerSubscriptionsSubscriptionExposedId
   * @request POST:/v1/customers/{customer}/subscriptions/{subscription_exposed_id}
   * @secure
   * @response `200` `Subscription` Successful response.
   * @response `default` `Error` Error response.
   */
  export namespace PostCustomersCustomerSubscriptionsSubscriptionExposedId {
    export type RequestParams = { customer: string; subscriptionExposedId: string };
    export type RequestQuery = {};
    export type RequestBody = {
      add_invoice_items?: {
        price?: string;
        price_data?: {
          currency: string;
          product: string;
          tax_behavior?: "exclusive" | "inclusive" | "unspecified";
          unit_amount?: number;
          unit_amount_decimal?: string;
        };
        quantity?: number;
        tax_rates?: string[] | "" | (string[] & "");
      }[];
      application_fee_percent?: number;
      automatic_tax?: { enabled: boolean };
      billing_cycle_anchor?: "now" | "unchanged";
      billing_thresholds?:
        | { amount_gte?: number; reset_billing_cycle_anchor?: boolean }
        | ""
        | ({ amount_gte?: number; reset_billing_cycle_anchor?: boolean } & "");
      cancel_at?: number | "";
      cancel_at_period_end?: boolean;
      collection_method?: "charge_automatically" | "send_invoice";
      coupon?: string;
      days_until_due?: number;
      default_payment_method?: string;
      default_source?: string;
      default_tax_rates?: string[] | "" | (string[] & "");
      expand?: string[];
      items?: {
        billing_thresholds?: { usage_gte: number } | "" | ({ usage_gte: number } & "");
        clear_usage?: boolean;
        deleted?: boolean;
        id?: string;
        metadata?: Record<string, string> | "" | (Record<string, string> & "");
        price?: string;
        price_data?: {
          currency: string;
          product: string;
          recurring: { interval: "day" | "month" | "week" | "year"; interval_count?: number };
          tax_behavior?: "exclusive" | "inclusive" | "unspecified";
          unit_amount?: number;
          unit_amount_decimal?: string;
        };
        quantity?: number;
        tax_rates?: string[] | "" | (string[] & "");
      }[];
      metadata?: Record<string, string> | "" | (Record<string, string> & "");
      off_session?: boolean;
      pause_collection?:
        | { behavior: "keep_as_draft" | "mark_uncollectible" | "void"; resumes_at?: number }
        | ""
        | ({ behavior: "keep_as_draft" | "mark_uncollectible" | "void"; resumes_at?: number } & "");
      payment_behavior?: "allow_incomplete" | "default_incomplete" | "error_if_incomplete" | "pending_if_incomplete";
      payment_settings?: {
        payment_method_options?: {
          acss_debit?:
            | {
                mandate_options?: { transaction_type?: "business" | "personal" };
                verification_method?: "automatic" | "instant" | "microdeposits";
              }
            | ""
            | ({
                mandate_options?: { transaction_type?: "business" | "personal" };
                verification_method?: "automatic" | "instant" | "microdeposits";
              } & "");
          bancontact?:
            | { preferred_language?: "de" | "en" | "fr" | "nl" }
            | ""
            | ({ preferred_language?: "de" | "en" | "fr" | "nl" } & "");
          card?:
            | {
                mandate_options?: { amount?: number; amount_type?: "fixed" | "maximum"; description?: string };
                request_three_d_secure?: "any" | "automatic";
              }
            | ""
            | ({
                mandate_options?: { amount?: number; amount_type?: "fixed" | "maximum"; description?: string };
                request_three_d_secure?: "any" | "automatic";
              } & "");
        };
        payment_method_types?:
          | (
              | "ach_credit_transfer"
              | "ach_debit"
              | "acss_debit"
              | "au_becs_debit"
              | "bacs_debit"
              | "bancontact"
              | "boleto"
              | "card"
              | "fpx"
              | "giropay"
              | "ideal"
              | "sepa_debit"
              | "sofort"
              | "wechat_pay"
            )[]
          | ""
          | ((
              | "ach_credit_transfer"
              | "ach_debit"
              | "acss_debit"
              | "au_becs_debit"
              | "bacs_debit"
              | "bancontact"
              | "boleto"
              | "card"
              | "fpx"
              | "giropay"
              | "ideal"
              | "sepa_debit"
              | "sofort"
              | "wechat_pay"
            )[] &
              "");
      };
      pending_invoice_item_interval?:
        | { interval: "day" | "month" | "week" | "year"; interval_count?: number }
        | ""
        | ({ interval: "day" | "month" | "week" | "year"; interval_count?: number } & "");
      promotion_code?: string;
      proration_behavior?: "always_invoice" | "create_prorations" | "none";
      proration_date?: number;
      transfer_data?:
        | { amount_percent?: number; destination: string }
        | ""
        | ({ amount_percent?: number; destination: string } & "");
      trial_end?: "now" | number;
      trial_from_plan?: boolean;
    };
    export type RequestHeaders = {};
    export type ResponseBody = Subscription;
  }
  /**
   * @description <p>Removes the currently applied discount on a customer.</p>
   * @name DeleteCustomersCustomerSubscriptionsSubscriptionExposedIdDiscount
   * @request DELETE:/v1/customers/{customer}/subscriptions/{subscription_exposed_id}/discount
   * @secure
   * @response `200` `DeletedDiscount` Successful response.
   * @response `default` `Error` Error response.
   */
  export namespace DeleteCustomersCustomerSubscriptionsSubscriptionExposedIdDiscount {
    export type RequestParams = { customer: string; subscriptionExposedId: string };
    export type RequestQuery = {};
    export type RequestBody = CardMandatePaymentMethodDetails;
    export type RequestHeaders = {};
    export type ResponseBody = DeletedDiscount;
  }
  /**
   * No description
   * @name GetCustomersCustomerSubscriptionsSubscriptionExposedIdDiscount
   * @request GET:/v1/customers/{customer}/subscriptions/{subscription_exposed_id}/discount
   * @secure
   * @response `200` `Discount` Successful response.
   * @response `default` `Error` Error response.
   */
  export namespace GetCustomersCustomerSubscriptionsSubscriptionExposedIdDiscount {
    export type RequestParams = { customer: string; subscriptionExposedId: string };
    export type RequestQuery = { expand?: string[] };
    export type RequestBody = CardMandatePaymentMethodDetails;
    export type RequestHeaders = {};
    export type ResponseBody = Discount;
  }
  /**
   * @description <p>Returns a list of tax IDs for a customer.</p>
   * @name GetCustomersCustomerTaxIds
   * @request GET:/v1/customers/{customer}/tax_ids
   * @secure
   * @response `200` `{ data: (TaxId)[], has_more: boolean, object: "list", url: string }` Successful response.
   * @response `default` `Error` Error response.
   */
  export namespace GetCustomersCustomerTaxIds {
    export type RequestParams = { customer: string };
    export type RequestQuery = { ending_before?: string; expand?: string[]; limit?: number; starting_after?: string };
    export type RequestBody = CardMandatePaymentMethodDetails;
    export type RequestHeaders = {};
    export type ResponseBody = { data: TaxId[]; has_more: boolean; object: "list"; url: string };
  }
  /**
   * @description <p>Creates a new <code>TaxID</code> object for a customer.</p>
   * @name PostCustomersCustomerTaxIds
   * @request POST:/v1/customers/{customer}/tax_ids
   * @secure
   * @response `200` `TaxId` Successful response.
   * @response `default` `Error` Error response.
   */
  export namespace PostCustomersCustomerTaxIds {
    export type RequestParams = { customer: string };
    export type RequestQuery = {};
    export type RequestBody = {
      expand?: string[];
      type:
        | "ae_trn"
        | "au_abn"
        | "au_arn"
        | "br_cnpj"
        | "br_cpf"
        | "ca_bn"
        | "ca_gst_hst"
        | "ca_pst_bc"
        | "ca_pst_mb"
        | "ca_pst_sk"
        | "ca_qst"
        | "ch_vat"
        | "cl_tin"
        | "es_cif"
        | "eu_vat"
        | "gb_vat"
        | "ge_vat"
        | "hk_br"
        | "id_npwp"
        | "il_vat"
        | "in_gst"
        | "jp_cn"
        | "jp_rn"
        | "kr_brn"
        | "li_uid"
        | "mx_rfc"
        | "my_frp"
        | "my_itn"
        | "my_sst"
        | "no_vat"
        | "nz_gst"
        | "ru_inn"
        | "ru_kpp"
        | "sa_vat"
        | "sg_gst"
        | "sg_uen"
        | "th_vat"
        | "tw_vat"
        | "ua_vat"
        | "us_ein"
        | "za_vat";
      value: string;
    };
    export type RequestHeaders = {};
    export type ResponseBody = TaxId;
  }
  /**
   * @description <p>Deletes an existing <code>TaxID</code> object.</p>
   * @name DeleteCustomersCustomerTaxIdsId
   * @request DELETE:/v1/customers/{customer}/tax_ids/{id}
   * @secure
   * @response `200` `DeletedTaxId` Successful response.
   * @response `default` `Error` Error response.
   */
  export namespace DeleteCustomersCustomerTaxIdsId {
    export type RequestParams = { customer: string; id: string };
    export type RequestQuery = {};
    export type RequestBody = CardMandatePaymentMethodDetails;
    export type RequestHeaders = {};
    export type ResponseBody = DeletedTaxId;
  }
  /**
   * @description <p>Retrieves the <code>TaxID</code> object with the given identifier.</p>
   * @name GetCustomersCustomerTaxIdsId
   * @request GET:/v1/customers/{customer}/tax_ids/{id}
   * @secure
   * @response `200` `TaxId` Successful response.
   * @response `default` `Error` Error response.
   */
  export namespace GetCustomersCustomerTaxIdsId {
    export type RequestParams = { customer: string; id: string };
    export type RequestQuery = { expand?: string[] };
    export type RequestBody = CardMandatePaymentMethodDetails;
    export type RequestHeaders = {};
    export type ResponseBody = TaxId;
  }
  /**
   * @description <p>Returns a list of your disputes.</p>
   * @name GetDisputes
   * @request GET:/v1/disputes
   * @secure
   * @response `200` `{ data: (Dispute)[], has_more: boolean, object: "list", url: string }` Successful response.
   * @response `default` `Error` Error response.
   */
  export namespace GetDisputes {
    export type RequestParams = {};
    export type RequestQuery = {
      charge?: string;
      created?: { gt?: number; gte?: number; lt?: number; lte?: number } | number;
      ending_before?: string;
      expand?: string[];
      limit?: number;
      payment_intent?: string;
      starting_after?: string;
    };
    export type RequestBody = CardMandatePaymentMethodDetails;
    export type RequestHeaders = {};
    export type ResponseBody = { data: Dispute[]; has_more: boolean; object: "list"; url: string };
  }
  /**
   * @description <p>Retrieves the dispute with the given ID.</p>
   * @name GetDisputesDispute
   * @request GET:/v1/disputes/{dispute}
   * @secure
   * @response `200` `Dispute` Successful response.
   * @response `default` `Error` Error response.
   */
  export namespace GetDisputesDispute {
    export type RequestParams = { dispute: string };
    export type RequestQuery = { expand?: string[] };
    export type RequestBody = CardMandatePaymentMethodDetails;
    export type RequestHeaders = {};
    export type ResponseBody = Dispute;
  }
  /**
   * @description <p>When you get a dispute, contacting your customer is always the best first step. If that doesn’t work, you can submit evidence to help us resolve the dispute in your favor. You can do this in your <a href="https://dashboard.stripe.com/disputes">dashboard</a>, but if you prefer, you can use the API to submit evidence programmatically.</p> <p>Depending on your dispute type, different evidence fields will give you a better chance of winning your dispute. To figure out which evidence fields to provide, see our <a href="/docs/disputes/categories">guide to dispute types</a>.</p>
   * @name PostDisputesDispute
   * @request POST:/v1/disputes/{dispute}
   * @secure
   * @response `200` `Dispute` Successful response.
   * @response `default` `Error` Error response.
   */
  export namespace PostDisputesDispute {
    export type RequestParams = { dispute: string };
    export type RequestQuery = {};
    export type RequestBody = {
      evidence?: {
        access_activity_log?: string;
        billing_address?: string;
        cancellation_policy?: string;
        cancellation_policy_disclosure?: string;
        cancellation_rebuttal?: string;
        customer_communication?: string;
        customer_email_address?: string;
        customer_name?: string;
        customer_purchase_ip?: string;
        customer_signature?: string;
        duplicate_charge_documentation?: string;
        duplicate_charge_explanation?: string;
        duplicate_charge_id?: string;
        product_description?: string;
        receipt?: string;
        refund_policy?: string;
        refund_policy_disclosure?: string;
        refund_refusal_explanation?: string;
        service_date?: string;
        service_documentation?: string;
        shipping_address?: string;
        shipping_carrier?: string;
        shipping_date?: string;
        shipping_documentation?: string;
        shipping_tracking_number?: string;
        uncategorized_file?: string;
        uncategorized_text?: string;
      };
      expand?: string[];
      metadata?: Record<string, string> | "" | (Record<string, string> & "");
      submit?: boolean;
    };
    export type RequestHeaders = {};
    export type ResponseBody = Dispute;
  }
  /**
   * @description <p>Closing the dispute for a charge indicates that you do not have any evidence to submit and are essentially dismissing the dispute, acknowledging it as lost.</p> <p>The status of the dispute will change from <code>needs_response</code> to <code>lost</code>. <em>Closing a dispute is irreversible</em>.</p>
   * @name PostDisputesDisputeClose
   * @request POST:/v1/disputes/{dispute}/close
   * @secure
   * @response `200` `Dispute` Successful response.
   * @response `default` `Error` Error response.
   */
  export namespace PostDisputesDisputeClose {
    export type RequestParams = { dispute: string };
    export type RequestQuery = {};
    export type RequestBody = { expand?: string[] };
    export type RequestHeaders = {};
    export type ResponseBody = Dispute;
  }
  /**
   * @description <p>Creates a short-lived API key for a given resource.</p>
   * @name PostEphemeralKeys
   * @request POST:/v1/ephemeral_keys
   * @secure
   * @response `200` `EphemeralKey` Successful response.
   * @response `default` `Error` Error response.
   */
  export namespace PostEphemeralKeys {
    export type RequestParams = {};
    export type RequestQuery = {};
    export type RequestBody = { customer?: string; expand?: string[]; issuing_card?: string };
    export type RequestHeaders = {};
    export type ResponseBody = EphemeralKey;
  }
  /**
   * @description <p>Invalidates a short-lived API key for a given resource.</p>
   * @name DeleteEphemeralKeysKey
   * @request DELETE:/v1/ephemeral_keys/{key}
   * @secure
   * @response `200` `EphemeralKey` Successful response.
   * @response `default` `Error` Error response.
   */
  export namespace DeleteEphemeralKeysKey {
    export type RequestParams = { key: string };
    export type RequestQuery = {};
    export type RequestBody = { expand?: string[] };
    export type RequestHeaders = {};
    export type ResponseBody = EphemeralKey;
  }
  /**
   * @description <p>List events, going back up to 30 days. Each event data is rendered according to Stripe API version at its creation time, specified in <a href="/docs/api/events/object">event object</a> <code>api_version</code> attribute (not according to your current Stripe API version or <code>Stripe-Version</code> header).</p>
   * @name GetEvents
   * @request GET:/v1/events
   * @secure
   * @response `200` `{ data: (Event)[], has_more: boolean, object: "list", url: string }` Successful response.
   * @response `default` `Error` Error response.
   */
  export namespace GetEvents {
    export type RequestParams = {};
    export type RequestQuery = {
      created?: { gt?: number; gte?: number; lt?: number; lte?: number } | number;
      delivery_success?: boolean;
      ending_before?: string;
      expand?: string[];
      limit?: number;
      starting_after?: string;
      type?: string;
      types?: string[];
    };
    export type RequestBody = CardMandatePaymentMethodDetails;
    export type RequestHeaders = {};
    export type ResponseBody = { data: Event[]; has_more: boolean; object: "list"; url: string };
  }
  /**
   * @description <p>Retrieves the details of an event. Supply the unique identifier of the event, which you might have received in a webhook.</p>
   * @name GetEventsId
   * @request GET:/v1/events/{id}
   * @secure
   * @response `200` `Event` Successful response.
   * @response `default` `Error` Error response.
   */
  export namespace GetEventsId {
    export type RequestParams = { id: string };
    export type RequestQuery = { expand?: string[] };
    export type RequestBody = CardMandatePaymentMethodDetails;
    export type RequestHeaders = {};
    export type ResponseBody = Event;
  }
  /**
   * @description <p>Returns a list of objects that contain the rates at which foreign currencies are converted to one another. Only shows the currencies for which Stripe supports.</p>
   * @name GetExchangeRates
   * @request GET:/v1/exchange_rates
   * @secure
   * @response `200` `{ data: (ExchangeRate)[], has_more: boolean, object: "list", url: string }` Successful response.
   * @response `default` `Error` Error response.
   */
  export namespace GetExchangeRates {
    export type RequestParams = {};
    export type RequestQuery = { ending_before?: string; expand?: string[]; limit?: number; starting_after?: string };
    export type RequestBody = CardMandatePaymentMethodDetails;
    export type RequestHeaders = {};
    export type ResponseBody = { data: ExchangeRate[]; has_more: boolean; object: "list"; url: string };
  }
  /**
   * @description <p>Retrieves the exchange rates from the given currency to every supported currency.</p>
   * @name GetExchangeRatesRateId
   * @request GET:/v1/exchange_rates/{rate_id}
   * @secure
   * @response `200` `ExchangeRate` Successful response.
   * @response `default` `Error` Error response.
   */
  export namespace GetExchangeRatesRateId {
    export type RequestParams = { rateId: string };
    export type RequestQuery = { expand?: string[] };
    export type RequestBody = CardMandatePaymentMethodDetails;
    export type RequestHeaders = {};
    export type ResponseBody = ExchangeRate;
  }
  /**
   * @description <p>Returns a list of file links.</p>
   * @name GetFileLinks
   * @request GET:/v1/file_links
   * @secure
   * @response `200` `{ data: (FileLink)[], has_more: boolean, object: "list", url: string }` Successful response.
   * @response `default` `Error` Error response.
   */
  export namespace GetFileLinks {
    export type RequestParams = {};
    export type RequestQuery = {
      created?: { gt?: number; gte?: number; lt?: number; lte?: number } | number;
      ending_before?: string;
      expand?: string[];
      expired?: boolean;
      file?: string;
      limit?: number;
      starting_after?: string;
    };
    export type RequestBody = CardMandatePaymentMethodDetails;
    export type RequestHeaders = {};
    export type ResponseBody = { data: FileLink[]; has_more: boolean; object: "list"; url: string };
  }
  /**
   * @description <p>Creates a new file link object.</p>
   * @name PostFileLinks
   * @request POST:/v1/file_links
   * @secure
   * @response `200` `FileLink` Successful response.
   * @response `default` `Error` Error response.
   */
  export namespace PostFileLinks {
    export type RequestParams = {};
    export type RequestQuery = {};
    export type RequestBody = {
      expand?: string[];
      expires_at?: number;
      file: string;
      metadata?: Record<string, string> | "" | (Record<string, string> & "");
    };
    export type RequestHeaders = {};
    export type ResponseBody = FileLink;
  }
  /**
   * @description <p>Retrieves the file link with the given ID.</p>
   * @name GetFileLinksLink
   * @request GET:/v1/file_links/{link}
   * @secure
   * @response `200` `FileLink` Successful response.
   * @response `default` `Error` Error response.
   */
  export namespace GetFileLinksLink {
    export type RequestParams = { link: string };
    export type RequestQuery = { expand?: string[] };
    export type RequestBody = CardMandatePaymentMethodDetails;
    export type RequestHeaders = {};
    export type ResponseBody = FileLink;
  }
  /**
   * @description <p>Updates an existing file link object. Expired links can no longer be updated.</p>
   * @name PostFileLinksLink
   * @request POST:/v1/file_links/{link}
   * @secure
   * @response `200` `FileLink` Successful response.
   * @response `default` `Error` Error response.
   */
  export namespace PostFileLinksLink {
    export type RequestParams = { link: string };
    export type RequestQuery = {};
    export type RequestBody = {
      expand?: string[];
      expires_at?: "now" | number | "" | ("now" & "");
      metadata?: Record<string, string> | "" | (Record<string, string> & "");
    };
    export type RequestHeaders = {};
    export type ResponseBody = FileLink;
  }
  /**
   * @description <p>Returns a list of the files that your account has access to. The files are returned sorted by creation date, with the most recently created files appearing first.</p>
   * @name GetFiles
   * @request GET:/v1/files
   * @secure
   * @response `200` `{ data: (File)[], has_more: boolean, object: "list", url: string }` Successful response.
   * @response `default` `Error` Error response.
   */
  export namespace GetFiles {
    export type RequestParams = {};
    export type RequestQuery = {
      created?: { gt?: number; gte?: number; lt?: number; lte?: number } | number;
      ending_before?: string;
      expand?: string[];
      limit?: number;
      purpose?:
        | "account_requirement"
        | "additional_verification"
        | "business_icon"
        | "business_logo"
        | "customer_signature"
        | "dispute_evidence"
        | "document_provider_identity_document"
        | "finance_report_run"
        | "identity_document"
        | "identity_document_downloadable"
        | "pci_document"
        | "selfie"
        | "sigma_scheduled_query"
        | "tax_document_user_upload";
      starting_after?: string;
    };
    export type RequestBody = CardMandatePaymentMethodDetails;
    export type RequestHeaders = {};
    export type ResponseBody = { data: File[]; has_more: boolean; object: "list"; url: string };
  }
  /**
   * @description <p>To upload a file to Stripe, you’ll need to send a request of type <code>multipart/form-data</code>. The request should contain the file you would like to upload, as well as the parameters for creating a file.</p> <p>All of Stripe’s officially supported Client libraries should have support for sending <code>multipart/form-data</code>.</p>
   * @name PostFiles
   * @request POST:/v1/files
   * @secure
   * @response `200` `File` Successful response.
   * @response `default` `Error` Error response.
   */
  export namespace PostFiles {
    export type RequestParams = {};
    export type RequestQuery = {};
    export type RequestBody = {
      expand?: string[];
      file: string;
      file_link_data?: {
        create: boolean;
        expires_at?: number;
        metadata?: Record<string, string> | "" | (Record<string, string> & "");
      };
      purpose:
        | "account_requirement"
        | "additional_verification"
        | "business_icon"
        | "business_logo"
        | "customer_signature"
        | "dispute_evidence"
        | "identity_document"
        | "pci_document"
        | "tax_document_user_upload";
    };
    export type RequestHeaders = {};
    export type ResponseBody = File;
  }
  /**
   * @description <p>Retrieves the details of an existing file object. Supply the unique file ID from a file, and Stripe will return the corresponding file object. To access file contents, see the <a href="/docs/file-upload#download-file-contents">File Upload Guide</a>.</p>
   * @name GetFilesFile
   * @request GET:/v1/files/{file}
   * @secure
   * @response `200` `File` Successful response.
   * @response `default` `Error` Error response.
   */
  export namespace GetFilesFile {
    export type RequestParams = { file: string };
    export type RequestQuery = { expand?: string[] };
    export type RequestBody = CardMandatePaymentMethodDetails;
    export type RequestHeaders = {};
    export type ResponseBody = File;
  }
  /**
   * @description <p>List all verification reports.</p>
   * @name GetIdentityVerificationReports
   * @request GET:/v1/identity/verification_reports
   * @secure
   * @response `200` `{ data: (IdentityVerificationReport)[], has_more: boolean, object: "list", url: string }` Successful response.
   * @response `default` `Error` Error response.
   */
  export namespace GetIdentityVerificationReports {
    export type RequestParams = {};
    export type RequestQuery = {
      created?: { gt?: number; gte?: number; lt?: number; lte?: number } | number;
      ending_before?: string;
      expand?: string[];
      limit?: number;
      starting_after?: string;
      type?: "document" | "id_number";
      verification_session?: string;
    };
    export type RequestBody = CardMandatePaymentMethodDetails;
    export type RequestHeaders = {};
    export type ResponseBody = { data: IdentityVerificationReport[]; has_more: boolean; object: "list"; url: string };
  }
  /**
   * @description <p>Retrieves an existing VerificationReport</p>
   * @name GetIdentityVerificationReportsReport
   * @request GET:/v1/identity/verification_reports/{report}
   * @secure
   * @response `200` `IdentityVerificationReport` Successful response.
   * @response `default` `Error` Error response.
   */
  export namespace GetIdentityVerificationReportsReport {
    export type RequestParams = { report: string };
    export type RequestQuery = { expand?: string[] };
    export type RequestBody = CardMandatePaymentMethodDetails;
    export type RequestHeaders = {};
    export type ResponseBody = IdentityVerificationReport;
  }
  /**
   * @description <p>Returns a list of VerificationSessions</p>
   * @name GetIdentityVerificationSessions
   * @request GET:/v1/identity/verification_sessions
   * @secure
   * @response `200` `{ data: (IdentityVerificationSession)[], has_more: boolean, object: "list", url: string }` Successful response.
   * @response `default` `Error` Error response.
   */
  export namespace GetIdentityVerificationSessions {
    export type RequestParams = {};
    export type RequestQuery = {
      created?: { gt?: number; gte?: number; lt?: number; lte?: number } | number;
      ending_before?: string;
      expand?: string[];
      limit?: number;
      starting_after?: string;
      status?: "canceled" | "processing" | "requires_input" | "verified";
    };
    export type RequestBody = CardMandatePaymentMethodDetails;
    export type RequestHeaders = {};
    export type ResponseBody = { data: IdentityVerificationSession[]; has_more: boolean; object: "list"; url: string };
  }
  /**
   * @description <p>Creates a VerificationSession object.</p> <p>After the VerificationSession is created, display a verification modal using the session <code>client_secret</code> or send your users to the session’s <code>url</code>.</p> <p>If your API key is in test mode, verification checks won’t actually process, though everything else will occur as if in live mode.</p> <p>Related guide: <a href="/docs/identity/verify-identity-documents">Verify your users’ identity documents</a>.</p>
   * @name PostIdentityVerificationSessions
   * @request POST:/v1/identity/verification_sessions
   * @secure
   * @response `200` `IdentityVerificationSession` Successful response.
   * @response `default` `Error` Error response.
   */
  export namespace PostIdentityVerificationSessions {
    export type RequestParams = {};
    export type RequestQuery = {};
    export type RequestBody = {
      expand?: string[];
      metadata?: Record<string, string>;
      options?: {
        document?:
          | {
              allowed_types?: ("driving_license" | "id_card" | "passport")[];
              require_id_number?: boolean;
              require_live_capture?: boolean;
              require_matching_selfie?: boolean;
            }
          | ""
          | ({
              allowed_types?: ("driving_license" | "id_card" | "passport")[];
              require_id_number?: boolean;
              require_live_capture?: boolean;
              require_matching_selfie?: boolean;
            } & "");
      };
      return_url?: string;
      type: "document" | "id_number";
    };
    export type RequestHeaders = {};
    export type ResponseBody = IdentityVerificationSession;
  }
  /**
   * @description <p>Retrieves the details of a VerificationSession that was previously created.</p> <p>When the session status is <code>requires_input</code>, you can use this method to retrieve a valid <code>client_secret</code> or <code>url</code> to allow re-submission.</p>
   * @name GetIdentityVerificationSessionsSession
   * @request GET:/v1/identity/verification_sessions/{session}
   * @secure
   * @response `200` `IdentityVerificationSession` Successful response.
   * @response `default` `Error` Error response.
   */
  export namespace GetIdentityVerificationSessionsSession {
    export type RequestParams = { session: string };
    export type RequestQuery = { expand?: string[] };
    export type RequestBody = CardMandatePaymentMethodDetails;
    export type RequestHeaders = {};
    export type ResponseBody = IdentityVerificationSession;
  }
  /**
   * @description <p>Updates a VerificationSession object.</p> <p>When the session status is <code>requires_input</code>, you can use this method to update the verification check and options.</p>
   * @name PostIdentityVerificationSessionsSession
   * @request POST:/v1/identity/verification_sessions/{session}
   * @secure
   * @response `200` `IdentityVerificationSession` Successful response.
   * @response `default` `Error` Error response.
   */
  export namespace PostIdentityVerificationSessionsSession {
    export type RequestParams = { session: string };
    export type RequestQuery = {};
    export type RequestBody = {
      expand?: string[];
      metadata?: Record<string, string>;
      options?: {
        document?:
          | {
              allowed_types?: ("driving_license" | "id_card" | "passport")[];
              require_id_number?: boolean;
              require_live_capture?: boolean;
              require_matching_selfie?: boolean;
            }
          | ""
          | ({
              allowed_types?: ("driving_license" | "id_card" | "passport")[];
              require_id_number?: boolean;
              require_live_capture?: boolean;
              require_matching_selfie?: boolean;
            } & "");
      };
      type?: "document" | "id_number";
    };
    export type RequestHeaders = {};
    export type ResponseBody = IdentityVerificationSession;
  }
  /**
   * @description <p>A VerificationSession object can be canceled when it is in <code>requires_input</code> <a href="/docs/identity/how-sessions-work">status</a>.</p> <p>Once canceled, future submission attempts are disabled. This cannot be undone. <a href="/docs/identity/verification-sessions#cancel">Learn more</a>.</p>
   * @name PostIdentityVerificationSessionsSessionCancel
   * @request POST:/v1/identity/verification_sessions/{session}/cancel
   * @secure
   * @response `200` `IdentityVerificationSession` Successful response.
   * @response `default` `Error` Error response.
   */
  export namespace PostIdentityVerificationSessionsSessionCancel {
    export type RequestParams = { session: string };
    export type RequestQuery = {};
    export type RequestBody = { expand?: string[] };
    export type RequestHeaders = {};
    export type ResponseBody = IdentityVerificationSession;
  }
  /**
   * @description <p>Redact a VerificationSession to remove all collected information from Stripe. This will redact the VerificationSession and all objects related to it, including VerificationReports, Events, request logs, etc.</p> <p>A VerificationSession object can be redacted when it is in <code>requires_input</code> or <code>verified</code> <a href="/docs/identity/how-sessions-work">status</a>. Redacting a VerificationSession in <code>requires_action</code> state will automatically cancel it.</p> <p>The redaction process may take up to four days. When the redaction process is in progress, the VerificationSession’s <code>redaction.status</code> field will be set to <code>processing</code>; when the process is finished, it will change to <code>redacted</code> and an <code>identity.verification_session.redacted</code> event will be emitted.</p> <p>Redaction is irreversible. Redacted objects are still accessible in the Stripe API, but all the fields that contain personal data will be replaced by the string <code>[redacted]</code> or a similar placeholder. The <code>metadata</code> field will also be erased. Redacted objects cannot be updated or used for any purpose.</p> <p><a href="/docs/identity/verification-sessions#redact">Learn more</a>.</p>
   * @name PostIdentityVerificationSessionsSessionRedact
   * @request POST:/v1/identity/verification_sessions/{session}/redact
   * @secure
   * @response `200` `IdentityVerificationSession` Successful response.
   * @response `default` `Error` Error response.
   */
  export namespace PostIdentityVerificationSessionsSessionRedact {
    export type RequestParams = { session: string };
    export type RequestQuery = {};
    export type RequestBody = { expand?: string[] };
    export type RequestHeaders = {};
    export type ResponseBody = IdentityVerificationSession;
  }
  /**
   * @description <p>Returns a list of your invoice items. Invoice items are returned sorted by creation date, with the most recently created invoice items appearing first.</p>
   * @name GetInvoiceitems
   * @request GET:/v1/invoiceitems
   * @secure
   * @response `200` `{ data: (Invoiceitem)[], has_more: boolean, object: "list", url: string }` Successful response.
   * @response `default` `Error` Error response.
   */
  export namespace GetInvoiceitems {
    export type RequestParams = {};
    export type RequestQuery = {
      created?: { gt?: number; gte?: number; lt?: number; lte?: number } | number;
      customer?: string;
      ending_before?: string;
      expand?: string[];
      invoice?: string;
      limit?: number;
      pending?: boolean;
      starting_after?: string;
    };
    export type RequestBody = CardMandatePaymentMethodDetails;
    export type RequestHeaders = {};
    export type ResponseBody = { data: Invoiceitem[]; has_more: boolean; object: "list"; url: string };
  }
  /**
   * @description <p>Creates an item to be added to a draft invoice (up to 250 items per invoice). If no invoice is specified, the item will be on the next invoice created for the customer specified.</p>
   * @name PostInvoiceitems
   * @request POST:/v1/invoiceitems
   * @secure
   * @response `200` `Invoiceitem` Successful response.
   * @response `default` `Error` Error response.
   */
  export namespace PostInvoiceitems {
    export type RequestParams = {};
    export type RequestQuery = {};
    export type RequestBody = {
      amount?: number;
      currency?: string;
      customer: string;
      description?: string;
      discountable?: boolean;
      discounts?: { coupon?: string; discount?: string }[] | "" | ({ coupon?: string; discount?: string }[] & "");
      expand?: string[];
      invoice?: string;
      metadata?: Record<string, string> | "" | (Record<string, string> & "");
      period?: { end: number; start: number };
      price?: string;
      price_data?: {
        currency: string;
        product: string;
        tax_behavior?: "exclusive" | "inclusive" | "unspecified";
        unit_amount?: number;
        unit_amount_decimal?: string;
      };
      quantity?: number;
      subscription?: string;
      tax_rates?: string[];
      unit_amount?: number;
      unit_amount_decimal?: string;
    };
    export type RequestHeaders = {};
    export type ResponseBody = Invoiceitem;
  }
  /**
   * @description <p>Deletes an invoice item, removing it from an invoice. Deleting invoice items is only possible when they’re not attached to invoices, or if it’s attached to a draft invoice.</p>
   * @name DeleteInvoiceitemsInvoiceitem
   * @request DELETE:/v1/invoiceitems/{invoiceitem}
   * @secure
   * @response `200` `DeletedInvoiceitem` Successful response.
   * @response `default` `Error` Error response.
   */
  export namespace DeleteInvoiceitemsInvoiceitem {
    export type RequestParams = { invoiceitem: string };
    export type RequestQuery = {};
    export type RequestBody = CardMandatePaymentMethodDetails;
    export type RequestHeaders = {};
    export type ResponseBody = DeletedInvoiceitem;
  }
  /**
   * @description <p>Retrieves the invoice item with the given ID.</p>
   * @name GetInvoiceitemsInvoiceitem
   * @request GET:/v1/invoiceitems/{invoiceitem}
   * @secure
   * @response `200` `Invoiceitem` Successful response.
   * @response `default` `Error` Error response.
   */
  export namespace GetInvoiceitemsInvoiceitem {
    export type RequestParams = { invoiceitem: string };
    export type RequestQuery = { expand?: string[] };
    export type RequestBody = CardMandatePaymentMethodDetails;
    export type RequestHeaders = {};
    export type ResponseBody = Invoiceitem;
  }
  /**
   * @description <p>Updates the amount or description of an invoice item on an upcoming invoice. Updating an invoice item is only possible before the invoice it’s attached to is closed.</p>
   * @name PostInvoiceitemsInvoiceitem
   * @request POST:/v1/invoiceitems/{invoiceitem}
   * @secure
   * @response `200` `Invoiceitem` Successful response.
   * @response `default` `Error` Error response.
   */
  export namespace PostInvoiceitemsInvoiceitem {
    export type RequestParams = { invoiceitem: string };
    export type RequestQuery = {};
    export type RequestBody = {
      amount?: number;
      description?: string;
      discountable?: boolean;
      discounts?: { coupon?: string; discount?: string }[] | "" | ({ coupon?: string; discount?: string }[] & "");
      expand?: string[];
      metadata?: Record<string, string> | "" | (Record<string, string> & "");
      period?: { end: number; start: number };
      price?: string;
      price_data?: {
        currency: string;
        product: string;
        tax_behavior?: "exclusive" | "inclusive" | "unspecified";
        unit_amount?: number;
        unit_amount_decimal?: string;
      };
      quantity?: number;
      tax_rates?: string[] | "" | (string[] & "");
      unit_amount?: number;
      unit_amount_decimal?: string;
    };
    export type RequestHeaders = {};
    export type ResponseBody = Invoiceitem;
  }
  /**
   * @description <p>You can list all invoices, or list the invoices for a specific customer. The invoices are returned sorted by creation date, with the most recently created invoices appearing first.</p>
   * @name GetInvoices
   * @request GET:/v1/invoices
   * @secure
   * @response `200` `{ data: (Invoice)[], has_more: boolean, object: "list", url: string }` Successful response.
   * @response `default` `Error` Error response.
   */
  export namespace GetInvoices {
    export type RequestParams = {};
    export type RequestQuery = {
      collection_method?: "charge_automatically" | "send_invoice";
      created?: { gt?: number; gte?: number; lt?: number; lte?: number } | number;
      customer?: string;
      due_date?: { gt?: number; gte?: number; lt?: number; lte?: number } | number;
      ending_before?: string;
      expand?: string[];
      limit?: number;
      starting_after?: string;
      status?: "draft" | "open" | "paid" | "uncollectible" | "void";
      subscription?: string;
    };
    export type RequestBody = CardMandatePaymentMethodDetails;
    export type RequestHeaders = {};
    export type ResponseBody = { data: Invoice[]; has_more: boolean; object: "list"; url: string };
  }
  /**
   * @description <p>This endpoint creates a draft invoice for a given customer. The draft invoice created pulls in all pending invoice items on that customer, including prorations. The invoice remains a draft until you <a href="#finalize_invoice">finalize</a> the invoice, which allows you to <a href="#pay_invoice">pay</a> or <a href="#send_invoice">send</a> the invoice to your customers.</p>
   * @name PostInvoices
   * @request POST:/v1/invoices
   * @secure
   * @response `200` `Invoice` Successful response.
   * @response `default` `Error` Error response.
   */
  export namespace PostInvoices {
    export type RequestParams = {};
    export type RequestQuery = {};
    export type RequestBody = {
      account_tax_ids?: string[] | "" | (string[] & "");
      application_fee_amount?: number;
      auto_advance?: boolean;
      automatic_tax?: { enabled: boolean };
      collection_method?: "charge_automatically" | "send_invoice";
      custom_fields?: { name: string; value: string }[] | "" | ({ name: string; value: string }[] & "");
      customer: string;
      days_until_due?: number;
      default_payment_method?: string;
      default_source?: string;
      default_tax_rates?: string[];
      description?: string;
      discounts?: { coupon?: string; discount?: string }[] | "" | ({ coupon?: string; discount?: string }[] & "");
      due_date?: number;
      expand?: string[];
      footer?: string;
      metadata?: Record<string, string> | "" | (Record<string, string> & "");
      on_behalf_of?: string;
      payment_settings?: {
        payment_method_options?: {
          acss_debit?:
            | {
                mandate_options?: { transaction_type?: "business" | "personal" };
                verification_method?: "automatic" | "instant" | "microdeposits";
              }
            | ""
            | ({
                mandate_options?: { transaction_type?: "business" | "personal" };
                verification_method?: "automatic" | "instant" | "microdeposits";
              } & "");
          bancontact?:
            | { preferred_language?: "de" | "en" | "fr" | "nl" }
            | ""
            | ({ preferred_language?: "de" | "en" | "fr" | "nl" } & "");
          card?:
            | { request_three_d_secure?: "any" | "automatic" }
            | ""
            | ({ request_three_d_secure?: "any" | "automatic" } & "");
        };
        payment_method_types?:
          | (
              | "ach_credit_transfer"
              | "ach_debit"
              | "acss_debit"
              | "au_becs_debit"
              | "bacs_debit"
              | "bancontact"
              | "boleto"
              | "card"
              | "fpx"
              | "giropay"
              | "ideal"
              | "sepa_debit"
              | "sofort"
              | "wechat_pay"
            )[]
          | ""
          | ((
              | "ach_credit_transfer"
              | "ach_debit"
              | "acss_debit"
              | "au_becs_debit"
              | "bacs_debit"
              | "bancontact"
              | "boleto"
              | "card"
              | "fpx"
              | "giropay"
              | "ideal"
              | "sepa_debit"
              | "sofort"
              | "wechat_pay"
            )[] &
              "");
      };
      statement_descriptor?: string;
      subscription?: string;
      transfer_data?: { amount?: number; destination: string };
    };
    export type RequestHeaders = {};
    export type ResponseBody = Invoice;
  }
  /**
   * @description <p>At any time, you can preview the upcoming invoice for a customer. This will show you all the charges that are pending, including subscription renewal charges, invoice item charges, etc. It will also show you any discounts that are applicable to the invoice.</p> <p>Note that when you are viewing an upcoming invoice, you are simply viewing a preview – the invoice has not yet been created. As such, the upcoming invoice will not show up in invoice listing calls, and you cannot use the API to pay or edit the invoice. If you want to change the amount that your customer will be billed, you can add, remove, or update pending invoice items, or update the customer’s discount.</p> <p>You can preview the effects of updating a subscription, including a preview of what proration will take place. To ensure that the actual proration is calculated exactly the same as the previewed proration, you should pass a <code>proration_date</code> parameter when doing the actual subscription update. The value passed in should be the same as the <code>subscription_proration_date</code> returned on the upcoming invoice resource. The recommended way to get only the prorations being previewed is to consider only proration line items where <code>period[start]</code> is equal to the <code>subscription_proration_date</code> on the upcoming invoice resource.</p>
   * @name GetInvoicesUpcoming
   * @request GET:/v1/invoices/upcoming
   * @secure
   * @response `200` `Invoice` Successful response.
   * @response `default` `Error` Error response.
   */
  export namespace GetInvoicesUpcoming {
    export type RequestParams = {};
    export type RequestQuery = {
      automatic_tax?: { enabled: boolean };
      coupon?: string;
      customer?: string;
      customer_details?: {
        address?:
          | { city?: string; country?: string; line1?: string; line2?: string; postal_code?: string; state?: string }
          | ""
          | ({
              city?: string;
              country?: string;
              line1?: string;
              line2?: string;
              postal_code?: string;
              state?: string;
            } & "");
        shipping?:
          | {
              address: {
                city?: string;
                country?: string;
                line1?: string;
                line2?: string;
                postal_code?: string;
                state?: string;
              };
              name: string;
              phone?: string;
            }
          | ""
          | ({
              address: {
                city?: string;
                country?: string;
                line1?: string;
                line2?: string;
                postal_code?: string;
                state?: string;
              };
              name: string;
              phone?: string;
            } & "");
        tax?: { ip_address?: string | "" };
        tax_exempt?: "" | "exempt" | "none" | "reverse";
        tax_ids?: {
          type:
            | "ae_trn"
            | "au_abn"
            | "au_arn"
            | "br_cnpj"
            | "br_cpf"
            | "ca_bn"
            | "ca_gst_hst"
            | "ca_pst_bc"
            | "ca_pst_mb"
            | "ca_pst_sk"
            | "ca_qst"
            | "ch_vat"
            | "cl_tin"
            | "es_cif"
            | "eu_vat"
            | "gb_vat"
            | "ge_vat"
            | "hk_br"
            | "id_npwp"
            | "il_vat"
            | "in_gst"
            | "jp_cn"
            | "jp_rn"
            | "kr_brn"
            | "li_uid"
            | "mx_rfc"
            | "my_frp"
            | "my_itn"
            | "my_sst"
            | "no_vat"
            | "nz_gst"
            | "ru_inn"
            | "ru_kpp"
            | "sa_vat"
            | "sg_gst"
            | "sg_uen"
            | "th_vat"
            | "tw_vat"
            | "ua_vat"
            | "us_ein"
            | "za_vat";
          value: string;
        }[];
      };
      discounts?: { coupon?: string; discount?: string }[] | "" | ({ coupon?: string; discount?: string }[] & "");
      expand?: string[];
      invoice_items?: {
        amount?: number;
        currency?: string;
        description?: string;
        discountable?: boolean;
        discounts?: { coupon?: string; discount?: string }[] | "" | ({ coupon?: string; discount?: string }[] & "");
        invoiceitem?: string;
        metadata?: Record<string, string> | "" | (Record<string, string> & "");
        period?: { end: number; start: number };
        price?: string;
        price_data?: {
          currency: string;
          product: string;
          tax_behavior?: "exclusive" | "inclusive" | "unspecified";
          unit_amount?: number;
          unit_amount_decimal?: string;
        };
        quantity?: number;
        tax_rates?: string[] | "" | (string[] & "");
        unit_amount?: number;
        unit_amount_decimal?: string;
      }[];
      schedule?: string;
      subscription?: string;
      subscription_billing_cycle_anchor?: "now" | "unchanged" | number;
      subscription_cancel_at?: number | "";
      subscription_cancel_at_period_end?: boolean;
      subscription_cancel_now?: boolean;
      subscription_default_tax_rates?: string[] | "" | (string[] & "");
      subscription_items?: {
        billing_thresholds?: { usage_gte: number } | "" | ({ usage_gte: number } & "");
        clear_usage?: boolean;
        deleted?: boolean;
        id?: string;
        metadata?: Record<string, string> | "" | (Record<string, string> & "");
        price?: string;
        price_data?: {
          currency: string;
          product: string;
          recurring: { interval: "day" | "month" | "week" | "year"; interval_count?: number };
          tax_behavior?: "exclusive" | "inclusive" | "unspecified";
          unit_amount?: number;
          unit_amount_decimal?: string;
        };
        quantity?: number;
        tax_rates?: string[] | "" | (string[] & "");
      }[];
      subscription_proration_behavior?: "always_invoice" | "create_prorations" | "none";
      subscription_proration_date?: number;
      subscription_start_date?: number;
      subscription_trial_end?: "now" | number;
      subscription_trial_from_plan?: boolean;
    };
    export type RequestBody = CardMandatePaymentMethodDetails;
    export type RequestHeaders = {};
    export type ResponseBody = Invoice;
  }
  /**
   * @description <p>When retrieving an upcoming invoice, you’ll get a <strong>lines</strong> property containing the total count of line items and the first handful of those items. There is also a URL where you can retrieve the full (paginated) list of line items.</p>
   * @name GetInvoicesUpcomingLines
   * @request GET:/v1/invoices/upcoming/lines
   * @secure
   * @response `200` `{ data: (LineItem)[], has_more: boolean, object: "list", url: string }` Successful response.
   * @response `default` `Error` Error response.
   */
  export namespace GetInvoicesUpcomingLines {
    export type RequestParams = {};
    export type RequestQuery = {
      automatic_tax?: { enabled: boolean };
      coupon?: string;
      customer?: string;
      customer_details?: {
        address?:
          | { city?: string; country?: string; line1?: string; line2?: string; postal_code?: string; state?: string }
          | ""
          | ({
              city?: string;
              country?: string;
              line1?: string;
              line2?: string;
              postal_code?: string;
              state?: string;
            } & "");
        shipping?:
          | {
              address: {
                city?: string;
                country?: string;
                line1?: string;
                line2?: string;
                postal_code?: string;
                state?: string;
              };
              name: string;
              phone?: string;
            }
          | ""
          | ({
              address: {
                city?: string;
                country?: string;
                line1?: string;
                line2?: string;
                postal_code?: string;
                state?: string;
              };
              name: string;
              phone?: string;
            } & "");
        tax?: { ip_address?: string | "" };
        tax_exempt?: "" | "exempt" | "none" | "reverse";
        tax_ids?: {
          type:
            | "ae_trn"
            | "au_abn"
            | "au_arn"
            | "br_cnpj"
            | "br_cpf"
            | "ca_bn"
            | "ca_gst_hst"
            | "ca_pst_bc"
            | "ca_pst_mb"
            | "ca_pst_sk"
            | "ca_qst"
            | "ch_vat"
            | "cl_tin"
            | "es_cif"
            | "eu_vat"
            | "gb_vat"
            | "ge_vat"
            | "hk_br"
            | "id_npwp"
            | "il_vat"
            | "in_gst"
            | "jp_cn"
            | "jp_rn"
            | "kr_brn"
            | "li_uid"
            | "mx_rfc"
            | "my_frp"
            | "my_itn"
            | "my_sst"
            | "no_vat"
            | "nz_gst"
            | "ru_inn"
            | "ru_kpp"
            | "sa_vat"
            | "sg_gst"
            | "sg_uen"
            | "th_vat"
            | "tw_vat"
            | "ua_vat"
            | "us_ein"
            | "za_vat";
          value: string;
        }[];
      };
      discounts?: { coupon?: string; discount?: string }[] | "" | ({ coupon?: string; discount?: string }[] & "");
      ending_before?: string;
      expand?: string[];
      invoice_items?: {
        amount?: number;
        currency?: string;
        description?: string;
        discountable?: boolean;
        discounts?: { coupon?: string; discount?: string }[] | "" | ({ coupon?: string; discount?: string }[] & "");
        invoiceitem?: string;
        metadata?: Record<string, string> | "" | (Record<string, string> & "");
        period?: { end: number; start: number };
        price?: string;
        price_data?: {
          currency: string;
          product: string;
          tax_behavior?: "exclusive" | "inclusive" | "unspecified";
          unit_amount?: number;
          unit_amount_decimal?: string;
        };
        quantity?: number;
        tax_rates?: string[] | "" | (string[] & "");
        unit_amount?: number;
        unit_amount_decimal?: string;
      }[];
      limit?: number;
      schedule?: string;
      starting_after?: string;
      subscription?: string;
      subscription_billing_cycle_anchor?: "now" | "unchanged" | number;
      subscription_cancel_at?: number | "";
      subscription_cancel_at_period_end?: boolean;
      subscription_cancel_now?: boolean;
      subscription_default_tax_rates?: string[] | "" | (string[] & "");
      subscription_items?: {
        billing_thresholds?: { usage_gte: number } | "" | ({ usage_gte: number } & "");
        clear_usage?: boolean;
        deleted?: boolean;
        id?: string;
        metadata?: Record<string, string> | "" | (Record<string, string> & "");
        price?: string;
        price_data?: {
          currency: string;
          product: string;
          recurring: { interval: "day" | "month" | "week" | "year"; interval_count?: number };
          tax_behavior?: "exclusive" | "inclusive" | "unspecified";
          unit_amount?: number;
          unit_amount_decimal?: string;
        };
        quantity?: number;
        tax_rates?: string[] | "" | (string[] & "");
      }[];
      subscription_proration_behavior?: "always_invoice" | "create_prorations" | "none";
      subscription_proration_date?: number;
      subscription_start_date?: number;
      subscription_trial_end?: "now" | number;
      subscription_trial_from_plan?: boolean;
    };
    export type RequestBody = CardMandatePaymentMethodDetails;
    export type RequestHeaders = {};
    export type ResponseBody = { data: LineItem[]; has_more: boolean; object: "list"; url: string };
  }
  /**
   * @description <p>Permanently deletes a one-off invoice draft. This cannot be undone. Attempts to delete invoices that are no longer in a draft state will fail; once an invoice has been finalized or if an invoice is for a subscription, it must be <a href="#void_invoice">voided</a>.</p>
   * @name DeleteInvoicesInvoice
   * @request DELETE:/v1/invoices/{invoice}
   * @secure
   * @response `200` `DeletedInvoice` Successful response.
   * @response `default` `Error` Error response.
   */
  export namespace DeleteInvoicesInvoice {
    export type RequestParams = { invoice: string };
    export type RequestQuery = {};
    export type RequestBody = CardMandatePaymentMethodDetails;
    export type RequestHeaders = {};
    export type ResponseBody = DeletedInvoice;
  }
  /**
   * @description <p>Retrieves the invoice with the given ID.</p>
   * @name GetInvoicesInvoice
   * @request GET:/v1/invoices/{invoice}
   * @secure
   * @response `200` `Invoice` Successful response.
   * @response `default` `Error` Error response.
   */
  export namespace GetInvoicesInvoice {
    export type RequestParams = { invoice: string };
    export type RequestQuery = { expand?: string[] };
    export type RequestBody = CardMandatePaymentMethodDetails;
    export type RequestHeaders = {};
    export type ResponseBody = Invoice;
  }
  /**
   * @description <p>Draft invoices are fully editable. Once an invoice is <a href="/docs/billing/invoices/workflow#finalized">finalized</a>, monetary values, as well as <code>collection_method</code>, become uneditable.</p> <p>If you would like to stop the Stripe Billing engine from automatically finalizing, reattempting payments on, sending reminders for, or <a href="/docs/billing/invoices/reconciliation">automatically reconciling</a> invoices, pass <code>auto_advance=false</code>.</p>
   * @name PostInvoicesInvoice
   * @request POST:/v1/invoices/{invoice}
   * @secure
   * @response `200` `Invoice` Successful response.
   * @response `default` `Error` Error response.
   */
  export namespace PostInvoicesInvoice {
    export type RequestParams = { invoice: string };
    export type RequestQuery = {};
    export type RequestBody = {
      account_tax_ids?: string[] | "" | (string[] & "");
      application_fee_amount?: number;
      auto_advance?: boolean;
      automatic_tax?: { enabled: boolean };
      collection_method?: "charge_automatically" | "send_invoice";
      custom_fields?: { name: string; value: string }[] | "" | ({ name: string; value: string }[] & "");
      days_until_due?: number;
      default_payment_method?: string;
      default_source?: string;
      default_tax_rates?: string[] | "" | (string[] & "");
      description?: string;
      discounts?: { coupon?: string; discount?: string }[] | "" | ({ coupon?: string; discount?: string }[] & "");
      due_date?: number;
      expand?: string[];
      footer?: string;
      metadata?: Record<string, string> | "" | (Record<string, string> & "");
      on_behalf_of?: string | "";
      payment_settings?: {
        payment_method_options?: {
          acss_debit?:
            | {
                mandate_options?: { transaction_type?: "business" | "personal" };
                verification_method?: "automatic" | "instant" | "microdeposits";
              }
            | ""
            | ({
                mandate_options?: { transaction_type?: "business" | "personal" };
                verification_method?: "automatic" | "instant" | "microdeposits";
              } & "");
          bancontact?:
            | { preferred_language?: "de" | "en" | "fr" | "nl" }
            | ""
            | ({ preferred_language?: "de" | "en" | "fr" | "nl" } & "");
          card?:
            | { request_three_d_secure?: "any" | "automatic" }
            | ""
            | ({ request_three_d_secure?: "any" | "automatic" } & "");
        };
        payment_method_types?:
          | (
              | "ach_credit_transfer"
              | "ach_debit"
              | "acss_debit"
              | "au_becs_debit"
              | "bacs_debit"
              | "bancontact"
              | "boleto"
              | "card"
              | "fpx"
              | "giropay"
              | "ideal"
              | "sepa_debit"
              | "sofort"
              | "wechat_pay"
            )[]
          | ""
          | ((
              | "ach_credit_transfer"
              | "ach_debit"
              | "acss_debit"
              | "au_becs_debit"
              | "bacs_debit"
              | "bancontact"
              | "boleto"
              | "card"
              | "fpx"
              | "giropay"
              | "ideal"
              | "sepa_debit"
              | "sofort"
              | "wechat_pay"
            )[] &
              "");
      };
      statement_descriptor?: string;
      transfer_data?: { amount?: number; destination: string } | "" | ({ amount?: number; destination: string } & "");
    };
    export type RequestHeaders = {};
    export type ResponseBody = Invoice;
  }
  /**
   * @description <p>Stripe automatically finalizes drafts before sending and attempting payment on invoices. However, if you’d like to finalize a draft invoice manually, you can do so using this method.</p>
   * @name PostInvoicesInvoiceFinalize
   * @request POST:/v1/invoices/{invoice}/finalize
   * @secure
   * @response `200` `Invoice` Successful response.
   * @response `default` `Error` Error response.
   */
  export namespace PostInvoicesInvoiceFinalize {
    export type RequestParams = { invoice: string };
    export type RequestQuery = {};
    export type RequestBody = { auto_advance?: boolean; expand?: string[] };
    export type RequestHeaders = {};
    export type ResponseBody = Invoice;
  }
  /**
   * @description <p>When retrieving an invoice, you’ll get a <strong>lines</strong> property containing the total count of line items and the first handful of those items. There is also a URL where you can retrieve the full (paginated) list of line items.</p>
   * @name GetInvoicesInvoiceLines
   * @request GET:/v1/invoices/{invoice}/lines
   * @secure
   * @response `200` `{ data: (LineItem)[], has_more: boolean, object: "list", url: string }` Successful response.
   * @response `default` `Error` Error response.
   */
  export namespace GetInvoicesInvoiceLines {
    export type RequestParams = { invoice: string };
    export type RequestQuery = { ending_before?: string; expand?: string[]; limit?: number; starting_after?: string };
    export type RequestBody = CardMandatePaymentMethodDetails;
    export type RequestHeaders = {};
    export type ResponseBody = { data: LineItem[]; has_more: boolean; object: "list"; url: string };
  }
  /**
   * @description <p>Marking an invoice as uncollectible is useful for keeping track of bad debts that can be written off for accounting purposes.</p>
   * @name PostInvoicesInvoiceMarkUncollectible
   * @request POST:/v1/invoices/{invoice}/mark_uncollectible
   * @secure
   * @response `200` `Invoice` Successful response.
   * @response `default` `Error` Error response.
   */
  export namespace PostInvoicesInvoiceMarkUncollectible {
    export type RequestParams = { invoice: string };
    export type RequestQuery = {};
    export type RequestBody = { expand?: string[] };
    export type RequestHeaders = {};
    export type ResponseBody = Invoice;
  }
  /**
   * @description <p>Stripe automatically creates and then attempts to collect payment on invoices for customers on subscriptions according to your <a href="https://dashboard.stripe.com/account/billing/automatic">subscriptions settings</a>. However, if you’d like to attempt payment on an invoice out of the normal collection schedule or for some other reason, you can do so.</p>
   * @name PostInvoicesInvoicePay
   * @request POST:/v1/invoices/{invoice}/pay
   * @secure
   * @response `200` `Invoice` Successful response.
   * @response `default` `Error` Error response.
   */
  export namespace PostInvoicesInvoicePay {
    export type RequestParams = { invoice: string };
    export type RequestQuery = {};
    export type RequestBody = {
      expand?: string[];
      forgive?: boolean;
      off_session?: boolean;
      paid_out_of_band?: boolean;
      payment_method?: string;
      source?: string;
    };
    export type RequestHeaders = {};
    export type ResponseBody = Invoice;
  }
  /**
   * @description <p>Stripe will automatically send invoices to customers according to your <a href="https://dashboard.stripe.com/account/billing/automatic">subscriptions settings</a>. However, if you’d like to manually send an invoice to your customer out of the normal schedule, you can do so. When sending invoices that have already been paid, there will be no reference to the payment in the email.</p> <p>Requests made in test-mode result in no emails being sent, despite sending an <code>invoice.sent</code> event.</p>
   * @name PostInvoicesInvoiceSend
   * @request POST:/v1/invoices/{invoice}/send
   * @secure
   * @response `200` `Invoice` Successful response.
   * @response `default` `Error` Error response.
   */
  export namespace PostInvoicesInvoiceSend {
    export type RequestParams = { invoice: string };
    export type RequestQuery = {};
    export type RequestBody = { expand?: string[] };
    export type RequestHeaders = {};
    export type ResponseBody = Invoice;
  }
  /**
   * @description <p>Mark a finalized invoice as void. This cannot be undone. Voiding an invoice is similar to <a href="#delete_invoice">deletion</a>, however it only applies to finalized invoices and maintains a papertrail where the invoice can still be found.</p>
   * @name PostInvoicesInvoiceVoid
   * @request POST:/v1/invoices/{invoice}/void
   * @secure
   * @response `200` `Invoice` Successful response.
   * @response `default` `Error` Error response.
   */
  export namespace PostInvoicesInvoiceVoid {
    export type RequestParams = { invoice: string };
    export type RequestQuery = {};
    export type RequestBody = { expand?: string[] };
    export type RequestHeaders = {};
    export type ResponseBody = Invoice;
  }
  /**
   * @description <p>Returns a list of issuer fraud records.</p>
   * @name GetIssuerFraudRecords
   * @request GET:/v1/issuer_fraud_records
   * @deprecated
   * @secure
   * @response `200` `{ data: (IssuerFraudRecord)[], has_more: boolean, object: "list", url: string }` Successful response.
   * @response `default` `Error` Error response.
   */
  export namespace GetIssuerFraudRecords {
    export type RequestParams = {};
    export type RequestQuery = {
      charge?: string;
      ending_before?: string;
      expand?: string[];
      limit?: number;
      starting_after?: string;
    };
    export type RequestBody = CardMandatePaymentMethodDetails;
    export type RequestHeaders = {};
    export type ResponseBody = { data: IssuerFraudRecord[]; has_more: boolean; object: "list"; url: string };
  }
  /**
   * @description <p>Retrieves the details of an issuer fraud record that has previously been created. </p> <p>Please refer to the <a href="#issuer_fraud_record_object">issuer fraud record</a> object reference for more details.</p>
   * @name GetIssuerFraudRecordsIssuerFraudRecord
   * @request GET:/v1/issuer_fraud_records/{issuer_fraud_record}
   * @deprecated
   * @secure
   * @response `200` `IssuerFraudRecord` Successful response.
   * @response `default` `Error` Error response.
   */
  export namespace GetIssuerFraudRecordsIssuerFraudRecord {
    export type RequestParams = { issuerFraudRecord: string };
    export type RequestQuery = { expand?: string[] };
    export type RequestBody = CardMandatePaymentMethodDetails;
    export type RequestHeaders = {};
    export type ResponseBody = IssuerFraudRecord;
  }
  /**
   * @description <p>Returns a list of Issuing <code>Authorization</code> objects. The objects are sorted in descending order by creation date, with the most recently created object appearing first.</p>
   * @name GetIssuingAuthorizations
   * @request GET:/v1/issuing/authorizations
   * @secure
   * @response `200` `{ data: (IssuingAuthorization)[], has_more: boolean, object: "list", url: string }` Successful response.
   * @response `default` `Error` Error response.
   */
  export namespace GetIssuingAuthorizations {
    export type RequestParams = {};
    export type RequestQuery = {
      card?: string;
      cardholder?: string;
      created?: { gt?: number; gte?: number; lt?: number; lte?: number } | number;
      ending_before?: string;
      expand?: string[];
      limit?: number;
      starting_after?: string;
      status?: "closed" | "pending" | "reversed";
    };
    export type RequestBody = CardMandatePaymentMethodDetails;
    export type RequestHeaders = {};
    export type ResponseBody = { data: IssuingAuthorization[]; has_more: boolean; object: "list"; url: string };
  }
  /**
   * @description <p>Retrieves an Issuing <code>Authorization</code> object.</p>
   * @name GetIssuingAuthorizationsAuthorization
   * @request GET:/v1/issuing/authorizations/{authorization}
   * @secure
   * @response `200` `IssuingAuthorization` Successful response.
   * @response `default` `Error` Error response.
   */
  export namespace GetIssuingAuthorizationsAuthorization {
    export type RequestParams = { authorization: string };
    export type RequestQuery = { expand?: string[] };
    export type RequestBody = CardMandatePaymentMethodDetails;
    export type RequestHeaders = {};
    export type ResponseBody = IssuingAuthorization;
  }
  /**
   * @description <p>Updates the specified Issuing <code>Authorization</code> object by setting the values of the parameters passed. Any parameters not provided will be left unchanged.</p>
   * @name PostIssuingAuthorizationsAuthorization
   * @request POST:/v1/issuing/authorizations/{authorization}
   * @secure
   * @response `200` `IssuingAuthorization` Successful response.
   * @response `default` `Error` Error response.
   */
  export namespace PostIssuingAuthorizationsAuthorization {
    export type RequestParams = { authorization: string };
    export type RequestQuery = {};
    export type RequestBody = {
      expand?: string[];
      metadata?: Record<string, string> | "" | (Record<string, string> & "");
    };
    export type RequestHeaders = {};
    export type ResponseBody = IssuingAuthorization;
  }
  /**
   * @description <p>Approves a pending Issuing <code>Authorization</code> object. This request should be made within the timeout window of the <a href="/docs/issuing/controls/real-time-authorizations">real-time authorization</a> flow.</p>
   * @name PostIssuingAuthorizationsAuthorizationApprove
   * @request POST:/v1/issuing/authorizations/{authorization}/approve
   * @secure
   * @response `200` `IssuingAuthorization` Successful response.
   * @response `default` `Error` Error response.
   */
  export namespace PostIssuingAuthorizationsAuthorizationApprove {
    export type RequestParams = { authorization: string };
    export type RequestQuery = {};
    export type RequestBody = {
      amount?: number;
      expand?: string[];
      metadata?: Record<string, string> | "" | (Record<string, string> & "");
    };
    export type RequestHeaders = {};
    export type ResponseBody = IssuingAuthorization;
  }
  /**
   * @description <p>Declines a pending Issuing <code>Authorization</code> object. This request should be made within the timeout window of the <a href="/docs/issuing/controls/real-time-authorizations">real time authorization</a> flow.</p>
   * @name PostIssuingAuthorizationsAuthorizationDecline
   * @request POST:/v1/issuing/authorizations/{authorization}/decline
   * @secure
   * @response `200` `IssuingAuthorization` Successful response.
   * @response `default` `Error` Error response.
   */
  export namespace PostIssuingAuthorizationsAuthorizationDecline {
    export type RequestParams = { authorization: string };
    export type RequestQuery = {};
    export type RequestBody = {
      expand?: string[];
      metadata?: Record<string, string> | "" | (Record<string, string> & "");
    };
    export type RequestHeaders = {};
    export type ResponseBody = IssuingAuthorization;
  }
  /**
   * @description <p>Returns a list of Issuing <code>Cardholder</code> objects. The objects are sorted in descending order by creation date, with the most recently created object appearing first.</p>
   * @name GetIssuingCardholders
   * @request GET:/v1/issuing/cardholders
   * @secure
   * @response `200` `{ data: (IssuingCardholder)[], has_more: boolean, object: "list", url: string }` Successful response.
   * @response `default` `Error` Error response.
   */
  export namespace GetIssuingCardholders {
    export type RequestParams = {};
    export type RequestQuery = {
      created?: { gt?: number; gte?: number; lt?: number; lte?: number } | number;
      email?: string;
      ending_before?: string;
      expand?: string[];
      limit?: number;
      phone_number?: string;
      starting_after?: string;
      status?: "active" | "blocked" | "inactive";
      type?: "company" | "individual";
    };
    export type RequestBody = CardMandatePaymentMethodDetails;
    export type RequestHeaders = {};
    export type ResponseBody = { data: IssuingCardholder[]; has_more: boolean; object: "list"; url: string };
  }
  /**
   * @description <p>Creates a new Issuing <code>Cardholder</code> object that can be issued cards.</p>
   * @name PostIssuingCardholders
   * @request POST:/v1/issuing/cardholders
   * @secure
   * @response `200` `IssuingCardholder` Successful response.
   * @response `default` `Error` Error response.
   */
  export namespace PostIssuingCardholders {
    export type RequestParams = {};
    export type RequestQuery = {};
    export type RequestBody = {
      billing: {
        address: { city: string; country: string; line1: string; line2?: string; postal_code: string; state?: string };
      };
      company?: { tax_id?: string };
      email?: string;
      expand?: string[];
      individual?: {
        dob?: { day: number; month: number; year: number };
        first_name: string;
        last_name: string;
        verification?: { document?: { back?: string; front?: string } };
      };
      metadata?: Record<string, string>;
      name: string;
      phone_number?: string;
      spending_controls?: {
        allowed_categories?: (
          | "ac_refrigeration_repair"
          | "accounting_bookkeeping_services"
          | "advertising_services"
          | "agricultural_cooperative"
          | "airlines_air_carriers"
          | "airports_flying_fields"
          | "ambulance_services"
          | "amusement_parks_carnivals"
          | "antique_reproductions"
          | "antique_shops"
          | "aquariums"
          | "architectural_surveying_services"
          | "art_dealers_and_galleries"
          | "artists_supply_and_craft_shops"
          | "auto_and_home_supply_stores"
          | "auto_body_repair_shops"
          | "auto_paint_shops"
          | "auto_service_shops"
          | "automated_cash_disburse"
          | "automated_fuel_dispensers"
          | "automobile_associations"
          | "automotive_parts_and_accessories_stores"
          | "automotive_tire_stores"
          | "bail_and_bond_payments"
          | "bakeries"
          | "bands_orchestras"
          | "barber_and_beauty_shops"
          | "betting_casino_gambling"
          | "bicycle_shops"
          | "billiard_pool_establishments"
          | "boat_dealers"
          | "boat_rentals_and_leases"
          | "book_stores"
          | "books_periodicals_and_newspapers"
          | "bowling_alleys"
          | "bus_lines"
          | "business_secretarial_schools"
          | "buying_shopping_services"
          | "cable_satellite_and_other_pay_television_and_radio"
          | "camera_and_photographic_supply_stores"
          | "candy_nut_and_confectionery_stores"
          | "car_and_truck_dealers_new_used"
          | "car_and_truck_dealers_used_only"
          | "car_rental_agencies"
          | "car_washes"
          | "carpentry_services"
          | "carpet_upholstery_cleaning"
          | "caterers"
          | "charitable_and_social_service_organizations_fundraising"
          | "chemicals_and_allied_products"
          | "child_care_services"
          | "childrens_and_infants_wear_stores"
          | "chiropodists_podiatrists"
          | "chiropractors"
          | "cigar_stores_and_stands"
          | "civic_social_fraternal_associations"
          | "cleaning_and_maintenance"
          | "clothing_rental"
          | "colleges_universities"
          | "commercial_equipment"
          | "commercial_footwear"
          | "commercial_photography_art_and_graphics"
          | "commuter_transport_and_ferries"
          | "computer_network_services"
          | "computer_programming"
          | "computer_repair"
          | "computer_software_stores"
          | "computers_peripherals_and_software"
          | "concrete_work_services"
          | "construction_materials"
          | "consulting_public_relations"
          | "correspondence_schools"
          | "cosmetic_stores"
          | "counseling_services"
          | "country_clubs"
          | "courier_services"
          | "court_costs"
          | "credit_reporting_agencies"
          | "cruise_lines"
          | "dairy_products_stores"
          | "dance_hall_studios_schools"
          | "dating_escort_services"
          | "dentists_orthodontists"
          | "department_stores"
          | "detective_agencies"
          | "digital_goods_applications"
          | "digital_goods_games"
          | "digital_goods_large_volume"
          | "digital_goods_media"
          | "direct_marketing_catalog_merchant"
          | "direct_marketing_combination_catalog_and_retail_merchant"
          | "direct_marketing_inbound_telemarketing"
          | "direct_marketing_insurance_services"
          | "direct_marketing_other"
          | "direct_marketing_outbound_telemarketing"
          | "direct_marketing_subscription"
          | "direct_marketing_travel"
          | "discount_stores"
          | "doctors"
          | "door_to_door_sales"
          | "drapery_window_covering_and_upholstery_stores"
          | "drinking_places"
          | "drug_stores_and_pharmacies"
          | "drugs_drug_proprietaries_and_druggist_sundries"
          | "dry_cleaners"
          | "durable_goods"
          | "duty_free_stores"
          | "eating_places_restaurants"
          | "educational_services"
          | "electric_razor_stores"
          | "electrical_parts_and_equipment"
          | "electrical_services"
          | "electronics_repair_shops"
          | "electronics_stores"
          | "elementary_secondary_schools"
          | "employment_temp_agencies"
          | "equipment_rental"
          | "exterminating_services"
          | "family_clothing_stores"
          | "fast_food_restaurants"
          | "financial_institutions"
          | "fines_government_administrative_entities"
          | "fireplace_fireplace_screens_and_accessories_stores"
          | "floor_covering_stores"
          | "florists"
          | "florists_supplies_nursery_stock_and_flowers"
          | "freezer_and_locker_meat_provisioners"
          | "fuel_dealers_non_automotive"
          | "funeral_services_crematories"
          | "furniture_home_furnishings_and_equipment_stores_except_appliances"
          | "furniture_repair_refinishing"
          | "furriers_and_fur_shops"
          | "general_services"
          | "gift_card_novelty_and_souvenir_shops"
          | "glass_paint_and_wallpaper_stores"
          | "glassware_crystal_stores"
          | "golf_courses_public"
          | "government_services"
          | "grocery_stores_supermarkets"
          | "hardware_equipment_and_supplies"
          | "hardware_stores"
          | "health_and_beauty_spas"
          | "hearing_aids_sales_and_supplies"
          | "heating_plumbing_a_c"
          | "hobby_toy_and_game_shops"
          | "home_supply_warehouse_stores"
          | "hospitals"
          | "hotels_motels_and_resorts"
          | "household_appliance_stores"
          | "industrial_supplies"
          | "information_retrieval_services"
          | "insurance_default"
          | "insurance_underwriting_premiums"
          | "intra_company_purchases"
          | "jewelry_stores_watches_clocks_and_silverware_stores"
          | "landscaping_services"
          | "laundries"
          | "laundry_cleaning_services"
          | "legal_services_attorneys"
          | "luggage_and_leather_goods_stores"
          | "lumber_building_materials_stores"
          | "manual_cash_disburse"
          | "marinas_service_and_supplies"
          | "masonry_stonework_and_plaster"
          | "massage_parlors"
          | "medical_and_dental_labs"
          | "medical_dental_ophthalmic_and_hospital_equipment_and_supplies"
          | "medical_services"
          | "membership_organizations"
          | "mens_and_boys_clothing_and_accessories_stores"
          | "mens_womens_clothing_stores"
          | "metal_service_centers"
          | "miscellaneous"
          | "miscellaneous_apparel_and_accessory_shops"
          | "miscellaneous_auto_dealers"
          | "miscellaneous_business_services"
          | "miscellaneous_food_stores"
          | "miscellaneous_general_merchandise"
          | "miscellaneous_general_services"
          | "miscellaneous_home_furnishing_specialty_stores"
          | "miscellaneous_publishing_and_printing"
          | "miscellaneous_recreation_services"
          | "miscellaneous_repair_shops"
          | "miscellaneous_specialty_retail"
          | "mobile_home_dealers"
          | "motion_picture_theaters"
          | "motor_freight_carriers_and_trucking"
          | "motor_homes_dealers"
          | "motor_vehicle_supplies_and_new_parts"
          | "motorcycle_shops_and_dealers"
          | "motorcycle_shops_dealers"
          | "music_stores_musical_instruments_pianos_and_sheet_music"
          | "news_dealers_and_newsstands"
          | "non_fi_money_orders"
          | "non_fi_stored_value_card_purchase_load"
          | "nondurable_goods"
          | "nurseries_lawn_and_garden_supply_stores"
          | "nursing_personal_care"
          | "office_and_commercial_furniture"
          | "opticians_eyeglasses"
          | "optometrists_ophthalmologist"
          | "orthopedic_goods_prosthetic_devices"
          | "osteopaths"
          | "package_stores_beer_wine_and_liquor"
          | "paints_varnishes_and_supplies"
          | "parking_lots_garages"
          | "passenger_railways"
          | "pawn_shops"
          | "pet_shops_pet_food_and_supplies"
          | "petroleum_and_petroleum_products"
          | "photo_developing"
          | "photographic_photocopy_microfilm_equipment_and_supplies"
          | "photographic_studios"
          | "picture_video_production"
          | "piece_goods_notions_and_other_dry_goods"
          | "plumbing_heating_equipment_and_supplies"
          | "political_organizations"
          | "postal_services_government_only"
          | "precious_stones_and_metals_watches_and_jewelry"
          | "professional_services"
          | "public_warehousing_and_storage"
          | "quick_copy_repro_and_blueprint"
          | "railroads"
          | "real_estate_agents_and_managers_rentals"
          | "record_stores"
          | "recreational_vehicle_rentals"
          | "religious_goods_stores"
          | "religious_organizations"
          | "roofing_siding_sheet_metal"
          | "secretarial_support_services"
          | "security_brokers_dealers"
          | "service_stations"
          | "sewing_needlework_fabric_and_piece_goods_stores"
          | "shoe_repair_hat_cleaning"
          | "shoe_stores"
          | "small_appliance_repair"
          | "snowmobile_dealers"
          | "special_trade_services"
          | "specialty_cleaning"
          | "sporting_goods_stores"
          | "sporting_recreation_camps"
          | "sports_and_riding_apparel_stores"
          | "sports_clubs_fields"
          | "stamp_and_coin_stores"
          | "stationary_office_supplies_printing_and_writing_paper"
          | "stationery_stores_office_and_school_supply_stores"
          | "swimming_pools_sales"
          | "t_ui_travel_germany"
          | "tailors_alterations"
          | "tax_payments_government_agencies"
          | "tax_preparation_services"
          | "taxicabs_limousines"
          | "telecommunication_equipment_and_telephone_sales"
          | "telecommunication_services"
          | "telegraph_services"
          | "tent_and_awning_shops"
          | "testing_laboratories"
          | "theatrical_ticket_agencies"
          | "timeshares"
          | "tire_retreading_and_repair"
          | "tolls_bridge_fees"
          | "tourist_attractions_and_exhibits"
          | "towing_services"
          | "trailer_parks_campgrounds"
          | "transportation_services"
          | "travel_agencies_tour_operators"
          | "truck_stop_iteration"
          | "truck_utility_trailer_rentals"
          | "typesetting_plate_making_and_related_services"
          | "typewriter_stores"
          | "u_s_federal_government_agencies_or_departments"
          | "uniforms_commercial_clothing"
          | "used_merchandise_and_secondhand_stores"
          | "utilities"
          | "variety_stores"
          | "veterinary_services"
          | "video_amusement_game_supplies"
          | "video_game_arcades"
          | "video_tape_rental_stores"
          | "vocational_trade_schools"
          | "watch_jewelry_repair"
          | "welding_repair"
          | "wholesale_clubs"
          | "wig_and_toupee_stores"
          | "wires_money_orders"
          | "womens_accessory_and_specialty_shops"
          | "womens_ready_to_wear_stores"
          | "wrecking_and_salvage_yards"
        )[];
        blocked_categories?: (
          | "ac_refrigeration_repair"
          | "accounting_bookkeeping_services"
          | "advertising_services"
          | "agricultural_cooperative"
          | "airlines_air_carriers"
          | "airports_flying_fields"
          | "ambulance_services"
          | "amusement_parks_carnivals"
          | "antique_reproductions"
          | "antique_shops"
          | "aquariums"
          | "architectural_surveying_services"
          | "art_dealers_and_galleries"
          | "artists_supply_and_craft_shops"
          | "auto_and_home_supply_stores"
          | "auto_body_repair_shops"
          | "auto_paint_shops"
          | "auto_service_shops"
          | "automated_cash_disburse"
          | "automated_fuel_dispensers"
          | "automobile_associations"
          | "automotive_parts_and_accessories_stores"
          | "automotive_tire_stores"
          | "bail_and_bond_payments"
          | "bakeries"
          | "bands_orchestras"
          | "barber_and_beauty_shops"
          | "betting_casino_gambling"
          | "bicycle_shops"
          | "billiard_pool_establishments"
          | "boat_dealers"
          | "boat_rentals_and_leases"
          | "book_stores"
          | "books_periodicals_and_newspapers"
          | "bowling_alleys"
          | "bus_lines"
          | "business_secretarial_schools"
          | "buying_shopping_services"
          | "cable_satellite_and_other_pay_television_and_radio"
          | "camera_and_photographic_supply_stores"
          | "candy_nut_and_confectionery_stores"
          | "car_and_truck_dealers_new_used"
          | "car_and_truck_dealers_used_only"
          | "car_rental_agencies"
          | "car_washes"
          | "carpentry_services"
          | "carpet_upholstery_cleaning"
          | "caterers"
          | "charitable_and_social_service_organizations_fundraising"
          | "chemicals_and_allied_products"
          | "child_care_services"
          | "childrens_and_infants_wear_stores"
          | "chiropodists_podiatrists"
          | "chiropractors"
          | "cigar_stores_and_stands"
          | "civic_social_fraternal_associations"
          | "cleaning_and_maintenance"
          | "clothing_rental"
          | "colleges_universities"
          | "commercial_equipment"
          | "commercial_footwear"
          | "commercial_photography_art_and_graphics"
          | "commuter_transport_and_ferries"
          | "computer_network_services"
          | "computer_programming"
          | "computer_repair"
          | "computer_software_stores"
          | "computers_peripherals_and_software"
          | "concrete_work_services"
          | "construction_materials"
          | "consulting_public_relations"
          | "correspondence_schools"
          | "cosmetic_stores"
          | "counseling_services"
          | "country_clubs"
          | "courier_services"
          | "court_costs"
          | "credit_reporting_agencies"
          | "cruise_lines"
          | "dairy_products_stores"
          | "dance_hall_studios_schools"
          | "dating_escort_services"
          | "dentists_orthodontists"
          | "department_stores"
          | "detective_agencies"
          | "digital_goods_applications"
          | "digital_goods_games"
          | "digital_goods_large_volume"
          | "digital_goods_media"
          | "direct_marketing_catalog_merchant"
          | "direct_marketing_combination_catalog_and_retail_merchant"
          | "direct_marketing_inbound_telemarketing"
          | "direct_marketing_insurance_services"
          | "direct_marketing_other"
          | "direct_marketing_outbound_telemarketing"
          | "direct_marketing_subscription"
          | "direct_marketing_travel"
          | "discount_stores"
          | "doctors"
          | "door_to_door_sales"
          | "drapery_window_covering_and_upholstery_stores"
          | "drinking_places"
          | "drug_stores_and_pharmacies"
          | "drugs_drug_proprietaries_and_druggist_sundries"
          | "dry_cleaners"
          | "durable_goods"
          | "duty_free_stores"
          | "eating_places_restaurants"
          | "educational_services"
          | "electric_razor_stores"
          | "electrical_parts_and_equipment"
          | "electrical_services"
          | "electronics_repair_shops"
          | "electronics_stores"
          | "elementary_secondary_schools"
          | "employment_temp_agencies"
          | "equipment_rental"
          | "exterminating_services"
          | "family_clothing_stores"
          | "fast_food_restaurants"
          | "financial_institutions"
          | "fines_government_administrative_entities"
          | "fireplace_fireplace_screens_and_accessories_stores"
          | "floor_covering_stores"
          | "florists"
          | "florists_supplies_nursery_stock_and_flowers"
          | "freezer_and_locker_meat_provisioners"
          | "fuel_dealers_non_automotive"
          | "funeral_services_crematories"
          | "furniture_home_furnishings_and_equipment_stores_except_appliances"
          | "furniture_repair_refinishing"
          | "furriers_and_fur_shops"
          | "general_services"
          | "gift_card_novelty_and_souvenir_shops"
          | "glass_paint_and_wallpaper_stores"
          | "glassware_crystal_stores"
          | "golf_courses_public"
          | "government_services"
          | "grocery_stores_supermarkets"
          | "hardware_equipment_and_supplies"
          | "hardware_stores"
          | "health_and_beauty_spas"
          | "hearing_aids_sales_and_supplies"
          | "heating_plumbing_a_c"
          | "hobby_toy_and_game_shops"
          | "home_supply_warehouse_stores"
          | "hospitals"
          | "hotels_motels_and_resorts"
          | "household_appliance_stores"
          | "industrial_supplies"
          | "information_retrieval_services"
          | "insurance_default"
          | "insurance_underwriting_premiums"
          | "intra_company_purchases"
          | "jewelry_stores_watches_clocks_and_silverware_stores"
          | "landscaping_services"
          | "laundries"
          | "laundry_cleaning_services"
          | "legal_services_attorneys"
          | "luggage_and_leather_goods_stores"
          | "lumber_building_materials_stores"
          | "manual_cash_disburse"
          | "marinas_service_and_supplies"
          | "masonry_stonework_and_plaster"
          | "massage_parlors"
          | "medical_and_dental_labs"
          | "medical_dental_ophthalmic_and_hospital_equipment_and_supplies"
          | "medical_services"
          | "membership_organizations"
          | "mens_and_boys_clothing_and_accessories_stores"
          | "mens_womens_clothing_stores"
          | "metal_service_centers"
          | "miscellaneous"
          | "miscellaneous_apparel_and_accessory_shops"
          | "miscellaneous_auto_dealers"
          | "miscellaneous_business_services"
          | "miscellaneous_food_stores"
          | "miscellaneous_general_merchandise"
          | "miscellaneous_general_services"
          | "miscellaneous_home_furnishing_specialty_stores"
          | "miscellaneous_publishing_and_printing"
          | "miscellaneous_recreation_services"
          | "miscellaneous_repair_shops"
          | "miscellaneous_specialty_retail"
          | "mobile_home_dealers"
          | "motion_picture_theaters"
          | "motor_freight_carriers_and_trucking"
          | "motor_homes_dealers"
          | "motor_vehicle_supplies_and_new_parts"
          | "motorcycle_shops_and_dealers"
          | "motorcycle_shops_dealers"
          | "music_stores_musical_instruments_pianos_and_sheet_music"
          | "news_dealers_and_newsstands"
          | "non_fi_money_orders"
          | "non_fi_stored_value_card_purchase_load"
          | "nondurable_goods"
          | "nurseries_lawn_and_garden_supply_stores"
          | "nursing_personal_care"
          | "office_and_commercial_furniture"
          | "opticians_eyeglasses"
          | "optometrists_ophthalmologist"
          | "orthopedic_goods_prosthetic_devices"
          | "osteopaths"
          | "package_stores_beer_wine_and_liquor"
          | "paints_varnishes_and_supplies"
          | "parking_lots_garages"
          | "passenger_railways"
          | "pawn_shops"
          | "pet_shops_pet_food_and_supplies"
          | "petroleum_and_petroleum_products"
          | "photo_developing"
          | "photographic_photocopy_microfilm_equipment_and_supplies"
          | "photographic_studios"
          | "picture_video_production"
          | "piece_goods_notions_and_other_dry_goods"
          | "plumbing_heating_equipment_and_supplies"
          | "political_organizations"
          | "postal_services_government_only"
          | "precious_stones_and_metals_watches_and_jewelry"
          | "professional_services"
          | "public_warehousing_and_storage"
          | "quick_copy_repro_and_blueprint"
          | "railroads"
          | "real_estate_agents_and_managers_rentals"
          | "record_stores"
          | "recreational_vehicle_rentals"
          | "religious_goods_stores"
          | "religious_organizations"
          | "roofing_siding_sheet_metal"
          | "secretarial_support_services"
          | "security_brokers_dealers"
          | "service_stations"
          | "sewing_needlework_fabric_and_piece_goods_stores"
          | "shoe_repair_hat_cleaning"
          | "shoe_stores"
          | "small_appliance_repair"
          | "snowmobile_dealers"
          | "special_trade_services"
          | "specialty_cleaning"
          | "sporting_goods_stores"
          | "sporting_recreation_camps"
          | "sports_and_riding_apparel_stores"
          | "sports_clubs_fields"
          | "stamp_and_coin_stores"
          | "stationary_office_supplies_printing_and_writing_paper"
          | "stationery_stores_office_and_school_supply_stores"
          | "swimming_pools_sales"
          | "t_ui_travel_germany"
          | "tailors_alterations"
          | "tax_payments_government_agencies"
          | "tax_preparation_services"
          | "taxicabs_limousines"
          | "telecommunication_equipment_and_telephone_sales"
          | "telecommunication_services"
          | "telegraph_services"
          | "tent_and_awning_shops"
          | "testing_laboratories"
          | "theatrical_ticket_agencies"
          | "timeshares"
          | "tire_retreading_and_repair"
          | "tolls_bridge_fees"
          | "tourist_attractions_and_exhibits"
          | "towing_services"
          | "trailer_parks_campgrounds"
          | "transportation_services"
          | "travel_agencies_tour_operators"
          | "truck_stop_iteration"
          | "truck_utility_trailer_rentals"
          | "typesetting_plate_making_and_related_services"
          | "typewriter_stores"
          | "u_s_federal_government_agencies_or_departments"
          | "uniforms_commercial_clothing"
          | "used_merchandise_and_secondhand_stores"
          | "utilities"
          | "variety_stores"
          | "veterinary_services"
          | "video_amusement_game_supplies"
          | "video_game_arcades"
          | "video_tape_rental_stores"
          | "vocational_trade_schools"
          | "watch_jewelry_repair"
          | "welding_repair"
          | "wholesale_clubs"
          | "wig_and_toupee_stores"
          | "wires_money_orders"
          | "womens_accessory_and_specialty_shops"
          | "womens_ready_to_wear_stores"
          | "wrecking_and_salvage_yards"
        )[];
        spending_limits?: {
          amount: number;
          categories?: (
            | "ac_refrigeration_repair"
            | "accounting_bookkeeping_services"
            | "advertising_services"
            | "agricultural_cooperative"
            | "airlines_air_carriers"
            | "airports_flying_fields"
            | "ambulance_services"
            | "amusement_parks_carnivals"
            | "antique_reproductions"
            | "antique_shops"
            | "aquariums"
            | "architectural_surveying_services"
            | "art_dealers_and_galleries"
            | "artists_supply_and_craft_shops"
            | "auto_and_home_supply_stores"
            | "auto_body_repair_shops"
            | "auto_paint_shops"
            | "auto_service_shops"
            | "automated_cash_disburse"
            | "automated_fuel_dispensers"
            | "automobile_associations"
            | "automotive_parts_and_accessories_stores"
            | "automotive_tire_stores"
            | "bail_and_bond_payments"
            | "bakeries"
            | "bands_orchestras"
            | "barber_and_beauty_shops"
            | "betting_casino_gambling"
            | "bicycle_shops"
            | "billiard_pool_establishments"
            | "boat_dealers"
            | "boat_rentals_and_leases"
            | "book_stores"
            | "books_periodicals_and_newspapers"
            | "bowling_alleys"
            | "bus_lines"
            | "business_secretarial_schools"
            | "buying_shopping_services"
            | "cable_satellite_and_other_pay_television_and_radio"
            | "camera_and_photographic_supply_stores"
            | "candy_nut_and_confectionery_stores"
            | "car_and_truck_dealers_new_used"
            | "car_and_truck_dealers_used_only"
            | "car_rental_agencies"
            | "car_washes"
            | "carpentry_services"
            | "carpet_upholstery_cleaning"
            | "caterers"
            | "charitable_and_social_service_organizations_fundraising"
            | "chemicals_and_allied_products"
            | "child_care_services"
            | "childrens_and_infants_wear_stores"
            | "chiropodists_podiatrists"
            | "chiropractors"
            | "cigar_stores_and_stands"
            | "civic_social_fraternal_associations"
            | "cleaning_and_maintenance"
            | "clothing_rental"
            | "colleges_universities"
            | "commercial_equipment"
            | "commercial_footwear"
            | "commercial_photography_art_and_graphics"
            | "commuter_transport_and_ferries"
            | "computer_network_services"
            | "computer_programming"
            | "computer_repair"
            | "computer_software_stores"
            | "computers_peripherals_and_software"
            | "concrete_work_services"
            | "construction_materials"
            | "consulting_public_relations"
            | "correspondence_schools"
            | "cosmetic_stores"
            | "counseling_services"
            | "country_clubs"
            | "courier_services"
            | "court_costs"
            | "credit_reporting_agencies"
            | "cruise_lines"
            | "dairy_products_stores"
            | "dance_hall_studios_schools"
            | "dating_escort_services"
            | "dentists_orthodontists"
            | "department_stores"
            | "detective_agencies"
            | "digital_goods_applications"
            | "digital_goods_games"
            | "digital_goods_large_volume"
            | "digital_goods_media"
            | "direct_marketing_catalog_merchant"
            | "direct_marketing_combination_catalog_and_retail_merchant"
            | "direct_marketing_inbound_telemarketing"
            | "direct_marketing_insurance_services"
            | "direct_marketing_other"
            | "direct_marketing_outbound_telemarketing"
            | "direct_marketing_subscription"
            | "direct_marketing_travel"
            | "discount_stores"
            | "doctors"
            | "door_to_door_sales"
            | "drapery_window_covering_and_upholstery_stores"
            | "drinking_places"
            | "drug_stores_and_pharmacies"
            | "drugs_drug_proprietaries_and_druggist_sundries"
            | "dry_cleaners"
            | "durable_goods"
            | "duty_free_stores"
            | "eating_places_restaurants"
            | "educational_services"
            | "electric_razor_stores"
            | "electrical_parts_and_equipment"
            | "electrical_services"
            | "electronics_repair_shops"
            | "electronics_stores"
            | "elementary_secondary_schools"
            | "employment_temp_agencies"
            | "equipment_rental"
            | "exterminating_services"
            | "family_clothing_stores"
            | "fast_food_restaurants"
            | "financial_institutions"
            | "fines_government_administrative_entities"
            | "fireplace_fireplace_screens_and_accessories_stores"
            | "floor_covering_stores"
            | "florists"
            | "florists_supplies_nursery_stock_and_flowers"
            | "freezer_and_locker_meat_provisioners"
            | "fuel_dealers_non_automotive"
            | "funeral_services_crematories"
            | "furniture_home_furnishings_and_equipment_stores_except_appliances"
            | "furniture_repair_refinishing"
            | "furriers_and_fur_shops"
            | "general_services"
            | "gift_card_novelty_and_souvenir_shops"
            | "glass_paint_and_wallpaper_stores"
            | "glassware_crystal_stores"
            | "golf_courses_public"
            | "government_services"
            | "grocery_stores_supermarkets"
            | "hardware_equipment_and_supplies"
            | "hardware_stores"
            | "health_and_beauty_spas"
            | "hearing_aids_sales_and_supplies"
            | "heating_plumbing_a_c"
            | "hobby_toy_and_game_shops"
            | "home_supply_warehouse_stores"
            | "hospitals"
            | "hotels_motels_and_resorts"
            | "household_appliance_stores"
            | "industrial_supplies"
            | "information_retrieval_services"
            | "insurance_default"
            | "insurance_underwriting_premiums"
            | "intra_company_purchases"
            | "jewelry_stores_watches_clocks_and_silverware_stores"
            | "landscaping_services"
            | "laundries"
            | "laundry_cleaning_services"
            | "legal_services_attorneys"
            | "luggage_and_leather_goods_stores"
            | "lumber_building_materials_stores"
            | "manual_cash_disburse"
            | "marinas_service_and_supplies"
            | "masonry_stonework_and_plaster"
            | "massage_parlors"
            | "medical_and_dental_labs"
            | "medical_dental_ophthalmic_and_hospital_equipment_and_supplies"
            | "medical_services"
            | "membership_organizations"
            | "mens_and_boys_clothing_and_accessories_stores"
            | "mens_womens_clothing_stores"
            | "metal_service_centers"
            | "miscellaneous"
            | "miscellaneous_apparel_and_accessory_shops"
            | "miscellaneous_auto_dealers"
            | "miscellaneous_business_services"
            | "miscellaneous_food_stores"
            | "miscellaneous_general_merchandise"
            | "miscellaneous_general_services"
            | "miscellaneous_home_furnishing_specialty_stores"
            | "miscellaneous_publishing_and_printing"
            | "miscellaneous_recreation_services"
            | "miscellaneous_repair_shops"
            | "miscellaneous_specialty_retail"
            | "mobile_home_dealers"
            | "motion_picture_theaters"
            | "motor_freight_carriers_and_trucking"
            | "motor_homes_dealers"
            | "motor_vehicle_supplies_and_new_parts"
            | "motorcycle_shops_and_dealers"
            | "motorcycle_shops_dealers"
            | "music_stores_musical_instruments_pianos_and_sheet_music"
            | "news_dealers_and_newsstands"
            | "non_fi_money_orders"
            | "non_fi_stored_value_card_purchase_load"
            | "nondurable_goods"
            | "nurseries_lawn_and_garden_supply_stores"
            | "nursing_personal_care"
            | "office_and_commercial_furniture"
            | "opticians_eyeglasses"
            | "optometrists_ophthalmologist"
            | "orthopedic_goods_prosthetic_devices"
            | "osteopaths"
            | "package_stores_beer_wine_and_liquor"
            | "paints_varnishes_and_supplies"
            | "parking_lots_garages"
            | "passenger_railways"
            | "pawn_shops"
            | "pet_shops_pet_food_and_supplies"
            | "petroleum_and_petroleum_products"
            | "photo_developing"
            | "photographic_photocopy_microfilm_equipment_and_supplies"
            | "photographic_studios"
            | "picture_video_production"
            | "piece_goods_notions_and_other_dry_goods"
            | "plumbing_heating_equipment_and_supplies"
            | "political_organizations"
            | "postal_services_government_only"
            | "precious_stones_and_metals_watches_and_jewelry"
            | "professional_services"
            | "public_warehousing_and_storage"
            | "quick_copy_repro_and_blueprint"
            | "railroads"
            | "real_estate_agents_and_managers_rentals"
            | "record_stores"
            | "recreational_vehicle_rentals"
            | "religious_goods_stores"
            | "religious_organizations"
            | "roofing_siding_sheet_metal"
            | "secretarial_support_services"
            | "security_brokers_dealers"
            | "service_stations"
            | "sewing_needlework_fabric_and_piece_goods_stores"
            | "shoe_repair_hat_cleaning"
            | "shoe_stores"
            | "small_appliance_repair"
            | "snowmobile_dealers"
            | "special_trade_services"
            | "specialty_cleaning"
            | "sporting_goods_stores"
            | "sporting_recreation_camps"
            | "sports_and_riding_apparel_stores"
            | "sports_clubs_fields"
            | "stamp_and_coin_stores"
            | "stationary_office_supplies_printing_and_writing_paper"
            | "stationery_stores_office_and_school_supply_stores"
            | "swimming_pools_sales"
            | "t_ui_travel_germany"
            | "tailors_alterations"
            | "tax_payments_government_agencies"
            | "tax_preparation_services"
            | "taxicabs_limousines"
            | "telecommunication_equipment_and_telephone_sales"
            | "telecommunication_services"
            | "telegraph_services"
            | "tent_and_awning_shops"
            | "testing_laboratories"
            | "theatrical_ticket_agencies"
            | "timeshares"
            | "tire_retreading_and_repair"
            | "tolls_bridge_fees"
            | "tourist_attractions_and_exhibits"
            | "towing_services"
            | "trailer_parks_campgrounds"
            | "transportation_services"
            | "travel_agencies_tour_operators"
            | "truck_stop_iteration"
            | "truck_utility_trailer_rentals"
            | "typesetting_plate_making_and_related_services"
            | "typewriter_stores"
            | "u_s_federal_government_agencies_or_departments"
            | "uniforms_commercial_clothing"
            | "used_merchandise_and_secondhand_stores"
            | "utilities"
            | "variety_stores"
            | "veterinary_services"
            | "video_amusement_game_supplies"
            | "video_game_arcades"
            | "video_tape_rental_stores"
            | "vocational_trade_schools"
            | "watch_jewelry_repair"
            | "welding_repair"
            | "wholesale_clubs"
            | "wig_and_toupee_stores"
            | "wires_money_orders"
            | "womens_accessory_and_specialty_shops"
            | "womens_ready_to_wear_stores"
            | "wrecking_and_salvage_yards"
          )[];
          interval: "all_time" | "daily" | "monthly" | "per_authorization" | "weekly" | "yearly";
        }[];
        spending_limits_currency?: string;
      };
      status?: "active" | "inactive";
      type: "company" | "individual";
    };
    export type RequestHeaders = {};
    export type ResponseBody = IssuingCardholder;
  }
  /**
   * @description <p>Retrieves an Issuing <code>Cardholder</code> object.</p>
   * @name GetIssuingCardholdersCardholder
   * @request GET:/v1/issuing/cardholders/{cardholder}
   * @secure
   * @response `200` `IssuingCardholder` Successful response.
   * @response `default` `Error` Error response.
   */
  export namespace GetIssuingCardholdersCardholder {
    export type RequestParams = { cardholder: string };
    export type RequestQuery = { expand?: string[] };
    export type RequestBody = CardMandatePaymentMethodDetails;
    export type RequestHeaders = {};
    export type ResponseBody = IssuingCardholder;
  }
  /**
   * @description <p>Updates the specified Issuing <code>Cardholder</code> object by setting the values of the parameters passed. Any parameters not provided will be left unchanged.</p>
   * @name PostIssuingCardholdersCardholder
   * @request POST:/v1/issuing/cardholders/{cardholder}
   * @secure
   * @response `200` `IssuingCardholder` Successful response.
   * @response `default` `Error` Error response.
   */
  export namespace PostIssuingCardholdersCardholder {
    export type RequestParams = { cardholder: string };
    export type RequestQuery = {};
    export type RequestBody = {
      billing?: {
        address: { city: string; country: string; line1: string; line2?: string; postal_code: string; state?: string };
      };
      company?: { tax_id?: string };
      email?: string;
      expand?: string[];
      individual?: {
        dob?: { day: number; month: number; year: number };
        first_name: string;
        last_name: string;
        verification?: { document?: { back?: string; front?: string } };
      };
      metadata?: Record<string, string>;
      phone_number?: string;
      spending_controls?: {
        allowed_categories?: (
          | "ac_refrigeration_repair"
          | "accounting_bookkeeping_services"
          | "advertising_services"
          | "agricultural_cooperative"
          | "airlines_air_carriers"
          | "airports_flying_fields"
          | "ambulance_services"
          | "amusement_parks_carnivals"
          | "antique_reproductions"
          | "antique_shops"
          | "aquariums"
          | "architectural_surveying_services"
          | "art_dealers_and_galleries"
          | "artists_supply_and_craft_shops"
          | "auto_and_home_supply_stores"
          | "auto_body_repair_shops"
          | "auto_paint_shops"
          | "auto_service_shops"
          | "automated_cash_disburse"
          | "automated_fuel_dispensers"
          | "automobile_associations"
          | "automotive_parts_and_accessories_stores"
          | "automotive_tire_stores"
          | "bail_and_bond_payments"
          | "bakeries"
          | "bands_orchestras"
          | "barber_and_beauty_shops"
          | "betting_casino_gambling"
          | "bicycle_shops"
          | "billiard_pool_establishments"
          | "boat_dealers"
          | "boat_rentals_and_leases"
          | "book_stores"
          | "books_periodicals_and_newspapers"
          | "bowling_alleys"
          | "bus_lines"
          | "business_secretarial_schools"
          | "buying_shopping_services"
          | "cable_satellite_and_other_pay_television_and_radio"
          | "camera_and_photographic_supply_stores"
          | "candy_nut_and_confectionery_stores"
          | "car_and_truck_dealers_new_used"
          | "car_and_truck_dealers_used_only"
          | "car_rental_agencies"
          | "car_washes"
          | "carpentry_services"
          | "carpet_upholstery_cleaning"
          | "caterers"
          | "charitable_and_social_service_organizations_fundraising"
          | "chemicals_and_allied_products"
          | "child_care_services"
          | "childrens_and_infants_wear_stores"
          | "chiropodists_podiatrists"
          | "chiropractors"
          | "cigar_stores_and_stands"
          | "civic_social_fraternal_associations"
          | "cleaning_and_maintenance"
          | "clothing_rental"
          | "colleges_universities"
          | "commercial_equipment"
          | "commercial_footwear"
          | "commercial_photography_art_and_graphics"
          | "commuter_transport_and_ferries"
          | "computer_network_services"
          | "computer_programming"
          | "computer_repair"
          | "computer_software_stores"
          | "computers_peripherals_and_software"
          | "concrete_work_services"
          | "construction_materials"
          | "consulting_public_relations"
          | "correspondence_schools"
          | "cosmetic_stores"
          | "counseling_services"
          | "country_clubs"
          | "courier_services"
          | "court_costs"
          | "credit_reporting_agencies"
          | "cruise_lines"
          | "dairy_products_stores"
          | "dance_hall_studios_schools"
          | "dating_escort_services"
          | "dentists_orthodontists"
          | "department_stores"
          | "detective_agencies"
          | "digital_goods_applications"
          | "digital_goods_games"
          | "digital_goods_large_volume"
          | "digital_goods_media"
          | "direct_marketing_catalog_merchant"
          | "direct_marketing_combination_catalog_and_retail_merchant"
          | "direct_marketing_inbound_telemarketing"
          | "direct_marketing_insurance_services"
          | "direct_marketing_other"
          | "direct_marketing_outbound_telemarketing"
          | "direct_marketing_subscription"
          | "direct_marketing_travel"
          | "discount_stores"
          | "doctors"
          | "door_to_door_sales"
          | "drapery_window_covering_and_upholstery_stores"
          | "drinking_places"
          | "drug_stores_and_pharmacies"
          | "drugs_drug_proprietaries_and_druggist_sundries"
          | "dry_cleaners"
          | "durable_goods"
          | "duty_free_stores"
          | "eating_places_restaurants"
          | "educational_services"
          | "electric_razor_stores"
          | "electrical_parts_and_equipment"
          | "electrical_services"
          | "electronics_repair_shops"
          | "electronics_stores"
          | "elementary_secondary_schools"
          | "employment_temp_agencies"
          | "equipment_rental"
          | "exterminating_services"
          | "family_clothing_stores"
          | "fast_food_restaurants"
          | "financial_institutions"
          | "fines_government_administrative_entities"
          | "fireplace_fireplace_screens_and_accessories_stores"
          | "floor_covering_stores"
          | "florists"
          | "florists_supplies_nursery_stock_and_flowers"
          | "freezer_and_locker_meat_provisioners"
          | "fuel_dealers_non_automotive"
          | "funeral_services_crematories"
          | "furniture_home_furnishings_and_equipment_stores_except_appliances"
          | "furniture_repair_refinishing"
          | "furriers_and_fur_shops"
          | "general_services"
          | "gift_card_novelty_and_souvenir_shops"
          | "glass_paint_and_wallpaper_stores"
          | "glassware_crystal_stores"
          | "golf_courses_public"
          | "government_services"
          | "grocery_stores_supermarkets"
          | "hardware_equipment_and_supplies"
          | "hardware_stores"
          | "health_and_beauty_spas"
          | "hearing_aids_sales_and_supplies"
          | "heating_plumbing_a_c"
          | "hobby_toy_and_game_shops"
          | "home_supply_warehouse_stores"
          | "hospitals"
          | "hotels_motels_and_resorts"
          | "household_appliance_stores"
          | "industrial_supplies"
          | "information_retrieval_services"
          | "insurance_default"
          | "insurance_underwriting_premiums"
          | "intra_company_purchases"
          | "jewelry_stores_watches_clocks_and_silverware_stores"
          | "landscaping_services"
          | "laundries"
          | "laundry_cleaning_services"
          | "legal_services_attorneys"
          | "luggage_and_leather_goods_stores"
          | "lumber_building_materials_stores"
          | "manual_cash_disburse"
          | "marinas_service_and_supplies"
          | "masonry_stonework_and_plaster"
          | "massage_parlors"
          | "medical_and_dental_labs"
          | "medical_dental_ophthalmic_and_hospital_equipment_and_supplies"
          | "medical_services"
          | "membership_organizations"
          | "mens_and_boys_clothing_and_accessories_stores"
          | "mens_womens_clothing_stores"
          | "metal_service_centers"
          | "miscellaneous"
          | "miscellaneous_apparel_and_accessory_shops"
          | "miscellaneous_auto_dealers"
          | "miscellaneous_business_services"
          | "miscellaneous_food_stores"
          | "miscellaneous_general_merchandise"
          | "miscellaneous_general_services"
          | "miscellaneous_home_furnishing_specialty_stores"
          | "miscellaneous_publishing_and_printing"
          | "miscellaneous_recreation_services"
          | "miscellaneous_repair_shops"
          | "miscellaneous_specialty_retail"
          | "mobile_home_dealers"
          | "motion_picture_theaters"
          | "motor_freight_carriers_and_trucking"
          | "motor_homes_dealers"
          | "motor_vehicle_supplies_and_new_parts"
          | "motorcycle_shops_and_dealers"
          | "motorcycle_shops_dealers"
          | "music_stores_musical_instruments_pianos_and_sheet_music"
          | "news_dealers_and_newsstands"
          | "non_fi_money_orders"
          | "non_fi_stored_value_card_purchase_load"
          | "nondurable_goods"
          | "nurseries_lawn_and_garden_supply_stores"
          | "nursing_personal_care"
          | "office_and_commercial_furniture"
          | "opticians_eyeglasses"
          | "optometrists_ophthalmologist"
          | "orthopedic_goods_prosthetic_devices"
          | "osteopaths"
          | "package_stores_beer_wine_and_liquor"
          | "paints_varnishes_and_supplies"
          | "parking_lots_garages"
          | "passenger_railways"
          | "pawn_shops"
          | "pet_shops_pet_food_and_supplies"
          | "petroleum_and_petroleum_products"
          | "photo_developing"
          | "photographic_photocopy_microfilm_equipment_and_supplies"
          | "photographic_studios"
          | "picture_video_production"
          | "piece_goods_notions_and_other_dry_goods"
          | "plumbing_heating_equipment_and_supplies"
          | "political_organizations"
          | "postal_services_government_only"
          | "precious_stones_and_metals_watches_and_jewelry"
          | "professional_services"
          | "public_warehousing_and_storage"
          | "quick_copy_repro_and_blueprint"
          | "railroads"
          | "real_estate_agents_and_managers_rentals"
          | "record_stores"
          | "recreational_vehicle_rentals"
          | "religious_goods_stores"
          | "religious_organizations"
          | "roofing_siding_sheet_metal"
          | "secretarial_support_services"
          | "security_brokers_dealers"
          | "service_stations"
          | "sewing_needlework_fabric_and_piece_goods_stores"
          | "shoe_repair_hat_cleaning"
          | "shoe_stores"
          | "small_appliance_repair"
          | "snowmobile_dealers"
          | "special_trade_services"
          | "specialty_cleaning"
          | "sporting_goods_stores"
          | "sporting_recreation_camps"
          | "sports_and_riding_apparel_stores"
          | "sports_clubs_fields"
          | "stamp_and_coin_stores"
          | "stationary_office_supplies_printing_and_writing_paper"
          | "stationery_stores_office_and_school_supply_stores"
          | "swimming_pools_sales"
          | "t_ui_travel_germany"
          | "tailors_alterations"
          | "tax_payments_government_agencies"
          | "tax_preparation_services"
          | "taxicabs_limousines"
          | "telecommunication_equipment_and_telephone_sales"
          | "telecommunication_services"
          | "telegraph_services"
          | "tent_and_awning_shops"
          | "testing_laboratories"
          | "theatrical_ticket_agencies"
          | "timeshares"
          | "tire_retreading_and_repair"
          | "tolls_bridge_fees"
          | "tourist_attractions_and_exhibits"
          | "towing_services"
          | "trailer_parks_campgrounds"
          | "transportation_services"
          | "travel_agencies_tour_operators"
          | "truck_stop_iteration"
          | "truck_utility_trailer_rentals"
          | "typesetting_plate_making_and_related_services"
          | "typewriter_stores"
          | "u_s_federal_government_agencies_or_departments"
          | "uniforms_commercial_clothing"
          | "used_merchandise_and_secondhand_stores"
          | "utilities"
          | "variety_stores"
          | "veterinary_services"
          | "video_amusement_game_supplies"
          | "video_game_arcades"
          | "video_tape_rental_stores"
          | "vocational_trade_schools"
          | "watch_jewelry_repair"
          | "welding_repair"
          | "wholesale_clubs"
          | "wig_and_toupee_stores"
          | "wires_money_orders"
          | "womens_accessory_and_specialty_shops"
          | "womens_ready_to_wear_stores"
          | "wrecking_and_salvage_yards"
        )[];
        blocked_categories?: (
          | "ac_refrigeration_repair"
          | "accounting_bookkeeping_services"
          | "advertising_services"
          | "agricultural_cooperative"
          | "airlines_air_carriers"
          | "airports_flying_fields"
          | "ambulance_services"
          | "amusement_parks_carnivals"
          | "antique_reproductions"
          | "antique_shops"
          | "aquariums"
          | "architectural_surveying_services"
          | "art_dealers_and_galleries"
          | "artists_supply_and_craft_shops"
          | "auto_and_home_supply_stores"
          | "auto_body_repair_shops"
          | "auto_paint_shops"
          | "auto_service_shops"
          | "automated_cash_disburse"
          | "automated_fuel_dispensers"
          | "automobile_associations"
          | "automotive_parts_and_accessories_stores"
          | "automotive_tire_stores"
          | "bail_and_bond_payments"
          | "bakeries"
          | "bands_orchestras"
          | "barber_and_beauty_shops"
          | "betting_casino_gambling"
          | "bicycle_shops"
          | "billiard_pool_establishments"
          | "boat_dealers"
          | "boat_rentals_and_leases"
          | "book_stores"
          | "books_periodicals_and_newspapers"
          | "bowling_alleys"
          | "bus_lines"
          | "business_secretarial_schools"
          | "buying_shopping_services"
          | "cable_satellite_and_other_pay_television_and_radio"
          | "camera_and_photographic_supply_stores"
          | "candy_nut_and_confectionery_stores"
          | "car_and_truck_dealers_new_used"
          | "car_and_truck_dealers_used_only"
          | "car_rental_agencies"
          | "car_washes"
          | "carpentry_services"
          | "carpet_upholstery_cleaning"
          | "caterers"
          | "charitable_and_social_service_organizations_fundraising"
          | "chemicals_and_allied_products"
          | "child_care_services"
          | "childrens_and_infants_wear_stores"
          | "chiropodists_podiatrists"
          | "chiropractors"
          | "cigar_stores_and_stands"
          | "civic_social_fraternal_associations"
          | "cleaning_and_maintenance"
          | "clothing_rental"
          | "colleges_universities"
          | "commercial_equipment"
          | "commercial_footwear"
          | "commercial_photography_art_and_graphics"
          | "commuter_transport_and_ferries"
          | "computer_network_services"
          | "computer_programming"
          | "computer_repair"
          | "computer_software_stores"
          | "computers_peripherals_and_software"
          | "concrete_work_services"
          | "construction_materials"
          | "consulting_public_relations"
          | "correspondence_schools"
          | "cosmetic_stores"
          | "counseling_services"
          | "country_clubs"
          | "courier_services"
          | "court_costs"
          | "credit_reporting_agencies"
          | "cruise_lines"
          | "dairy_products_stores"
          | "dance_hall_studios_schools"
          | "dating_escort_services"
          | "dentists_orthodontists"
          | "department_stores"
          | "detective_agencies"
          | "digital_goods_applications"
          | "digital_goods_games"
          | "digital_goods_large_volume"
          | "digital_goods_media"
          | "direct_marketing_catalog_merchant"
          | "direct_marketing_combination_catalog_and_retail_merchant"
          | "direct_marketing_inbound_telemarketing"
          | "direct_marketing_insurance_services"
          | "direct_marketing_other"
          | "direct_marketing_outbound_telemarketing"
          | "direct_marketing_subscription"
          | "direct_marketing_travel"
          | "discount_stores"
          | "doctors"
          | "door_to_door_sales"
          | "drapery_window_covering_and_upholstery_stores"
          | "drinking_places"
          | "drug_stores_and_pharmacies"
          | "drugs_drug_proprietaries_and_druggist_sundries"
          | "dry_cleaners"
          | "durable_goods"
          | "duty_free_stores"
          | "eating_places_restaurants"
          | "educational_services"
          | "electric_razor_stores"
          | "electrical_parts_and_equipment"
          | "electrical_services"
          | "electronics_repair_shops"
          | "electronics_stores"
          | "elementary_secondary_schools"
          | "employment_temp_agencies"
          | "equipment_rental"
          | "exterminating_services"
          | "family_clothing_stores"
          | "fast_food_restaurants"
          | "financial_institutions"
          | "fines_government_administrative_entities"
          | "fireplace_fireplace_screens_and_accessories_stores"
          | "floor_covering_stores"
          | "florists"
          | "florists_supplies_nursery_stock_and_flowers"
          | "freezer_and_locker_meat_provisioners"
          | "fuel_dealers_non_automotive"
          | "funeral_services_crematories"
          | "furniture_home_furnishings_and_equipment_stores_except_appliances"
          | "furniture_repair_refinishing"
          | "furriers_and_fur_shops"
          | "general_services"
          | "gift_card_novelty_and_souvenir_shops"
          | "glass_paint_and_wallpaper_stores"
          | "glassware_crystal_stores"
          | "golf_courses_public"
          | "government_services"
          | "grocery_stores_supermarkets"
          | "hardware_equipment_and_supplies"
          | "hardware_stores"
          | "health_and_beauty_spas"
          | "hearing_aids_sales_and_supplies"
          | "heating_plumbing_a_c"
          | "hobby_toy_and_game_shops"
          | "home_supply_warehouse_stores"
          | "hospitals"
          | "hotels_motels_and_resorts"
          | "household_appliance_stores"
          | "industrial_supplies"
          | "information_retrieval_services"
          | "insurance_default"
          | "insurance_underwriting_premiums"
          | "intra_company_purchases"
          | "jewelry_stores_watches_clocks_and_silverware_stores"
          | "landscaping_services"
          | "laundries"
          | "laundry_cleaning_services"
          | "legal_services_attorneys"
          | "luggage_and_leather_goods_stores"
          | "lumber_building_materials_stores"
          | "manual_cash_disburse"
          | "marinas_service_and_supplies"
          | "masonry_stonework_and_plaster"
          | "massage_parlors"
          | "medical_and_dental_labs"
          | "medical_dental_ophthalmic_and_hospital_equipment_and_supplies"
          | "medical_services"
          | "membership_organizations"
          | "mens_and_boys_clothing_and_accessories_stores"
          | "mens_womens_clothing_stores"
          | "metal_service_centers"
          | "miscellaneous"
          | "miscellaneous_apparel_and_accessory_shops"
          | "miscellaneous_auto_dealers"
          | "miscellaneous_business_services"
          | "miscellaneous_food_stores"
          | "miscellaneous_general_merchandise"
          | "miscellaneous_general_services"
          | "miscellaneous_home_furnishing_specialty_stores"
          | "miscellaneous_publishing_and_printing"
          | "miscellaneous_recreation_services"
          | "miscellaneous_repair_shops"
          | "miscellaneous_specialty_retail"
          | "mobile_home_dealers"
          | "motion_picture_theaters"
          | "motor_freight_carriers_and_trucking"
          | "motor_homes_dealers"
          | "motor_vehicle_supplies_and_new_parts"
          | "motorcycle_shops_and_dealers"
          | "motorcycle_shops_dealers"
          | "music_stores_musical_instruments_pianos_and_sheet_music"
          | "news_dealers_and_newsstands"
          | "non_fi_money_orders"
          | "non_fi_stored_value_card_purchase_load"
          | "nondurable_goods"
          | "nurseries_lawn_and_garden_supply_stores"
          | "nursing_personal_care"
          | "office_and_commercial_furniture"
          | "opticians_eyeglasses"
          | "optometrists_ophthalmologist"
          | "orthopedic_goods_prosthetic_devices"
          | "osteopaths"
          | "package_stores_beer_wine_and_liquor"
          | "paints_varnishes_and_supplies"
          | "parking_lots_garages"
          | "passenger_railways"
          | "pawn_shops"
          | "pet_shops_pet_food_and_supplies"
          | "petroleum_and_petroleum_products"
          | "photo_developing"
          | "photographic_photocopy_microfilm_equipment_and_supplies"
          | "photographic_studios"
          | "picture_video_production"
          | "piece_goods_notions_and_other_dry_goods"
          | "plumbing_heating_equipment_and_supplies"
          | "political_organizations"
          | "postal_services_government_only"
          | "precious_stones_and_metals_watches_and_jewelry"
          | "professional_services"
          | "public_warehousing_and_storage"
          | "quick_copy_repro_and_blueprint"
          | "railroads"
          | "real_estate_agents_and_managers_rentals"
          | "record_stores"
          | "recreational_vehicle_rentals"
          | "religious_goods_stores"
          | "religious_organizations"
          | "roofing_siding_sheet_metal"
          | "secretarial_support_services"
          | "security_brokers_dealers"
          | "service_stations"
          | "sewing_needlework_fabric_and_piece_goods_stores"
          | "shoe_repair_hat_cleaning"
          | "shoe_stores"
          | "small_appliance_repair"
          | "snowmobile_dealers"
          | "special_trade_services"
          | "specialty_cleaning"
          | "sporting_goods_stores"
          | "sporting_recreation_camps"
          | "sports_and_riding_apparel_stores"
          | "sports_clubs_fields"
          | "stamp_and_coin_stores"
          | "stationary_office_supplies_printing_and_writing_paper"
          | "stationery_stores_office_and_school_supply_stores"
          | "swimming_pools_sales"
          | "t_ui_travel_germany"
          | "tailors_alterations"
          | "tax_payments_government_agencies"
          | "tax_preparation_services"
          | "taxicabs_limousines"
          | "telecommunication_equipment_and_telephone_sales"
          | "telecommunication_services"
          | "telegraph_services"
          | "tent_and_awning_shops"
          | "testing_laboratories"
          | "theatrical_ticket_agencies"
          | "timeshares"
          | "tire_retreading_and_repair"
          | "tolls_bridge_fees"
          | "tourist_attractions_and_exhibits"
          | "towing_services"
          | "trailer_parks_campgrounds"
          | "transportation_services"
          | "travel_agencies_tour_operators"
          | "truck_stop_iteration"
          | "truck_utility_trailer_rentals"
          | "typesetting_plate_making_and_related_services"
          | "typewriter_stores"
          | "u_s_federal_government_agencies_or_departments"
          | "uniforms_commercial_clothing"
          | "used_merchandise_and_secondhand_stores"
          | "utilities"
          | "variety_stores"
          | "veterinary_services"
          | "video_amusement_game_supplies"
          | "video_game_arcades"
          | "video_tape_rental_stores"
          | "vocational_trade_schools"
          | "watch_jewelry_repair"
          | "welding_repair"
          | "wholesale_clubs"
          | "wig_and_toupee_stores"
          | "wires_money_orders"
          | "womens_accessory_and_specialty_shops"
          | "womens_ready_to_wear_stores"
          | "wrecking_and_salvage_yards"
        )[];
        spending_limits?: {
          amount: number;
          categories?: (
            | "ac_refrigeration_repair"
            | "accounting_bookkeeping_services"
            | "advertising_services"
            | "agricultural_cooperative"
            | "airlines_air_carriers"
            | "airports_flying_fields"
            | "ambulance_services"
            | "amusement_parks_carnivals"
            | "antique_reproductions"
            | "antique_shops"
            | "aquariums"
            | "architectural_surveying_services"
            | "art_dealers_and_galleries"
            | "artists_supply_and_craft_shops"
            | "auto_and_home_supply_stores"
            | "auto_body_repair_shops"
            | "auto_paint_shops"
            | "auto_service_shops"
            | "automated_cash_disburse"
            | "automated_fuel_dispensers"
            | "automobile_associations"
            | "automotive_parts_and_accessories_stores"
            | "automotive_tire_stores"
            | "bail_and_bond_payments"
            | "bakeries"
            | "bands_orchestras"
            | "barber_and_beauty_shops"
            | "betting_casino_gambling"
            | "bicycle_shops"
            | "billiard_pool_establishments"
            | "boat_dealers"
            | "boat_rentals_and_leases"
            | "book_stores"
            | "books_periodicals_and_newspapers"
            | "bowling_alleys"
            | "bus_lines"
            | "business_secretarial_schools"
            | "buying_shopping_services"
            | "cable_satellite_and_other_pay_television_and_radio"
            | "camera_and_photographic_supply_stores"
            | "candy_nut_and_confectionery_stores"
            | "car_and_truck_dealers_new_used"
            | "car_and_truck_dealers_used_only"
            | "car_rental_agencies"
            | "car_washes"
            | "carpentry_services"
            | "carpet_upholstery_cleaning"
            | "caterers"
            | "charitable_and_social_service_organizations_fundraising"
            | "chemicals_and_allied_products"
            | "child_care_services"
            | "childrens_and_infants_wear_stores"
            | "chiropodists_podiatrists"
            | "chiropractors"
            | "cigar_stores_and_stands"
            | "civic_social_fraternal_associations"
            | "cleaning_and_maintenance"
            | "clothing_rental"
            | "colleges_universities"
            | "commercial_equipment"
            | "commercial_footwear"
            | "commercial_photography_art_and_graphics"
            | "commuter_transport_and_ferries"
            | "computer_network_services"
            | "computer_programming"
            | "computer_repair"
            | "computer_software_stores"
            | "computers_peripherals_and_software"
            | "concrete_work_services"
            | "construction_materials"
            | "consulting_public_relations"
            | "correspondence_schools"
            | "cosmetic_stores"
            | "counseling_services"
            | "country_clubs"
            | "courier_services"
            | "court_costs"
            | "credit_reporting_agencies"
            | "cruise_lines"
            | "dairy_products_stores"
            | "dance_hall_studios_schools"
            | "dating_escort_services"
            | "dentists_orthodontists"
            | "department_stores"
            | "detective_agencies"
            | "digital_goods_applications"
            | "digital_goods_games"
            | "digital_goods_large_volume"
            | "digital_goods_media"
            | "direct_marketing_catalog_merchant"
            | "direct_marketing_combination_catalog_and_retail_merchant"
            | "direct_marketing_inbound_telemarketing"
            | "direct_marketing_insurance_services"
            | "direct_marketing_other"
            | "direct_marketing_outbound_telemarketing"
            | "direct_marketing_subscription"
            | "direct_marketing_travel"
            | "discount_stores"
            | "doctors"
            | "door_to_door_sales"
            | "drapery_window_covering_and_upholstery_stores"
            | "drinking_places"
            | "drug_stores_and_pharmacies"
            | "drugs_drug_proprietaries_and_druggist_sundries"
            | "dry_cleaners"
            | "durable_goods"
            | "duty_free_stores"
            | "eating_places_restaurants"
            | "educational_services"
            | "electric_razor_stores"
            | "electrical_parts_and_equipment"
            | "electrical_services"
            | "electronics_repair_shops"
            | "electronics_stores"
            | "elementary_secondary_schools"
            | "employment_temp_agencies"
            | "equipment_rental"
            | "exterminating_services"
            | "family_clothing_stores"
            | "fast_food_restaurants"
            | "financial_institutions"
            | "fines_government_administrative_entities"
            | "fireplace_fireplace_screens_and_accessories_stores"
            | "floor_covering_stores"
            | "florists"
            | "florists_supplies_nursery_stock_and_flowers"
            | "freezer_and_locker_meat_provisioners"
            | "fuel_dealers_non_automotive"
            | "funeral_services_crematories"
            | "furniture_home_furnishings_and_equipment_stores_except_appliances"
            | "furniture_repair_refinishing"
            | "furriers_and_fur_shops"
            | "general_services"
            | "gift_card_novelty_and_souvenir_shops"
            | "glass_paint_and_wallpaper_stores"
            | "glassware_crystal_stores"
            | "golf_courses_public"
            | "government_services"
            | "grocery_stores_supermarkets"
            | "hardware_equipment_and_supplies"
            | "hardware_stores"
            | "health_and_beauty_spas"
            | "hearing_aids_sales_and_supplies"
            | "heating_plumbing_a_c"
            | "hobby_toy_and_game_shops"
            | "home_supply_warehouse_stores"
            | "hospitals"
            | "hotels_motels_and_resorts"
            | "household_appliance_stores"
            | "industrial_supplies"
            | "information_retrieval_services"
            | "insurance_default"
            | "insurance_underwriting_premiums"
            | "intra_company_purchases"
            | "jewelry_stores_watches_clocks_and_silverware_stores"
            | "landscaping_services"
            | "laundries"
            | "laundry_cleaning_services"
            | "legal_services_attorneys"
            | "luggage_and_leather_goods_stores"
            | "lumber_building_materials_stores"
            | "manual_cash_disburse"
            | "marinas_service_and_supplies"
            | "masonry_stonework_and_plaster"
            | "massage_parlors"
            | "medical_and_dental_labs"
            | "medical_dental_ophthalmic_and_hospital_equipment_and_supplies"
            | "medical_services"
            | "membership_organizations"
            | "mens_and_boys_clothing_and_accessories_stores"
            | "mens_womens_clothing_stores"
            | "metal_service_centers"
            | "miscellaneous"
            | "miscellaneous_apparel_and_accessory_shops"
            | "miscellaneous_auto_dealers"
            | "miscellaneous_business_services"
            | "miscellaneous_food_stores"
            | "miscellaneous_general_merchandise"
            | "miscellaneous_general_services"
            | "miscellaneous_home_furnishing_specialty_stores"
            | "miscellaneous_publishing_and_printing"
            | "miscellaneous_recreation_services"
            | "miscellaneous_repair_shops"
            | "miscellaneous_specialty_retail"
            | "mobile_home_dealers"
            | "motion_picture_theaters"
            | "motor_freight_carriers_and_trucking"
            | "motor_homes_dealers"
            | "motor_vehicle_supplies_and_new_parts"
            | "motorcycle_shops_and_dealers"
            | "motorcycle_shops_dealers"
            | "music_stores_musical_instruments_pianos_and_sheet_music"
            | "news_dealers_and_newsstands"
            | "non_fi_money_orders"
            | "non_fi_stored_value_card_purchase_load"
            | "nondurable_goods"
            | "nurseries_lawn_and_garden_supply_stores"
            | "nursing_personal_care"
            | "office_and_commercial_furniture"
            | "opticians_eyeglasses"
            | "optometrists_ophthalmologist"
            | "orthopedic_goods_prosthetic_devices"
            | "osteopaths"
            | "package_stores_beer_wine_and_liquor"
            | "paints_varnishes_and_supplies"
            | "parking_lots_garages"
            | "passenger_railways"
            | "pawn_shops"
            | "pet_shops_pet_food_and_supplies"
            | "petroleum_and_petroleum_products"
            | "photo_developing"
            | "photographic_photocopy_microfilm_equipment_and_supplies"
            | "photographic_studios"
            | "picture_video_production"
            | "piece_goods_notions_and_other_dry_goods"
            | "plumbing_heating_equipment_and_supplies"
            | "political_organizations"
            | "postal_services_government_only"
            | "precious_stones_and_metals_watches_and_jewelry"
            | "professional_services"
            | "public_warehousing_and_storage"
            | "quick_copy_repro_and_blueprint"
            | "railroads"
            | "real_estate_agents_and_managers_rentals"
            | "record_stores"
            | "recreational_vehicle_rentals"
            | "religious_goods_stores"
            | "religious_organizations"
            | "roofing_siding_sheet_metal"
            | "secretarial_support_services"
            | "security_brokers_dealers"
            | "service_stations"
            | "sewing_needlework_fabric_and_piece_goods_stores"
            | "shoe_repair_hat_cleaning"
            | "shoe_stores"
            | "small_appliance_repair"
            | "snowmobile_dealers"
            | "special_trade_services"
            | "specialty_cleaning"
            | "sporting_goods_stores"
            | "sporting_recreation_camps"
            | "sports_and_riding_apparel_stores"
            | "sports_clubs_fields"
            | "stamp_and_coin_stores"
            | "stationary_office_supplies_printing_and_writing_paper"
            | "stationery_stores_office_and_school_supply_stores"
            | "swimming_pools_sales"
            | "t_ui_travel_germany"
            | "tailors_alterations"
            | "tax_payments_government_agencies"
            | "tax_preparation_services"
            | "taxicabs_limousines"
            | "telecommunication_equipment_and_telephone_sales"
            | "telecommunication_services"
            | "telegraph_services"
            | "tent_and_awning_shops"
            | "testing_laboratories"
            | "theatrical_ticket_agencies"
            | "timeshares"
            | "tire_retreading_and_repair"
            | "tolls_bridge_fees"
            | "tourist_attractions_and_exhibits"
            | "towing_services"
            | "trailer_parks_campgrounds"
            | "transportation_services"
            | "travel_agencies_tour_operators"
            | "truck_stop_iteration"
            | "truck_utility_trailer_rentals"
            | "typesetting_plate_making_and_related_services"
            | "typewriter_stores"
            | "u_s_federal_government_agencies_or_departments"
            | "uniforms_commercial_clothing"
            | "used_merchandise_and_secondhand_stores"
            | "utilities"
            | "variety_stores"
            | "veterinary_services"
            | "video_amusement_game_supplies"
            | "video_game_arcades"
            | "video_tape_rental_stores"
            | "vocational_trade_schools"
            | "watch_jewelry_repair"
            | "welding_repair"
            | "wholesale_clubs"
            | "wig_and_toupee_stores"
            | "wires_money_orders"
            | "womens_accessory_and_specialty_shops"
            | "womens_ready_to_wear_stores"
            | "wrecking_and_salvage_yards"
          )[];
          interval: "all_time" | "daily" | "monthly" | "per_authorization" | "weekly" | "yearly";
        }[];
        spending_limits_currency?: string;
      };
      status?: "active" | "inactive";
    };
    export type RequestHeaders = {};
    export type ResponseBody = IssuingCardholder;
  }
  /**
   * @description <p>Returns a list of Issuing <code>Card</code> objects. The objects are sorted in descending order by creation date, with the most recently created object appearing first.</p>
   * @name GetIssuingCards
   * @request GET:/v1/issuing/cards
   * @secure
   * @response `200` `{ data: (IssuingCard)[], has_more: boolean, object: "list", url: string }` Successful response.
   * @response `default` `Error` Error response.
   */
  export namespace GetIssuingCards {
    export type RequestParams = {};
    export type RequestQuery = {
      cardholder?: string;
      created?: { gt?: number; gte?: number; lt?: number; lte?: number } | number;
      ending_before?: string;
      exp_month?: number;
      exp_year?: number;
      expand?: string[];
      last4?: string;
      limit?: number;
      starting_after?: string;
      status?: "active" | "canceled" | "inactive";
      type?: "physical" | "virtual";
    };
    export type RequestBody = CardMandatePaymentMethodDetails;
    export type RequestHeaders = {};
    export type ResponseBody = { data: IssuingCard[]; has_more: boolean; object: "list"; url: string };
  }
  /**
   * @description <p>Creates an Issuing <code>Card</code> object.</p>
   * @name PostIssuingCards
   * @request POST:/v1/issuing/cards
   * @secure
   * @response `200` `IssuingCard` Successful response.
   * @response `default` `Error` Error response.
   */
  export namespace PostIssuingCards {
    export type RequestParams = {};
    export type RequestQuery = {};
    export type RequestBody = {
      cardholder?: string;
      currency: string;
      expand?: string[];
      metadata?: Record<string, string>;
      replacement_for?: string;
      replacement_reason?: "damaged" | "expired" | "lost" | "stolen";
      shipping?: {
        address: { city: string; country: string; line1: string; line2?: string; postal_code: string; state?: string };
        name: string;
        service?: "express" | "priority" | "standard";
        type?: "bulk" | "individual";
      };
      spending_controls?: {
        allowed_categories?: (
          | "ac_refrigeration_repair"
          | "accounting_bookkeeping_services"
          | "advertising_services"
          | "agricultural_cooperative"
          | "airlines_air_carriers"
          | "airports_flying_fields"
          | "ambulance_services"
          | "amusement_parks_carnivals"
          | "antique_reproductions"
          | "antique_shops"
          | "aquariums"
          | "architectural_surveying_services"
          | "art_dealers_and_galleries"
          | "artists_supply_and_craft_shops"
          | "auto_and_home_supply_stores"
          | "auto_body_repair_shops"
          | "auto_paint_shops"
          | "auto_service_shops"
          | "automated_cash_disburse"
          | "automated_fuel_dispensers"
          | "automobile_associations"
          | "automotive_parts_and_accessories_stores"
          | "automotive_tire_stores"
          | "bail_and_bond_payments"
          | "bakeries"
          | "bands_orchestras"
          | "barber_and_beauty_shops"
          | "betting_casino_gambling"
          | "bicycle_shops"
          | "billiard_pool_establishments"
          | "boat_dealers"
          | "boat_rentals_and_leases"
          | "book_stores"
          | "books_periodicals_and_newspapers"
          | "bowling_alleys"
          | "bus_lines"
          | "business_secretarial_schools"
          | "buying_shopping_services"
          | "cable_satellite_and_other_pay_television_and_radio"
          | "camera_and_photographic_supply_stores"
          | "candy_nut_and_confectionery_stores"
          | "car_and_truck_dealers_new_used"
          | "car_and_truck_dealers_used_only"
          | "car_rental_agencies"
          | "car_washes"
          | "carpentry_services"
          | "carpet_upholstery_cleaning"
          | "caterers"
          | "charitable_and_social_service_organizations_fundraising"
          | "chemicals_and_allied_products"
          | "child_care_services"
          | "childrens_and_infants_wear_stores"
          | "chiropodists_podiatrists"
          | "chiropractors"
          | "cigar_stores_and_stands"
          | "civic_social_fraternal_associations"
          | "cleaning_and_maintenance"
          | "clothing_rental"
          | "colleges_universities"
          | "commercial_equipment"
          | "commercial_footwear"
          | "commercial_photography_art_and_graphics"
          | "commuter_transport_and_ferries"
          | "computer_network_services"
          | "computer_programming"
          | "computer_repair"
          | "computer_software_stores"
          | "computers_peripherals_and_software"
          | "concrete_work_services"
          | "construction_materials"
          | "consulting_public_relations"
          | "correspondence_schools"
          | "cosmetic_stores"
          | "counseling_services"
          | "country_clubs"
          | "courier_services"
          | "court_costs"
          | "credit_reporting_agencies"
          | "cruise_lines"
          | "dairy_products_stores"
          | "dance_hall_studios_schools"
          | "dating_escort_services"
          | "dentists_orthodontists"
          | "department_stores"
          | "detective_agencies"
          | "digital_goods_applications"
          | "digital_goods_games"
          | "digital_goods_large_volume"
          | "digital_goods_media"
          | "direct_marketing_catalog_merchant"
          | "direct_marketing_combination_catalog_and_retail_merchant"
          | "direct_marketing_inbound_telemarketing"
          | "direct_marketing_insurance_services"
          | "direct_marketing_other"
          | "direct_marketing_outbound_telemarketing"
          | "direct_marketing_subscription"
          | "direct_marketing_travel"
          | "discount_stores"
          | "doctors"
          | "door_to_door_sales"
          | "drapery_window_covering_and_upholstery_stores"
          | "drinking_places"
          | "drug_stores_and_pharmacies"
          | "drugs_drug_proprietaries_and_druggist_sundries"
          | "dry_cleaners"
          | "durable_goods"
          | "duty_free_stores"
          | "eating_places_restaurants"
          | "educational_services"
          | "electric_razor_stores"
          | "electrical_parts_and_equipment"
          | "electrical_services"
          | "electronics_repair_shops"
          | "electronics_stores"
          | "elementary_secondary_schools"
          | "employment_temp_agencies"
          | "equipment_rental"
          | "exterminating_services"
          | "family_clothing_stores"
          | "fast_food_restaurants"
          | "financial_institutions"
          | "fines_government_administrative_entities"
          | "fireplace_fireplace_screens_and_accessories_stores"
          | "floor_covering_stores"
          | "florists"
          | "florists_supplies_nursery_stock_and_flowers"
          | "freezer_and_locker_meat_provisioners"
          | "fuel_dealers_non_automotive"
          | "funeral_services_crematories"
          | "furniture_home_furnishings_and_equipment_stores_except_appliances"
          | "furniture_repair_refinishing"
          | "furriers_and_fur_shops"
          | "general_services"
          | "gift_card_novelty_and_souvenir_shops"
          | "glass_paint_and_wallpaper_stores"
          | "glassware_crystal_stores"
          | "golf_courses_public"
          | "government_services"
          | "grocery_stores_supermarkets"
          | "hardware_equipment_and_supplies"
          | "hardware_stores"
          | "health_and_beauty_spas"
          | "hearing_aids_sales_and_supplies"
          | "heating_plumbing_a_c"
          | "hobby_toy_and_game_shops"
          | "home_supply_warehouse_stores"
          | "hospitals"
          | "hotels_motels_and_resorts"
          | "household_appliance_stores"
          | "industrial_supplies"
          | "information_retrieval_services"
          | "insurance_default"
          | "insurance_underwriting_premiums"
          | "intra_company_purchases"
          | "jewelry_stores_watches_clocks_and_silverware_stores"
          | "landscaping_services"
          | "laundries"
          | "laundry_cleaning_services"
          | "legal_services_attorneys"
          | "luggage_and_leather_goods_stores"
          | "lumber_building_materials_stores"
          | "manual_cash_disburse"
          | "marinas_service_and_supplies"
          | "masonry_stonework_and_plaster"
          | "massage_parlors"
          | "medical_and_dental_labs"
          | "medical_dental_ophthalmic_and_hospital_equipment_and_supplies"
          | "medical_services"
          | "membership_organizations"
          | "mens_and_boys_clothing_and_accessories_stores"
          | "mens_womens_clothing_stores"
          | "metal_service_centers"
          | "miscellaneous"
          | "miscellaneous_apparel_and_accessory_shops"
          | "miscellaneous_auto_dealers"
          | "miscellaneous_business_services"
          | "miscellaneous_food_stores"
          | "miscellaneous_general_merchandise"
          | "miscellaneous_general_services"
          | "miscellaneous_home_furnishing_specialty_stores"
          | "miscellaneous_publishing_and_printing"
          | "miscellaneous_recreation_services"
          | "miscellaneous_repair_shops"
          | "miscellaneous_specialty_retail"
          | "mobile_home_dealers"
          | "motion_picture_theaters"
          | "motor_freight_carriers_and_trucking"
          | "motor_homes_dealers"
          | "motor_vehicle_supplies_and_new_parts"
          | "motorcycle_shops_and_dealers"
          | "motorcycle_shops_dealers"
          | "music_stores_musical_instruments_pianos_and_sheet_music"
          | "news_dealers_and_newsstands"
          | "non_fi_money_orders"
          | "non_fi_stored_value_card_purchase_load"
          | "nondurable_goods"
          | "nurseries_lawn_and_garden_supply_stores"
          | "nursing_personal_care"
          | "office_and_commercial_furniture"
          | "opticians_eyeglasses"
          | "optometrists_ophthalmologist"
          | "orthopedic_goods_prosthetic_devices"
          | "osteopaths"
          | "package_stores_beer_wine_and_liquor"
          | "paints_varnishes_and_supplies"
          | "parking_lots_garages"
          | "passenger_railways"
          | "pawn_shops"
          | "pet_shops_pet_food_and_supplies"
          | "petroleum_and_petroleum_products"
          | "photo_developing"
          | "photographic_photocopy_microfilm_equipment_and_supplies"
          | "photographic_studios"
          | "picture_video_production"
          | "piece_goods_notions_and_other_dry_goods"
          | "plumbing_heating_equipment_and_supplies"
          | "political_organizations"
          | "postal_services_government_only"
          | "precious_stones_and_metals_watches_and_jewelry"
          | "professional_services"
          | "public_warehousing_and_storage"
          | "quick_copy_repro_and_blueprint"
          | "railroads"
          | "real_estate_agents_and_managers_rentals"
          | "record_stores"
          | "recreational_vehicle_rentals"
          | "religious_goods_stores"
          | "religious_organizations"
          | "roofing_siding_sheet_metal"
          | "secretarial_support_services"
          | "security_brokers_dealers"
          | "service_stations"
          | "sewing_needlework_fabric_and_piece_goods_stores"
          | "shoe_repair_hat_cleaning"
          | "shoe_stores"
          | "small_appliance_repair"
          | "snowmobile_dealers"
          | "special_trade_services"
          | "specialty_cleaning"
          | "sporting_goods_stores"
          | "sporting_recreation_camps"
          | "sports_and_riding_apparel_stores"
          | "sports_clubs_fields"
          | "stamp_and_coin_stores"
          | "stationary_office_supplies_printing_and_writing_paper"
          | "stationery_stores_office_and_school_supply_stores"
          | "swimming_pools_sales"
          | "t_ui_travel_germany"
          | "tailors_alterations"
          | "tax_payments_government_agencies"
          | "tax_preparation_services"
          | "taxicabs_limousines"
          | "telecommunication_equipment_and_telephone_sales"
          | "telecommunication_services"
          | "telegraph_services"
          | "tent_and_awning_shops"
          | "testing_laboratories"
          | "theatrical_ticket_agencies"
          | "timeshares"
          | "tire_retreading_and_repair"
          | "tolls_bridge_fees"
          | "tourist_attractions_and_exhibits"
          | "towing_services"
          | "trailer_parks_campgrounds"
          | "transportation_services"
          | "travel_agencies_tour_operators"
          | "truck_stop_iteration"
          | "truck_utility_trailer_rentals"
          | "typesetting_plate_making_and_related_services"
          | "typewriter_stores"
          | "u_s_federal_government_agencies_or_departments"
          | "uniforms_commercial_clothing"
          | "used_merchandise_and_secondhand_stores"
          | "utilities"
          | "variety_stores"
          | "veterinary_services"
          | "video_amusement_game_supplies"
          | "video_game_arcades"
          | "video_tape_rental_stores"
          | "vocational_trade_schools"
          | "watch_jewelry_repair"
          | "welding_repair"
          | "wholesale_clubs"
          | "wig_and_toupee_stores"
          | "wires_money_orders"
          | "womens_accessory_and_specialty_shops"
          | "womens_ready_to_wear_stores"
          | "wrecking_and_salvage_yards"
        )[];
        blocked_categories?: (
          | "ac_refrigeration_repair"
          | "accounting_bookkeeping_services"
          | "advertising_services"
          | "agricultural_cooperative"
          | "airlines_air_carriers"
          | "airports_flying_fields"
          | "ambulance_services"
          | "amusement_parks_carnivals"
          | "antique_reproductions"
          | "antique_shops"
          | "aquariums"
          | "architectural_surveying_services"
          | "art_dealers_and_galleries"
          | "artists_supply_and_craft_shops"
          | "auto_and_home_supply_stores"
          | "auto_body_repair_shops"
          | "auto_paint_shops"
          | "auto_service_shops"
          | "automated_cash_disburse"
          | "automated_fuel_dispensers"
          | "automobile_associations"
          | "automotive_parts_and_accessories_stores"
          | "automotive_tire_stores"
          | "bail_and_bond_payments"
          | "bakeries"
          | "bands_orchestras"
          | "barber_and_beauty_shops"
          | "betting_casino_gambling"
          | "bicycle_shops"
          | "billiard_pool_establishments"
          | "boat_dealers"
          | "boat_rentals_and_leases"
          | "book_stores"
          | "books_periodicals_and_newspapers"
          | "bowling_alleys"
          | "bus_lines"
          | "business_secretarial_schools"
          | "buying_shopping_services"
          | "cable_satellite_and_other_pay_television_and_radio"
          | "camera_and_photographic_supply_stores"
          | "candy_nut_and_confectionery_stores"
          | "car_and_truck_dealers_new_used"
          | "car_and_truck_dealers_used_only"
          | "car_rental_agencies"
          | "car_washes"
          | "carpentry_services"
          | "carpet_upholstery_cleaning"
          | "caterers"
          | "charitable_and_social_service_organizations_fundraising"
          | "chemicals_and_allied_products"
          | "child_care_services"
          | "childrens_and_infants_wear_stores"
          | "chiropodists_podiatrists"
          | "chiropractors"
          | "cigar_stores_and_stands"
          | "civic_social_fraternal_associations"
          | "cleaning_and_maintenance"
          | "clothing_rental"
          | "colleges_universities"
          | "commercial_equipment"
          | "commercial_footwear"
          | "commercial_photography_art_and_graphics"
          | "commuter_transport_and_ferries"
          | "computer_network_services"
          | "computer_programming"
          | "computer_repair"
          | "computer_software_stores"
          | "computers_peripherals_and_software"
          | "concrete_work_services"
          | "construction_materials"
          | "consulting_public_relations"
          | "correspondence_schools"
          | "cosmetic_stores"
          | "counseling_services"
          | "country_clubs"
          | "courier_services"
          | "court_costs"
          | "credit_reporting_agencies"
          | "cruise_lines"
          | "dairy_products_stores"
          | "dance_hall_studios_schools"
          | "dating_escort_services"
          | "dentists_orthodontists"
          | "department_stores"
          | "detective_agencies"
          | "digital_goods_applications"
          | "digital_goods_games"
          | "digital_goods_large_volume"
          | "digital_goods_media"
          | "direct_marketing_catalog_merchant"
          | "direct_marketing_combination_catalog_and_retail_merchant"
          | "direct_marketing_inbound_telemarketing"
          | "direct_marketing_insurance_services"
          | "direct_marketing_other"
          | "direct_marketing_outbound_telemarketing"
          | "direct_marketing_subscription"
          | "direct_marketing_travel"
          | "discount_stores"
          | "doctors"
          | "door_to_door_sales"
          | "drapery_window_covering_and_upholstery_stores"
          | "drinking_places"
          | "drug_stores_and_pharmacies"
          | "drugs_drug_proprietaries_and_druggist_sundries"
          | "dry_cleaners"
          | "durable_goods"
          | "duty_free_stores"
          | "eating_places_restaurants"
          | "educational_services"
          | "electric_razor_stores"
          | "electrical_parts_and_equipment"
          | "electrical_services"
          | "electronics_repair_shops"
          | "electronics_stores"
          | "elementary_secondary_schools"
          | "employment_temp_agencies"
          | "equipment_rental"
          | "exterminating_services"
          | "family_clothing_stores"
          | "fast_food_restaurants"
          | "financial_institutions"
          | "fines_government_administrative_entities"
          | "fireplace_fireplace_screens_and_accessories_stores"
          | "floor_covering_stores"
          | "florists"
          | "florists_supplies_nursery_stock_and_flowers"
          | "freezer_and_locker_meat_provisioners"
          | "fuel_dealers_non_automotive"
          | "funeral_services_crematories"
          | "furniture_home_furnishings_and_equipment_stores_except_appliances"
          | "furniture_repair_refinishing"
          | "furriers_and_fur_shops"
          | "general_services"
          | "gift_card_novelty_and_souvenir_shops"
          | "glass_paint_and_wallpaper_stores"
          | "glassware_crystal_stores"
          | "golf_courses_public"
          | "government_services"
          | "grocery_stores_supermarkets"
          | "hardware_equipment_and_supplies"
          | "hardware_stores"
          | "health_and_beauty_spas"
          | "hearing_aids_sales_and_supplies"
          | "heating_plumbing_a_c"
          | "hobby_toy_and_game_shops"
          | "home_supply_warehouse_stores"
          | "hospitals"
          | "hotels_motels_and_resorts"
          | "household_appliance_stores"
          | "industrial_supplies"
          | "information_retrieval_services"
          | "insurance_default"
          | "insurance_underwriting_premiums"
          | "intra_company_purchases"
          | "jewelry_stores_watches_clocks_and_silverware_stores"
          | "landscaping_services"
          | "laundries"
          | "laundry_cleaning_services"
          | "legal_services_attorneys"
          | "luggage_and_leather_goods_stores"
          | "lumber_building_materials_stores"
          | "manual_cash_disburse"
          | "marinas_service_and_supplies"
          | "masonry_stonework_and_plaster"
          | "massage_parlors"
          | "medical_and_dental_labs"
          | "medical_dental_ophthalmic_and_hospital_equipment_and_supplies"
          | "medical_services"
          | "membership_organizations"
          | "mens_and_boys_clothing_and_accessories_stores"
          | "mens_womens_clothing_stores"
          | "metal_service_centers"
          | "miscellaneous"
          | "miscellaneous_apparel_and_accessory_shops"
          | "miscellaneous_auto_dealers"
          | "miscellaneous_business_services"
          | "miscellaneous_food_stores"
          | "miscellaneous_general_merchandise"
          | "miscellaneous_general_services"
          | "miscellaneous_home_furnishing_specialty_stores"
          | "miscellaneous_publishing_and_printing"
          | "miscellaneous_recreation_services"
          | "miscellaneous_repair_shops"
          | "miscellaneous_specialty_retail"
          | "mobile_home_dealers"
          | "motion_picture_theaters"
          | "motor_freight_carriers_and_trucking"
          | "motor_homes_dealers"
          | "motor_vehicle_supplies_and_new_parts"
          | "motorcycle_shops_and_dealers"
          | "motorcycle_shops_dealers"
          | "music_stores_musical_instruments_pianos_and_sheet_music"
          | "news_dealers_and_newsstands"
          | "non_fi_money_orders"
          | "non_fi_stored_value_card_purchase_load"
          | "nondurable_goods"
          | "nurseries_lawn_and_garden_supply_stores"
          | "nursing_personal_care"
          | "office_and_commercial_furniture"
          | "opticians_eyeglasses"
          | "optometrists_ophthalmologist"
          | "orthopedic_goods_prosthetic_devices"
          | "osteopaths"
          | "package_stores_beer_wine_and_liquor"
          | "paints_varnishes_and_supplies"
          | "parking_lots_garages"
          | "passenger_railways"
          | "pawn_shops"
          | "pet_shops_pet_food_and_supplies"
          | "petroleum_and_petroleum_products"
          | "photo_developing"
          | "photographic_photocopy_microfilm_equipment_and_supplies"
          | "photographic_studios"
          | "picture_video_production"
          | "piece_goods_notions_and_other_dry_goods"
          | "plumbing_heating_equipment_and_supplies"
          | "political_organizations"
          | "postal_services_government_only"
          | "precious_stones_and_metals_watches_and_jewelry"
          | "professional_services"
          | "public_warehousing_and_storage"
          | "quick_copy_repro_and_blueprint"
          | "railroads"
          | "real_estate_agents_and_managers_rentals"
          | "record_stores"
          | "recreational_vehicle_rentals"
          | "religious_goods_stores"
          | "religious_organizations"
          | "roofing_siding_sheet_metal"
          | "secretarial_support_services"
          | "security_brokers_dealers"
          | "service_stations"
          | "sewing_needlework_fabric_and_piece_goods_stores"
          | "shoe_repair_hat_cleaning"
          | "shoe_stores"
          | "small_appliance_repair"
          | "snowmobile_dealers"
          | "special_trade_services"
          | "specialty_cleaning"
          | "sporting_goods_stores"
          | "sporting_recreation_camps"
          | "sports_and_riding_apparel_stores"
          | "sports_clubs_fields"
          | "stamp_and_coin_stores"
          | "stationary_office_supplies_printing_and_writing_paper"
          | "stationery_stores_office_and_school_supply_stores"
          | "swimming_pools_sales"
          | "t_ui_travel_germany"
          | "tailors_alterations"
          | "tax_payments_government_agencies"
          | "tax_preparation_services"
          | "taxicabs_limousines"
          | "telecommunication_equipment_and_telephone_sales"
          | "telecommunication_services"
          | "telegraph_services"
          | "tent_and_awning_shops"
          | "testing_laboratories"
          | "theatrical_ticket_agencies"
          | "timeshares"
          | "tire_retreading_and_repair"
          | "tolls_bridge_fees"
          | "tourist_attractions_and_exhibits"
          | "towing_services"
          | "trailer_parks_campgrounds"
          | "transportation_services"
          | "travel_agencies_tour_operators"
          | "truck_stop_iteration"
          | "truck_utility_trailer_rentals"
          | "typesetting_plate_making_and_related_services"
          | "typewriter_stores"
          | "u_s_federal_government_agencies_or_departments"
          | "uniforms_commercial_clothing"
          | "used_merchandise_and_secondhand_stores"
          | "utilities"
          | "variety_stores"
          | "veterinary_services"
          | "video_amusement_game_supplies"
          | "video_game_arcades"
          | "video_tape_rental_stores"
          | "vocational_trade_schools"
          | "watch_jewelry_repair"
          | "welding_repair"
          | "wholesale_clubs"
          | "wig_and_toupee_stores"
          | "wires_money_orders"
          | "womens_accessory_and_specialty_shops"
          | "womens_ready_to_wear_stores"
          | "wrecking_and_salvage_yards"
        )[];
        spending_limits?: {
          amount: number;
          categories?: (
            | "ac_refrigeration_repair"
            | "accounting_bookkeeping_services"
            | "advertising_services"
            | "agricultural_cooperative"
            | "airlines_air_carriers"
            | "airports_flying_fields"
            | "ambulance_services"
            | "amusement_parks_carnivals"
            | "antique_reproductions"
            | "antique_shops"
            | "aquariums"
            | "architectural_surveying_services"
            | "art_dealers_and_galleries"
            | "artists_supply_and_craft_shops"
            | "auto_and_home_supply_stores"
            | "auto_body_repair_shops"
            | "auto_paint_shops"
            | "auto_service_shops"
            | "automated_cash_disburse"
            | "automated_fuel_dispensers"
            | "automobile_associations"
            | "automotive_parts_and_accessories_stores"
            | "automotive_tire_stores"
            | "bail_and_bond_payments"
            | "bakeries"
            | "bands_orchestras"
            | "barber_and_beauty_shops"
            | "betting_casino_gambling"
            | "bicycle_shops"
            | "billiard_pool_establishments"
            | "boat_dealers"
            | "boat_rentals_and_leases"
            | "book_stores"
            | "books_periodicals_and_newspapers"
            | "bowling_alleys"
            | "bus_lines"
            | "business_secretarial_schools"
            | "buying_shopping_services"
            | "cable_satellite_and_other_pay_television_and_radio"
            | "camera_and_photographic_supply_stores"
            | "candy_nut_and_confectionery_stores"
            | "car_and_truck_dealers_new_used"
            | "car_and_truck_dealers_used_only"
            | "car_rental_agencies"
            | "car_washes"
            | "carpentry_services"
            | "carpet_upholstery_cleaning"
            | "caterers"
            | "charitable_and_social_service_organizations_fundraising"
            | "chemicals_and_allied_products"
            | "child_care_services"
            | "childrens_and_infants_wear_stores"
            | "chiropodists_podiatrists"
            | "chiropractors"
            | "cigar_stores_and_stands"
            | "civic_social_fraternal_associations"
            | "cleaning_and_maintenance"
            | "clothing_rental"
            | "colleges_universities"
            | "commercial_equipment"
            | "commercial_footwear"
            | "commercial_photography_art_and_graphics"
            | "commuter_transport_and_ferries"
            | "computer_network_services"
            | "computer_programming"
            | "computer_repair"
            | "computer_software_stores"
            | "computers_peripherals_and_software"
            | "concrete_work_services"
            | "construction_materials"
            | "consulting_public_relations"
            | "correspondence_schools"
            | "cosmetic_stores"
            | "counseling_services"
            | "country_clubs"
            | "courier_services"
            | "court_costs"
            | "credit_reporting_agencies"
            | "cruise_lines"
            | "dairy_products_stores"
            | "dance_hall_studios_schools"
            | "dating_escort_services"
            | "dentists_orthodontists"
            | "department_stores"
            | "detective_agencies"
            | "digital_goods_applications"
            | "digital_goods_games"
            | "digital_goods_large_volume"
            | "digital_goods_media"
            | "direct_marketing_catalog_merchant"
            | "direct_marketing_combination_catalog_and_retail_merchant"
            | "direct_marketing_inbound_telemarketing"
            | "direct_marketing_insurance_services"
            | "direct_marketing_other"
            | "direct_marketing_outbound_telemarketing"
            | "direct_marketing_subscription"
            | "direct_marketing_travel"
            | "discount_stores"
            | "doctors"
            | "door_to_door_sales"
            | "drapery_window_covering_and_upholstery_stores"
            | "drinking_places"
            | "drug_stores_and_pharmacies"
            | "drugs_drug_proprietaries_and_druggist_sundries"
            | "dry_cleaners"
            | "durable_goods"
            | "duty_free_stores"
            | "eating_places_restaurants"
            | "educational_services"
            | "electric_razor_stores"
            | "electrical_parts_and_equipment"
            | "electrical_services"
            | "electronics_repair_shops"
            | "electronics_stores"
            | "elementary_secondary_schools"
            | "employment_temp_agencies"
            | "equipment_rental"
            | "exterminating_services"
            | "family_clothing_stores"
            | "fast_food_restaurants"
            | "financial_institutions"
            | "fines_government_administrative_entities"
            | "fireplace_fireplace_screens_and_accessories_stores"
            | "floor_covering_stores"
            | "florists"
            | "florists_supplies_nursery_stock_and_flowers"
            | "freezer_and_locker_meat_provisioners"
            | "fuel_dealers_non_automotive"
            | "funeral_services_crematories"
            | "furniture_home_furnishings_and_equipment_stores_except_appliances"
            | "furniture_repair_refinishing"
            | "furriers_and_fur_shops"
            | "general_services"
            | "gift_card_novelty_and_souvenir_shops"
            | "glass_paint_and_wallpaper_stores"
            | "glassware_crystal_stores"
            | "golf_courses_public"
            | "government_services"
            | "grocery_stores_supermarkets"
            | "hardware_equipment_and_supplies"
            | "hardware_stores"
            | "health_and_beauty_spas"
            | "hearing_aids_sales_and_supplies"
            | "heating_plumbing_a_c"
            | "hobby_toy_and_game_shops"
            | "home_supply_warehouse_stores"
            | "hospitals"
            | "hotels_motels_and_resorts"
            | "household_appliance_stores"
            | "industrial_supplies"
            | "information_retrieval_services"
            | "insurance_default"
            | "insurance_underwriting_premiums"
            | "intra_company_purchases"
            | "jewelry_stores_watches_clocks_and_silverware_stores"
            | "landscaping_services"
            | "laundries"
            | "laundry_cleaning_services"
            | "legal_services_attorneys"
            | "luggage_and_leather_goods_stores"
            | "lumber_building_materials_stores"
            | "manual_cash_disburse"
            | "marinas_service_and_supplies"
            | "masonry_stonework_and_plaster"
            | "massage_parlors"
            | "medical_and_dental_labs"
            | "medical_dental_ophthalmic_and_hospital_equipment_and_supplies"
            | "medical_services"
            | "membership_organizations"
            | "mens_and_boys_clothing_and_accessories_stores"
            | "mens_womens_clothing_stores"
            | "metal_service_centers"
            | "miscellaneous"
            | "miscellaneous_apparel_and_accessory_shops"
            | "miscellaneous_auto_dealers"
            | "miscellaneous_business_services"
            | "miscellaneous_food_stores"
            | "miscellaneous_general_merchandise"
            | "miscellaneous_general_services"
            | "miscellaneous_home_furnishing_specialty_stores"
            | "miscellaneous_publishing_and_printing"
            | "miscellaneous_recreation_services"
            | "miscellaneous_repair_shops"
            | "miscellaneous_specialty_retail"
            | "mobile_home_dealers"
            | "motion_picture_theaters"
            | "motor_freight_carriers_and_trucking"
            | "motor_homes_dealers"
            | "motor_vehicle_supplies_and_new_parts"
            | "motorcycle_shops_and_dealers"
            | "motorcycle_shops_dealers"
            | "music_stores_musical_instruments_pianos_and_sheet_music"
            | "news_dealers_and_newsstands"
            | "non_fi_money_orders"
            | "non_fi_stored_value_card_purchase_load"
            | "nondurable_goods"
            | "nurseries_lawn_and_garden_supply_stores"
            | "nursing_personal_care"
            | "office_and_commercial_furniture"
            | "opticians_eyeglasses"
            | "optometrists_ophthalmologist"
            | "orthopedic_goods_prosthetic_devices"
            | "osteopaths"
            | "package_stores_beer_wine_and_liquor"
            | "paints_varnishes_and_supplies"
            | "parking_lots_garages"
            | "passenger_railways"
            | "pawn_shops"
            | "pet_shops_pet_food_and_supplies"
            | "petroleum_and_petroleum_products"
            | "photo_developing"
            | "photographic_photocopy_microfilm_equipment_and_supplies"
            | "photographic_studios"
            | "picture_video_production"
            | "piece_goods_notions_and_other_dry_goods"
            | "plumbing_heating_equipment_and_supplies"
            | "political_organizations"
            | "postal_services_government_only"
            | "precious_stones_and_metals_watches_and_jewelry"
            | "professional_services"
            | "public_warehousing_and_storage"
            | "quick_copy_repro_and_blueprint"
            | "railroads"
            | "real_estate_agents_and_managers_rentals"
            | "record_stores"
            | "recreational_vehicle_rentals"
            | "religious_goods_stores"
            | "religious_organizations"
            | "roofing_siding_sheet_metal"
            | "secretarial_support_services"
            | "security_brokers_dealers"
            | "service_stations"
            | "sewing_needlework_fabric_and_piece_goods_stores"
            | "shoe_repair_hat_cleaning"
            | "shoe_stores"
            | "small_appliance_repair"
            | "snowmobile_dealers"
            | "special_trade_services"
            | "specialty_cleaning"
            | "sporting_goods_stores"
            | "sporting_recreation_camps"
            | "sports_and_riding_apparel_stores"
            | "sports_clubs_fields"
            | "stamp_and_coin_stores"
            | "stationary_office_supplies_printing_and_writing_paper"
            | "stationery_stores_office_and_school_supply_stores"
            | "swimming_pools_sales"
            | "t_ui_travel_germany"
            | "tailors_alterations"
            | "tax_payments_government_agencies"
            | "tax_preparation_services"
            | "taxicabs_limousines"
            | "telecommunication_equipment_and_telephone_sales"
            | "telecommunication_services"
            | "telegraph_services"
            | "tent_and_awning_shops"
            | "testing_laboratories"
            | "theatrical_ticket_agencies"
            | "timeshares"
            | "tire_retreading_and_repair"
            | "tolls_bridge_fees"
            | "tourist_attractions_and_exhibits"
            | "towing_services"
            | "trailer_parks_campgrounds"
            | "transportation_services"
            | "travel_agencies_tour_operators"
            | "truck_stop_iteration"
            | "truck_utility_trailer_rentals"
            | "typesetting_plate_making_and_related_services"
            | "typewriter_stores"
            | "u_s_federal_government_agencies_or_departments"
            | "uniforms_commercial_clothing"
            | "used_merchandise_and_secondhand_stores"
            | "utilities"
            | "variety_stores"
            | "veterinary_services"
            | "video_amusement_game_supplies"
            | "video_game_arcades"
            | "video_tape_rental_stores"
            | "vocational_trade_schools"
            | "watch_jewelry_repair"
            | "welding_repair"
            | "wholesale_clubs"
            | "wig_and_toupee_stores"
            | "wires_money_orders"
            | "womens_accessory_and_specialty_shops"
            | "womens_ready_to_wear_stores"
            | "wrecking_and_salvage_yards"
          )[];
          interval: "all_time" | "daily" | "monthly" | "per_authorization" | "weekly" | "yearly";
        }[];
      };
      status?: "active" | "inactive";
      type: "physical" | "virtual";
    };
    export type RequestHeaders = {};
    export type ResponseBody = IssuingCard;
  }
  /**
   * @description <p>Retrieves an Issuing <code>Card</code> object.</p>
   * @name GetIssuingCardsCard
   * @request GET:/v1/issuing/cards/{card}
   * @secure
   * @response `200` `IssuingCard` Successful response.
   * @response `default` `Error` Error response.
   */
  export namespace GetIssuingCardsCard {
    export type RequestParams = { card: string };
    export type RequestQuery = { expand?: string[] };
    export type RequestBody = CardMandatePaymentMethodDetails;
    export type RequestHeaders = {};
    export type ResponseBody = IssuingCard;
  }
  /**
   * @description <p>Updates the specified Issuing <code>Card</code> object by setting the values of the parameters passed. Any parameters not provided will be left unchanged.</p>
   * @name PostIssuingCardsCard
   * @request POST:/v1/issuing/cards/{card}
   * @secure
   * @response `200` `IssuingCard` Successful response.
   * @response `default` `Error` Error response.
   */
  export namespace PostIssuingCardsCard {
    export type RequestParams = { card: string };
    export type RequestQuery = {};
    export type RequestBody = {
      cancellation_reason?: "lost" | "stolen";
      expand?: string[];
      metadata?: Record<string, string> | "" | (Record<string, string> & "");
      spending_controls?: {
        allowed_categories?: (
          | "ac_refrigeration_repair"
          | "accounting_bookkeeping_services"
          | "advertising_services"
          | "agricultural_cooperative"
          | "airlines_air_carriers"
          | "airports_flying_fields"
          | "ambulance_services"
          | "amusement_parks_carnivals"
          | "antique_reproductions"
          | "antique_shops"
          | "aquariums"
          | "architectural_surveying_services"
          | "art_dealers_and_galleries"
          | "artists_supply_and_craft_shops"
          | "auto_and_home_supply_stores"
          | "auto_body_repair_shops"
          | "auto_paint_shops"
          | "auto_service_shops"
          | "automated_cash_disburse"
          | "automated_fuel_dispensers"
          | "automobile_associations"
          | "automotive_parts_and_accessories_stores"
          | "automotive_tire_stores"
          | "bail_and_bond_payments"
          | "bakeries"
          | "bands_orchestras"
          | "barber_and_beauty_shops"
          | "betting_casino_gambling"
          | "bicycle_shops"
          | "billiard_pool_establishments"
          | "boat_dealers"
          | "boat_rentals_and_leases"
          | "book_stores"
          | "books_periodicals_and_newspapers"
          | "bowling_alleys"
          | "bus_lines"
          | "business_secretarial_schools"
          | "buying_shopping_services"
          | "cable_satellite_and_other_pay_television_and_radio"
          | "camera_and_photographic_supply_stores"
          | "candy_nut_and_confectionery_stores"
          | "car_and_truck_dealers_new_used"
          | "car_and_truck_dealers_used_only"
          | "car_rental_agencies"
          | "car_washes"
          | "carpentry_services"
          | "carpet_upholstery_cleaning"
          | "caterers"
          | "charitable_and_social_service_organizations_fundraising"
          | "chemicals_and_allied_products"
          | "child_care_services"
          | "childrens_and_infants_wear_stores"
          | "chiropodists_podiatrists"
          | "chiropractors"
          | "cigar_stores_and_stands"
          | "civic_social_fraternal_associations"
          | "cleaning_and_maintenance"
          | "clothing_rental"
          | "colleges_universities"
          | "commercial_equipment"
          | "commercial_footwear"
          | "commercial_photography_art_and_graphics"
          | "commuter_transport_and_ferries"
          | "computer_network_services"
          | "computer_programming"
          | "computer_repair"
          | "computer_software_stores"
          | "computers_peripherals_and_software"
          | "concrete_work_services"
          | "construction_materials"
          | "consulting_public_relations"
          | "correspondence_schools"
          | "cosmetic_stores"
          | "counseling_services"
          | "country_clubs"
          | "courier_services"
          | "court_costs"
          | "credit_reporting_agencies"
          | "cruise_lines"
          | "dairy_products_stores"
          | "dance_hall_studios_schools"
          | "dating_escort_services"
          | "dentists_orthodontists"
          | "department_stores"
          | "detective_agencies"
          | "digital_goods_applications"
          | "digital_goods_games"
          | "digital_goods_large_volume"
          | "digital_goods_media"
          | "direct_marketing_catalog_merchant"
          | "direct_marketing_combination_catalog_and_retail_merchant"
          | "direct_marketing_inbound_telemarketing"
          | "direct_marketing_insurance_services"
          | "direct_marketing_other"
          | "direct_marketing_outbound_telemarketing"
          | "direct_marketing_subscription"
          | "direct_marketing_travel"
          | "discount_stores"
          | "doctors"
          | "door_to_door_sales"
          | "drapery_window_covering_and_upholstery_stores"
          | "drinking_places"
          | "drug_stores_and_pharmacies"
          | "drugs_drug_proprietaries_and_druggist_sundries"
          | "dry_cleaners"
          | "durable_goods"
          | "duty_free_stores"
          | "eating_places_restaurants"
          | "educational_services"
          | "electric_razor_stores"
          | "electrical_parts_and_equipment"
          | "electrical_services"
          | "electronics_repair_shops"
          | "electronics_stores"
          | "elementary_secondary_schools"
          | "employment_temp_agencies"
          | "equipment_rental"
          | "exterminating_services"
          | "family_clothing_stores"
          | "fast_food_restaurants"
          | "financial_institutions"
          | "fines_government_administrative_entities"
          | "fireplace_fireplace_screens_and_accessories_stores"
          | "floor_covering_stores"
          | "florists"
          | "florists_supplies_nursery_stock_and_flowers"
          | "freezer_and_locker_meat_provisioners"
          | "fuel_dealers_non_automotive"
          | "funeral_services_crematories"
          | "furniture_home_furnishings_and_equipment_stores_except_appliances"
          | "furniture_repair_refinishing"
          | "furriers_and_fur_shops"
          | "general_services"
          | "gift_card_novelty_and_souvenir_shops"
          | "glass_paint_and_wallpaper_stores"
          | "glassware_crystal_stores"
          | "golf_courses_public"
          | "government_services"
          | "grocery_stores_supermarkets"
          | "hardware_equipment_and_supplies"
          | "hardware_stores"
          | "health_and_beauty_spas"
          | "hearing_aids_sales_and_supplies"
          | "heating_plumbing_a_c"
          | "hobby_toy_and_game_shops"
          | "home_supply_warehouse_stores"
          | "hospitals"
          | "hotels_motels_and_resorts"
          | "household_appliance_stores"
          | "industrial_supplies"
          | "information_retrieval_services"
          | "insurance_default"
          | "insurance_underwriting_premiums"
          | "intra_company_purchases"
          | "jewelry_stores_watches_clocks_and_silverware_stores"
          | "landscaping_services"
          | "laundries"
          | "laundry_cleaning_services"
          | "legal_services_attorneys"
          | "luggage_and_leather_goods_stores"
          | "lumber_building_materials_stores"
          | "manual_cash_disburse"
          | "marinas_service_and_supplies"
          | "masonry_stonework_and_plaster"
          | "massage_parlors"
          | "medical_and_dental_labs"
          | "medical_dental_ophthalmic_and_hospital_equipment_and_supplies"
          | "medical_services"
          | "membership_organizations"
          | "mens_and_boys_clothing_and_accessories_stores"
          | "mens_womens_clothing_stores"
          | "metal_service_centers"
          | "miscellaneous"
          | "miscellaneous_apparel_and_accessory_shops"
          | "miscellaneous_auto_dealers"
          | "miscellaneous_business_services"
          | "miscellaneous_food_stores"
          | "miscellaneous_general_merchandise"
          | "miscellaneous_general_services"
          | "miscellaneous_home_furnishing_specialty_stores"
          | "miscellaneous_publishing_and_printing"
          | "miscellaneous_recreation_services"
          | "miscellaneous_repair_shops"
          | "miscellaneous_specialty_retail"
          | "mobile_home_dealers"
          | "motion_picture_theaters"
          | "motor_freight_carriers_and_trucking"
          | "motor_homes_dealers"
          | "motor_vehicle_supplies_and_new_parts"
          | "motorcycle_shops_and_dealers"
          | "motorcycle_shops_dealers"
          | "music_stores_musical_instruments_pianos_and_sheet_music"
          | "news_dealers_and_newsstands"
          | "non_fi_money_orders"
          | "non_fi_stored_value_card_purchase_load"
          | "nondurable_goods"
          | "nurseries_lawn_and_garden_supply_stores"
          | "nursing_personal_care"
          | "office_and_commercial_furniture"
          | "opticians_eyeglasses"
          | "optometrists_ophthalmologist"
          | "orthopedic_goods_prosthetic_devices"
          | "osteopaths"
          | "package_stores_beer_wine_and_liquor"
          | "paints_varnishes_and_supplies"
          | "parking_lots_garages"
          | "passenger_railways"
          | "pawn_shops"
          | "pet_shops_pet_food_and_supplies"
          | "petroleum_and_petroleum_products"
          | "photo_developing"
          | "photographic_photocopy_microfilm_equipment_and_supplies"
          | "photographic_studios"
          | "picture_video_production"
          | "piece_goods_notions_and_other_dry_goods"
          | "plumbing_heating_equipment_and_supplies"
          | "political_organizations"
          | "postal_services_government_only"
          | "precious_stones_and_metals_watches_and_jewelry"
          | "professional_services"
          | "public_warehousing_and_storage"
          | "quick_copy_repro_and_blueprint"
          | "railroads"
          | "real_estate_agents_and_managers_rentals"
          | "record_stores"
          | "recreational_vehicle_rentals"
          | "religious_goods_stores"
          | "religious_organizations"
          | "roofing_siding_sheet_metal"
          | "secretarial_support_services"
          | "security_brokers_dealers"
          | "service_stations"
          | "sewing_needlework_fabric_and_piece_goods_stores"
          | "shoe_repair_hat_cleaning"
          | "shoe_stores"
          | "small_appliance_repair"
          | "snowmobile_dealers"
          | "special_trade_services"
          | "specialty_cleaning"
          | "sporting_goods_stores"
          | "sporting_recreation_camps"
          | "sports_and_riding_apparel_stores"
          | "sports_clubs_fields"
          | "stamp_and_coin_stores"
          | "stationary_office_supplies_printing_and_writing_paper"
          | "stationery_stores_office_and_school_supply_stores"
          | "swimming_pools_sales"
          | "t_ui_travel_germany"
          | "tailors_alterations"
          | "tax_payments_government_agencies"
          | "tax_preparation_services"
          | "taxicabs_limousines"
          | "telecommunication_equipment_and_telephone_sales"
          | "telecommunication_services"
          | "telegraph_services"
          | "tent_and_awning_shops"
          | "testing_laboratories"
          | "theatrical_ticket_agencies"
          | "timeshares"
          | "tire_retreading_and_repair"
          | "tolls_bridge_fees"
          | "tourist_attractions_and_exhibits"
          | "towing_services"
          | "trailer_parks_campgrounds"
          | "transportation_services"
          | "travel_agencies_tour_operators"
          | "truck_stop_iteration"
          | "truck_utility_trailer_rentals"
          | "typesetting_plate_making_and_related_services"
          | "typewriter_stores"
          | "u_s_federal_government_agencies_or_departments"
          | "uniforms_commercial_clothing"
          | "used_merchandise_and_secondhand_stores"
          | "utilities"
          | "variety_stores"
          | "veterinary_services"
          | "video_amusement_game_supplies"
          | "video_game_arcades"
          | "video_tape_rental_stores"
          | "vocational_trade_schools"
          | "watch_jewelry_repair"
          | "welding_repair"
          | "wholesale_clubs"
          | "wig_and_toupee_stores"
          | "wires_money_orders"
          | "womens_accessory_and_specialty_shops"
          | "womens_ready_to_wear_stores"
          | "wrecking_and_salvage_yards"
        )[];
        blocked_categories?: (
          | "ac_refrigeration_repair"
          | "accounting_bookkeeping_services"
          | "advertising_services"
          | "agricultural_cooperative"
          | "airlines_air_carriers"
          | "airports_flying_fields"
          | "ambulance_services"
          | "amusement_parks_carnivals"
          | "antique_reproductions"
          | "antique_shops"
          | "aquariums"
          | "architectural_surveying_services"
          | "art_dealers_and_galleries"
          | "artists_supply_and_craft_shops"
          | "auto_and_home_supply_stores"
          | "auto_body_repair_shops"
          | "auto_paint_shops"
          | "auto_service_shops"
          | "automated_cash_disburse"
          | "automated_fuel_dispensers"
          | "automobile_associations"
          | "automotive_parts_and_accessories_stores"
          | "automotive_tire_stores"
          | "bail_and_bond_payments"
          | "bakeries"
          | "bands_orchestras"
          | "barber_and_beauty_shops"
          | "betting_casino_gambling"
          | "bicycle_shops"
          | "billiard_pool_establishments"
          | "boat_dealers"
          | "boat_rentals_and_leases"
          | "book_stores"
          | "books_periodicals_and_newspapers"
          | "bowling_alleys"
          | "bus_lines"
          | "business_secretarial_schools"
          | "buying_shopping_services"
          | "cable_satellite_and_other_pay_television_and_radio"
          | "camera_and_photographic_supply_stores"
          | "candy_nut_and_confectionery_stores"
          | "car_and_truck_dealers_new_used"
          | "car_and_truck_dealers_used_only"
          | "car_rental_agencies"
          | "car_washes"
          | "carpentry_services"
          | "carpet_upholstery_cleaning"
          | "caterers"
          | "charitable_and_social_service_organizations_fundraising"
          | "chemicals_and_allied_products"
          | "child_care_services"
          | "childrens_and_infants_wear_stores"
          | "chiropodists_podiatrists"
          | "chiropractors"
          | "cigar_stores_and_stands"
          | "civic_social_fraternal_associations"
          | "cleaning_and_maintenance"
          | "clothing_rental"
          | "colleges_universities"
          | "commercial_equipment"
          | "commercial_footwear"
          | "commercial_photography_art_and_graphics"
          | "commuter_transport_and_ferries"
          | "computer_network_services"
          | "computer_programming"
          | "computer_repair"
          | "computer_software_stores"
          | "computers_peripherals_and_software"
          | "concrete_work_services"
          | "construction_materials"
          | "consulting_public_relations"
          | "correspondence_schools"
          | "cosmetic_stores"
          | "counseling_services"
          | "country_clubs"
          | "courier_services"
          | "court_costs"
          | "credit_reporting_agencies"
          | "cruise_lines"
          | "dairy_products_stores"
          | "dance_hall_studios_schools"
          | "dating_escort_services"
          | "dentists_orthodontists"
          | "department_stores"
          | "detective_agencies"
          | "digital_goods_applications"
          | "digital_goods_games"
          | "digital_goods_large_volume"
          | "digital_goods_media"
          | "direct_marketing_catalog_merchant"
          | "direct_marketing_combination_catalog_and_retail_merchant"
          | "direct_marketing_inbound_telemarketing"
          | "direct_marketing_insurance_services"
          | "direct_marketing_other"
          | "direct_marketing_outbound_telemarketing"
          | "direct_marketing_subscription"
          | "direct_marketing_travel"
          | "discount_stores"
          | "doctors"
          | "door_to_door_sales"
          | "drapery_window_covering_and_upholstery_stores"
          | "drinking_places"
          | "drug_stores_and_pharmacies"
          | "drugs_drug_proprietaries_and_druggist_sundries"
          | "dry_cleaners"
          | "durable_goods"
          | "duty_free_stores"
          | "eating_places_restaurants"
          | "educational_services"
          | "electric_razor_stores"
          | "electrical_parts_and_equipment"
          | "electrical_services"
          | "electronics_repair_shops"
          | "electronics_stores"
          | "elementary_secondary_schools"
          | "employment_temp_agencies"
          | "equipment_rental"
          | "exterminating_services"
          | "family_clothing_stores"
          | "fast_food_restaurants"
          | "financial_institutions"
          | "fines_government_administrative_entities"
          | "fireplace_fireplace_screens_and_accessories_stores"
          | "floor_covering_stores"
          | "florists"
          | "florists_supplies_nursery_stock_and_flowers"
          | "freezer_and_locker_meat_provisioners"
          | "fuel_dealers_non_automotive"
          | "funeral_services_crematories"
          | "furniture_home_furnishings_and_equipment_stores_except_appliances"
          | "furniture_repair_refinishing"
          | "furriers_and_fur_shops"
          | "general_services"
          | "gift_card_novelty_and_souvenir_shops"
          | "glass_paint_and_wallpaper_stores"
          | "glassware_crystal_stores"
          | "golf_courses_public"
          | "government_services"
          | "grocery_stores_supermarkets"
          | "hardware_equipment_and_supplies"
          | "hardware_stores"
          | "health_and_beauty_spas"
          | "hearing_aids_sales_and_supplies"
          | "heating_plumbing_a_c"
          | "hobby_toy_and_game_shops"
          | "home_supply_warehouse_stores"
          | "hospitals"
          | "hotels_motels_and_resorts"
          | "household_appliance_stores"
          | "industrial_supplies"
          | "information_retrieval_services"
          | "insurance_default"
          | "insurance_underwriting_premiums"
          | "intra_company_purchases"
          | "jewelry_stores_watches_clocks_and_silverware_stores"
          | "landscaping_services"
          | "laundries"
          | "laundry_cleaning_services"
          | "legal_services_attorneys"
          | "luggage_and_leather_goods_stores"
          | "lumber_building_materials_stores"
          | "manual_cash_disburse"
          | "marinas_service_and_supplies"
          | "masonry_stonework_and_plaster"
          | "massage_parlors"
          | "medical_and_dental_labs"
          | "medical_dental_ophthalmic_and_hospital_equipment_and_supplies"
          | "medical_services"
          | "membership_organizations"
          | "mens_and_boys_clothing_and_accessories_stores"
          | "mens_womens_clothing_stores"
          | "metal_service_centers"
          | "miscellaneous"
          | "miscellaneous_apparel_and_accessory_shops"
          | "miscellaneous_auto_dealers"
          | "miscellaneous_business_services"
          | "miscellaneous_food_stores"
          | "miscellaneous_general_merchandise"
          | "miscellaneous_general_services"
          | "miscellaneous_home_furnishing_specialty_stores"
          | "miscellaneous_publishing_and_printing"
          | "miscellaneous_recreation_services"
          | "miscellaneous_repair_shops"
          | "miscellaneous_specialty_retail"
          | "mobile_home_dealers"
          | "motion_picture_theaters"
          | "motor_freight_carriers_and_trucking"
          | "motor_homes_dealers"
          | "motor_vehicle_supplies_and_new_parts"
          | "motorcycle_shops_and_dealers"
          | "motorcycle_shops_dealers"
          | "music_stores_musical_instruments_pianos_and_sheet_music"
          | "news_dealers_and_newsstands"
          | "non_fi_money_orders"
          | "non_fi_stored_value_card_purchase_load"
          | "nondurable_goods"
          | "nurseries_lawn_and_garden_supply_stores"
          | "nursing_personal_care"
          | "office_and_commercial_furniture"
          | "opticians_eyeglasses"
          | "optometrists_ophthalmologist"
          | "orthopedic_goods_prosthetic_devices"
          | "osteopaths"
          | "package_stores_beer_wine_and_liquor"
          | "paints_varnishes_and_supplies"
          | "parking_lots_garages"
          | "passenger_railways"
          | "pawn_shops"
          | "pet_shops_pet_food_and_supplies"
          | "petroleum_and_petroleum_products"
          | "photo_developing"
          | "photographic_photocopy_microfilm_equipment_and_supplies"
          | "photographic_studios"
          | "picture_video_production"
          | "piece_goods_notions_and_other_dry_goods"
          | "plumbing_heating_equipment_and_supplies"
          | "political_organizations"
          | "postal_services_government_only"
          | "precious_stones_and_metals_watches_and_jewelry"
          | "professional_services"
          | "public_warehousing_and_storage"
          | "quick_copy_repro_and_blueprint"
          | "railroads"
          | "real_estate_agents_and_managers_rentals"
          | "record_stores"
          | "recreational_vehicle_rentals"
          | "religious_goods_stores"
          | "religious_organizations"
          | "roofing_siding_sheet_metal"
          | "secretarial_support_services"
          | "security_brokers_dealers"
          | "service_stations"
          | "sewing_needlework_fabric_and_piece_goods_stores"
          | "shoe_repair_hat_cleaning"
          | "shoe_stores"
          | "small_appliance_repair"
          | "snowmobile_dealers"
          | "special_trade_services"
          | "specialty_cleaning"
          | "sporting_goods_stores"
          | "sporting_recreation_camps"
          | "sports_and_riding_apparel_stores"
          | "sports_clubs_fields"
          | "stamp_and_coin_stores"
          | "stationary_office_supplies_printing_and_writing_paper"
          | "stationery_stores_office_and_school_supply_stores"
          | "swimming_pools_sales"
          | "t_ui_travel_germany"
          | "tailors_alterations"
          | "tax_payments_government_agencies"
          | "tax_preparation_services"
          | "taxicabs_limousines"
          | "telecommunication_equipment_and_telephone_sales"
          | "telecommunication_services"
          | "telegraph_services"
          | "tent_and_awning_shops"
          | "testing_laboratories"
          | "theatrical_ticket_agencies"
          | "timeshares"
          | "tire_retreading_and_repair"
          | "tolls_bridge_fees"
          | "tourist_attractions_and_exhibits"
          | "towing_services"
          | "trailer_parks_campgrounds"
          | "transportation_services"
          | "travel_agencies_tour_operators"
          | "truck_stop_iteration"
          | "truck_utility_trailer_rentals"
          | "typesetting_plate_making_and_related_services"
          | "typewriter_stores"
          | "u_s_federal_government_agencies_or_departments"
          | "uniforms_commercial_clothing"
          | "used_merchandise_and_secondhand_stores"
          | "utilities"
          | "variety_stores"
          | "veterinary_services"
          | "video_amusement_game_supplies"
          | "video_game_arcades"
          | "video_tape_rental_stores"
          | "vocational_trade_schools"
          | "watch_jewelry_repair"
          | "welding_repair"
          | "wholesale_clubs"
          | "wig_and_toupee_stores"
          | "wires_money_orders"
          | "womens_accessory_and_specialty_shops"
          | "womens_ready_to_wear_stores"
          | "wrecking_and_salvage_yards"
        )[];
        spending_limits?: {
          amount: number;
          categories?: (
            | "ac_refrigeration_repair"
            | "accounting_bookkeeping_services"
            | "advertising_services"
            | "agricultural_cooperative"
            | "airlines_air_carriers"
            | "airports_flying_fields"
            | "ambulance_services"
            | "amusement_parks_carnivals"
            | "antique_reproductions"
            | "antique_shops"
            | "aquariums"
            | "architectural_surveying_services"
            | "art_dealers_and_galleries"
            | "artists_supply_and_craft_shops"
            | "auto_and_home_supply_stores"
            | "auto_body_repair_shops"
            | "auto_paint_shops"
            | "auto_service_shops"
            | "automated_cash_disburse"
            | "automated_fuel_dispensers"
            | "automobile_associations"
            | "automotive_parts_and_accessories_stores"
            | "automotive_tire_stores"
            | "bail_and_bond_payments"
            | "bakeries"
            | "bands_orchestras"
            | "barber_and_beauty_shops"
            | "betting_casino_gambling"
            | "bicycle_shops"
            | "billiard_pool_establishments"
            | "boat_dealers"
            | "boat_rentals_and_leases"
            | "book_stores"
            | "books_periodicals_and_newspapers"
            | "bowling_alleys"
            | "bus_lines"
            | "business_secretarial_schools"
            | "buying_shopping_services"
            | "cable_satellite_and_other_pay_television_and_radio"
            | "camera_and_photographic_supply_stores"
            | "candy_nut_and_confectionery_stores"
            | "car_and_truck_dealers_new_used"
            | "car_and_truck_dealers_used_only"
            | "car_rental_agencies"
            | "car_washes"
            | "carpentry_services"
            | "carpet_upholstery_cleaning"
            | "caterers"
            | "charitable_and_social_service_organizations_fundraising"
            | "chemicals_and_allied_products"
            | "child_care_services"
            | "childrens_and_infants_wear_stores"
            | "chiropodists_podiatrists"
            | "chiropractors"
            | "cigar_stores_and_stands"
            | "civic_social_fraternal_associations"
            | "cleaning_and_maintenance"
            | "clothing_rental"
            | "colleges_universities"
            | "commercial_equipment"
            | "commercial_footwear"
            | "commercial_photography_art_and_graphics"
            | "commuter_transport_and_ferries"
            | "computer_network_services"
            | "computer_programming"
            | "computer_repair"
            | "computer_software_stores"
            | "computers_peripherals_and_software"
            | "concrete_work_services"
            | "construction_materials"
            | "consulting_public_relations"
            | "correspondence_schools"
            | "cosmetic_stores"
            | "counseling_services"
            | "country_clubs"
            | "courier_services"
            | "court_costs"
            | "credit_reporting_agencies"
            | "cruise_lines"
            | "dairy_products_stores"
            | "dance_hall_studios_schools"
            | "dating_escort_services"
            | "dentists_orthodontists"
            | "department_stores"
            | "detective_agencies"
            | "digital_goods_applications"
            | "digital_goods_games"
            | "digital_goods_large_volume"
            | "digital_goods_media"
            | "direct_marketing_catalog_merchant"
            | "direct_marketing_combination_catalog_and_retail_merchant"
            | "direct_marketing_inbound_telemarketing"
            | "direct_marketing_insurance_services"
            | "direct_marketing_other"
            | "direct_marketing_outbound_telemarketing"
            | "direct_marketing_subscription"
            | "direct_marketing_travel"
            | "discount_stores"
            | "doctors"
            | "door_to_door_sales"
            | "drapery_window_covering_and_upholstery_stores"
            | "drinking_places"
            | "drug_stores_and_pharmacies"
            | "drugs_drug_proprietaries_and_druggist_sundries"
            | "dry_cleaners"
            | "durable_goods"
            | "duty_free_stores"
            | "eating_places_restaurants"
            | "educational_services"
            | "electric_razor_stores"
            | "electrical_parts_and_equipment"
            | "electrical_services"
            | "electronics_repair_shops"
            | "electronics_stores"
            | "elementary_secondary_schools"
            | "employment_temp_agencies"
            | "equipment_rental"
            | "exterminating_services"
            | "family_clothing_stores"
            | "fast_food_restaurants"
            | "financial_institutions"
            | "fines_government_administrative_entities"
            | "fireplace_fireplace_screens_and_accessories_stores"
            | "floor_covering_stores"
            | "florists"
            | "florists_supplies_nursery_stock_and_flowers"
            | "freezer_and_locker_meat_provisioners"
            | "fuel_dealers_non_automotive"
            | "funeral_services_crematories"
            | "furniture_home_furnishings_and_equipment_stores_except_appliances"
            | "furniture_repair_refinishing"
            | "furriers_and_fur_shops"
            | "general_services"
            | "gift_card_novelty_and_souvenir_shops"
            | "glass_paint_and_wallpaper_stores"
            | "glassware_crystal_stores"
            | "golf_courses_public"
            | "government_services"
            | "grocery_stores_supermarkets"
            | "hardware_equipment_and_supplies"
            | "hardware_stores"
            | "health_and_beauty_spas"
            | "hearing_aids_sales_and_supplies"
            | "heating_plumbing_a_c"
            | "hobby_toy_and_game_shops"
            | "home_supply_warehouse_stores"
            | "hospitals"
            | "hotels_motels_and_resorts"
            | "household_appliance_stores"
            | "industrial_supplies"
            | "information_retrieval_services"
            | "insurance_default"
            | "insurance_underwriting_premiums"
            | "intra_company_purchases"
            | "jewelry_stores_watches_clocks_and_silverware_stores"
            | "landscaping_services"
            | "laundries"
            | "laundry_cleaning_services"
            | "legal_services_attorneys"
            | "luggage_and_leather_goods_stores"
            | "lumber_building_materials_stores"
            | "manual_cash_disburse"
            | "marinas_service_and_supplies"
            | "masonry_stonework_and_plaster"
            | "massage_parlors"
            | "medical_and_dental_labs"
            | "medical_dental_ophthalmic_and_hospital_equipment_and_supplies"
            | "medical_services"
            | "membership_organizations"
            | "mens_and_boys_clothing_and_accessories_stores"
            | "mens_womens_clothing_stores"
            | "metal_service_centers"
            | "miscellaneous"
            | "miscellaneous_apparel_and_accessory_shops"
            | "miscellaneous_auto_dealers"
            | "miscellaneous_business_services"
            | "miscellaneous_food_stores"
            | "miscellaneous_general_merchandise"
            | "miscellaneous_general_services"
            | "miscellaneous_home_furnishing_specialty_stores"
            | "miscellaneous_publishing_and_printing"
            | "miscellaneous_recreation_services"
            | "miscellaneous_repair_shops"
            | "miscellaneous_specialty_retail"
            | "mobile_home_dealers"
            | "motion_picture_theaters"
            | "motor_freight_carriers_and_trucking"
            | "motor_homes_dealers"
            | "motor_vehicle_supplies_and_new_parts"
            | "motorcycle_shops_and_dealers"
            | "motorcycle_shops_dealers"
            | "music_stores_musical_instruments_pianos_and_sheet_music"
            | "news_dealers_and_newsstands"
            | "non_fi_money_orders"
            | "non_fi_stored_value_card_purchase_load"
            | "nondurable_goods"
            | "nurseries_lawn_and_garden_supply_stores"
            | "nursing_personal_care"
            | "office_and_commercial_furniture"
            | "opticians_eyeglasses"
            | "optometrists_ophthalmologist"
            | "orthopedic_goods_prosthetic_devices"
            | "osteopaths"
            | "package_stores_beer_wine_and_liquor"
            | "paints_varnishes_and_supplies"
            | "parking_lots_garages"
            | "passenger_railways"
            | "pawn_shops"
            | "pet_shops_pet_food_and_supplies"
            | "petroleum_and_petroleum_products"
            | "photo_developing"
            | "photographic_photocopy_microfilm_equipment_and_supplies"
            | "photographic_studios"
            | "picture_video_production"
            | "piece_goods_notions_and_other_dry_goods"
            | "plumbing_heating_equipment_and_supplies"
            | "political_organizations"
            | "postal_services_government_only"
            | "precious_stones_and_metals_watches_and_jewelry"
            | "professional_services"
            | "public_warehousing_and_storage"
            | "quick_copy_repro_and_blueprint"
            | "railroads"
            | "real_estate_agents_and_managers_rentals"
            | "record_stores"
            | "recreational_vehicle_rentals"
            | "religious_goods_stores"
            | "religious_organizations"
            | "roofing_siding_sheet_metal"
            | "secretarial_support_services"
            | "security_brokers_dealers"
            | "service_stations"
            | "sewing_needlework_fabric_and_piece_goods_stores"
            | "shoe_repair_hat_cleaning"
            | "shoe_stores"
            | "small_appliance_repair"
            | "snowmobile_dealers"
            | "special_trade_services"
            | "specialty_cleaning"
            | "sporting_goods_stores"
            | "sporting_recreation_camps"
            | "sports_and_riding_apparel_stores"
            | "sports_clubs_fields"
            | "stamp_and_coin_stores"
            | "stationary_office_supplies_printing_and_writing_paper"
            | "stationery_stores_office_and_school_supply_stores"
            | "swimming_pools_sales"
            | "t_ui_travel_germany"
            | "tailors_alterations"
            | "tax_payments_government_agencies"
            | "tax_preparation_services"
            | "taxicabs_limousines"
            | "telecommunication_equipment_and_telephone_sales"
            | "telecommunication_services"
            | "telegraph_services"
            | "tent_and_awning_shops"
            | "testing_laboratories"
            | "theatrical_ticket_agencies"
            | "timeshares"
            | "tire_retreading_and_repair"
            | "tolls_bridge_fees"
            | "tourist_attractions_and_exhibits"
            | "towing_services"
            | "trailer_parks_campgrounds"
            | "transportation_services"
            | "travel_agencies_tour_operators"
            | "truck_stop_iteration"
            | "truck_utility_trailer_rentals"
            | "typesetting_plate_making_and_related_services"
            | "typewriter_stores"
            | "u_s_federal_government_agencies_or_departments"
            | "uniforms_commercial_clothing"
            | "used_merchandise_and_secondhand_stores"
            | "utilities"
            | "variety_stores"
            | "veterinary_services"
            | "video_amusement_game_supplies"
            | "video_game_arcades"
            | "video_tape_rental_stores"
            | "vocational_trade_schools"
            | "watch_jewelry_repair"
            | "welding_repair"
            | "wholesale_clubs"
            | "wig_and_toupee_stores"
            | "wires_money_orders"
            | "womens_accessory_and_specialty_shops"
            | "womens_ready_to_wear_stores"
            | "wrecking_and_salvage_yards"
          )[];
          interval: "all_time" | "daily" | "monthly" | "per_authorization" | "weekly" | "yearly";
        }[];
      };
      status?: "active" | "canceled" | "inactive";
    };
    export type RequestHeaders = {};
    export type ResponseBody = IssuingCard;
  }
  /**
   * @description <p>Returns a list of Issuing <code>Dispute</code> objects. The objects are sorted in descending order by creation date, with the most recently created object appearing first.</p>
   * @name GetIssuingDisputes
   * @request GET:/v1/issuing/disputes
   * @secure
   * @response `200` `{ data: (IssuingDispute)[], has_more: boolean, object: "list", url: string }` Successful response.
   * @response `default` `Error` Error response.
   */
  export namespace GetIssuingDisputes {
    export type RequestParams = {};
    export type RequestQuery = {
      created?: { gt?: number; gte?: number; lt?: number; lte?: number } | number;
      ending_before?: string;
      expand?: string[];
      limit?: number;
      starting_after?: string;
      status?: "expired" | "lost" | "submitted" | "unsubmitted" | "won";
      transaction?: string;
    };
    export type RequestBody = CardMandatePaymentMethodDetails;
    export type RequestHeaders = {};
    export type ResponseBody = { data: IssuingDispute[]; has_more: boolean; object: "list"; url: string };
  }
  /**
   * @description <p>Creates an Issuing <code>Dispute</code> object. Individual pieces of evidence within the <code>evidence</code> object are optional at this point. Stripe only validates that required evidence is present during submission. Refer to <a href="/docs/issuing/purchases/disputes#dispute-reasons-and-evidence">Dispute reasons and evidence</a> for more details about evidence requirements.</p>
   * @name PostIssuingDisputes
   * @request POST:/v1/issuing/disputes
   * @secure
   * @response `200` `IssuingDispute` Successful response.
   * @response `default` `Error` Error response.
   */
  export namespace PostIssuingDisputes {
    export type RequestParams = {};
    export type RequestQuery = {};
    export type RequestBody = {
      evidence?: {
        canceled?:
          | {
              additional_documentation?: string | "";
              canceled_at?: number | "";
              cancellation_policy_provided?: boolean | "";
              cancellation_reason?: string;
              expected_at?: number | "";
              explanation?: string;
              product_description?: string;
              product_type?: "" | "merchandise" | "service";
              return_status?: "" | "merchant_rejected" | "successful";
              returned_at?: number | "";
            }
          | ""
          | ({
              additional_documentation?: string | "";
              canceled_at?: number | "";
              cancellation_policy_provided?: boolean | "";
              cancellation_reason?: string;
              expected_at?: number | "";
              explanation?: string;
              product_description?: string;
              product_type?: "" | "merchandise" | "service";
              return_status?: "" | "merchant_rejected" | "successful";
              returned_at?: number | "";
            } & "");
        duplicate?:
          | {
              additional_documentation?: string | "";
              card_statement?: string | "";
              cash_receipt?: string | "";
              check_image?: string | "";
              explanation?: string;
              original_transaction?: string;
            }
          | ""
          | ({
              additional_documentation?: string | "";
              card_statement?: string | "";
              cash_receipt?: string | "";
              check_image?: string | "";
              explanation?: string;
              original_transaction?: string;
            } & "");
        fraudulent?:
          | { additional_documentation?: string | ""; explanation?: string }
          | ""
          | ({ additional_documentation?: string | ""; explanation?: string } & "");
        merchandise_not_as_described?:
          | {
              additional_documentation?: string | "";
              explanation?: string;
              received_at?: number | "";
              return_description?: string;
              return_status?: "" | "merchant_rejected" | "successful";
              returned_at?: number | "";
            }
          | ""
          | ({
              additional_documentation?: string | "";
              explanation?: string;
              received_at?: number | "";
              return_description?: string;
              return_status?: "" | "merchant_rejected" | "successful";
              returned_at?: number | "";
            } & "");
        not_received?:
          | {
              additional_documentation?: string | "";
              expected_at?: number | "";
              explanation?: string;
              product_description?: string;
              product_type?: "" | "merchandise" | "service";
            }
          | ""
          | ({
              additional_documentation?: string | "";
              expected_at?: number | "";
              explanation?: string;
              product_description?: string;
              product_type?: "" | "merchandise" | "service";
            } & "");
        other?:
          | {
              additional_documentation?: string | "";
              explanation?: string;
              product_description?: string;
              product_type?: "" | "merchandise" | "service";
            }
          | ""
          | ({
              additional_documentation?: string | "";
              explanation?: string;
              product_description?: string;
              product_type?: "" | "merchandise" | "service";
            } & "");
        reason?:
          | "canceled"
          | "duplicate"
          | "fraudulent"
          | "merchandise_not_as_described"
          | "not_received"
          | "other"
          | "service_not_as_described";
        service_not_as_described?:
          | {
              additional_documentation?: string | "";
              canceled_at?: number | "";
              cancellation_reason?: string;
              explanation?: string;
              received_at?: number | "";
            }
          | ""
          | ({
              additional_documentation?: string | "";
              canceled_at?: number | "";
              cancellation_reason?: string;
              explanation?: string;
              received_at?: number | "";
            } & "");
      };
      expand?: string[];
      metadata?: Record<string, string>;
      transaction: string;
    };
    export type RequestHeaders = {};
    export type ResponseBody = IssuingDispute;
  }
  /**
   * @description <p>Retrieves an Issuing <code>Dispute</code> object.</p>
   * @name GetIssuingDisputesDispute
   * @request GET:/v1/issuing/disputes/{dispute}
   * @secure
   * @response `200` `IssuingDispute` Successful response.
   * @response `default` `Error` Error response.
   */
  export namespace GetIssuingDisputesDispute {
    export type RequestParams = { dispute: string };
    export type RequestQuery = { expand?: string[] };
    export type RequestBody = CardMandatePaymentMethodDetails;
    export type RequestHeaders = {};
    export type ResponseBody = IssuingDispute;
  }
  /**
   * @description <p>Updates the specified Issuing <code>Dispute</code> object by setting the values of the parameters passed. Any parameters not provided will be left unchanged. Properties on the <code>evidence</code> object can be unset by passing in an empty string.</p>
   * @name PostIssuingDisputesDispute
   * @request POST:/v1/issuing/disputes/{dispute}
   * @secure
   * @response `200` `IssuingDispute` Successful response.
   * @response `default` `Error` Error response.
   */
  export namespace PostIssuingDisputesDispute {
    export type RequestParams = { dispute: string };
    export type RequestQuery = {};
    export type RequestBody = {
      evidence?: {
        canceled?:
          | {
              additional_documentation?: string | "";
              canceled_at?: number | "";
              cancellation_policy_provided?: boolean | "";
              cancellation_reason?: string;
              expected_at?: number | "";
              explanation?: string;
              product_description?: string;
              product_type?: "" | "merchandise" | "service";
              return_status?: "" | "merchant_rejected" | "successful";
              returned_at?: number | "";
            }
          | ""
          | ({
              additional_documentation?: string | "";
              canceled_at?: number | "";
              cancellation_policy_provided?: boolean | "";
              cancellation_reason?: string;
              expected_at?: number | "";
              explanation?: string;
              product_description?: string;
              product_type?: "" | "merchandise" | "service";
              return_status?: "" | "merchant_rejected" | "successful";
              returned_at?: number | "";
            } & "");
        duplicate?:
          | {
              additional_documentation?: string | "";
              card_statement?: string | "";
              cash_receipt?: string | "";
              check_image?: string | "";
              explanation?: string;
              original_transaction?: string;
            }
          | ""
          | ({
              additional_documentation?: string | "";
              card_statement?: string | "";
              cash_receipt?: string | "";
              check_image?: string | "";
              explanation?: string;
              original_transaction?: string;
            } & "");
        fraudulent?:
          | { additional_documentation?: string | ""; explanation?: string }
          | ""
          | ({ additional_documentation?: string | ""; explanation?: string } & "");
        merchandise_not_as_described?:
          | {
              additional_documentation?: string | "";
              explanation?: string;
              received_at?: number | "";
              return_description?: string;
              return_status?: "" | "merchant_rejected" | "successful";
              returned_at?: number | "";
            }
          | ""
          | ({
              additional_documentation?: string | "";
              explanation?: string;
              received_at?: number | "";
              return_description?: string;
              return_status?: "" | "merchant_rejected" | "successful";
              returned_at?: number | "";
            } & "");
        not_received?:
          | {
              additional_documentation?: string | "";
              expected_at?: number | "";
              explanation?: string;
              product_description?: string;
              product_type?: "" | "merchandise" | "service";
            }
          | ""
          | ({
              additional_documentation?: string | "";
              expected_at?: number | "";
              explanation?: string;
              product_description?: string;
              product_type?: "" | "merchandise" | "service";
            } & "");
        other?:
          | {
              additional_documentation?: string | "";
              explanation?: string;
              product_description?: string;
              product_type?: "" | "merchandise" | "service";
            }
          | ""
          | ({
              additional_documentation?: string | "";
              explanation?: string;
              product_description?: string;
              product_type?: "" | "merchandise" | "service";
            } & "");
        reason?:
          | "canceled"
          | "duplicate"
          | "fraudulent"
          | "merchandise_not_as_described"
          | "not_received"
          | "other"
          | "service_not_as_described";
        service_not_as_described?:
          | {
              additional_documentation?: string | "";
              canceled_at?: number | "";
              cancellation_reason?: string;
              explanation?: string;
              received_at?: number | "";
            }
          | ""
          | ({
              additional_documentation?: string | "";
              canceled_at?: number | "";
              cancellation_reason?: string;
              explanation?: string;
              received_at?: number | "";
            } & "");
      };
      expand?: string[];
      metadata?: Record<string, string> | "" | (Record<string, string> & "");
    };
    export type RequestHeaders = {};
    export type ResponseBody = IssuingDispute;
  }
  /**
   * @description <p>Submits an Issuing <code>Dispute</code> to the card network. Stripe validates that all evidence fields required for the dispute’s reason are present. For more details, see <a href="/docs/issuing/purchases/disputes#dispute-reasons-and-evidence">Dispute reasons and evidence</a>.</p>
   * @name PostIssuingDisputesDisputeSubmit
   * @request POST:/v1/issuing/disputes/{dispute}/submit
   * @secure
   * @response `200` `IssuingDispute` Successful response.
   * @response `default` `Error` Error response.
   */
  export namespace PostIssuingDisputesDisputeSubmit {
    export type RequestParams = { dispute: string };
    export type RequestQuery = {};
    export type RequestBody = {
      expand?: string[];
      metadata?: Record<string, string> | "" | (Record<string, string> & "");
    };
    export type RequestHeaders = {};
    export type ResponseBody = IssuingDispute;
  }
  /**
   * @description <p>Returns a list of Issuing <code>Settlement</code> objects. The objects are sorted in descending order by creation date, with the most recently created object appearing first.</p>
   * @name GetIssuingSettlements
   * @request GET:/v1/issuing/settlements
   * @secure
   * @response `200` `{ data: (IssuingSettlement)[], has_more: boolean, object: "list", url: string }` Successful response.
   * @response `default` `Error` Error response.
   */
  export namespace GetIssuingSettlements {
    export type RequestParams = {};
    export type RequestQuery = {
      created?: { gt?: number; gte?: number; lt?: number; lte?: number } | number;
      ending_before?: string;
      expand?: string[];
      limit?: number;
      starting_after?: string;
    };
    export type RequestBody = CardMandatePaymentMethodDetails;
    export type RequestHeaders = {};
    export type ResponseBody = { data: IssuingSettlement[]; has_more: boolean; object: "list"; url: string };
  }
  /**
   * @description <p>Retrieves an Issuing <code>Settlement</code> object.</p>
   * @name GetIssuingSettlementsSettlement
   * @request GET:/v1/issuing/settlements/{settlement}
   * @secure
   * @response `200` `IssuingSettlement` Successful response.
   * @response `default` `Error` Error response.
   */
  export namespace GetIssuingSettlementsSettlement {
    export type RequestParams = { settlement: string };
    export type RequestQuery = { expand?: string[] };
    export type RequestBody = CardMandatePaymentMethodDetails;
    export type RequestHeaders = {};
    export type ResponseBody = IssuingSettlement;
  }
  /**
   * @description <p>Updates the specified Issuing <code>Settlement</code> object by setting the values of the parameters passed. Any parameters not provided will be left unchanged.</p>
   * @name PostIssuingSettlementsSettlement
   * @request POST:/v1/issuing/settlements/{settlement}
   * @secure
   * @response `200` `IssuingSettlement` Successful response.
   * @response `default` `Error` Error response.
   */
  export namespace PostIssuingSettlementsSettlement {
    export type RequestParams = { settlement: string };
    export type RequestQuery = {};
    export type RequestBody = { expand?: string[]; metadata?: Record<string, string> };
    export type RequestHeaders = {};
    export type ResponseBody = IssuingSettlement;
  }
  /**
   * @description <p>Returns a list of Issuing <code>Transaction</code> objects. The objects are sorted in descending order by creation date, with the most recently created object appearing first.</p>
   * @name GetIssuingTransactions
   * @request GET:/v1/issuing/transactions
   * @secure
   * @response `200` `{ data: (IssuingTransaction)[], has_more: boolean, object: "list", url: string }` Successful response.
   * @response `default` `Error` Error response.
   */
  export namespace GetIssuingTransactions {
    export type RequestParams = {};
    export type RequestQuery = {
      card?: string;
      cardholder?: string;
      created?: { gt?: number; gte?: number; lt?: number; lte?: number } | number;
      ending_before?: string;
      expand?: string[];
      limit?: number;
      starting_after?: string;
      type?: "capture" | "refund";
    };
    export type RequestBody = CardMandatePaymentMethodDetails;
    export type RequestHeaders = {};
    export type ResponseBody = { data: IssuingTransaction[]; has_more: boolean; object: "list"; url: string };
  }
  /**
   * @description <p>Retrieves an Issuing <code>Transaction</code> object.</p>
   * @name GetIssuingTransactionsTransaction
   * @request GET:/v1/issuing/transactions/{transaction}
   * @secure
   * @response `200` `IssuingTransaction` Successful response.
   * @response `default` `Error` Error response.
   */
  export namespace GetIssuingTransactionsTransaction {
    export type RequestParams = { transaction: string };
    export type RequestQuery = { expand?: string[] };
    export type RequestBody = CardMandatePaymentMethodDetails;
    export type RequestHeaders = {};
    export type ResponseBody = IssuingTransaction;
  }
  /**
   * @description <p>Updates the specified Issuing <code>Transaction</code> object by setting the values of the parameters passed. Any parameters not provided will be left unchanged.</p>
   * @name PostIssuingTransactionsTransaction
   * @request POST:/v1/issuing/transactions/{transaction}
   * @secure
   * @response `200` `IssuingTransaction` Successful response.
   * @response `default` `Error` Error response.
   */
  export namespace PostIssuingTransactionsTransaction {
    export type RequestParams = { transaction: string };
    export type RequestQuery = {};
    export type RequestBody = {
      expand?: string[];
      metadata?: Record<string, string> | "" | (Record<string, string> & "");
    };
    export type RequestHeaders = {};
    export type ResponseBody = IssuingTransaction;
  }
  /**
   * @description <p>Retrieves a Mandate object.</p>
   * @name GetMandatesMandate
   * @request GET:/v1/mandates/{mandate}
   * @secure
   * @response `200` `Mandate` Successful response.
   * @response `default` `Error` Error response.
   */
  export namespace GetMandatesMandate {
    export type RequestParams = { mandate: string };
    export type RequestQuery = { expand?: string[] };
    export type RequestBody = CardMandatePaymentMethodDetails;
    export type RequestHeaders = {};
    export type ResponseBody = Mandate;
  }
  /**
   * @description <p>Returns a list of your order returns. The returns are returned sorted by creation date, with the most recently created return appearing first.</p>
   * @name GetOrderReturns
   * @request GET:/v1/order_returns
   * @secure
   * @response `200` `{ data: (OrderReturn)[], has_more: boolean, object: "list", url: string }` Successful response.
   * @response `default` `Error` Error response.
   */
  export namespace GetOrderReturns {
    export type RequestParams = {};
    export type RequestQuery = {
      created?: { gt?: number; gte?: number; lt?: number; lte?: number } | number;
      ending_before?: string;
      expand?: string[];
      limit?: number;
      order?: string;
      starting_after?: string;
    };
    export type RequestBody = CardMandatePaymentMethodDetails;
    export type RequestHeaders = {};
    export type ResponseBody = { data: OrderReturn[]; has_more: boolean; object: "list"; url: string };
  }
  /**
   * @description <p>Retrieves the details of an existing order return. Supply the unique order ID from either an order return creation request or the order return list, and Stripe will return the corresponding order information.</p>
   * @name GetOrderReturnsId
   * @request GET:/v1/order_returns/{id}
   * @secure
   * @response `200` `OrderReturn` Successful response.
   * @response `default` `Error` Error response.
   */
  export namespace GetOrderReturnsId {
    export type RequestParams = { id: string };
    export type RequestQuery = { expand?: string[] };
    export type RequestBody = CardMandatePaymentMethodDetails;
    export type RequestHeaders = {};
    export type ResponseBody = OrderReturn;
  }
  /**
   * @description <p>Returns a list of your orders. The orders are returned sorted by creation date, with the most recently created orders appearing first.</p>
   * @name GetOrders
   * @request GET:/v1/orders
   * @secure
   * @response `200` `{ data: (Order)[], has_more: boolean, object: "list", url: string }` Successful response.
   * @response `default` `Error` Error response.
   */
  export namespace GetOrders {
    export type RequestParams = {};
    export type RequestQuery = {
      created?: { gt?: number; gte?: number; lt?: number; lte?: number } | number;
      customer?: string;
      ending_before?: string;
      expand?: string[];
      ids?: string[];
      limit?: number;
      starting_after?: string;
      status?: string;
      status_transitions?: {
        canceled?: { gt?: number; gte?: number; lt?: number; lte?: number } | number;
        fulfilled?: { gt?: number; gte?: number; lt?: number; lte?: number } | number;
        paid?: { gt?: number; gte?: number; lt?: number; lte?: number } | number;
        returned?: { gt?: number; gte?: number; lt?: number; lte?: number } | number;
      };
      upstream_ids?: string[];
    };
    export type RequestBody = CardMandatePaymentMethodDetails;
    export type RequestHeaders = {};
    export type ResponseBody = { data: Order[]; has_more: boolean; object: "list"; url: string };
  }
  /**
   * @description <p>Creates a new order object.</p>
   * @name PostOrders
   * @request POST:/v1/orders
   * @secure
   * @response `200` `Order` Successful response.
   * @response `default` `Error` Error response.
   */
  export namespace PostOrders {
    export type RequestParams = {};
    export type RequestQuery = {};
    export type RequestBody = {
      coupon?: string;
      currency: string;
      customer?: string;
      email?: string;
      expand?: string[];
      items?: {
        amount?: number;
        currency?: string;
        description?: string;
        parent?: string;
        quantity?: number;
        type?: "discount" | "shipping" | "sku" | "tax";
      }[];
      metadata?: Record<string, string>;
      shipping?: {
        address: {
          city?: string;
          country?: string;
          line1?: string;
          line2?: string;
          postal_code?: string;
          state?: string;
        };
        name: string;
        phone?: string;
      };
    };
    export type RequestHeaders = {};
    export type ResponseBody = Order;
  }
  /**
   * @description <p>Retrieves the details of an existing order. Supply the unique order ID from either an order creation request or the order list, and Stripe will return the corresponding order information.</p>
   * @name GetOrdersId
   * @request GET:/v1/orders/{id}
   * @secure
   * @response `200` `Order` Successful response.
   * @response `default` `Error` Error response.
   */
  export namespace GetOrdersId {
    export type RequestParams = { id: string };
    export type RequestQuery = { expand?: string[] };
    export type RequestBody = CardMandatePaymentMethodDetails;
    export type RequestHeaders = {};
    export type ResponseBody = Order;
  }
  /**
   * @description <p>Updates the specific order by setting the values of the parameters passed. Any parameters not provided will be left unchanged.</p>
   * @name PostOrdersId
   * @request POST:/v1/orders/{id}
   * @secure
   * @response `200` `Order` Successful response.
   * @response `default` `Error` Error response.
   */
  export namespace PostOrdersId {
    export type RequestParams = { id: string };
    export type RequestQuery = {};
    export type RequestBody = {
      coupon?: string;
      expand?: string[];
      metadata?: Record<string, string> | "" | (Record<string, string> & "");
      selected_shipping_method?: string;
      shipping?: { carrier: string; tracking_number: string };
      status?: "canceled" | "created" | "fulfilled" | "paid" | "returned";
    };
    export type RequestHeaders = {};
    export type ResponseBody = Order;
  }
  /**
   * @description <p>Pay an order by providing a <code>source</code> to create a payment.</p>
   * @name PostOrdersIdPay
   * @request POST:/v1/orders/{id}/pay
   * @secure
   * @response `200` `Order` Successful response.
   * @response `default` `Error` Error response.
   */
  export namespace PostOrdersIdPay {
    export type RequestParams = { id: string };
    export type RequestQuery = {};
    export type RequestBody = {
      application_fee?: number;
      customer?: string;
      email?: string;
      expand?: string[];
      metadata?: Record<string, string>;
      source?: string;
    };
    export type RequestHeaders = {};
    export type ResponseBody = Order;
  }
  /**
   * @description <p>Return all or part of an order. The order must have a status of <code>paid</code> or <code>fulfilled</code> before it can be returned. Once all items have been returned, the order will become <code>canceled</code> or <code>returned</code> depending on which status the order started in.</p>
   * @name PostOrdersIdReturns
   * @request POST:/v1/orders/{id}/returns
   * @secure
   * @response `200` `OrderReturn` Successful response.
   * @response `default` `Error` Error response.
   */
  export namespace PostOrdersIdReturns {
    export type RequestParams = { id: string };
    export type RequestQuery = {};
    export type RequestBody = {
      expand?: string[];
      items?:
        | {
            amount?: number;
            description?: string;
            parent?: string;
            quantity?: number;
            type?: "discount" | "shipping" | "sku" | "tax";
          }[]
        | ""
        | ({
            amount?: number;
            description?: string;
            parent?: string;
            quantity?: number;
            type?: "discount" | "shipping" | "sku" | "tax";
          }[] &
            "");
    };
    export type RequestHeaders = {};
    export type ResponseBody = OrderReturn;
  }
  /**
   * @description <p>Returns a list of PaymentIntents.</p>
   * @name GetPaymentIntents
   * @request GET:/v1/payment_intents
   * @secure
   * @response `200` `{ data: (PaymentIntent)[], has_more: boolean, object: "list", url: string }` Successful response.
   * @response `default` `Error` Error response.
   */
  export namespace GetPaymentIntents {
    export type RequestParams = {};
    export type RequestQuery = {
      created?: { gt?: number; gte?: number; lt?: number; lte?: number } | number;
      customer?: string;
      ending_before?: string;
      expand?: string[];
      limit?: number;
      starting_after?: string;
    };
    export type RequestBody = CardMandatePaymentMethodDetails;
    export type RequestHeaders = {};
    export type ResponseBody = { data: PaymentIntent[]; has_more: boolean; object: "list"; url: string };
  }
  /**
   * @description <p>Creates a PaymentIntent object.</p> <p>After the PaymentIntent is created, attach a payment method and <a href="/docs/api/payment_intents/confirm">confirm</a> to continue the payment. You can read more about the different payment flows available via the Payment Intents API <a href="/docs/payments/payment-intents">here</a>.</p> <p>When <code>confirm=true</code> is used during creation, it is equivalent to creating and confirming the PaymentIntent in the same call. You may use any parameters available in the <a href="/docs/api/payment_intents/confirm">confirm API</a> when <code>confirm=true</code> is supplied.</p>
   * @name PostPaymentIntents
   * @request POST:/v1/payment_intents
   * @secure
   * @response `200` `PaymentIntent` Successful response.
   * @response `default` `Error` Error response.
   */
  export namespace PostPaymentIntents {
    export type RequestParams = {};
    export type RequestQuery = {};
    export type RequestBody = {
      amount: number;
      application_fee_amount?: number;
      automatic_payment_methods?: { enabled: boolean };
      capture_method?: "automatic" | "manual";
      confirm?: boolean;
      confirmation_method?: "automatic" | "manual";
      currency: string;
      customer?: string;
      description?: string;
      error_on_requires_action?: boolean;
      expand?: string[];
      mandate?: string;
      mandate_data?: {
        customer_acceptance: {
          accepted_at?: number;
          offline?: object;
          online?: { ip_address: string; user_agent: string };
          type: "offline" | "online";
        };
      };
      metadata?: Record<string, string>;
      off_session?: boolean | "one_off" | "recurring";
      on_behalf_of?: string;
      payment_method?: string;
      payment_method_data?: {
        acss_debit?: { account_number: string; institution_number: string; transit_number: string };
        afterpay_clearpay?: object;
        alipay?: object;
        au_becs_debit?: { account_number: string; bsb_number: string };
        bacs_debit?: { account_number?: string; sort_code?: string };
        bancontact?: object;
        billing_details?: {
          address?:
            | { city?: string; country?: string; line1?: string; line2?: string; postal_code?: string; state?: string }
            | ""
            | ({
                city?: string;
                country?: string;
                line1?: string;
                line2?: string;
                postal_code?: string;
                state?: string;
              } & "");
          email?: string | "";
          name?: string;
          phone?: string;
        };
        boleto?: { tax_id: string };
        eps?: {
          bank?:
            | "arzte_und_apotheker_bank"
            | "austrian_anadi_bank_ag"
            | "bank_austria"
            | "bankhaus_carl_spangler"
            | "bankhaus_schelhammer_und_schattera_ag"
            | "bawag_psk_ag"
            | "bks_bank_ag"
            | "brull_kallmus_bank_ag"
            | "btv_vier_lander_bank"
            | "capital_bank_grawe_gruppe_ag"
            | "dolomitenbank"
            | "easybank_ag"
            | "erste_bank_und_sparkassen"
            | "hypo_alpeadriabank_international_ag"
            | "hypo_bank_burgenland_aktiengesellschaft"
            | "hypo_noe_lb_fur_niederosterreich_u_wien"
            | "hypo_oberosterreich_salzburg_steiermark"
            | "hypo_tirol_bank_ag"
            | "hypo_vorarlberg_bank_ag"
            | "marchfelder_bank"
            | "oberbank_ag"
            | "raiffeisen_bankengruppe_osterreich"
            | "schoellerbank_ag"
            | "sparda_bank_wien"
            | "volksbank_gruppe"
            | "volkskreditbank_ag"
            | "vr_bank_braunau";
        };
        fpx?: {
          bank:
            | "affin_bank"
            | "agrobank"
            | "alliance_bank"
            | "ambank"
            | "bank_islam"
            | "bank_muamalat"
            | "bank_rakyat"
            | "bsn"
            | "cimb"
            | "deutsche_bank"
            | "hong_leong_bank"
            | "hsbc"
            | "kfh"
            | "maybank2e"
            | "maybank2u"
            | "ocbc"
            | "pb_enterprise"
            | "public_bank"
            | "rhb"
            | "standard_chartered"
            | "uob";
        };
        giropay?: object;
        grabpay?: object;
        ideal?: {
          bank?:
            | "abn_amro"
            | "asn_bank"
            | "bunq"
            | "handelsbanken"
            | "ing"
            | "knab"
            | "moneyou"
            | "rabobank"
            | "regiobank"
            | "revolut"
            | "sns_bank"
            | "triodos_bank"
            | "van_lanschot";
        };
        interac_present?: object;
        klarna?: { dob?: { day: number; month: number; year: number } };
        metadata?: Record<string, string>;
        oxxo?: object;
        p24?: {
          bank?:
            | "alior_bank"
            | "bank_millennium"
            | "bank_nowy_bfg_sa"
            | "bank_pekao_sa"
            | "banki_spbdzielcze"
            | "blik"
            | "bnp_paribas"
            | "boz"
            | "citi_handlowy"
            | "credit_agricole"
            | "envelobank"
            | "etransfer_pocztowy24"
            | "getin_bank"
            | "ideabank"
            | "ing"
            | "inteligo"
            | "mbank_mtransfer"
            | "nest_przelew"
            | "noble_pay"
            | "pbac_z_ipko"
            | "plus_bank"
            | "santander_przelew24"
            | "tmobile_usbugi_bankowe"
            | "toyota_bank"
            | "volkswagen_bank";
        };
        sepa_debit?: { iban: string };
        sofort?: { country: "AT" | "BE" | "DE" | "ES" | "IT" | "NL" };
        type:
          | "acss_debit"
          | "afterpay_clearpay"
          | "alipay"
          | "au_becs_debit"
          | "bacs_debit"
          | "bancontact"
          | "boleto"
          | "eps"
          | "fpx"
          | "giropay"
          | "grabpay"
          | "ideal"
          | "klarna"
          | "oxxo"
          | "p24"
          | "sepa_debit"
          | "sofort"
          | "wechat_pay";
        wechat_pay?: object;
      };
      payment_method_options?: {
        acss_debit?:
          | {
              mandate_options?: {
                custom_mandate_url?: string | "";
                interval_description?: string;
                payment_schedule?: "combined" | "interval" | "sporadic";
                transaction_type?: "business" | "personal";
              };
              verification_method?: "automatic" | "instant" | "microdeposits";
            }
          | ""
          | ({
              mandate_options?: {
                custom_mandate_url?: string | "";
                interval_description?: string;
                payment_schedule?: "combined" | "interval" | "sporadic";
                transaction_type?: "business" | "personal";
              };
              verification_method?: "automatic" | "instant" | "microdeposits";
            } & "");
        afterpay_clearpay?: { reference?: string } | "" | ({ reference?: string } & "");
        alipay?: object | "" | (object & "");
        au_becs_debit?: object | "" | (object & "");
        bacs_debit?: object | "" | (object & "");
        bancontact?:
          | { preferred_language?: "de" | "en" | "fr" | "nl" }
          | ""
          | ({ preferred_language?: "de" | "en" | "fr" | "nl" } & "");
        boleto?: { expires_after_days?: number } | "" | ({ expires_after_days?: number } & "");
        card?:
          | {
              cvc_token?: string;
              installments?: {
                enabled?: boolean;
                plan?:
                  | { count: number; interval: "month"; type: "fixed_count" }
                  | ""
                  | ({ count: number; interval: "month"; type: "fixed_count" } & "");
              };
              network?:
                | "amex"
                | "cartes_bancaires"
                | "diners"
                | "discover"
                | "interac"
                | "jcb"
                | "mastercard"
                | "unionpay"
                | "unknown"
                | "visa";
              request_three_d_secure?: "any" | "automatic";
              setup_future_usage?: "" | "none" | "off_session" | "on_session";
            }
          | ""
          | ({
              cvc_token?: string;
              installments?: {
                enabled?: boolean;
                plan?:
                  | { count: number; interval: "month"; type: "fixed_count" }
                  | ""
                  | ({ count: number; interval: "month"; type: "fixed_count" } & "");
              };
              network?:
                | "amex"
                | "cartes_bancaires"
                | "diners"
                | "discover"
                | "interac"
                | "jcb"
                | "mastercard"
                | "unionpay"
                | "unknown"
                | "visa";
              request_three_d_secure?: "any" | "automatic";
              setup_future_usage?: "" | "none" | "off_session" | "on_session";
            } & "");
        card_present?: object | "" | (object & "");
        eps?: object | "" | (object & "");
        fpx?: object | "" | (object & "");
        giropay?: object | "" | (object & "");
        grabpay?: object | "" | (object & "");
        ideal?: object | "" | (object & "");
        interac_present?: object | "" | (object & "");
        klarna?:
          | {
              preferred_locale?:
                | "da-DK"
                | "de-AT"
                | "de-DE"
                | "en-AT"
                | "en-BE"
                | "en-DE"
                | "en-DK"
                | "en-ES"
                | "en-FI"
                | "en-FR"
                | "en-GB"
                | "en-IE"
                | "en-IT"
                | "en-NL"
                | "en-NO"
                | "en-SE"
                | "en-US"
                | "es-ES"
                | "es-US"
                | "fi-FI"
                | "fr-BE"
                | "fr-FR"
                | "it-IT"
                | "nb-NO"
                | "nl-BE"
                | "nl-NL"
                | "sv-FI"
                | "sv-SE";
            }
          | ""
          | ({
              preferred_locale?:
                | "da-DK"
                | "de-AT"
                | "de-DE"
                | "en-AT"
                | "en-BE"
                | "en-DE"
                | "en-DK"
                | "en-ES"
                | "en-FI"
                | "en-FR"
                | "en-GB"
                | "en-IE"
                | "en-IT"
                | "en-NL"
                | "en-NO"
                | "en-SE"
                | "en-US"
                | "es-ES"
                | "es-US"
                | "fi-FI"
                | "fr-BE"
                | "fr-FR"
                | "it-IT"
                | "nb-NO"
                | "nl-BE"
                | "nl-NL"
                | "sv-FI"
                | "sv-SE";
            } & "");
        oxxo?: { expires_after_days?: number } | "" | ({ expires_after_days?: number } & "");
        p24?: { tos_shown_and_accepted?: boolean } | "" | ({ tos_shown_and_accepted?: boolean } & "");
        sepa_debit?: { mandate_options?: object } | "" | ({ mandate_options?: object } & "");
        sofort?:
          | { preferred_language?: "" | "de" | "en" | "es" | "fr" | "it" | "nl" | "pl" }
          | ""
          | ({ preferred_language?: "" | "de" | "en" | "es" | "fr" | "it" | "nl" | "pl" } & "");
        wechat_pay?:
          | { app_id?: string; client: "android" | "ios" | "web" }
          | ""
          | ({ app_id?: string; client: "android" | "ios" | "web" } & "");
      };
      payment_method_types?: string[];
      receipt_email?: string;
      return_url?: string;
      setup_future_usage?: "off_session" | "on_session";
      shipping?: {
        address: {
          city?: string;
          country?: string;
          line1?: string;
          line2?: string;
          postal_code?: string;
          state?: string;
        };
        carrier?: string;
        name: string;
        phone?: string;
        tracking_number?: string;
      };
      statement_descriptor?: string;
      statement_descriptor_suffix?: string;
      transfer_data?: { amount?: number; destination: string };
      transfer_group?: string;
      use_stripe_sdk?: boolean;
    };
    export type RequestHeaders = {};
    export type ResponseBody = PaymentIntent;
  }
  /**
   * @description <p>Retrieves the details of a PaymentIntent that has previously been created. </p> <p>Client-side retrieval using a publishable key is allowed when the <code>client_secret</code> is provided in the query string. </p> <p>When retrieved with a publishable key, only a subset of properties will be returned. Please refer to the <a href="#payment_intent_object">payment intent</a> object reference for more details.</p>
   * @name GetPaymentIntentsIntent
   * @request GET:/v1/payment_intents/{intent}
   * @secure
   * @response `200` `PaymentIntent` Successful response.
   * @response `default` `Error` Error response.
   */
  export namespace GetPaymentIntentsIntent {
    export type RequestParams = { intent: string };
    export type RequestQuery = { client_secret?: string; expand?: string[] };
    export type RequestBody = CardMandatePaymentMethodDetails;
    export type RequestHeaders = {};
    export type ResponseBody = PaymentIntent;
  }
  /**
   * @description <p>Updates properties on a PaymentIntent object without confirming.</p> <p>Depending on which properties you update, you may need to confirm the PaymentIntent again. For example, updating the <code>payment_method</code> will always require you to confirm the PaymentIntent again. If you prefer to update and confirm at the same time, we recommend updating properties via the <a href="/docs/api/payment_intents/confirm">confirm API</a> instead.</p>
   * @name PostPaymentIntentsIntent
   * @request POST:/v1/payment_intents/{intent}
   * @secure
   * @response `200` `PaymentIntent` Successful response.
   * @response `default` `Error` Error response.
   */
  export namespace PostPaymentIntentsIntent {
    export type RequestParams = { intent: string };
    export type RequestQuery = {};
    export type RequestBody = {
      amount?: number;
      application_fee_amount?: number | "";
      currency?: string;
      customer?: string;
      description?: string;
      expand?: string[];
      metadata?: Record<string, string> | "" | (Record<string, string> & "");
      payment_method?: string;
      payment_method_data?: {
        acss_debit?: { account_number: string; institution_number: string; transit_number: string };
        afterpay_clearpay?: object;
        alipay?: object;
        au_becs_debit?: { account_number: string; bsb_number: string };
        bacs_debit?: { account_number?: string; sort_code?: string };
        bancontact?: object;
        billing_details?: {
          address?:
            | { city?: string; country?: string; line1?: string; line2?: string; postal_code?: string; state?: string }
            | ""
            | ({
                city?: string;
                country?: string;
                line1?: string;
                line2?: string;
                postal_code?: string;
                state?: string;
              } & "");
          email?: string | "";
          name?: string;
          phone?: string;
        };
        boleto?: { tax_id: string };
        eps?: {
          bank?:
            | "arzte_und_apotheker_bank"
            | "austrian_anadi_bank_ag"
            | "bank_austria"
            | "bankhaus_carl_spangler"
            | "bankhaus_schelhammer_und_schattera_ag"
            | "bawag_psk_ag"
            | "bks_bank_ag"
            | "brull_kallmus_bank_ag"
            | "btv_vier_lander_bank"
            | "capital_bank_grawe_gruppe_ag"
            | "dolomitenbank"
            | "easybank_ag"
            | "erste_bank_und_sparkassen"
            | "hypo_alpeadriabank_international_ag"
            | "hypo_bank_burgenland_aktiengesellschaft"
            | "hypo_noe_lb_fur_niederosterreich_u_wien"
            | "hypo_oberosterreich_salzburg_steiermark"
            | "hypo_tirol_bank_ag"
            | "hypo_vorarlberg_bank_ag"
            | "marchfelder_bank"
            | "oberbank_ag"
            | "raiffeisen_bankengruppe_osterreich"
            | "schoellerbank_ag"
            | "sparda_bank_wien"
            | "volksbank_gruppe"
            | "volkskreditbank_ag"
            | "vr_bank_braunau";
        };
        fpx?: {
          bank:
            | "affin_bank"
            | "agrobank"
            | "alliance_bank"
            | "ambank"
            | "bank_islam"
            | "bank_muamalat"
            | "bank_rakyat"
            | "bsn"
            | "cimb"
            | "deutsche_bank"
            | "hong_leong_bank"
            | "hsbc"
            | "kfh"
            | "maybank2e"
            | "maybank2u"
            | "ocbc"
            | "pb_enterprise"
            | "public_bank"
            | "rhb"
            | "standard_chartered"
            | "uob";
        };
        giropay?: object;
        grabpay?: object;
        ideal?: {
          bank?:
            | "abn_amro"
            | "asn_bank"
            | "bunq"
            | "handelsbanken"
            | "ing"
            | "knab"
            | "moneyou"
            | "rabobank"
            | "regiobank"
            | "revolut"
            | "sns_bank"
            | "triodos_bank"
            | "van_lanschot";
        };
        interac_present?: object;
        klarna?: { dob?: { day: number; month: number; year: number } };
        metadata?: Record<string, string>;
        oxxo?: object;
        p24?: {
          bank?:
            | "alior_bank"
            | "bank_millennium"
            | "bank_nowy_bfg_sa"
            | "bank_pekao_sa"
            | "banki_spbdzielcze"
            | "blik"
            | "bnp_paribas"
            | "boz"
            | "citi_handlowy"
            | "credit_agricole"
            | "envelobank"
            | "etransfer_pocztowy24"
            | "getin_bank"
            | "ideabank"
            | "ing"
            | "inteligo"
            | "mbank_mtransfer"
            | "nest_przelew"
            | "noble_pay"
            | "pbac_z_ipko"
            | "plus_bank"
            | "santander_przelew24"
            | "tmobile_usbugi_bankowe"
            | "toyota_bank"
            | "volkswagen_bank";
        };
        sepa_debit?: { iban: string };
        sofort?: { country: "AT" | "BE" | "DE" | "ES" | "IT" | "NL" };
        type:
          | "acss_debit"
          | "afterpay_clearpay"
          | "alipay"
          | "au_becs_debit"
          | "bacs_debit"
          | "bancontact"
          | "boleto"
          | "eps"
          | "fpx"
          | "giropay"
          | "grabpay"
          | "ideal"
          | "klarna"
          | "oxxo"
          | "p24"
          | "sepa_debit"
          | "sofort"
          | "wechat_pay";
        wechat_pay?: object;
      };
      payment_method_options?: {
        acss_debit?:
          | {
              mandate_options?: {
                custom_mandate_url?: string | "";
                interval_description?: string;
                payment_schedule?: "combined" | "interval" | "sporadic";
                transaction_type?: "business" | "personal";
              };
              verification_method?: "automatic" | "instant" | "microdeposits";
            }
          | ""
          | ({
              mandate_options?: {
                custom_mandate_url?: string | "";
                interval_description?: string;
                payment_schedule?: "combined" | "interval" | "sporadic";
                transaction_type?: "business" | "personal";
              };
              verification_method?: "automatic" | "instant" | "microdeposits";
            } & "");
        afterpay_clearpay?: { reference?: string } | "" | ({ reference?: string } & "");
        alipay?: object | "" | (object & "");
        au_becs_debit?: object | "" | (object & "");
        bacs_debit?: object | "" | (object & "");
        bancontact?:
          | { preferred_language?: "de" | "en" | "fr" | "nl" }
          | ""
          | ({ preferred_language?: "de" | "en" | "fr" | "nl" } & "");
        boleto?: { expires_after_days?: number } | "" | ({ expires_after_days?: number } & "");
        card?:
          | {
              cvc_token?: string;
              installments?: {
                enabled?: boolean;
                plan?:
                  | { count: number; interval: "month"; type: "fixed_count" }
                  | ""
                  | ({ count: number; interval: "month"; type: "fixed_count" } & "");
              };
              network?:
                | "amex"
                | "cartes_bancaires"
                | "diners"
                | "discover"
                | "interac"
                | "jcb"
                | "mastercard"
                | "unionpay"
                | "unknown"
                | "visa";
              request_three_d_secure?: "any" | "automatic";
              setup_future_usage?: "" | "none" | "off_session" | "on_session";
            }
          | ""
          | ({
              cvc_token?: string;
              installments?: {
                enabled?: boolean;
                plan?:
                  | { count: number; interval: "month"; type: "fixed_count" }
                  | ""
                  | ({ count: number; interval: "month"; type: "fixed_count" } & "");
              };
              network?:
                | "amex"
                | "cartes_bancaires"
                | "diners"
                | "discover"
                | "interac"
                | "jcb"
                | "mastercard"
                | "unionpay"
                | "unknown"
                | "visa";
              request_three_d_secure?: "any" | "automatic";
              setup_future_usage?: "" | "none" | "off_session" | "on_session";
            } & "");
        card_present?: object | "" | (object & "");
        eps?: object | "" | (object & "");
        fpx?: object | "" | (object & "");
        giropay?: object | "" | (object & "");
        grabpay?: object | "" | (object & "");
        ideal?: object | "" | (object & "");
        interac_present?: object | "" | (object & "");
        klarna?:
          | {
              preferred_locale?:
                | "da-DK"
                | "de-AT"
                | "de-DE"
                | "en-AT"
                | "en-BE"
                | "en-DE"
                | "en-DK"
                | "en-ES"
                | "en-FI"
                | "en-FR"
                | "en-GB"
                | "en-IE"
                | "en-IT"
                | "en-NL"
                | "en-NO"
                | "en-SE"
                | "en-US"
                | "es-ES"
                | "es-US"
                | "fi-FI"
                | "fr-BE"
                | "fr-FR"
                | "it-IT"
                | "nb-NO"
                | "nl-BE"
                | "nl-NL"
                | "sv-FI"
                | "sv-SE";
            }
          | ""
          | ({
              preferred_locale?:
                | "da-DK"
                | "de-AT"
                | "de-DE"
                | "en-AT"
                | "en-BE"
                | "en-DE"
                | "en-DK"
                | "en-ES"
                | "en-FI"
                | "en-FR"
                | "en-GB"
                | "en-IE"
                | "en-IT"
                | "en-NL"
                | "en-NO"
                | "en-SE"
                | "en-US"
                | "es-ES"
                | "es-US"
                | "fi-FI"
                | "fr-BE"
                | "fr-FR"
                | "it-IT"
                | "nb-NO"
                | "nl-BE"
                | "nl-NL"
                | "sv-FI"
                | "sv-SE";
            } & "");
        oxxo?: { expires_after_days?: number } | "" | ({ expires_after_days?: number } & "");
        p24?: { tos_shown_and_accepted?: boolean } | "" | ({ tos_shown_and_accepted?: boolean } & "");
        sepa_debit?: { mandate_options?: object } | "" | ({ mandate_options?: object } & "");
        sofort?:
          | { preferred_language?: "" | "de" | "en" | "es" | "fr" | "it" | "nl" | "pl" }
          | ""
          | ({ preferred_language?: "" | "de" | "en" | "es" | "fr" | "it" | "nl" | "pl" } & "");
        wechat_pay?:
          | { app_id?: string; client: "android" | "ios" | "web" }
          | ""
          | ({ app_id?: string; client: "android" | "ios" | "web" } & "");
      };
      payment_method_types?: string[];
      receipt_email?: string | "";
      setup_future_usage?: "" | "off_session" | "on_session";
      shipping?:
        | {
            address: {
              city?: string;
              country?: string;
              line1?: string;
              line2?: string;
              postal_code?: string;
              state?: string;
            };
            carrier?: string;
            name: string;
            phone?: string;
            tracking_number?: string;
          }
        | ""
        | ({
            address: {
              city?: string;
              country?: string;
              line1?: string;
              line2?: string;
              postal_code?: string;
              state?: string;
            };
            carrier?: string;
            name: string;
            phone?: string;
            tracking_number?: string;
          } & "");
      statement_descriptor?: string;
      statement_descriptor_suffix?: string;
      transfer_data?: { amount?: number };
      transfer_group?: string;
    };
    export type RequestHeaders = {};
    export type ResponseBody = PaymentIntent;
  }
  /**
   * @description <p>A PaymentIntent object can be canceled when it is in one of these statuses: <code>requires_payment_method</code>, <code>requires_capture</code>, <code>requires_confirmation</code>, <code>requires_action</code>, or <code>processing</code>. </p> <p>Once canceled, no additional charges will be made by the PaymentIntent and any operations on the PaymentIntent will fail with an error. For PaymentIntents with <code>status=’requires_capture’</code>, the remaining <code>amount_capturable</code> will automatically be refunded.</p>
   * @name PostPaymentIntentsIntentCancel
   * @request POST:/v1/payment_intents/{intent}/cancel
   * @secure
   * @response `200` `PaymentIntent` Successful response.
   * @response `default` `Error` Error response.
   */
  export namespace PostPaymentIntentsIntentCancel {
    export type RequestParams = { intent: string };
    export type RequestQuery = {};
    export type RequestBody = {
      cancellation_reason?: "abandoned" | "duplicate" | "fraudulent" | "requested_by_customer";
      expand?: string[];
    };
    export type RequestHeaders = {};
    export type ResponseBody = PaymentIntent;
  }
  /**
   * @description <p>Capture the funds of an existing uncaptured PaymentIntent when its status is <code>requires_capture</code>.</p> <p>Uncaptured PaymentIntents will be canceled a set number of days after they are created (7 by default).</p> <p>Learn more about <a href="/docs/payments/capture-later">separate authorization and capture</a>.</p>
   * @name PostPaymentIntentsIntentCapture
   * @request POST:/v1/payment_intents/{intent}/capture
   * @secure
   * @response `200` `PaymentIntent` Successful response.
   * @response `default` `Error` Error response.
   */
  export namespace PostPaymentIntentsIntentCapture {
    export type RequestParams = { intent: string };
    export type RequestQuery = {};
    export type RequestBody = {
      amount_to_capture?: number;
      application_fee_amount?: number;
      expand?: string[];
      statement_descriptor?: string;
      statement_descriptor_suffix?: string;
      transfer_data?: { amount?: number };
    };
    export type RequestHeaders = {};
    export type ResponseBody = PaymentIntent;
  }
  /**
   * @description <p>Confirm that your customer intends to pay with current or provided payment method. Upon confirmation, the PaymentIntent will attempt to initiate a payment.</p> <p>If the selected payment method requires additional authentication steps, the PaymentIntent will transition to the <code>requires_action</code> status and suggest additional actions via <code>next_action</code>. If payment fails, the PaymentIntent will transition to the <code>requires_payment_method</code> status. If payment succeeds, the PaymentIntent will transition to the <code>succeeded</code> status (or <code>requires_capture</code>, if <code>capture_method</code> is set to <code>manual</code>).</p> <p>If the <code>confirmation_method</code> is <code>automatic</code>, payment may be attempted using our <a href="/docs/stripe-js/reference#stripe-handle-card-payment">client SDKs</a> and the PaymentIntent’s <a href="#payment_intent_object-client_secret">client_secret</a>. After <code>next_action</code>s are handled by the client, no additional confirmation is required to complete the payment.</p> <p>If the <code>confirmation_method</code> is <code>manual</code>, all payment attempts must be initiated using a secret key. If any actions are required for the payment, the PaymentIntent will return to the <code>requires_confirmation</code> state after those actions are completed. Your server needs to then explicitly re-confirm the PaymentIntent to initiate the next payment attempt. Read the <a href="/docs/payments/payment-intents/web-manual">expanded documentation</a> to learn more about manual confirmation.</p>
   * @name PostPaymentIntentsIntentConfirm
   * @request POST:/v1/payment_intents/{intent}/confirm
   * @secure
   * @response `200` `PaymentIntent` Successful response.
   * @response `default` `Error` Error response.
   */
  export namespace PostPaymentIntentsIntentConfirm {
    export type RequestParams = { intent: string };
    export type RequestQuery = {};
    export type RequestBody = {
      client_secret?: string;
      error_on_requires_action?: boolean;
      expand?: string[];
      mandate?: string;
      mandate_data?:
        | {
            customer_acceptance: {
              accepted_at?: number;
              offline?: object;
              online?: { ip_address: string; user_agent: string };
              type: "offline" | "online";
            };
          }
        | { customer_acceptance: { online: { ip_address?: string; user_agent?: string }; type: "online" } }
        | ({
            customer_acceptance: {
              accepted_at?: number;
              offline?: object;
              online?: { ip_address: string; user_agent: string };
              type: "offline" | "online";
            };
          } & { customer_acceptance: { online: { ip_address?: string; user_agent?: string }; type: "online" } });
      off_session?: boolean | "one_off" | "recurring";
      payment_method?: string;
      payment_method_data?: {
        acss_debit?: { account_number: string; institution_number: string; transit_number: string };
        afterpay_clearpay?: object;
        alipay?: object;
        au_becs_debit?: { account_number: string; bsb_number: string };
        bacs_debit?: { account_number?: string; sort_code?: string };
        bancontact?: object;
        billing_details?: {
          address?:
            | { city?: string; country?: string; line1?: string; line2?: string; postal_code?: string; state?: string }
            | ""
            | ({
                city?: string;
                country?: string;
                line1?: string;
                line2?: string;
                postal_code?: string;
                state?: string;
              } & "");
          email?: string | "";
          name?: string;
          phone?: string;
        };
        boleto?: { tax_id: string };
        eps?: {
          bank?:
            | "arzte_und_apotheker_bank"
            | "austrian_anadi_bank_ag"
            | "bank_austria"
            | "bankhaus_carl_spangler"
            | "bankhaus_schelhammer_und_schattera_ag"
            | "bawag_psk_ag"
            | "bks_bank_ag"
            | "brull_kallmus_bank_ag"
            | "btv_vier_lander_bank"
            | "capital_bank_grawe_gruppe_ag"
            | "dolomitenbank"
            | "easybank_ag"
            | "erste_bank_und_sparkassen"
            | "hypo_alpeadriabank_international_ag"
            | "hypo_bank_burgenland_aktiengesellschaft"
            | "hypo_noe_lb_fur_niederosterreich_u_wien"
            | "hypo_oberosterreich_salzburg_steiermark"
            | "hypo_tirol_bank_ag"
            | "hypo_vorarlberg_bank_ag"
            | "marchfelder_bank"
            | "oberbank_ag"
            | "raiffeisen_bankengruppe_osterreich"
            | "schoellerbank_ag"
            | "sparda_bank_wien"
            | "volksbank_gruppe"
            | "volkskreditbank_ag"
            | "vr_bank_braunau";
        };
        fpx?: {
          bank:
            | "affin_bank"
            | "agrobank"
            | "alliance_bank"
            | "ambank"
            | "bank_islam"
            | "bank_muamalat"
            | "bank_rakyat"
            | "bsn"
            | "cimb"
            | "deutsche_bank"
            | "hong_leong_bank"
            | "hsbc"
            | "kfh"
            | "maybank2e"
            | "maybank2u"
            | "ocbc"
            | "pb_enterprise"
            | "public_bank"
            | "rhb"
            | "standard_chartered"
            | "uob";
        };
        giropay?: object;
        grabpay?: object;
        ideal?: {
          bank?:
            | "abn_amro"
            | "asn_bank"
            | "bunq"
            | "handelsbanken"
            | "ing"
            | "knab"
            | "moneyou"
            | "rabobank"
            | "regiobank"
            | "revolut"
            | "sns_bank"
            | "triodos_bank"
            | "van_lanschot";
        };
        interac_present?: object;
        klarna?: { dob?: { day: number; month: number; year: number } };
        metadata?: Record<string, string>;
        oxxo?: object;
        p24?: {
          bank?:
            | "alior_bank"
            | "bank_millennium"
            | "bank_nowy_bfg_sa"
            | "bank_pekao_sa"
            | "banki_spbdzielcze"
            | "blik"
            | "bnp_paribas"
            | "boz"
            | "citi_handlowy"
            | "credit_agricole"
            | "envelobank"
            | "etransfer_pocztowy24"
            | "getin_bank"
            | "ideabank"
            | "ing"
            | "inteligo"
            | "mbank_mtransfer"
            | "nest_przelew"
            | "noble_pay"
            | "pbac_z_ipko"
            | "plus_bank"
            | "santander_przelew24"
            | "tmobile_usbugi_bankowe"
            | "toyota_bank"
            | "volkswagen_bank";
        };
        sepa_debit?: { iban: string };
        sofort?: { country: "AT" | "BE" | "DE" | "ES" | "IT" | "NL" };
        type:
          | "acss_debit"
          | "afterpay_clearpay"
          | "alipay"
          | "au_becs_debit"
          | "bacs_debit"
          | "bancontact"
          | "boleto"
          | "eps"
          | "fpx"
          | "giropay"
          | "grabpay"
          | "ideal"
          | "klarna"
          | "oxxo"
          | "p24"
          | "sepa_debit"
          | "sofort"
          | "wechat_pay";
        wechat_pay?: object;
      };
      payment_method_options?: {
        acss_debit?:
          | {
              mandate_options?: {
                custom_mandate_url?: string | "";
                interval_description?: string;
                payment_schedule?: "combined" | "interval" | "sporadic";
                transaction_type?: "business" | "personal";
              };
              verification_method?: "automatic" | "instant" | "microdeposits";
            }
          | ""
          | ({
              mandate_options?: {
                custom_mandate_url?: string | "";
                interval_description?: string;
                payment_schedule?: "combined" | "interval" | "sporadic";
                transaction_type?: "business" | "personal";
              };
              verification_method?: "automatic" | "instant" | "microdeposits";
            } & "");
        afterpay_clearpay?: { reference?: string } | "" | ({ reference?: string } & "");
        alipay?: object | "" | (object & "");
        au_becs_debit?: object | "" | (object & "");
        bacs_debit?: object | "" | (object & "");
        bancontact?:
          | { preferred_language?: "de" | "en" | "fr" | "nl" }
          | ""
          | ({ preferred_language?: "de" | "en" | "fr" | "nl" } & "");
        boleto?: { expires_after_days?: number } | "" | ({ expires_after_days?: number } & "");
        card?:
          | {
              cvc_token?: string;
              installments?: {
                enabled?: boolean;
                plan?:
                  | { count: number; interval: "month"; type: "fixed_count" }
                  | ""
                  | ({ count: number; interval: "month"; type: "fixed_count" } & "");
              };
              network?:
                | "amex"
                | "cartes_bancaires"
                | "diners"
                | "discover"
                | "interac"
                | "jcb"
                | "mastercard"
                | "unionpay"
                | "unknown"
                | "visa";
              request_three_d_secure?: "any" | "automatic";
              setup_future_usage?: "" | "none" | "off_session" | "on_session";
            }
          | ""
          | ({
              cvc_token?: string;
              installments?: {
                enabled?: boolean;
                plan?:
                  | { count: number; interval: "month"; type: "fixed_count" }
                  | ""
                  | ({ count: number; interval: "month"; type: "fixed_count" } & "");
              };
              network?:
                | "amex"
                | "cartes_bancaires"
                | "diners"
                | "discover"
                | "interac"
                | "jcb"
                | "mastercard"
                | "unionpay"
                | "unknown"
                | "visa";
              request_three_d_secure?: "any" | "automatic";
              setup_future_usage?: "" | "none" | "off_session" | "on_session";
            } & "");
        card_present?: object | "" | (object & "");
        eps?: object | "" | (object & "");
        fpx?: object | "" | (object & "");
        giropay?: object | "" | (object & "");
        grabpay?: object | "" | (object & "");
        ideal?: object | "" | (object & "");
        interac_present?: object | "" | (object & "");
        klarna?:
          | {
              preferred_locale?:
                | "da-DK"
                | "de-AT"
                | "de-DE"
                | "en-AT"
                | "en-BE"
                | "en-DE"
                | "en-DK"
                | "en-ES"
                | "en-FI"
                | "en-FR"
                | "en-GB"
                | "en-IE"
                | "en-IT"
                | "en-NL"
                | "en-NO"
                | "en-SE"
                | "en-US"
                | "es-ES"
                | "es-US"
                | "fi-FI"
                | "fr-BE"
                | "fr-FR"
                | "it-IT"
                | "nb-NO"
                | "nl-BE"
                | "nl-NL"
                | "sv-FI"
                | "sv-SE";
            }
          | ""
          | ({
              preferred_locale?:
                | "da-DK"
                | "de-AT"
                | "de-DE"
                | "en-AT"
                | "en-BE"
                | "en-DE"
                | "en-DK"
                | "en-ES"
                | "en-FI"
                | "en-FR"
                | "en-GB"
                | "en-IE"
                | "en-IT"
                | "en-NL"
                | "en-NO"
                | "en-SE"
                | "en-US"
                | "es-ES"
                | "es-US"
                | "fi-FI"
                | "fr-BE"
                | "fr-FR"
                | "it-IT"
                | "nb-NO"
                | "nl-BE"
                | "nl-NL"
                | "sv-FI"
                | "sv-SE";
            } & "");
        oxxo?: { expires_after_days?: number } | "" | ({ expires_after_days?: number } & "");
        p24?: { tos_shown_and_accepted?: boolean } | "" | ({ tos_shown_and_accepted?: boolean } & "");
        sepa_debit?: { mandate_options?: object } | "" | ({ mandate_options?: object } & "");
        sofort?:
          | { preferred_language?: "" | "de" | "en" | "es" | "fr" | "it" | "nl" | "pl" }
          | ""
          | ({ preferred_language?: "" | "de" | "en" | "es" | "fr" | "it" | "nl" | "pl" } & "");
        wechat_pay?:
          | { app_id?: string; client: "android" | "ios" | "web" }
          | ""
          | ({ app_id?: string; client: "android" | "ios" | "web" } & "");
      };
      payment_method_types?: string[];
      receipt_email?: string | "";
      return_url?: string;
      setup_future_usage?: "" | "off_session" | "on_session";
      shipping?:
        | {
            address: {
              city?: string;
              country?: string;
              line1?: string;
              line2?: string;
              postal_code?: string;
              state?: string;
            };
            carrier?: string;
            name: string;
            phone?: string;
            tracking_number?: string;
          }
        | ""
        | ({
            address: {
              city?: string;
              country?: string;
              line1?: string;
              line2?: string;
              postal_code?: string;
              state?: string;
            };
            carrier?: string;
            name: string;
            phone?: string;
            tracking_number?: string;
          } & "");
      use_stripe_sdk?: boolean;
    };
    export type RequestHeaders = {};
    export type ResponseBody = PaymentIntent;
  }
  /**
   * @description <p>Returns a list of your payment links.</p>
   * @name GetPaymentLinks
   * @request GET:/v1/payment_links
   * @secure
   * @response `200` `{ data: (PaymentLink)[], has_more: boolean, object: "list", url: string }` Successful response.
   * @response `default` `Error` Error response.
   */
  export namespace GetPaymentLinks {
    export type RequestParams = {};
    export type RequestQuery = {
      active?: boolean;
      ending_before?: string;
      expand?: string[];
      limit?: number;
      starting_after?: string;
    };
    export type RequestBody = CardMandatePaymentMethodDetails;
    export type RequestHeaders = {};
    export type ResponseBody = { data: PaymentLink[]; has_more: boolean; object: "list"; url: string };
  }
  /**
   * @description <p>Creates a payment link.</p>
   * @name PostPaymentLinks
   * @request POST:/v1/payment_links
   * @secure
   * @response `200` `PaymentLink` Successful response.
   * @response `default` `Error` Error response.
   */
  export namespace PostPaymentLinks {
    export type RequestParams = {};
    export type RequestQuery = {};
    export type RequestBody = {
      after_completion?: {
        hosted_confirmation?: { custom_message?: string };
        redirect?: { url: string };
        type: "hosted_confirmation" | "redirect";
      };
      allow_promotion_codes?: boolean;
      application_fee_amount?: number;
      application_fee_percent?: number;
      automatic_tax?: { enabled: boolean };
      billing_address_collection?: "auto" | "required";
      expand?: string[];
      line_items?: {
        adjustable_quantity?: { enabled: boolean; maximum?: number; minimum?: number };
        price: string;
        quantity: number;
      }[];
      metadata?: Record<string, string>;
      on_behalf_of?: string;
      payment_method_types?: "card"[];
      shipping_address_collection?: {
        allowed_countries: (
          | "AC"
          | "AD"
          | "AE"
          | "AF"
          | "AG"
          | "AI"
          | "AL"
          | "AM"
          | "AO"
          | "AQ"
          | "AR"
          | "AT"
          | "AU"
          | "AW"
          | "AX"
          | "AZ"
          | "BA"
          | "BB"
          | "BD"
          | "BE"
          | "BF"
          | "BG"
          | "BH"
          | "BI"
          | "BJ"
          | "BL"
          | "BM"
          | "BN"
          | "BO"
          | "BQ"
          | "BR"
          | "BS"
          | "BT"
          | "BV"
          | "BW"
          | "BY"
          | "BZ"
          | "CA"
          | "CD"
          | "CF"
          | "CG"
          | "CH"
          | "CI"
          | "CK"
          | "CL"
          | "CM"
          | "CN"
          | "CO"
          | "CR"
          | "CV"
          | "CW"
          | "CY"
          | "CZ"
          | "DE"
          | "DJ"
          | "DK"
          | "DM"
          | "DO"
          | "DZ"
          | "EC"
          | "EE"
          | "EG"
          | "EH"
          | "ER"
          | "ES"
          | "ET"
          | "FI"
          | "FJ"
          | "FK"
          | "FO"
          | "FR"
          | "GA"
          | "GB"
          | "GD"
          | "GE"
          | "GF"
          | "GG"
          | "GH"
          | "GI"
          | "GL"
          | "GM"
          | "GN"
          | "GP"
          | "GQ"
          | "GR"
          | "GS"
          | "GT"
          | "GU"
          | "GW"
          | "GY"
          | "HK"
          | "HN"
          | "HR"
          | "HT"
          | "HU"
          | "ID"
          | "IE"
          | "IL"
          | "IM"
          | "IN"
          | "IO"
          | "IQ"
          | "IS"
          | "IT"
          | "JE"
          | "JM"
          | "JO"
          | "JP"
          | "KE"
          | "KG"
          | "KH"
          | "KI"
          | "KM"
          | "KN"
          | "KR"
          | "KW"
          | "KY"
          | "KZ"
          | "LA"
          | "LB"
          | "LC"
          | "LI"
          | "LK"
          | "LR"
          | "LS"
          | "LT"
          | "LU"
          | "LV"
          | "LY"
          | "MA"
          | "MC"
          | "MD"
          | "ME"
          | "MF"
          | "MG"
          | "MK"
          | "ML"
          | "MM"
          | "MN"
          | "MO"
          | "MQ"
          | "MR"
          | "MS"
          | "MT"
          | "MU"
          | "MV"
          | "MW"
          | "MX"
          | "MY"
          | "MZ"
          | "NA"
          | "NC"
          | "NE"
          | "NG"
          | "NI"
          | "NL"
          | "NO"
          | "NP"
          | "NR"
          | "NU"
          | "NZ"
          | "OM"
          | "PA"
          | "PE"
          | "PF"
          | "PG"
          | "PH"
          | "PK"
          | "PL"
          | "PM"
          | "PN"
          | "PR"
          | "PS"
          | "PT"
          | "PY"
          | "QA"
          | "RE"
          | "RO"
          | "RS"
          | "RU"
          | "RW"
          | "SA"
          | "SB"
          | "SC"
          | "SE"
          | "SG"
          | "SH"
          | "SI"
          | "SJ"
          | "SK"
          | "SL"
          | "SM"
          | "SN"
          | "SO"
          | "SR"
          | "SS"
          | "ST"
          | "SV"
          | "SX"
          | "SZ"
          | "TA"
          | "TC"
          | "TD"
          | "TF"
          | "TG"
          | "TH"
          | "TJ"
          | "TK"
          | "TL"
          | "TM"
          | "TN"
          | "TO"
          | "TR"
          | "TT"
          | "TV"
          | "TW"
          | "TZ"
          | "UA"
          | "UG"
          | "US"
          | "UY"
          | "UZ"
          | "VA"
          | "VC"
          | "VE"
          | "VG"
          | "VN"
          | "VU"
          | "WF"
          | "WS"
          | "XK"
          | "YE"
          | "YT"
          | "ZA"
          | "ZM"
          | "ZW"
          | "ZZ"
        )[];
      };
      subscription_data?: { trial_period_days?: number };
      transfer_data?: { amount?: number; destination: string };
    };
    export type RequestHeaders = {};
    export type ResponseBody = PaymentLink;
  }
  /**
   * @description <p>Retrieve a payment link.</p>
   * @name GetPaymentLinksPaymentLink
   * @request GET:/v1/payment_links/{payment_link}
   * @secure
   * @response `200` `PaymentLink` Successful response.
   * @response `default` `Error` Error response.
   */
  export namespace GetPaymentLinksPaymentLink {
    export type RequestParams = { paymentLink: string };
    export type RequestQuery = { expand?: string[] };
    export type RequestBody = CardMandatePaymentMethodDetails;
    export type RequestHeaders = {};
    export type ResponseBody = PaymentLink;
  }
  /**
   * @description <p>Updates a payment link.</p>
   * @name PostPaymentLinksPaymentLink
   * @request POST:/v1/payment_links/{payment_link}
   * @secure
   * @response `200` `PaymentLink` Successful response.
   * @response `default` `Error` Error response.
   */
  export namespace PostPaymentLinksPaymentLink {
    export type RequestParams = { paymentLink: string };
    export type RequestQuery = {};
    export type RequestBody = {
      active?: boolean;
      after_completion?: {
        hosted_confirmation?: { custom_message?: string };
        redirect?: { url: string };
        type: "hosted_confirmation" | "redirect";
      };
      allow_promotion_codes?: boolean;
      automatic_tax?: { enabled: boolean };
      billing_address_collection?: "auto" | "required";
      expand?: string[];
      line_items?: {
        adjustable_quantity?: { enabled: boolean; maximum?: number; minimum?: number };
        id: string;
        quantity?: number;
      }[];
      metadata?: Record<string, string>;
      payment_method_types?: "card"[] | "" | ("card"[] & "");
      shipping_address_collection?:
        | {
            allowed_countries: (
              | "AC"
              | "AD"
              | "AE"
              | "AF"
              | "AG"
              | "AI"
              | "AL"
              | "AM"
              | "AO"
              | "AQ"
              | "AR"
              | "AT"
              | "AU"
              | "AW"
              | "AX"
              | "AZ"
              | "BA"
              | "BB"
              | "BD"
              | "BE"
              | "BF"
              | "BG"
              | "BH"
              | "BI"
              | "BJ"
              | "BL"
              | "BM"
              | "BN"
              | "BO"
              | "BQ"
              | "BR"
              | "BS"
              | "BT"
              | "BV"
              | "BW"
              | "BY"
              | "BZ"
              | "CA"
              | "CD"
              | "CF"
              | "CG"
              | "CH"
              | "CI"
              | "CK"
              | "CL"
              | "CM"
              | "CN"
              | "CO"
              | "CR"
              | "CV"
              | "CW"
              | "CY"
              | "CZ"
              | "DE"
              | "DJ"
              | "DK"
              | "DM"
              | "DO"
              | "DZ"
              | "EC"
              | "EE"
              | "EG"
              | "EH"
              | "ER"
              | "ES"
              | "ET"
              | "FI"
              | "FJ"
              | "FK"
              | "FO"
              | "FR"
              | "GA"
              | "GB"
              | "GD"
              | "GE"
              | "GF"
              | "GG"
              | "GH"
              | "GI"
              | "GL"
              | "GM"
              | "GN"
              | "GP"
              | "GQ"
              | "GR"
              | "GS"
              | "GT"
              | "GU"
              | "GW"
              | "GY"
              | "HK"
              | "HN"
              | "HR"
              | "HT"
              | "HU"
              | "ID"
              | "IE"
              | "IL"
              | "IM"
              | "IN"
              | "IO"
              | "IQ"
              | "IS"
              | "IT"
              | "JE"
              | "JM"
              | "JO"
              | "JP"
              | "KE"
              | "KG"
              | "KH"
              | "KI"
              | "KM"
              | "KN"
              | "KR"
              | "KW"
              | "KY"
              | "KZ"
              | "LA"
              | "LB"
              | "LC"
              | "LI"
              | "LK"
              | "LR"
              | "LS"
              | "LT"
              | "LU"
              | "LV"
              | "LY"
              | "MA"
              | "MC"
              | "MD"
              | "ME"
              | "MF"
              | "MG"
              | "MK"
              | "ML"
              | "MM"
              | "MN"
              | "MO"
              | "MQ"
              | "MR"
              | "MS"
              | "MT"
              | "MU"
              | "MV"
              | "MW"
              | "MX"
              | "MY"
              | "MZ"
              | "NA"
              | "NC"
              | "NE"
              | "NG"
              | "NI"
              | "NL"
              | "NO"
              | "NP"
              | "NR"
              | "NU"
              | "NZ"
              | "OM"
              | "PA"
              | "PE"
              | "PF"
              | "PG"
              | "PH"
              | "PK"
              | "PL"
              | "PM"
              | "PN"
              | "PR"
              | "PS"
              | "PT"
              | "PY"
              | "QA"
              | "RE"
              | "RO"
              | "RS"
              | "RU"
              | "RW"
              | "SA"
              | "SB"
              | "SC"
              | "SE"
              | "SG"
              | "SH"
              | "SI"
              | "SJ"
              | "SK"
              | "SL"
              | "SM"
              | "SN"
              | "SO"
              | "SR"
              | "SS"
              | "ST"
              | "SV"
              | "SX"
              | "SZ"
              | "TA"
              | "TC"
              | "TD"
              | "TF"
              | "TG"
              | "TH"
              | "TJ"
              | "TK"
              | "TL"
              | "TM"
              | "TN"
              | "TO"
              | "TR"
              | "TT"
              | "TV"
              | "TW"
              | "TZ"
              | "UA"
              | "UG"
              | "US"
              | "UY"
              | "UZ"
              | "VA"
              | "VC"
              | "VE"
              | "VG"
              | "VN"
              | "VU"
              | "WF"
              | "WS"
              | "XK"
              | "YE"
              | "YT"
              | "ZA"
              | "ZM"
              | "ZW"
              | "ZZ"
            )[];
          }
        | ""
        | ({
            allowed_countries: (
              | "AC"
              | "AD"
              | "AE"
              | "AF"
              | "AG"
              | "AI"
              | "AL"
              | "AM"
              | "AO"
              | "AQ"
              | "AR"
              | "AT"
              | "AU"
              | "AW"
              | "AX"
              | "AZ"
              | "BA"
              | "BB"
              | "BD"
              | "BE"
              | "BF"
              | "BG"
              | "BH"
              | "BI"
              | "BJ"
              | "BL"
              | "BM"
              | "BN"
              | "BO"
              | "BQ"
              | "BR"
              | "BS"
              | "BT"
              | "BV"
              | "BW"
              | "BY"
              | "BZ"
              | "CA"
              | "CD"
              | "CF"
              | "CG"
              | "CH"
              | "CI"
              | "CK"
              | "CL"
              | "CM"
              | "CN"
              | "CO"
              | "CR"
              | "CV"
              | "CW"
              | "CY"
              | "CZ"
              | "DE"
              | "DJ"
              | "DK"
              | "DM"
              | "DO"
              | "DZ"
              | "EC"
              | "EE"
              | "EG"
              | "EH"
              | "ER"
              | "ES"
              | "ET"
              | "FI"
              | "FJ"
              | "FK"
              | "FO"
              | "FR"
              | "GA"
              | "GB"
              | "GD"
              | "GE"
              | "GF"
              | "GG"
              | "GH"
              | "GI"
              | "GL"
              | "GM"
              | "GN"
              | "GP"
              | "GQ"
              | "GR"
              | "GS"
              | "GT"
              | "GU"
              | "GW"
              | "GY"
              | "HK"
              | "HN"
              | "HR"
              | "HT"
              | "HU"
              | "ID"
              | "IE"
              | "IL"
              | "IM"
              | "IN"
              | "IO"
              | "IQ"
              | "IS"
              | "IT"
              | "JE"
              | "JM"
              | "JO"
              | "JP"
              | "KE"
              | "KG"
              | "KH"
              | "KI"
              | "KM"
              | "KN"
              | "KR"
              | "KW"
              | "KY"
              | "KZ"
              | "LA"
              | "LB"
              | "LC"
              | "LI"
              | "LK"
              | "LR"
              | "LS"
              | "LT"
              | "LU"
              | "LV"
              | "LY"
              | "MA"
              | "MC"
              | "MD"
              | "ME"
              | "MF"
              | "MG"
              | "MK"
              | "ML"
              | "MM"
              | "MN"
              | "MO"
              | "MQ"
              | "MR"
              | "MS"
              | "MT"
              | "MU"
              | "MV"
              | "MW"
              | "MX"
              | "MY"
              | "MZ"
              | "NA"
              | "NC"
              | "NE"
              | "NG"
              | "NI"
              | "NL"
              | "NO"
              | "NP"
              | "NR"
              | "NU"
              | "NZ"
              | "OM"
              | "PA"
              | "PE"
              | "PF"
              | "PG"
              | "PH"
              | "PK"
              | "PL"
              | "PM"
              | "PN"
              | "PR"
              | "PS"
              | "PT"
              | "PY"
              | "QA"
              | "RE"
              | "RO"
              | "RS"
              | "RU"
              | "RW"
              | "SA"
              | "SB"
              | "SC"
              | "SE"
              | "SG"
              | "SH"
              | "SI"
              | "SJ"
              | "SK"
              | "SL"
              | "SM"
              | "SN"
              | "SO"
              | "SR"
              | "SS"
              | "ST"
              | "SV"
              | "SX"
              | "SZ"
              | "TA"
              | "TC"
              | "TD"
              | "TF"
              | "TG"
              | "TH"
              | "TJ"
              | "TK"
              | "TL"
              | "TM"
              | "TN"
              | "TO"
              | "TR"
              | "TT"
              | "TV"
              | "TW"
              | "TZ"
              | "UA"
              | "UG"
              | "US"
              | "UY"
              | "UZ"
              | "VA"
              | "VC"
              | "VE"
              | "VG"
              | "VN"
              | "VU"
              | "WF"
              | "WS"
              | "XK"
              | "YE"
              | "YT"
              | "ZA"
              | "ZM"
              | "ZW"
              | "ZZ"
            )[];
          } & "");
    };
    export type RequestHeaders = {};
    export type ResponseBody = PaymentLink;
  }
  /**
   * @description <p>When retrieving a payment link, there is an includable <strong>line_items</strong> property containing the first handful of those items. There is also a URL where you can retrieve the full (paginated) list of line items.</p>
   * @name GetPaymentLinksPaymentLinkLineItems
   * @request GET:/v1/payment_links/{payment_link}/line_items
   * @secure
   * @response `200` `{ data: (Item)[], has_more: boolean, object: "list", url: string }` Successful response.
   * @response `default` `Error` Error response.
   */
  export namespace GetPaymentLinksPaymentLinkLineItems {
    export type RequestParams = { paymentLink: string };
    export type RequestQuery = { ending_before?: string; expand?: string[]; limit?: number; starting_after?: string };
    export type RequestBody = CardMandatePaymentMethodDetails;
    export type RequestHeaders = {};
    export type ResponseBody = { data: Item[]; has_more: boolean; object: "list"; url: string };
  }
  /**
   * @description <p>Returns a list of PaymentMethods. For listing a customer’s payment methods, you should use <a href="/docs/api/payment_methods/customer_list">List a Customer’s PaymentMethods</a></p>
   * @name GetPaymentMethods
   * @request GET:/v1/payment_methods
   * @secure
   * @response `200` `{ data: (PaymentMethod)[], has_more: boolean, object: "list", url: string }` Successful response.
   * @response `default` `Error` Error response.
   */
  export namespace GetPaymentMethods {
    export type RequestParams = {};
    export type RequestQuery = {
      customer?: string;
      ending_before?: string;
      expand?: string[];
      limit?: number;
      starting_after?: string;
      type:
        | "acss_debit"
        | "afterpay_clearpay"
        | "alipay"
        | "au_becs_debit"
        | "bacs_debit"
        | "bancontact"
        | "boleto"
        | "card"
        | "eps"
        | "fpx"
        | "giropay"
        | "grabpay"
        | "ideal"
        | "klarna"
        | "oxxo"
        | "p24"
        | "sepa_debit"
        | "sofort"
        | "wechat_pay";
    };
    export type RequestBody = CardMandatePaymentMethodDetails;
    export type RequestHeaders = {};
    export type ResponseBody = { data: PaymentMethod[]; has_more: boolean; object: "list"; url: string };
  }
  /**
   * @description <p>Creates a PaymentMethod object. Read the <a href="/docs/stripe-js/reference#stripe-create-payment-method">Stripe.js reference</a> to learn how to create PaymentMethods via Stripe.js.</p> <p>Instead of creating a PaymentMethod directly, we recommend using the <a href="/docs/payments/accept-a-payment">PaymentIntents</a> API to accept a payment immediately or the <a href="/docs/payments/save-and-reuse">SetupIntent</a> API to collect payment method details ahead of a future payment.</p>
   * @name PostPaymentMethods
   * @request POST:/v1/payment_methods
   * @secure
   * @response `200` `PaymentMethod` Successful response.
   * @response `default` `Error` Error response.
   */
  export namespace PostPaymentMethods {
    export type RequestParams = {};
    export type RequestQuery = {};
    export type RequestBody = {
      acss_debit?: { account_number: string; institution_number: string; transit_number: string };
      afterpay_clearpay?: object;
      alipay?: object;
      au_becs_debit?: { account_number: string; bsb_number: string };
      bacs_debit?: { account_number?: string; sort_code?: string };
      bancontact?: object;
      billing_details?: {
        address?:
          | { city?: string; country?: string; line1?: string; line2?: string; postal_code?: string; state?: string }
          | ""
          | ({
              city?: string;
              country?: string;
              line1?: string;
              line2?: string;
              postal_code?: string;
              state?: string;
            } & "");
        email?: string | "";
        name?: string;
        phone?: string;
      };
      boleto?: { tax_id: string };
      card?:
        | { cvc?: string; exp_month: number; exp_year: number; number: string }
        | { token: string }
        | ({ cvc?: string; exp_month: number; exp_year: number; number: string } & { token: string });
      customer?: string;
      eps?: {
        bank?:
          | "arzte_und_apotheker_bank"
          | "austrian_anadi_bank_ag"
          | "bank_austria"
          | "bankhaus_carl_spangler"
          | "bankhaus_schelhammer_und_schattera_ag"
          | "bawag_psk_ag"
          | "bks_bank_ag"
          | "brull_kallmus_bank_ag"
          | "btv_vier_lander_bank"
          | "capital_bank_grawe_gruppe_ag"
          | "dolomitenbank"
          | "easybank_ag"
          | "erste_bank_und_sparkassen"
          | "hypo_alpeadriabank_international_ag"
          | "hypo_bank_burgenland_aktiengesellschaft"
          | "hypo_noe_lb_fur_niederosterreich_u_wien"
          | "hypo_oberosterreich_salzburg_steiermark"
          | "hypo_tirol_bank_ag"
          | "hypo_vorarlberg_bank_ag"
          | "marchfelder_bank"
          | "oberbank_ag"
          | "raiffeisen_bankengruppe_osterreich"
          | "schoellerbank_ag"
          | "sparda_bank_wien"
          | "volksbank_gruppe"
          | "volkskreditbank_ag"
          | "vr_bank_braunau";
      };
      expand?: string[];
      fpx?: {
        bank:
          | "affin_bank"
          | "agrobank"
          | "alliance_bank"
          | "ambank"
          | "bank_islam"
          | "bank_muamalat"
          | "bank_rakyat"
          | "bsn"
          | "cimb"
          | "deutsche_bank"
          | "hong_leong_bank"
          | "hsbc"
          | "kfh"
          | "maybank2e"
          | "maybank2u"
          | "ocbc"
          | "pb_enterprise"
          | "public_bank"
          | "rhb"
          | "standard_chartered"
          | "uob";
      };
      giropay?: object;
      grabpay?: object;
      ideal?: {
        bank?:
          | "abn_amro"
          | "asn_bank"
          | "bunq"
          | "handelsbanken"
          | "ing"
          | "knab"
          | "moneyou"
          | "rabobank"
          | "regiobank"
          | "revolut"
          | "sns_bank"
          | "triodos_bank"
          | "van_lanschot";
      };
      interac_present?: object;
      klarna?: { dob?: { day: number; month: number; year: number } };
      metadata?: Record<string, string>;
      oxxo?: object;
      p24?: {
        bank?:
          | "alior_bank"
          | "bank_millennium"
          | "bank_nowy_bfg_sa"
          | "bank_pekao_sa"
          | "banki_spbdzielcze"
          | "blik"
          | "bnp_paribas"
          | "boz"
          | "citi_handlowy"
          | "credit_agricole"
          | "envelobank"
          | "etransfer_pocztowy24"
          | "getin_bank"
          | "ideabank"
          | "ing"
          | "inteligo"
          | "mbank_mtransfer"
          | "nest_przelew"
          | "noble_pay"
          | "pbac_z_ipko"
          | "plus_bank"
          | "santander_przelew24"
          | "tmobile_usbugi_bankowe"
          | "toyota_bank"
          | "volkswagen_bank";
      };
      payment_method?: string;
      sepa_debit?: { iban: string };
      sofort?: { country: "AT" | "BE" | "DE" | "ES" | "IT" | "NL" };
      type?:
        | "acss_debit"
        | "afterpay_clearpay"
        | "alipay"
        | "au_becs_debit"
        | "bacs_debit"
        | "bancontact"
        | "boleto"
        | "card"
        | "eps"
        | "fpx"
        | "giropay"
        | "grabpay"
        | "ideal"
        | "klarna"
        | "oxxo"
        | "p24"
        | "sepa_debit"
        | "sofort"
        | "wechat_pay";
      wechat_pay?: object;
    };
    export type RequestHeaders = {};
    export type ResponseBody = PaymentMethod;
  }
  /**
   * @description <p>Retrieves a PaymentMethod object.</p>
   * @name GetPaymentMethodsPaymentMethod
   * @request GET:/v1/payment_methods/{payment_method}
   * @secure
   * @response `200` `PaymentMethod` Successful response.
   * @response `default` `Error` Error response.
   */
  export namespace GetPaymentMethodsPaymentMethod {
    export type RequestParams = { paymentMethod: string };
    export type RequestQuery = { expand?: string[] };
    export type RequestBody = CardMandatePaymentMethodDetails;
    export type RequestHeaders = {};
    export type ResponseBody = PaymentMethod;
  }
  /**
   * @description <p>Updates a PaymentMethod object. A PaymentMethod must be attached a customer to be updated.</p>
   * @name PostPaymentMethodsPaymentMethod
   * @request POST:/v1/payment_methods/{payment_method}
   * @secure
   * @response `200` `PaymentMethod` Successful response.
   * @response `default` `Error` Error response.
   */
  export namespace PostPaymentMethodsPaymentMethod {
    export type RequestParams = { paymentMethod: string };
    export type RequestQuery = {};
    export type RequestBody = {
      billing_details?: {
        address?:
          | { city?: string; country?: string; line1?: string; line2?: string; postal_code?: string; state?: string }
          | ""
          | ({
              city?: string;
              country?: string;
              line1?: string;
              line2?: string;
              postal_code?: string;
              state?: string;
            } & "");
        email?: string | "";
        name?: string;
        phone?: string;
      };
      card?: { exp_month?: number; exp_year?: number };
      expand?: string[];
      metadata?: Record<string, string> | "" | (Record<string, string> & "");
    };
    export type RequestHeaders = {};
    export type ResponseBody = PaymentMethod;
  }
  /**
   * @description <p>Attaches a PaymentMethod object to a Customer.</p> <p>To attach a new PaymentMethod to a customer for future payments, we recommend you use a <a href="/docs/api/setup_intents">SetupIntent</a> or a PaymentIntent with <a href="/docs/api/payment_intents/create#create_payment_intent-setup_future_usage">setup_future_usage</a>. These approaches will perform any necessary steps to ensure that the PaymentMethod can be used in a future payment. Using the <code>/v1/payment_methods/:id/attach</code> endpoint does not ensure that future payments can be made with the attached PaymentMethod. See <a href="/docs/payments/payment-intents#future-usage">Optimizing cards for future payments</a> for more information about setting up future payments.</p> <p>To use this PaymentMethod as the default for invoice or subscription payments, set <a href="/docs/api/customers/update#update_customer-invoice_settings-default_payment_method"><code>invoice_settings.default_payment_method</code></a>, on the Customer to the PaymentMethod’s ID.</p>
   * @name PostPaymentMethodsPaymentMethodAttach
   * @request POST:/v1/payment_methods/{payment_method}/attach
   * @secure
   * @response `200` `PaymentMethod` Successful response.
   * @response `default` `Error` Error response.
   */
  export namespace PostPaymentMethodsPaymentMethodAttach {
    export type RequestParams = { paymentMethod: string };
    export type RequestQuery = {};
    export type RequestBody = { customer: string; expand?: string[] };
    export type RequestHeaders = {};
    export type ResponseBody = PaymentMethod;
  }
  /**
   * @description <p>Detaches a PaymentMethod object from a Customer.</p>
   * @name PostPaymentMethodsPaymentMethodDetach
   * @request POST:/v1/payment_methods/{payment_method}/detach
   * @secure
   * @response `200` `PaymentMethod` Successful response.
   * @response `default` `Error` Error response.
   */
  export namespace PostPaymentMethodsPaymentMethodDetach {
    export type RequestParams = { paymentMethod: string };
    export type RequestQuery = {};
    export type RequestBody = { expand?: string[] };
    export type RequestHeaders = {};
    export type ResponseBody = PaymentMethod;
  }
  /**
   * @description <p>Returns a list of existing payouts sent to third-party bank accounts or that Stripe has sent you. The payouts are returned in sorted order, with the most recently created payouts appearing first.</p>
   * @name GetPayouts
   * @request GET:/v1/payouts
   * @secure
   * @response `200` `{ data: (Payout)[], has_more: boolean, object: "list", url: string }` Successful response.
   * @response `default` `Error` Error response.
   */
  export namespace GetPayouts {
    export type RequestParams = {};
    export type RequestQuery = {
      arrival_date?: { gt?: number; gte?: number; lt?: number; lte?: number } | number;
      created?: { gt?: number; gte?: number; lt?: number; lte?: number } | number;
      destination?: string;
      ending_before?: string;
      expand?: string[];
      limit?: number;
      starting_after?: string;
      status?: string;
    };
    export type RequestBody = CardMandatePaymentMethodDetails;
    export type RequestHeaders = {};
    export type ResponseBody = { data: Payout[]; has_more: boolean; object: "list"; url: string };
  }
  /**
   * @description <p>To send funds to your own bank account, you create a new payout object. Your <a href="#balance">Stripe balance</a> must be able to cover the payout amount, or you’ll receive an “Insufficient Funds” error.</p> <p>If your API key is in test mode, money won’t actually be sent, though everything else will occur as if in live mode.</p> <p>If you are creating a manual payout on a Stripe account that uses multiple payment source types, you’ll need to specify the source type balance that the payout should draw from. The <a href="#balance_object">balance object</a> details available and pending amounts by source type.</p>
   * @name PostPayouts
   * @request POST:/v1/payouts
   * @secure
   * @response `200` `Payout` Successful response.
   * @response `default` `Error` Error response.
   */
  export namespace PostPayouts {
    export type RequestParams = {};
    export type RequestQuery = {};
    export type RequestBody = {
      amount: number;
      currency: string;
      description?: string;
      destination?: string;
      expand?: string[];
      metadata?: Record<string, string>;
      method?: "instant" | "standard";
      source_type?: "bank_account" | "card" | "fpx";
      statement_descriptor?: string;
    };
    export type RequestHeaders = {};
    export type ResponseBody = Payout;
  }
  /**
   * @description <p>Retrieves the details of an existing payout. Supply the unique payout ID from either a payout creation request or the payout list, and Stripe will return the corresponding payout information.</p>
   * @name GetPayoutsPayout
   * @request GET:/v1/payouts/{payout}
   * @secure
   * @response `200` `Payout` Successful response.
   * @response `default` `Error` Error response.
   */
  export namespace GetPayoutsPayout {
    export type RequestParams = { payout: string };
    export type RequestQuery = { expand?: string[] };
    export type RequestBody = CardMandatePaymentMethodDetails;
    export type RequestHeaders = {};
    export type ResponseBody = Payout;
  }
  /**
   * @description <p>Updates the specified payout by setting the values of the parameters passed. Any parameters not provided will be left unchanged. This request accepts only the metadata as arguments.</p>
   * @name PostPayoutsPayout
   * @request POST:/v1/payouts/{payout}
   * @secure
   * @response `200` `Payout` Successful response.
   * @response `default` `Error` Error response.
   */
  export namespace PostPayoutsPayout {
    export type RequestParams = { payout: string };
    export type RequestQuery = {};
    export type RequestBody = {
      expand?: string[];
      metadata?: Record<string, string> | "" | (Record<string, string> & "");
    };
    export type RequestHeaders = {};
    export type ResponseBody = Payout;
  }
  /**
   * @description <p>A previously created payout can be canceled if it has not yet been paid out. Funds will be refunded to your available balance. You may not cancel automatic Stripe payouts.</p>
   * @name PostPayoutsPayoutCancel
   * @request POST:/v1/payouts/{payout}/cancel
   * @secure
   * @response `200` `Payout` Successful response.
   * @response `default` `Error` Error response.
   */
  export namespace PostPayoutsPayoutCancel {
    export type RequestParams = { payout: string };
    export type RequestQuery = {};
    export type RequestBody = { expand?: string[] };
    export type RequestHeaders = {};
    export type ResponseBody = Payout;
  }
  /**
   * @description <p>Reverses a payout by debiting the destination bank account. Only payouts for connected accounts to US bank accounts may be reversed at this time. If the payout is in the <code>pending</code> status, <code>/v1/payouts/:id/cancel</code> should be used instead.</p> <p>By requesting a reversal via <code>/v1/payouts/:id/reverse</code>, you confirm that the authorized signatory of the selected bank account has authorized the debit on the bank account and that no other authorization is required.</p>
   * @name PostPayoutsPayoutReverse
   * @request POST:/v1/payouts/{payout}/reverse
   * @secure
   * @response `200` `Payout` Successful response.
   * @response `default` `Error` Error response.
   */
  export namespace PostPayoutsPayoutReverse {
    export type RequestParams = { payout: string };
    export type RequestQuery = {};
    export type RequestBody = { expand?: string[]; metadata?: Record<string, string> };
    export type RequestHeaders = {};
    export type ResponseBody = Payout;
  }
  /**
   * @description <p>Returns a list of your plans.</p>
   * @name GetPlans
   * @request GET:/v1/plans
   * @secure
   * @response `200` `{ data: (Plan)[], has_more: boolean, object: "list", url: string }` Successful response.
   * @response `default` `Error` Error response.
   */
  export namespace GetPlans {
    export type RequestParams = {};
    export type RequestQuery = {
      active?: boolean;
      created?: { gt?: number; gte?: number; lt?: number; lte?: number } | number;
      ending_before?: string;
      expand?: string[];
      limit?: number;
      product?: string;
      starting_after?: string;
    };
    export type RequestBody = CardMandatePaymentMethodDetails;
    export type RequestHeaders = {};
    export type ResponseBody = { data: Plan[]; has_more: boolean; object: "list"; url: string };
  }
  /**
   * @description <p>You can now model subscriptions more flexibly using the <a href="#prices">Prices API</a>. It replaces the Plans API and is backwards compatible to simplify your migration.</p>
   * @name PostPlans
   * @request POST:/v1/plans
   * @secure
   * @response `200` `Plan` Successful response.
   * @response `default` `Error` Error response.
   */
  export namespace PostPlans {
    export type RequestParams = {};
    export type RequestQuery = {};
    export type RequestBody = {
      active?: boolean;
      aggregate_usage?: "last_during_period" | "last_ever" | "max" | "sum";
      amount?: number;
      amount_decimal?: string;
      billing_scheme?: "per_unit" | "tiered";
      currency: string;
      expand?: string[];
      id?: string;
      interval: "day" | "month" | "week" | "year";
      interval_count?: number;
      metadata?: Record<string, string> | "" | (Record<string, string> & "");
      nickname?: string;
      product?:
        | {
            active?: boolean;
            id?: string;
            metadata?: Record<string, string>;
            name: string;
            statement_descriptor?: string;
            tax_code?: string;
            unit_label?: string;
          }
        | string;
      tiers?: {
        flat_amount?: number;
        flat_amount_decimal?: string;
        unit_amount?: number;
        unit_amount_decimal?: string;
        up_to: "inf" | number;
      }[];
      tiers_mode?: "graduated" | "volume";
      transform_usage?: { divide_by: number; round: "down" | "up" };
      trial_period_days?: number;
      usage_type?: "licensed" | "metered";
    };
    export type RequestHeaders = {};
    export type ResponseBody = Plan;
  }
  /**
   * @description <p>Deleting plans means new subscribers can’t be added. Existing subscribers aren’t affected.</p>
   * @name DeletePlansPlan
   * @request DELETE:/v1/plans/{plan}
   * @secure
   * @response `200` `DeletedPlan` Successful response.
   * @response `default` `Error` Error response.
   */
  export namespace DeletePlansPlan {
    export type RequestParams = { plan: string };
    export type RequestQuery = {};
    export type RequestBody = CardMandatePaymentMethodDetails;
    export type RequestHeaders = {};
    export type ResponseBody = DeletedPlan;
  }
  /**
   * @description <p>Retrieves the plan with the given ID.</p>
   * @name GetPlansPlan
   * @request GET:/v1/plans/{plan}
   * @secure
   * @response `200` `Plan` Successful response.
   * @response `default` `Error` Error response.
   */
  export namespace GetPlansPlan {
    export type RequestParams = { plan: string };
    export type RequestQuery = { expand?: string[] };
    export type RequestBody = CardMandatePaymentMethodDetails;
    export type RequestHeaders = {};
    export type ResponseBody = Plan;
  }
  /**
   * @description <p>Updates the specified plan by setting the values of the parameters passed. Any parameters not provided are left unchanged. By design, you cannot change a plan’s ID, amount, currency, or billing cycle.</p>
   * @name PostPlansPlan
   * @request POST:/v1/plans/{plan}
   * @secure
   * @response `200` `Plan` Successful response.
   * @response `default` `Error` Error response.
   */
  export namespace PostPlansPlan {
    export type RequestParams = { plan: string };
    export type RequestQuery = {};
    export type RequestBody = {
      active?: boolean;
      expand?: string[];
      metadata?: Record<string, string> | "" | (Record<string, string> & "");
      nickname?: string;
      product?: string;
      trial_period_days?: number;
    };
    export type RequestHeaders = {};
    export type ResponseBody = Plan;
  }
  /**
   * @description <p>Returns a list of your prices.</p>
   * @name GetPrices
   * @request GET:/v1/prices
   * @secure
   * @response `200` `{ data: (Price)[], has_more: boolean, object: "list", url: string }` Successful response.
   * @response `default` `Error` Error response.
   */
  export namespace GetPrices {
    export type RequestParams = {};
    export type RequestQuery = {
      active?: boolean;
      created?: { gt?: number; gte?: number; lt?: number; lte?: number } | number;
      currency?: string;
      ending_before?: string;
      expand?: string[];
      limit?: number;
      lookup_keys?: string[];
      product?: string;
      recurring?: { interval?: "day" | "month" | "week" | "year"; usage_type?: "licensed" | "metered" };
      starting_after?: string;
      type?: "one_time" | "recurring";
    };
    export type RequestBody = CardMandatePaymentMethodDetails;
    export type RequestHeaders = {};
    export type ResponseBody = { data: Price[]; has_more: boolean; object: "list"; url: string };
  }
  /**
   * @description <p>Creates a new price for an existing product. The price can be recurring or one-time.</p>
   * @name PostPrices
   * @request POST:/v1/prices
   * @secure
   * @response `200` `Price` Successful response.
   * @response `default` `Error` Error response.
   */
  export namespace PostPrices {
    export type RequestParams = {};
    export type RequestQuery = {};
    export type RequestBody = {
      active?: boolean;
      billing_scheme?: "per_unit" | "tiered";
      currency: string;
      expand?: string[];
      lookup_key?: string;
      metadata?: Record<string, string>;
      nickname?: string;
      product?: string;
      product_data?: {
        active?: boolean;
        id?: string;
        metadata?: Record<string, string>;
        name: string;
        statement_descriptor?: string;
        tax_code?: string;
        unit_label?: string;
      };
      recurring?: {
        aggregate_usage?: "last_during_period" | "last_ever" | "max" | "sum";
        interval: "day" | "month" | "week" | "year";
        interval_count?: number;
        usage_type?: "licensed" | "metered";
      };
      tax_behavior?: "exclusive" | "inclusive" | "unspecified";
      tiers?: {
        flat_amount?: number;
        flat_amount_decimal?: string;
        unit_amount?: number;
        unit_amount_decimal?: string;
        up_to: "inf" | number;
      }[];
      tiers_mode?: "graduated" | "volume";
      transfer_lookup_key?: boolean;
      transform_quantity?: { divide_by: number; round: "down" | "up" };
      unit_amount?: number;
      unit_amount_decimal?: string;
    };
    export type RequestHeaders = {};
    export type ResponseBody = Price;
  }
  /**
   * @description <p>Retrieves the price with the given ID.</p>
   * @name GetPricesPrice
   * @request GET:/v1/prices/{price}
   * @secure
   * @response `200` `Price` Successful response.
   * @response `default` `Error` Error response.
   */
  export namespace GetPricesPrice {
    export type RequestParams = { price: string };
    export type RequestQuery = { expand?: string[] };
    export type RequestBody = CardMandatePaymentMethodDetails;
    export type RequestHeaders = {};
    export type ResponseBody = Price;
  }
  /**
   * @description <p>Updates the specified price by setting the values of the parameters passed. Any parameters not provided are left unchanged.</p>
   * @name PostPricesPrice
   * @request POST:/v1/prices/{price}
   * @secure
   * @response `200` `Price` Successful response.
   * @response `default` `Error` Error response.
   */
  export namespace PostPricesPrice {
    export type RequestParams = { price: string };
    export type RequestQuery = {};
    export type RequestBody = {
      active?: boolean;
      expand?: string[];
      lookup_key?: string;
      metadata?: Record<string, string> | "" | (Record<string, string> & "");
      nickname?: string;
      tax_behavior?: "exclusive" | "inclusive" | "unspecified";
      transfer_lookup_key?: boolean;
    };
    export type RequestHeaders = {};
    export type ResponseBody = Price;
  }
  /**
   * @description <p>Returns a list of your products. The products are returned sorted by creation date, with the most recently created products appearing first.</p>
   * @name GetProducts
   * @request GET:/v1/products
   * @secure
   * @response `200` `{ data: (Product)[], has_more: boolean, object: "list", url: string }` Successful response.
   * @response `default` `Error` Error response.
   */
  export namespace GetProducts {
    export type RequestParams = {};
    export type RequestQuery = {
      active?: boolean;
      created?: { gt?: number; gte?: number; lt?: number; lte?: number } | number;
      ending_before?: string;
      expand?: string[];
      ids?: string[];
      limit?: number;
      shippable?: boolean;
      starting_after?: string;
      url?: string;
    };
    export type RequestBody = CardMandatePaymentMethodDetails;
    export type RequestHeaders = {};
    export type ResponseBody = { data: Product[]; has_more: boolean; object: "list"; url: string };
  }
  /**
   * @description <p>Creates a new product object.</p>
   * @name PostProducts
   * @request POST:/v1/products
   * @secure
   * @response `200` `Product` Successful response.
   * @response `default` `Error` Error response.
   */
  export namespace PostProducts {
    export type RequestParams = {};
    export type RequestQuery = {};
    export type RequestBody = {
      active?: boolean;
      description?: string;
      expand?: string[];
      id?: string;
      images?: string[];
      metadata?: Record<string, string>;
      name: string;
      package_dimensions?: { height: number; length: number; weight: number; width: number };
      shippable?: boolean;
      statement_descriptor?: string;
      tax_code?: string;
      unit_label?: string;
      url?: string;
    };
    export type RequestHeaders = {};
    export type ResponseBody = Product;
  }
  /**
   * @description <p>Delete a product. Deleting a product is only possible if it has no prices associated with it. Additionally, deleting a product with <code>type=good</code> is only possible if it has no SKUs associated with it.</p>
   * @name DeleteProductsId
   * @request DELETE:/v1/products/{id}
   * @secure
   * @response `200` `DeletedProduct` Successful response.
   * @response `default` `Error` Error response.
   */
  export namespace DeleteProductsId {
    export type RequestParams = { id: string };
    export type RequestQuery = {};
    export type RequestBody = CardMandatePaymentMethodDetails;
    export type RequestHeaders = {};
    export type ResponseBody = DeletedProduct;
  }
  /**
   * @description <p>Retrieves the details of an existing product. Supply the unique product ID from either a product creation request or the product list, and Stripe will return the corresponding product information.</p>
   * @name GetProductsId
   * @request GET:/v1/products/{id}
   * @secure
   * @response `200` `Product` Successful response.
   * @response `default` `Error` Error response.
   */
  export namespace GetProductsId {
    export type RequestParams = { id: string };
    export type RequestQuery = { expand?: string[] };
    export type RequestBody = CardMandatePaymentMethodDetails;
    export type RequestHeaders = {};
    export type ResponseBody = Product;
  }
  /**
   * @description <p>Updates the specific product by setting the values of the parameters passed. Any parameters not provided will be left unchanged.</p>
   * @name PostProductsId
   * @request POST:/v1/products/{id}
   * @secure
   * @response `200` `Product` Successful response.
   * @response `default` `Error` Error response.
   */
  export namespace PostProductsId {
    export type RequestParams = { id: string };
    export type RequestQuery = {};
    export type RequestBody = {
      active?: boolean;
      description?: string;
      expand?: string[];
      images?: string[] | "" | (string[] & "");
      metadata?: Record<string, string> | "" | (Record<string, string> & "");
      name?: string;
      package_dimensions?:
        | { height: number; length: number; weight: number; width: number }
        | ""
        | ({ height: number; length: number; weight: number; width: number } & "");
      shippable?: boolean;
      statement_descriptor?: string;
      tax_code?: string | "";
      unit_label?: string;
      url?: string;
    };
    export type RequestHeaders = {};
    export type ResponseBody = Product;
  }
  /**
   * @description <p>Returns a list of your promotion codes.</p>
   * @name GetPromotionCodes
   * @request GET:/v1/promotion_codes
   * @secure
   * @response `200` `{ data: (PromotionCode)[], has_more: boolean, object: "list", url: string }` Successful response.
   * @response `default` `Error` Error response.
   */
  export namespace GetPromotionCodes {
    export type RequestParams = {};
    export type RequestQuery = {
      active?: boolean;
      code?: string;
      coupon?: string;
      created?: { gt?: number; gte?: number; lt?: number; lte?: number } | number;
      customer?: string;
      ending_before?: string;
      expand?: string[];
      limit?: number;
      starting_after?: string;
    };
    export type RequestBody = CardMandatePaymentMethodDetails;
    export type RequestHeaders = {};
    export type ResponseBody = { data: PromotionCode[]; has_more: boolean; object: "list"; url: string };
  }
  /**
   * @description <p>A promotion code points to a coupon. You can optionally restrict the code to a specific customer, redemption limit, and expiration date.</p>
   * @name PostPromotionCodes
   * @request POST:/v1/promotion_codes
   * @secure
   * @response `200` `PromotionCode` Successful response.
   * @response `default` `Error` Error response.
   */
  export namespace PostPromotionCodes {
    export type RequestParams = {};
    export type RequestQuery = {};
    export type RequestBody = {
      active?: boolean;
      code?: string;
      coupon: string;
      customer?: string;
      expand?: string[];
      expires_at?: number;
      max_redemptions?: number;
      metadata?: Record<string, string>;
      restrictions?: { first_time_transaction?: boolean; minimum_amount?: number; minimum_amount_currency?: string };
    };
    export type RequestHeaders = {};
    export type ResponseBody = PromotionCode;
  }
  /**
   * @description <p>Retrieves the promotion code with the given ID. In order to retrieve a promotion code by the customer-facing <code>code</code> use <a href="/docs/api/promotion_codes/list">list</a> with the desired <code>code</code>.</p>
   * @name GetPromotionCodesPromotionCode
   * @request GET:/v1/promotion_codes/{promotion_code}
   * @secure
   * @response `200` `PromotionCode` Successful response.
   * @response `default` `Error` Error response.
   */
  export namespace GetPromotionCodesPromotionCode {
    export type RequestParams = { promotionCode: string };
    export type RequestQuery = { expand?: string[] };
    export type RequestBody = CardMandatePaymentMethodDetails;
    export type RequestHeaders = {};
    export type ResponseBody = PromotionCode;
  }
  /**
   * @description <p>Updates the specified promotion code by setting the values of the parameters passed. Most fields are, by design, not editable.</p>
   * @name PostPromotionCodesPromotionCode
   * @request POST:/v1/promotion_codes/{promotion_code}
   * @secure
   * @response `200` `PromotionCode` Successful response.
   * @response `default` `Error` Error response.
   */
  export namespace PostPromotionCodesPromotionCode {
    export type RequestParams = { promotionCode: string };
    export type RequestQuery = {};
    export type RequestBody = {
      active?: boolean;
      expand?: string[];
      metadata?: Record<string, string> | "" | (Record<string, string> & "");
    };
    export type RequestHeaders = {};
    export type ResponseBody = PromotionCode;
  }
  /**
   * @description <p>Returns a list of your quotes.</p>
   * @name GetQuotes
   * @request GET:/v1/quotes
   * @secure
   * @response `200` `{ data: (Quote)[], has_more: boolean, object: "list", url: string }` Successful response.
   * @response `default` `Error` Error response.
   */
  export namespace GetQuotes {
    export type RequestParams = {};
    export type RequestQuery = {
      customer?: string;
      ending_before?: string;
      expand?: string[];
      limit?: number;
      starting_after?: string;
      status?: "accepted" | "canceled" | "draft" | "open";
    };
    export type RequestBody = CardMandatePaymentMethodDetails;
    export type RequestHeaders = {};
    export type ResponseBody = { data: Quote[]; has_more: boolean; object: "list"; url: string };
  }
  /**
   * @description <p>A quote models prices and services for a customer. Default options for <code>header</code>, <code>description</code>, <code>footer</code>, and <code>expires_at</code> can be set in the dashboard via the <a href="https://dashboard.stripe.com/settings/billing/quote">quote template</a>.</p>
   * @name PostQuotes
   * @request POST:/v1/quotes
   * @secure
   * @response `200` `Quote` Successful response.
   * @response `default` `Error` Error response.
   */
  export namespace PostQuotes {
    export type RequestParams = {};
    export type RequestQuery = {};
    export type RequestBody = {
      application_fee_amount?: number | "";
      application_fee_percent?: number | "";
      automatic_tax?: { enabled: boolean };
      collection_method?: "charge_automatically" | "send_invoice";
      customer?: string;
      default_tax_rates?: string[] | "" | (string[] & "");
      description?: string;
      discounts?: { coupon?: string; discount?: string }[] | "" | ({ coupon?: string; discount?: string }[] & "");
      expand?: string[];
      expires_at?: number;
      footer?: string;
      from_quote?: { is_revision?: boolean; quote: string };
      header?: string;
      invoice_settings?: { days_until_due?: number };
      line_items?: {
        price?: string;
        price_data?: {
          currency: string;
          product: string;
          recurring?: { interval: "day" | "month" | "week" | "year"; interval_count?: number };
          tax_behavior?: "exclusive" | "inclusive" | "unspecified";
          unit_amount?: number;
          unit_amount_decimal?: string;
        };
        quantity?: number;
        tax_rates?: string[] | "" | (string[] & "");
      }[];
      metadata?: Record<string, string>;
      on_behalf_of?: string | "";
      subscription_data?: {
        effective_date?: "current_period_end" | number | "" | ("current_period_end" & "");
        trial_period_days?: number | "";
      };
      transfer_data?:
        | { amount?: number; amount_percent?: number; destination: string }
        | ""
        | ({ amount?: number; amount_percent?: number; destination: string } & "");
    };
    export type RequestHeaders = {};
    export type ResponseBody = Quote;
  }
  /**
   * @description <p>Retrieves the quote with the given ID.</p>
   * @name GetQuotesQuote
   * @request GET:/v1/quotes/{quote}
   * @secure
   * @response `200` `Quote` Successful response.
   * @response `default` `Error` Error response.
   */
  export namespace GetQuotesQuote {
    export type RequestParams = { quote: string };
    export type RequestQuery = { expand?: string[] };
    export type RequestBody = CardMandatePaymentMethodDetails;
    export type RequestHeaders = {};
    export type ResponseBody = Quote;
  }
  /**
   * @description <p>A quote models prices and services for a customer.</p>
   * @name PostQuotesQuote
   * @request POST:/v1/quotes/{quote}
   * @secure
   * @response `200` `Quote` Successful response.
   * @response `default` `Error` Error response.
   */
  export namespace PostQuotesQuote {
    export type RequestParams = { quote: string };
    export type RequestQuery = {};
    export type RequestBody = {
      application_fee_amount?: number | "";
      application_fee_percent?: number | "";
      automatic_tax?: { enabled: boolean };
      collection_method?: "charge_automatically" | "send_invoice";
      customer?: string;
      default_tax_rates?: string[] | "" | (string[] & "");
      description?: string;
      discounts?: { coupon?: string; discount?: string }[] | "" | ({ coupon?: string; discount?: string }[] & "");
      expand?: string[];
      expires_at?: number;
      footer?: string;
      header?: string;
      invoice_settings?: { days_until_due?: number };
      line_items?: {
        id?: string;
        price?: string;
        price_data?: {
          currency: string;
          product: string;
          recurring?: { interval: "day" | "month" | "week" | "year"; interval_count?: number };
          tax_behavior?: "exclusive" | "inclusive" | "unspecified";
          unit_amount?: number;
          unit_amount_decimal?: string;
        };
        quantity?: number;
        tax_rates?: string[] | "" | (string[] & "");
      }[];
      metadata?: Record<string, string>;
      on_behalf_of?: string | "";
      subscription_data?: {
        effective_date?: "current_period_end" | number | "" | ("current_period_end" & "");
        trial_period_days?: number | "";
      };
      transfer_data?:
        | { amount?: number; amount_percent?: number; destination: string }
        | ""
        | ({ amount?: number; amount_percent?: number; destination: string } & "");
    };
    export type RequestHeaders = {};
    export type ResponseBody = Quote;
  }
  /**
   * @description <p>Accepts the specified quote.</p>
   * @name PostQuotesQuoteAccept
   * @request POST:/v1/quotes/{quote}/accept
   * @secure
   * @response `200` `Quote` Successful response.
   * @response `default` `Error` Error response.
   */
  export namespace PostQuotesQuoteAccept {
    export type RequestParams = { quote: string };
    export type RequestQuery = {};
    export type RequestBody = { expand?: string[] };
    export type RequestHeaders = {};
    export type ResponseBody = Quote;
  }
  /**
   * @description <p>Cancels the quote.</p>
   * @name PostQuotesQuoteCancel
   * @request POST:/v1/quotes/{quote}/cancel
   * @secure
   * @response `200` `Quote` Successful response.
   * @response `default` `Error` Error response.
   */
  export namespace PostQuotesQuoteCancel {
    export type RequestParams = { quote: string };
    export type RequestQuery = {};
    export type RequestBody = { expand?: string[] };
    export type RequestHeaders = {};
    export type ResponseBody = Quote;
  }
  /**
   * @description <p>When retrieving a quote, there is an includable <a href="https://stripe.com/docs/api/quotes/object#quote_object-computed-upfront-line_items"><strong>computed.upfront.line_items</strong></a> property containing the first handful of those items. There is also a URL where you can retrieve the full (paginated) list of upfront line items.</p>
   * @name GetQuotesQuoteComputedUpfrontLineItems
   * @request GET:/v1/quotes/{quote}/computed_upfront_line_items
   * @secure
   * @response `200` `{ data: (Item)[], has_more: boolean, object: "list", url: string }` Successful response.
   * @response `default` `Error` Error response.
   */
  export namespace GetQuotesQuoteComputedUpfrontLineItems {
    export type RequestParams = { quote: string };
    export type RequestQuery = { ending_before?: string; expand?: string[]; limit?: number; starting_after?: string };
    export type RequestBody = CardMandatePaymentMethodDetails;
    export type RequestHeaders = {};
    export type ResponseBody = { data: Item[]; has_more: boolean; object: "list"; url: string };
  }
  /**
   * @description <p>Finalizes the quote.</p>
   * @name PostQuotesQuoteFinalize
   * @request POST:/v1/quotes/{quote}/finalize
   * @secure
   * @response `200` `Quote` Successful response.
   * @response `default` `Error` Error response.
   */
  export namespace PostQuotesQuoteFinalize {
    export type RequestParams = { quote: string };
    export type RequestQuery = {};
    export type RequestBody = { expand?: string[]; expires_at?: number };
    export type RequestHeaders = {};
    export type ResponseBody = Quote;
  }
  /**
   * @description <p>When retrieving a quote, there is an includable <strong>line_items</strong> property containing the first handful of those items. There is also a URL where you can retrieve the full (paginated) list of line items.</p>
   * @name GetQuotesQuoteLineItems
   * @request GET:/v1/quotes/{quote}/line_items
   * @secure
   * @response `200` `{ data: (Item)[], has_more: boolean, object: "list", url: string }` Successful response.
   * @response `default` `Error` Error response.
   */
  export namespace GetQuotesQuoteLineItems {
    export type RequestParams = { quote: string };
    export type RequestQuery = { ending_before?: string; expand?: string[]; limit?: number; starting_after?: string };
    export type RequestBody = CardMandatePaymentMethodDetails;
    export type RequestHeaders = {};
    export type ResponseBody = { data: Item[]; has_more: boolean; object: "list"; url: string };
  }
  /**
   * @description <p>Download the PDF for a finalized quote</p>
   * @name GetQuotesQuotePdf
   * @request GET:/v1/quotes/{quote}/pdf
   * @secure
   * @response `200` `File` Successful response.
   * @response `default` `Error` Error response.
   */
  export namespace GetQuotesQuotePdf {
    export type RequestParams = { quote: string };
    export type RequestQuery = { expand?: string[] };
    export type RequestBody = CardMandatePaymentMethodDetails;
    export type RequestHeaders = {};
    export type ResponseBody = File;
  }
  /**
   * @description <p>Returns a list of early fraud warnings.</p>
   * @name GetRadarEarlyFraudWarnings
   * @request GET:/v1/radar/early_fraud_warnings
   * @secure
   * @response `200` `{ data: (RadarEarlyFraudWarning)[], has_more: boolean, object: "list", url: string }` Successful response.
   * @response `default` `Error` Error response.
   */
  export namespace GetRadarEarlyFraudWarnings {
    export type RequestParams = {};
    export type RequestQuery = {
      charge?: string;
      ending_before?: string;
      expand?: string[];
      limit?: number;
      payment_intent?: string;
      starting_after?: string;
    };
    export type RequestBody = CardMandatePaymentMethodDetails;
    export type RequestHeaders = {};
    export type ResponseBody = { data: RadarEarlyFraudWarning[]; has_more: boolean; object: "list"; url: string };
  }
  /**
   * @description <p>Retrieves the details of an early fraud warning that has previously been created. </p> <p>Please refer to the <a href="#early_fraud_warning_object">early fraud warning</a> object reference for more details.</p>
   * @name GetRadarEarlyFraudWarningsEarlyFraudWarning
   * @request GET:/v1/radar/early_fraud_warnings/{early_fraud_warning}
   * @secure
   * @response `200` `RadarEarlyFraudWarning` Successful response.
   * @response `default` `Error` Error response.
   */
  export namespace GetRadarEarlyFraudWarningsEarlyFraudWarning {
    export type RequestParams = { earlyFraudWarning: string };
    export type RequestQuery = { expand?: string[] };
    export type RequestBody = CardMandatePaymentMethodDetails;
    export type RequestHeaders = {};
    export type ResponseBody = RadarEarlyFraudWarning;
  }
  /**
   * @description <p>Returns a list of <code>ValueListItem</code> objects. The objects are sorted in descending order by creation date, with the most recently created object appearing first.</p>
   * @name GetRadarValueListItems
   * @request GET:/v1/radar/value_list_items
   * @secure
   * @response `200` `{ data: (RadarValueListItem)[], has_more: boolean, object: "list", url: string }` Successful response.
   * @response `default` `Error` Error response.
   */
  export namespace GetRadarValueListItems {
    export type RequestParams = {};
    export type RequestQuery = {
      created?: { gt?: number; gte?: number; lt?: number; lte?: number } | number;
      ending_before?: string;
      expand?: string[];
      limit?: number;
      starting_after?: string;
      value?: string;
      value_list: string;
    };
    export type RequestBody = CardMandatePaymentMethodDetails;
    export type RequestHeaders = {};
    export type ResponseBody = { data: RadarValueListItem[]; has_more: boolean; object: "list"; url: string };
  }
  /**
   * @description <p>Creates a new <code>ValueListItem</code> object, which is added to the specified parent value list.</p>
   * @name PostRadarValueListItems
   * @request POST:/v1/radar/value_list_items
   * @secure
   * @response `200` `RadarValueListItem` Successful response.
   * @response `default` `Error` Error response.
   */
  export namespace PostRadarValueListItems {
    export type RequestParams = {};
    export type RequestQuery = {};
    export type RequestBody = { expand?: string[]; value: string; value_list: string };
    export type RequestHeaders = {};
    export type ResponseBody = RadarValueListItem;
  }
  /**
   * @description <p>Deletes a <code>ValueListItem</code> object, removing it from its parent value list.</p>
   * @name DeleteRadarValueListItemsItem
   * @request DELETE:/v1/radar/value_list_items/{item}
   * @secure
   * @response `200` `DeletedRadarValueListItem` Successful response.
   * @response `default` `Error` Error response.
   */
  export namespace DeleteRadarValueListItemsItem {
    export type RequestParams = { item: string };
    export type RequestQuery = {};
    export type RequestBody = CardMandatePaymentMethodDetails;
    export type RequestHeaders = {};
    export type ResponseBody = DeletedRadarValueListItem;
  }
  /**
   * @description <p>Retrieves a <code>ValueListItem</code> object.</p>
   * @name GetRadarValueListItemsItem
   * @request GET:/v1/radar/value_list_items/{item}
   * @secure
   * @response `200` `RadarValueListItem` Successful response.
   * @response `default` `Error` Error response.
   */
  export namespace GetRadarValueListItemsItem {
    export type RequestParams = { item: string };
    export type RequestQuery = { expand?: string[] };
    export type RequestBody = CardMandatePaymentMethodDetails;
    export type RequestHeaders = {};
    export type ResponseBody = RadarValueListItem;
  }
  /**
   * @description <p>Returns a list of <code>ValueList</code> objects. The objects are sorted in descending order by creation date, with the most recently created object appearing first.</p>
   * @name GetRadarValueLists
   * @request GET:/v1/radar/value_lists
   * @secure
   * @response `200` `{ data: (RadarValueList)[], has_more: boolean, object: "list", url: string }` Successful response.
   * @response `default` `Error` Error response.
   */
  export namespace GetRadarValueLists {
    export type RequestParams = {};
    export type RequestQuery = {
      alias?: string;
      contains?: string;
      created?: { gt?: number; gte?: number; lt?: number; lte?: number } | number;
      ending_before?: string;
      expand?: string[];
      limit?: number;
      starting_after?: string;
    };
    export type RequestBody = CardMandatePaymentMethodDetails;
    export type RequestHeaders = {};
    export type ResponseBody = { data: RadarValueList[]; has_more: boolean; object: "list"; url: string };
  }
  /**
   * @description <p>Creates a new <code>ValueList</code> object, which can then be referenced in rules.</p>
   * @name PostRadarValueLists
   * @request POST:/v1/radar/value_lists
   * @secure
   * @response `200` `RadarValueList` Successful response.
   * @response `default` `Error` Error response.
   */
  export namespace PostRadarValueLists {
    export type RequestParams = {};
    export type RequestQuery = {};
    export type RequestBody = {
      alias: string;
      expand?: string[];
      item_type?:
        | "card_bin"
        | "card_fingerprint"
        | "case_sensitive_string"
        | "country"
        | "customer_id"
        | "email"
        | "ip_address"
        | "string";
      metadata?: Record<string, string>;
      name: string;
    };
    export type RequestHeaders = {};
    export type ResponseBody = RadarValueList;
  }
  /**
   * @description <p>Deletes a <code>ValueList</code> object, also deleting any items contained within the value list. To be deleted, a value list must not be referenced in any rules.</p>
   * @name DeleteRadarValueListsValueList
   * @request DELETE:/v1/radar/value_lists/{value_list}
   * @secure
   * @response `200` `DeletedRadarValueList` Successful response.
   * @response `default` `Error` Error response.
   */
  export namespace DeleteRadarValueListsValueList {
    export type RequestParams = { valueList: string };
    export type RequestQuery = {};
    export type RequestBody = CardMandatePaymentMethodDetails;
    export type RequestHeaders = {};
    export type ResponseBody = DeletedRadarValueList;
  }
  /**
   * @description <p>Retrieves a <code>ValueList</code> object.</p>
   * @name GetRadarValueListsValueList
   * @request GET:/v1/radar/value_lists/{value_list}
   * @secure
   * @response `200` `RadarValueList` Successful response.
   * @response `default` `Error` Error response.
   */
  export namespace GetRadarValueListsValueList {
    export type RequestParams = { valueList: string };
    export type RequestQuery = { expand?: string[] };
    export type RequestBody = CardMandatePaymentMethodDetails;
    export type RequestHeaders = {};
    export type ResponseBody = RadarValueList;
  }
  /**
   * @description <p>Updates a <code>ValueList</code> object by setting the values of the parameters passed. Any parameters not provided will be left unchanged. Note that <code>item_type</code> is immutable.</p>
   * @name PostRadarValueListsValueList
   * @request POST:/v1/radar/value_lists/{value_list}
   * @secure
   * @response `200` `RadarValueList` Successful response.
   * @response `default` `Error` Error response.
   */
  export namespace PostRadarValueListsValueList {
    export type RequestParams = { valueList: string };
    export type RequestQuery = {};
    export type RequestBody = { alias?: string; expand?: string[]; metadata?: Record<string, string>; name?: string };
    export type RequestHeaders = {};
    export type ResponseBody = RadarValueList;
  }
  /**
   * @description <p>Returns a list of your recipients. The recipients are returned sorted by creation date, with the most recently created recipients appearing first.</p>
   * @name GetRecipients
   * @request GET:/v1/recipients
   * @deprecated
   * @secure
   * @response `200` `{ data: (Recipient)[], has_more: boolean, object: "list", url: string }` Successful response.
   * @response `default` `Error` Error response.
   */
  export namespace GetRecipients {
    export type RequestParams = {};
    export type RequestQuery = {
      created?: { gt?: number; gte?: number; lt?: number; lte?: number } | number;
      ending_before?: string;
      expand?: string[];
      limit?: number;
      starting_after?: string;
      type?: "corporation" | "individual";
      verified?: boolean;
    };
    export type RequestBody = CardMandatePaymentMethodDetails;
    export type RequestHeaders = {};
    export type ResponseBody = { data: Recipient[]; has_more: boolean; object: "list"; url: string };
  }
  /**
   * @description <p>Creates a new <code>Recipient</code> object and verifies the recipient’s identity. Also verifies the recipient’s bank account information or debit card, if either is provided.</p>
   * @name PostRecipients
   * @request POST:/v1/recipients
   * @deprecated
   * @secure
   * @response `200` `Recipient` Successful response.
   * @response `default` `Error` Error response.
   */
  export namespace PostRecipients {
    export type RequestParams = {};
    export type RequestQuery = {};
    export type RequestBody = {
      bank_account?: string;
      card?: string;
      description?: string;
      email?: string;
      expand?: string[];
      metadata?: Record<string, string> | "" | (Record<string, string> & "");
      name: string;
      tax_id?: string;
      type: string;
    };
    export type RequestHeaders = {};
    export type ResponseBody = Recipient;
  }
  /**
   * @description <p>Permanently deletes a recipient. It cannot be undone.</p>
   * @name DeleteRecipientsId
   * @request DELETE:/v1/recipients/{id}
   * @deprecated
   * @secure
   * @response `200` `DeletedRecipient` Successful response.
   * @response `default` `Error` Error response.
   */
  export namespace DeleteRecipientsId {
    export type RequestParams = { id: string };
    export type RequestQuery = {};
    export type RequestBody = CardMandatePaymentMethodDetails;
    export type RequestHeaders = {};
    export type ResponseBody = DeletedRecipient;
  }
  /**
   * @description <p>Retrieves the details of an existing recipient. You need only supply the unique recipient identifier that was returned upon recipient creation.</p>
   * @name GetRecipientsId
   * @request GET:/v1/recipients/{id}
   * @deprecated
   * @secure
   * @response `200` `(Recipient | DeletedRecipient | (Recipient & DeletedRecipient))` Successful response.
   * @response `default` `Error` Error response.
   */
  export namespace GetRecipientsId {
    export type RequestParams = { id: string };
    export type RequestQuery = { expand?: string[] };
    export type RequestBody = CardMandatePaymentMethodDetails;
    export type RequestHeaders = {};
    export type ResponseBody = Recipient | DeletedRecipient | (Recipient & DeletedRecipient);
  }
  /**
   * @description <p>Updates the specified recipient by setting the values of the parameters passed. Any parameters not provided will be left unchanged.</p> <p>If you update the name or tax ID, the identity verification will automatically be rerun. If you update the bank account, the bank account validation will automatically be rerun.</p>
   * @name PostRecipientsId
   * @request POST:/v1/recipients/{id}
   * @deprecated
   * @secure
   * @response `200` `Recipient` Successful response.
   * @response `default` `Error` Error response.
   */
  export namespace PostRecipientsId {
    export type RequestParams = { id: string };
    export type RequestQuery = {};
    export type RequestBody = {
      bank_account?: string;
      card?: string;
      default_card?: string;
      description?: string;
      email?: string;
      expand?: string[];
      metadata?: Record<string, string> | "" | (Record<string, string> & "");
      name?: string;
      tax_id?: string;
    };
    export type RequestHeaders = {};
    export type ResponseBody = Recipient;
  }
  /**
   * @description <p>Returns a list of all refunds you’ve previously created. The refunds are returned in sorted order, with the most recent refunds appearing first. For convenience, the 10 most recent refunds are always available by default on the charge object.</p>
   * @name GetRefunds
   * @request GET:/v1/refunds
   * @secure
   * @response `200` `{ data: (Refund)[], has_more: boolean, object: "list", url: string }` Successful response.
   * @response `default` `Error` Error response.
   */
  export namespace GetRefunds {
    export type RequestParams = {};
    export type RequestQuery = {
      charge?: string;
      created?: { gt?: number; gte?: number; lt?: number; lte?: number } | number;
      ending_before?: string;
      expand?: string[];
      limit?: number;
      payment_intent?: string;
      starting_after?: string;
    };
    export type RequestBody = CardMandatePaymentMethodDetails;
    export type RequestHeaders = {};
    export type ResponseBody = { data: Refund[]; has_more: boolean; object: "list"; url: string };
  }
  /**
   * @description <p>Create a refund.</p>
   * @name PostRefunds
   * @request POST:/v1/refunds
   * @secure
   * @response `200` `Refund` Successful response.
   * @response `default` `Error` Error response.
   */
  export namespace PostRefunds {
    export type RequestParams = {};
    export type RequestQuery = {};
    export type RequestBody = {
      amount?: number;
      charge?: string;
      expand?: string[];
      metadata?: Record<string, string> | "" | (Record<string, string> & "");
      payment_intent?: string;
      reason?: "duplicate" | "fraudulent" | "requested_by_customer";
      refund_application_fee?: boolean;
      reverse_transfer?: boolean;
    };
    export type RequestHeaders = {};
    export type ResponseBody = Refund;
  }
  /**
   * @description <p>Retrieves the details of an existing refund.</p>
   * @name GetRefundsRefund
   * @request GET:/v1/refunds/{refund}
   * @secure
   * @response `200` `Refund` Successful response.
   * @response `default` `Error` Error response.
   */
  export namespace GetRefundsRefund {
    export type RequestParams = { refund: string };
    export type RequestQuery = { expand?: string[] };
    export type RequestBody = CardMandatePaymentMethodDetails;
    export type RequestHeaders = {};
    export type ResponseBody = Refund;
  }
  /**
   * @description <p>Updates the specified refund by setting the values of the parameters passed. Any parameters not provided will be left unchanged.</p> <p>This request only accepts <code>metadata</code> as an argument.</p>
   * @name PostRefundsRefund
   * @request POST:/v1/refunds/{refund}
   * @secure
   * @response `200` `Refund` Successful response.
   * @response `default` `Error` Error response.
   */
  export namespace PostRefundsRefund {
    export type RequestParams = { refund: string };
    export type RequestQuery = {};
    export type RequestBody = {
      expand?: string[];
      metadata?: Record<string, string> | "" | (Record<string, string> & "");
    };
    export type RequestHeaders = {};
    export type ResponseBody = Refund;
  }
  /**
   * @description <p>Returns a list of Report Runs, with the most recent appearing first.</p>
   * @name GetReportingReportRuns
   * @request GET:/v1/reporting/report_runs
   * @secure
   * @response `200` `{ data: (ReportingReportRun)[], has_more: boolean, object: "list", url: string }` Successful response.
   * @response `default` `Error` Error response.
   */
  export namespace GetReportingReportRuns {
    export type RequestParams = {};
    export type RequestQuery = {
      created?: { gt?: number; gte?: number; lt?: number; lte?: number } | number;
      ending_before?: string;
      expand?: string[];
      limit?: number;
      starting_after?: string;
    };
    export type RequestBody = CardMandatePaymentMethodDetails;
    export type RequestHeaders = {};
    export type ResponseBody = { data: ReportingReportRun[]; has_more: boolean; object: "list"; url: string };
  }
  /**
   * @description <p>Creates a new object and begin running the report. (Certain report types require a <a href="https://stripe.com/docs/keys#test-live-modes">live-mode API key</a>.)</p>
   * @name PostReportingReportRuns
   * @request POST:/v1/reporting/report_runs
   * @secure
   * @response `200` `ReportingReportRun` Successful response.
   * @response `default` `Error` Error response.
   */
  export namespace PostReportingReportRuns {
    export type RequestParams = {};
    export type RequestQuery = {};
    export type RequestBody = {
      expand?: string[];
      parameters?: {
        columns?: string[];
        connected_account?: string;
        currency?: string;
        interval_end?: number;
        interval_start?: number;
        payout?: string;
        reporting_category?:
          | "advance"
          | "advance_funding"
          | "anticipation_repayment"
          | "charge"
          | "charge_failure"
          | "connect_collection_transfer"
          | "connect_reserved_funds"
          | "contribution"
          | "dispute"
          | "dispute_reversal"
          | "fee"
          | "financing_paydown"
          | "financing_paydown_reversal"
          | "financing_payout"
          | "financing_payout_reversal"
          | "issuing_authorization_hold"
          | "issuing_authorization_release"
          | "issuing_dispute"
          | "issuing_transaction"
          | "network_cost"
          | "other_adjustment"
          | "partial_capture_reversal"
          | "payout"
          | "payout_reversal"
          | "platform_earning"
          | "platform_earning_refund"
          | "refund"
          | "refund_failure"
          | "risk_reserved_funds"
          | "tax"
          | "topup"
          | "topup_reversal"
          | "transfer"
          | "transfer_reversal";
        timezone?:
          | "Africa/Abidjan"
          | "Africa/Accra"
          | "Africa/Addis_Ababa"
          | "Africa/Algiers"
          | "Africa/Asmara"
          | "Africa/Asmera"
          | "Africa/Bamako"
          | "Africa/Bangui"
          | "Africa/Banjul"
          | "Africa/Bissau"
          | "Africa/Blantyre"
          | "Africa/Brazzaville"
          | "Africa/Bujumbura"
          | "Africa/Cairo"
          | "Africa/Casablanca"
          | "Africa/Ceuta"
          | "Africa/Conakry"
          | "Africa/Dakar"
          | "Africa/Dar_es_Salaam"
          | "Africa/Djibouti"
          | "Africa/Douala"
          | "Africa/El_Aaiun"
          | "Africa/Freetown"
          | "Africa/Gaborone"
          | "Africa/Harare"
          | "Africa/Johannesburg"
          | "Africa/Juba"
          | "Africa/Kampala"
          | "Africa/Khartoum"
          | "Africa/Kigali"
          | "Africa/Kinshasa"
          | "Africa/Lagos"
          | "Africa/Libreville"
          | "Africa/Lome"
          | "Africa/Luanda"
          | "Africa/Lubumbashi"
          | "Africa/Lusaka"
          | "Africa/Malabo"
          | "Africa/Maputo"
          | "Africa/Maseru"
          | "Africa/Mbabane"
          | "Africa/Mogadishu"
          | "Africa/Monrovia"
          | "Africa/Nairobi"
          | "Africa/Ndjamena"
          | "Africa/Niamey"
          | "Africa/Nouakchott"
          | "Africa/Ouagadougou"
          | "Africa/Porto-Novo"
          | "Africa/Sao_Tome"
          | "Africa/Timbuktu"
          | "Africa/Tripoli"
          | "Africa/Tunis"
          | "Africa/Windhoek"
          | "America/Adak"
          | "America/Anchorage"
          | "America/Anguilla"
          | "America/Antigua"
          | "America/Araguaina"
          | "America/Argentina/Buenos_Aires"
          | "America/Argentina/Catamarca"
          | "America/Argentina/ComodRivadavia"
          | "America/Argentina/Cordoba"
          | "America/Argentina/Jujuy"
          | "America/Argentina/La_Rioja"
          | "America/Argentina/Mendoza"
          | "America/Argentina/Rio_Gallegos"
          | "America/Argentina/Salta"
          | "America/Argentina/San_Juan"
          | "America/Argentina/San_Luis"
          | "America/Argentina/Tucuman"
          | "America/Argentina/Ushuaia"
          | "America/Aruba"
          | "America/Asuncion"
          | "America/Atikokan"
          | "America/Atka"
          | "America/Bahia"
          | "America/Bahia_Banderas"
          | "America/Barbados"
          | "America/Belem"
          | "America/Belize"
          | "America/Blanc-Sablon"
          | "America/Boa_Vista"
          | "America/Bogota"
          | "America/Boise"
          | "America/Buenos_Aires"
          | "America/Cambridge_Bay"
          | "America/Campo_Grande"
          | "America/Cancun"
          | "America/Caracas"
          | "America/Catamarca"
          | "America/Cayenne"
          | "America/Cayman"
          | "America/Chicago"
          | "America/Chihuahua"
          | "America/Coral_Harbour"
          | "America/Cordoba"
          | "America/Costa_Rica"
          | "America/Creston"
          | "America/Cuiaba"
          | "America/Curacao"
          | "America/Danmarkshavn"
          | "America/Dawson"
          | "America/Dawson_Creek"
          | "America/Denver"
          | "America/Detroit"
          | "America/Dominica"
          | "America/Edmonton"
          | "America/Eirunepe"
          | "America/El_Salvador"
          | "America/Ensenada"
          | "America/Fort_Nelson"
          | "America/Fort_Wayne"
          | "America/Fortaleza"
          | "America/Glace_Bay"
          | "America/Godthab"
          | "America/Goose_Bay"
          | "America/Grand_Turk"
          | "America/Grenada"
          | "America/Guadeloupe"
          | "America/Guatemala"
          | "America/Guayaquil"
          | "America/Guyana"
          | "America/Halifax"
          | "America/Havana"
          | "America/Hermosillo"
          | "America/Indiana/Indianapolis"
          | "America/Indiana/Knox"
          | "America/Indiana/Marengo"
          | "America/Indiana/Petersburg"
          | "America/Indiana/Tell_City"
          | "America/Indiana/Vevay"
          | "America/Indiana/Vincennes"
          | "America/Indiana/Winamac"
          | "America/Indianapolis"
          | "America/Inuvik"
          | "America/Iqaluit"
          | "America/Jamaica"
          | "America/Jujuy"
          | "America/Juneau"
          | "America/Kentucky/Louisville"
          | "America/Kentucky/Monticello"
          | "America/Knox_IN"
          | "America/Kralendijk"
          | "America/La_Paz"
          | "America/Lima"
          | "America/Los_Angeles"
          | "America/Louisville"
          | "America/Lower_Princes"
          | "America/Maceio"
          | "America/Managua"
          | "America/Manaus"
          | "America/Marigot"
          | "America/Martinique"
          | "America/Matamoros"
          | "America/Mazatlan"
          | "America/Mendoza"
          | "America/Menominee"
          | "America/Merida"
          | "America/Metlakatla"
          | "America/Mexico_City"
          | "America/Miquelon"
          | "America/Moncton"
          | "America/Monterrey"
          | "America/Montevideo"
          | "America/Montreal"
          | "America/Montserrat"
          | "America/Nassau"
          | "America/New_York"
          | "America/Nipigon"
          | "America/Nome"
          | "America/Noronha"
          | "America/North_Dakota/Beulah"
          | "America/North_Dakota/Center"
          | "America/North_Dakota/New_Salem"
          | "America/Ojinaga"
          | "America/Panama"
          | "America/Pangnirtung"
          | "America/Paramaribo"
          | "America/Phoenix"
          | "America/Port-au-Prince"
          | "America/Port_of_Spain"
          | "America/Porto_Acre"
          | "America/Porto_Velho"
          | "America/Puerto_Rico"
          | "America/Punta_Arenas"
          | "America/Rainy_River"
          | "America/Rankin_Inlet"
          | "America/Recife"
          | "America/Regina"
          | "America/Resolute"
          | "America/Rio_Branco"
          | "America/Rosario"
          | "America/Santa_Isabel"
          | "America/Santarem"
          | "America/Santiago"
          | "America/Santo_Domingo"
          | "America/Sao_Paulo"
          | "America/Scoresbysund"
          | "America/Shiprock"
          | "America/Sitka"
          | "America/St_Barthelemy"
          | "America/St_Johns"
          | "America/St_Kitts"
          | "America/St_Lucia"
          | "America/St_Thomas"
          | "America/St_Vincent"
          | "America/Swift_Current"
          | "America/Tegucigalpa"
          | "America/Thule"
          | "America/Thunder_Bay"
          | "America/Tijuana"
          | "America/Toronto"
          | "America/Tortola"
          | "America/Vancouver"
          | "America/Virgin"
          | "America/Whitehorse"
          | "America/Winnipeg"
          | "America/Yakutat"
          | "America/Yellowknife"
          | "Antarctica/Casey"
          | "Antarctica/Davis"
          | "Antarctica/DumontDUrville"
          | "Antarctica/Macquarie"
          | "Antarctica/Mawson"
          | "Antarctica/McMurdo"
          | "Antarctica/Palmer"
          | "Antarctica/Rothera"
          | "Antarctica/South_Pole"
          | "Antarctica/Syowa"
          | "Antarctica/Troll"
          | "Antarctica/Vostok"
          | "Arctic/Longyearbyen"
          | "Asia/Aden"
          | "Asia/Almaty"
          | "Asia/Amman"
          | "Asia/Anadyr"
          | "Asia/Aqtau"
          | "Asia/Aqtobe"
          | "Asia/Ashgabat"
          | "Asia/Ashkhabad"
          | "Asia/Atyrau"
          | "Asia/Baghdad"
          | "Asia/Bahrain"
          | "Asia/Baku"
          | "Asia/Bangkok"
          | "Asia/Barnaul"
          | "Asia/Beirut"
          | "Asia/Bishkek"
          | "Asia/Brunei"
          | "Asia/Calcutta"
          | "Asia/Chita"
          | "Asia/Choibalsan"
          | "Asia/Chongqing"
          | "Asia/Chungking"
          | "Asia/Colombo"
          | "Asia/Dacca"
          | "Asia/Damascus"
          | "Asia/Dhaka"
          | "Asia/Dili"
          | "Asia/Dubai"
          | "Asia/Dushanbe"
          | "Asia/Famagusta"
          | "Asia/Gaza"
          | "Asia/Harbin"
          | "Asia/Hebron"
          | "Asia/Ho_Chi_Minh"
          | "Asia/Hong_Kong"
          | "Asia/Hovd"
          | "Asia/Irkutsk"
          | "Asia/Istanbul"
          | "Asia/Jakarta"
          | "Asia/Jayapura"
          | "Asia/Jerusalem"
          | "Asia/Kabul"
          | "Asia/Kamchatka"
          | "Asia/Karachi"
          | "Asia/Kashgar"
          | "Asia/Kathmandu"
          | "Asia/Katmandu"
          | "Asia/Khandyga"
          | "Asia/Kolkata"
          | "Asia/Krasnoyarsk"
          | "Asia/Kuala_Lumpur"
          | "Asia/Kuching"
          | "Asia/Kuwait"
          | "Asia/Macao"
          | "Asia/Macau"
          | "Asia/Magadan"
          | "Asia/Makassar"
          | "Asia/Manila"
          | "Asia/Muscat"
          | "Asia/Nicosia"
          | "Asia/Novokuznetsk"
          | "Asia/Novosibirsk"
          | "Asia/Omsk"
          | "Asia/Oral"
          | "Asia/Phnom_Penh"
          | "Asia/Pontianak"
          | "Asia/Pyongyang"
          | "Asia/Qatar"
          | "Asia/Qostanay"
          | "Asia/Qyzylorda"
          | "Asia/Rangoon"
          | "Asia/Riyadh"
          | "Asia/Saigon"
          | "Asia/Sakhalin"
          | "Asia/Samarkand"
          | "Asia/Seoul"
          | "Asia/Shanghai"
          | "Asia/Singapore"
          | "Asia/Srednekolymsk"
          | "Asia/Taipei"
          | "Asia/Tashkent"
          | "Asia/Tbilisi"
          | "Asia/Tehran"
          | "Asia/Tel_Aviv"
          | "Asia/Thimbu"
          | "Asia/Thimphu"
          | "Asia/Tokyo"
          | "Asia/Tomsk"
          | "Asia/Ujung_Pandang"
          | "Asia/Ulaanbaatar"
          | "Asia/Ulan_Bator"
          | "Asia/Urumqi"
          | "Asia/Ust-Nera"
          | "Asia/Vientiane"
          | "Asia/Vladivostok"
          | "Asia/Yakutsk"
          | "Asia/Yangon"
          | "Asia/Yekaterinburg"
          | "Asia/Yerevan"
          | "Atlantic/Azores"
          | "Atlantic/Bermuda"
          | "Atlantic/Canary"
          | "Atlantic/Cape_Verde"
          | "Atlantic/Faeroe"
          | "Atlantic/Faroe"
          | "Atlantic/Jan_Mayen"
          | "Atlantic/Madeira"
          | "Atlantic/Reykjavik"
          | "Atlantic/South_Georgia"
          | "Atlantic/St_Helena"
          | "Atlantic/Stanley"
          | "Australia/ACT"
          | "Australia/Adelaide"
          | "Australia/Brisbane"
          | "Australia/Broken_Hill"
          | "Australia/Canberra"
          | "Australia/Currie"
          | "Australia/Darwin"
          | "Australia/Eucla"
          | "Australia/Hobart"
          | "Australia/LHI"
          | "Australia/Lindeman"
          | "Australia/Lord_Howe"
          | "Australia/Melbourne"
          | "Australia/NSW"
          | "Australia/North"
          | "Australia/Perth"
          | "Australia/Queensland"
          | "Australia/South"
          | "Australia/Sydney"
          | "Australia/Tasmania"
          | "Australia/Victoria"
          | "Australia/West"
          | "Australia/Yancowinna"
          | "Brazil/Acre"
          | "Brazil/DeNoronha"
          | "Brazil/East"
          | "Brazil/West"
          | "CET"
          | "CST6CDT"
          | "Canada/Atlantic"
          | "Canada/Central"
          | "Canada/Eastern"
          | "Canada/Mountain"
          | "Canada/Newfoundland"
          | "Canada/Pacific"
          | "Canada/Saskatchewan"
          | "Canada/Yukon"
          | "Chile/Continental"
          | "Chile/EasterIsland"
          | "Cuba"
          | "EET"
          | "EST"
          | "EST5EDT"
          | "Egypt"
          | "Eire"
          | "Etc/GMT"
          | "Etc/GMT+0"
          | "Etc/GMT+1"
          | "Etc/GMT+10"
          | "Etc/GMT+11"
          | "Etc/GMT+12"
          | "Etc/GMT+2"
          | "Etc/GMT+3"
          | "Etc/GMT+4"
          | "Etc/GMT+5"
          | "Etc/GMT+6"
          | "Etc/GMT+7"
          | "Etc/GMT+8"
          | "Etc/GMT+9"
          | "Etc/GMT-0"
          | "Etc/GMT-1"
          | "Etc/GMT-10"
          | "Etc/GMT-11"
          | "Etc/GMT-12"
          | "Etc/GMT-13"
          | "Etc/GMT-14"
          | "Etc/GMT-2"
          | "Etc/GMT-3"
          | "Etc/GMT-4"
          | "Etc/GMT-5"
          | "Etc/GMT-6"
          | "Etc/GMT-7"
          | "Etc/GMT-8"
          | "Etc/GMT-9"
          | "Etc/GMT0"
          | "Etc/Greenwich"
          | "Etc/UCT"
          | "Etc/UTC"
          | "Etc/Universal"
          | "Etc/Zulu"
          | "Europe/Amsterdam"
          | "Europe/Andorra"
          | "Europe/Astrakhan"
          | "Europe/Athens"
          | "Europe/Belfast"
          | "Europe/Belgrade"
          | "Europe/Berlin"
          | "Europe/Bratislava"
          | "Europe/Brussels"
          | "Europe/Bucharest"
          | "Europe/Budapest"
          | "Europe/Busingen"
          | "Europe/Chisinau"
          | "Europe/Copenhagen"
          | "Europe/Dublin"
          | "Europe/Gibraltar"
          | "Europe/Guernsey"
          | "Europe/Helsinki"
          | "Europe/Isle_of_Man"
          | "Europe/Istanbul"
          | "Europe/Jersey"
          | "Europe/Kaliningrad"
          | "Europe/Kiev"
          | "Europe/Kirov"
          | "Europe/Lisbon"
          | "Europe/Ljubljana"
          | "Europe/London"
          | "Europe/Luxembourg"
          | "Europe/Madrid"
          | "Europe/Malta"
          | "Europe/Mariehamn"
          | "Europe/Minsk"
          | "Europe/Monaco"
          | "Europe/Moscow"
          | "Europe/Nicosia"
          | "Europe/Oslo"
          | "Europe/Paris"
          | "Europe/Podgorica"
          | "Europe/Prague"
          | "Europe/Riga"
          | "Europe/Rome"
          | "Europe/Samara"
          | "Europe/San_Marino"
          | "Europe/Sarajevo"
          | "Europe/Saratov"
          | "Europe/Simferopol"
          | "Europe/Skopje"
          | "Europe/Sofia"
          | "Europe/Stockholm"
          | "Europe/Tallinn"
          | "Europe/Tirane"
          | "Europe/Tiraspol"
          | "Europe/Ulyanovsk"
          | "Europe/Uzhgorod"
          | "Europe/Vaduz"
          | "Europe/Vatican"
          | "Europe/Vienna"
          | "Europe/Vilnius"
          | "Europe/Volgograd"
          | "Europe/Warsaw"
          | "Europe/Zagreb"
          | "Europe/Zaporozhye"
          | "Europe/Zurich"
          | "Factory"
          | "GB"
          | "GB-Eire"
          | "GMT"
          | "GMT+0"
          | "GMT-0"
          | "GMT0"
          | "Greenwich"
          | "HST"
          | "Hongkong"
          | "Iceland"
          | "Indian/Antananarivo"
          | "Indian/Chagos"
          | "Indian/Christmas"
          | "Indian/Cocos"
          | "Indian/Comoro"
          | "Indian/Kerguelen"
          | "Indian/Mahe"
          | "Indian/Maldives"
          | "Indian/Mauritius"
          | "Indian/Mayotte"
          | "Indian/Reunion"
          | "Iran"
          | "Israel"
          | "Jamaica"
          | "Japan"
          | "Kwajalein"
          | "Libya"
          | "MET"
          | "MST"
          | "MST7MDT"
          | "Mexico/BajaNorte"
          | "Mexico/BajaSur"
          | "Mexico/General"
          | "NZ"
          | "NZ-CHAT"
          | "Navajo"
          | "PRC"
          | "PST8PDT"
          | "Pacific/Apia"
          | "Pacific/Auckland"
          | "Pacific/Bougainville"
          | "Pacific/Chatham"
          | "Pacific/Chuuk"
          | "Pacific/Easter"
          | "Pacific/Efate"
          | "Pacific/Enderbury"
          | "Pacific/Fakaofo"
          | "Pacific/Fiji"
          | "Pacific/Funafuti"
          | "Pacific/Galapagos"
          | "Pacific/Gambier"
          | "Pacific/Guadalcanal"
          | "Pacific/Guam"
          | "Pacific/Honolulu"
          | "Pacific/Johnston"
          | "Pacific/Kiritimati"
          | "Pacific/Kosrae"
          | "Pacific/Kwajalein"
          | "Pacific/Majuro"
          | "Pacific/Marquesas"
          | "Pacific/Midway"
          | "Pacific/Nauru"
          | "Pacific/Niue"
          | "Pacific/Norfolk"
          | "Pacific/Noumea"
          | "Pacific/Pago_Pago"
          | "Pacific/Palau"
          | "Pacific/Pitcairn"
          | "Pacific/Pohnpei"
          | "Pacific/Ponape"
          | "Pacific/Port_Moresby"
          | "Pacific/Rarotonga"
          | "Pacific/Saipan"
          | "Pacific/Samoa"
          | "Pacific/Tahiti"
          | "Pacific/Tarawa"
          | "Pacific/Tongatapu"
          | "Pacific/Truk"
          | "Pacific/Wake"
          | "Pacific/Wallis"
          | "Pacific/Yap"
          | "Poland"
          | "Portugal"
          | "ROC"
          | "ROK"
          | "Singapore"
          | "Turkey"
          | "UCT"
          | "US/Alaska"
          | "US/Aleutian"
          | "US/Arizona"
          | "US/Central"
          | "US/East-Indiana"
          | "US/Eastern"
          | "US/Hawaii"
          | "US/Indiana-Starke"
          | "US/Michigan"
          | "US/Mountain"
          | "US/Pacific"
          | "US/Pacific-New"
          | "US/Samoa"
          | "UTC"
          | "Universal"
          | "W-SU"
          | "WET"
          | "Zulu";
      };
      report_type: string;
    };
    export type RequestHeaders = {};
    export type ResponseBody = ReportingReportRun;
  }
  /**
   * @description <p>Retrieves the details of an existing Report Run.</p>
   * @name GetReportingReportRunsReportRun
   * @request GET:/v1/reporting/report_runs/{report_run}
   * @secure
   * @response `200` `ReportingReportRun` Successful response.
   * @response `default` `Error` Error response.
   */
  export namespace GetReportingReportRunsReportRun {
    export type RequestParams = { reportRun: string };
    export type RequestQuery = { expand?: string[] };
    export type RequestBody = CardMandatePaymentMethodDetails;
    export type RequestHeaders = {};
    export type ResponseBody = ReportingReportRun;
  }
  /**
   * @description <p>Returns a full list of Report Types.</p>
   * @name GetReportingReportTypes
   * @request GET:/v1/reporting/report_types
   * @secure
   * @response `200` `{ data: (ReportingReportType)[], has_more: boolean, object: "list", url: string }` Successful response.
   * @response `default` `Error` Error response.
   */
  export namespace GetReportingReportTypes {
    export type RequestParams = {};
    export type RequestQuery = { expand?: string[] };
    export type RequestBody = CardMandatePaymentMethodDetails;
    export type RequestHeaders = {};
    export type ResponseBody = { data: ReportingReportType[]; has_more: boolean; object: "list"; url: string };
  }
  /**
   * @description <p>Retrieves the details of a Report Type. (Certain report types require a <a href="https://stripe.com/docs/keys#test-live-modes">live-mode API key</a>.)</p>
   * @name GetReportingReportTypesReportType
   * @request GET:/v1/reporting/report_types/{report_type}
   * @secure
   * @response `200` `ReportingReportType` Successful response.
   * @response `default` `Error` Error response.
   */
  export namespace GetReportingReportTypesReportType {
    export type RequestParams = { reportType: string };
    export type RequestQuery = { expand?: string[] };
    export type RequestBody = CardMandatePaymentMethodDetails;
    export type RequestHeaders = {};
    export type ResponseBody = ReportingReportType;
  }
  /**
   * @description <p>Returns a list of <code>Review</code> objects that have <code>open</code> set to <code>true</code>. The objects are sorted in descending order by creation date, with the most recently created object appearing first.</p>
   * @name GetReviews
   * @request GET:/v1/reviews
   * @secure
   * @response `200` `{ data: (Review)[], has_more: boolean, object: "list", url: string }` Successful response.
   * @response `default` `Error` Error response.
   */
  export namespace GetReviews {
    export type RequestParams = {};
    export type RequestQuery = {
      created?: { gt?: number; gte?: number; lt?: number; lte?: number } | number;
      ending_before?: string;
      expand?: string[];
      limit?: number;
      starting_after?: string;
    };
    export type RequestBody = CardMandatePaymentMethodDetails;
    export type RequestHeaders = {};
    export type ResponseBody = { data: Review[]; has_more: boolean; object: "list"; url: string };
  }
  /**
   * @description <p>Retrieves a <code>Review</code> object.</p>
   * @name GetReviewsReview
   * @request GET:/v1/reviews/{review}
   * @secure
   * @response `200` `Review` Successful response.
   * @response `default` `Error` Error response.
   */
  export namespace GetReviewsReview {
    export type RequestParams = { review: string };
    export type RequestQuery = { expand?: string[] };
    export type RequestBody = CardMandatePaymentMethodDetails;
    export type RequestHeaders = {};
    export type ResponseBody = Review;
  }
  /**
   * @description <p>Approves a <code>Review</code> object, closing it and removing it from the list of reviews.</p>
   * @name PostReviewsReviewApprove
   * @request POST:/v1/reviews/{review}/approve
   * @secure
   * @response `200` `Review` Successful response.
   * @response `default` `Error` Error response.
   */
  export namespace PostReviewsReviewApprove {
    export type RequestParams = { review: string };
    export type RequestQuery = {};
    export type RequestBody = { expand?: string[] };
    export type RequestHeaders = {};
    export type ResponseBody = Review;
  }
  /**
   * @description <p>Returns a list of SetupAttempts associated with a provided SetupIntent.</p>
   * @name GetSetupAttempts
   * @request GET:/v1/setup_attempts
   * @secure
   * @response `200` `{ data: (SetupAttempt)[], has_more: boolean, object: "list", url: string }` Successful response.
   * @response `default` `Error` Error response.
   */
  export namespace GetSetupAttempts {
    export type RequestParams = {};
    export type RequestQuery = {
      created?: { gt?: number; gte?: number; lt?: number; lte?: number } | number;
      ending_before?: string;
      expand?: string[];
      limit?: number;
      setup_intent: string;
      starting_after?: string;
    };
    export type RequestBody = CardMandatePaymentMethodDetails;
    export type RequestHeaders = {};
    export type ResponseBody = { data: SetupAttempt[]; has_more: boolean; object: "list"; url: string };
  }
  /**
   * @description <p>Returns a list of SetupIntents.</p>
   * @name GetSetupIntents
   * @request GET:/v1/setup_intents
   * @secure
   * @response `200` `{ data: (SetupIntent)[], has_more: boolean, object: "list", url: string }` Successful response.
   * @response `default` `Error` Error response.
   */
  export namespace GetSetupIntents {
    export type RequestParams = {};
    export type RequestQuery = {
      created?: { gt?: number; gte?: number; lt?: number; lte?: number } | number;
      customer?: string;
      ending_before?: string;
      expand?: string[];
      limit?: number;
      payment_method?: string;
      starting_after?: string;
    };
    export type RequestBody = CardMandatePaymentMethodDetails;
    export type RequestHeaders = {};
    export type ResponseBody = { data: SetupIntent[]; has_more: boolean; object: "list"; url: string };
  }
  /**
   * @description <p>Creates a SetupIntent object.</p> <p>After the SetupIntent is created, attach a payment method and <a href="/docs/api/setup_intents/confirm">confirm</a> to collect any required permissions to charge the payment method later.</p>
   * @name PostSetupIntents
   * @request POST:/v1/setup_intents
   * @secure
   * @response `200` `SetupIntent` Successful response.
   * @response `default` `Error` Error response.
   */
  export namespace PostSetupIntents {
    export type RequestParams = {};
    export type RequestQuery = {};
    export type RequestBody = {
      confirm?: boolean;
      customer?: string;
      description?: string;
      expand?: string[];
      mandate_data?: {
        customer_acceptance: {
          accepted_at?: number;
          offline?: object;
          online?: { ip_address: string; user_agent: string };
          type: "offline" | "online";
        };
      };
      metadata?: Record<string, string>;
      on_behalf_of?: string;
      payment_method?: string;
      payment_method_options?: {
        acss_debit?: {
          currency?: "cad" | "usd";
          mandate_options?: {
            custom_mandate_url?: string | "";
            default_for?: ("invoice" | "subscription")[];
            interval_description?: string;
            payment_schedule?: "combined" | "interval" | "sporadic";
            transaction_type?: "business" | "personal";
          };
          verification_method?: "automatic" | "instant" | "microdeposits";
        };
        card?: { request_three_d_secure?: "any" | "automatic" };
        sepa_debit?: { mandate_options?: object };
      };
      payment_method_types?: string[];
      return_url?: string;
      single_use?: { amount: number; currency: string };
      usage?: "off_session" | "on_session";
    };
    export type RequestHeaders = {};
    export type ResponseBody = SetupIntent;
  }
  /**
   * @description <p>Retrieves the details of a SetupIntent that has previously been created. </p> <p>Client-side retrieval using a publishable key is allowed when the <code>client_secret</code> is provided in the query string. </p> <p>When retrieved with a publishable key, only a subset of properties will be returned. Please refer to the <a href="#setup_intent_object">SetupIntent</a> object reference for more details.</p>
   * @name GetSetupIntentsIntent
   * @request GET:/v1/setup_intents/{intent}
   * @secure
   * @response `200` `SetupIntent` Successful response.
   * @response `default` `Error` Error response.
   */
  export namespace GetSetupIntentsIntent {
    export type RequestParams = { intent: string };
    export type RequestQuery = { client_secret?: string; expand?: string[] };
    export type RequestBody = CardMandatePaymentMethodDetails;
    export type RequestHeaders = {};
    export type ResponseBody = SetupIntent;
  }
  /**
   * @description <p>Updates a SetupIntent object.</p>
   * @name PostSetupIntentsIntent
   * @request POST:/v1/setup_intents/{intent}
   * @secure
   * @response `200` `SetupIntent` Successful response.
   * @response `default` `Error` Error response.
   */
  export namespace PostSetupIntentsIntent {
    export type RequestParams = { intent: string };
    export type RequestQuery = {};
    export type RequestBody = {
      customer?: string;
      description?: string;
      expand?: string[];
      metadata?: Record<string, string> | "" | (Record<string, string> & "");
      payment_method?: string;
      payment_method_options?: {
        acss_debit?: {
          currency?: "cad" | "usd";
          mandate_options?: {
            custom_mandate_url?: string | "";
            default_for?: ("invoice" | "subscription")[];
            interval_description?: string;
            payment_schedule?: "combined" | "interval" | "sporadic";
            transaction_type?: "business" | "personal";
          };
          verification_method?: "automatic" | "instant" | "microdeposits";
        };
        card?: { request_three_d_secure?: "any" | "automatic" };
        sepa_debit?: { mandate_options?: object };
      };
      payment_method_types?: string[];
    };
    export type RequestHeaders = {};
    export type ResponseBody = SetupIntent;
  }
  /**
   * @description <p>A SetupIntent object can be canceled when it is in one of these statuses: <code>requires_payment_method</code>, <code>requires_confirmation</code>, or <code>requires_action</code>. </p> <p>Once canceled, setup is abandoned and any operations on the SetupIntent will fail with an error.</p>
   * @name PostSetupIntentsIntentCancel
   * @request POST:/v1/setup_intents/{intent}/cancel
   * @secure
   * @response `200` `SetupIntent` Successful response.
   * @response `default` `Error` Error response.
   */
  export namespace PostSetupIntentsIntentCancel {
    export type RequestParams = { intent: string };
    export type RequestQuery = {};
    export type RequestBody = {
      cancellation_reason?: "abandoned" | "duplicate" | "requested_by_customer";
      expand?: string[];
    };
    export type RequestHeaders = {};
    export type ResponseBody = SetupIntent;
  }
  /**
   * @description <p>Confirm that your customer intends to set up the current or provided payment method. For example, you would confirm a SetupIntent when a customer hits the “Save” button on a payment method management page on your website.</p> <p>If the selected payment method does not require any additional steps from the customer, the SetupIntent will transition to the <code>succeeded</code> status.</p> <p>Otherwise, it will transition to the <code>requires_action</code> status and suggest additional actions via <code>next_action</code>. If setup fails, the SetupIntent will transition to the <code>requires_payment_method</code> status.</p>
   * @name PostSetupIntentsIntentConfirm
   * @request POST:/v1/setup_intents/{intent}/confirm
   * @secure
   * @response `200` `SetupIntent` Successful response.
   * @response `default` `Error` Error response.
   */
  export namespace PostSetupIntentsIntentConfirm {
    export type RequestParams = { intent: string };
    export type RequestQuery = {};
    export type RequestBody = {
      client_secret?: string;
      expand?: string[];
      mandate_data?:
        | {
            customer_acceptance: {
              accepted_at?: number;
              offline?: object;
              online?: { ip_address: string; user_agent: string };
              type: "offline" | "online";
            };
          }
        | { customer_acceptance: { online: { ip_address?: string; user_agent?: string }; type: "online" } }
        | ({
            customer_acceptance: {
              accepted_at?: number;
              offline?: object;
              online?: { ip_address: string; user_agent: string };
              type: "offline" | "online";
            };
          } & { customer_acceptance: { online: { ip_address?: string; user_agent?: string }; type: "online" } });
      payment_method?: string;
      payment_method_options?: {
        acss_debit?: {
          currency?: "cad" | "usd";
          mandate_options?: {
            custom_mandate_url?: string | "";
            default_for?: ("invoice" | "subscription")[];
            interval_description?: string;
            payment_schedule?: "combined" | "interval" | "sporadic";
            transaction_type?: "business" | "personal";
          };
          verification_method?: "automatic" | "instant" | "microdeposits";
        };
        card?: { request_three_d_secure?: "any" | "automatic" };
        sepa_debit?: { mandate_options?: object };
      };
      return_url?: string;
    };
    export type RequestHeaders = {};
    export type ResponseBody = SetupIntent;
  }
  /**
   * @description <p>Returns a list of your shipping rates.</p>
   * @name GetShippingRates
   * @request GET:/v1/shipping_rates
   * @secure
   * @response `200` `{ data: (ShippingRate)[], has_more: boolean, object: "list", url: string }` Successful response.
   * @response `default` `Error` Error response.
   */
  export namespace GetShippingRates {
    export type RequestParams = {};
    export type RequestQuery = {
      active?: boolean;
      created?: { gt?: number; gte?: number; lt?: number; lte?: number } | number;
      currency?: string;
      ending_before?: string;
      expand?: string[];
      limit?: number;
      starting_after?: string;
    };
    export type RequestBody = CardMandatePaymentMethodDetails;
    export type RequestHeaders = {};
    export type ResponseBody = { data: ShippingRate[]; has_more: boolean; object: "list"; url: string };
  }
  /**
   * @description <p>Creates a new shipping rate object.</p>
   * @name PostShippingRates
   * @request POST:/v1/shipping_rates
   * @secure
   * @response `200` `ShippingRate` Successful response.
   * @response `default` `Error` Error response.
   */
  export namespace PostShippingRates {
    export type RequestParams = {};
    export type RequestQuery = {};
    export type RequestBody = {
      delivery_estimate?: {
        maximum?: { unit: "business_day" | "day" | "hour" | "month" | "week"; value: number };
        minimum?: { unit: "business_day" | "day" | "hour" | "month" | "week"; value: number };
      };
      display_name: string;
      expand?: string[];
      fixed_amount?: { amount: number; currency: string };
      metadata?: Record<string, string>;
      tax_behavior?: "exclusive" | "inclusive" | "unspecified";
      tax_code?: string;
      type?: "fixed_amount";
    };
    export type RequestHeaders = {};
    export type ResponseBody = ShippingRate;
  }
  /**
   * @description <p>Returns the shipping rate object with the given ID.</p>
   * @name GetShippingRatesShippingRateToken
   * @request GET:/v1/shipping_rates/{shipping_rate_token}
   * @secure
   * @response `200` `ShippingRate` Successful response.
   * @response `default` `Error` Error response.
   */
  export namespace GetShippingRatesShippingRateToken {
    export type RequestParams = { shippingRateToken: string };
    export type RequestQuery = { expand?: string[] };
    export type RequestBody = CardMandatePaymentMethodDetails;
    export type RequestHeaders = {};
    export type ResponseBody = ShippingRate;
  }
  /**
   * @description <p>Updates an existing shipping rate object.</p>
   * @name PostShippingRatesShippingRateToken
   * @request POST:/v1/shipping_rates/{shipping_rate_token}
   * @secure
   * @response `200` `ShippingRate` Successful response.
   * @response `default` `Error` Error response.
   */
  export namespace PostShippingRatesShippingRateToken {
    export type RequestParams = { shippingRateToken: string };
    export type RequestQuery = {};
    export type RequestBody = {
      active?: boolean;
      expand?: string[];
      metadata?: Record<string, string> | "" | (Record<string, string> & "");
    };
    export type RequestHeaders = {};
    export type ResponseBody = ShippingRate;
  }
  /**
   * @description <p>Returns a list of scheduled query runs.</p>
   * @name GetSigmaScheduledQueryRuns
   * @request GET:/v1/sigma/scheduled_query_runs
   * @secure
   * @response `200` `{ data: (ScheduledQueryRun)[], has_more: boolean, object: "list", url: string }` Successful response.
   * @response `default` `Error` Error response.
   */
  export namespace GetSigmaScheduledQueryRuns {
    export type RequestParams = {};
    export type RequestQuery = { ending_before?: string; expand?: string[]; limit?: number; starting_after?: string };
    export type RequestBody = CardMandatePaymentMethodDetails;
    export type RequestHeaders = {};
    export type ResponseBody = { data: ScheduledQueryRun[]; has_more: boolean; object: "list"; url: string };
  }
  /**
   * @description <p>Retrieves the details of an scheduled query run.</p>
   * @name GetSigmaScheduledQueryRunsScheduledQueryRun
   * @request GET:/v1/sigma/scheduled_query_runs/{scheduled_query_run}
   * @secure
   * @response `200` `ScheduledQueryRun` Successful response.
   * @response `default` `Error` Error response.
   */
  export namespace GetSigmaScheduledQueryRunsScheduledQueryRun {
    export type RequestParams = { scheduledQueryRun: string };
    export type RequestQuery = { expand?: string[] };
    export type RequestBody = CardMandatePaymentMethodDetails;
    export type RequestHeaders = {};
    export type ResponseBody = ScheduledQueryRun;
  }
  /**
   * @description <p>Returns a list of your SKUs. The SKUs are returned sorted by creation date, with the most recently created SKUs appearing first.</p>
   * @name GetSkus
   * @request GET:/v1/skus
   * @secure
   * @response `200` `{ data: (Sku)[], has_more: boolean, object: "list", url: string }` Successful response.
   * @response `default` `Error` Error response.
   */
  export namespace GetSkus {
    export type RequestParams = {};
    export type RequestQuery = {
      active?: boolean;
      attributes?: Record<string, string>;
      ending_before?: string;
      expand?: string[];
      ids?: string[];
      in_stock?: boolean;
      limit?: number;
      product?: string;
      starting_after?: string;
    };
    export type RequestBody = CardMandatePaymentMethodDetails;
    export type RequestHeaders = {};
    export type ResponseBody = { data: Sku[]; has_more: boolean; object: "list"; url: string };
  }
  /**
   * @description <p>Creates a new SKU associated with a product.</p>
   * @name PostSkus
   * @request POST:/v1/skus
   * @secure
   * @response `200` `Sku` Successful response.
   * @response `default` `Error` Error response.
   */
  export namespace PostSkus {
    export type RequestParams = {};
    export type RequestQuery = {};
    export type RequestBody = {
      active?: boolean;
      attributes?: Record<string, string>;
      currency: string;
      expand?: string[];
      id?: string;
      image?: string;
      inventory: {
        quantity?: number;
        type: "bucket" | "finite" | "infinite";
        value?: "" | "in_stock" | "limited" | "out_of_stock";
      };
      metadata?: Record<string, string>;
      package_dimensions?: { height: number; length: number; weight: number; width: number };
      price: number;
      product: string;
    };
    export type RequestHeaders = {};
    export type ResponseBody = Sku;
  }
  /**
   * @description <p>Delete a SKU. Deleting a SKU is only possible until it has been used in an order.</p>
   * @name DeleteSkusId
   * @request DELETE:/v1/skus/{id}
   * @secure
   * @response `200` `DeletedSku` Successful response.
   * @response `default` `Error` Error response.
   */
  export namespace DeleteSkusId {
    export type RequestParams = { id: string };
    export type RequestQuery = {};
    export type RequestBody = CardMandatePaymentMethodDetails;
    export type RequestHeaders = {};
    export type ResponseBody = DeletedSku;
  }
  /**
   * @description <p>Retrieves the details of an existing SKU. Supply the unique SKU identifier from either a SKU creation request or from the product, and Stripe will return the corresponding SKU information.</p>
   * @name GetSkusId
   * @request GET:/v1/skus/{id}
   * @secure
   * @response `200` `(Sku | DeletedSku | (Sku & DeletedSku))` Successful response.
   * @response `default` `Error` Error response.
   */
  export namespace GetSkusId {
    export type RequestParams = { id: string };
    export type RequestQuery = { expand?: string[] };
    export type RequestBody = CardMandatePaymentMethodDetails;
    export type RequestHeaders = {};
    export type ResponseBody = Sku | DeletedSku | (Sku & DeletedSku);
  }
  /**
   * @description <p>Updates the specific SKU by setting the values of the parameters passed. Any parameters not provided will be left unchanged.</p> <p>Note that a SKU’s <code>attributes</code> are not editable. Instead, you would need to deactivate the existing SKU and create a new one with the new attribute values.</p>
   * @name PostSkusId
   * @request POST:/v1/skus/{id}
   * @secure
   * @response `200` `Sku` Successful response.
   * @response `default` `Error` Error response.
   */
  export namespace PostSkusId {
    export type RequestParams = { id: string };
    export type RequestQuery = {};
    export type RequestBody = {
      active?: boolean;
      attributes?: Record<string, string>;
      currency?: string;
      expand?: string[];
      image?: string;
      inventory?: {
        quantity?: number;
        type?: "bucket" | "finite" | "infinite";
        value?: "" | "in_stock" | "limited" | "out_of_stock";
      };
      metadata?: Record<string, string> | "" | (Record<string, string> & "");
      package_dimensions?:
        | { height: number; length: number; weight: number; width: number }
        | ""
        | ({ height: number; length: number; weight: number; width: number } & "");
      price?: number;
      product?: string;
    };
    export type RequestHeaders = {};
    export type ResponseBody = Sku;
  }
  /**
   * @description <p>Creates a new source object.</p>
   * @name PostSources
   * @request POST:/v1/sources
   * @secure
   * @response `200` `Source` Successful response.
   * @response `default` `Error` Error response.
   */
  export namespace PostSources {
    export type RequestParams = {};
    export type RequestQuery = {};
    export type RequestBody = {
      amount?: number;
      currency?: string;
      customer?: string;
      expand?: string[];
      flow?: "code_verification" | "none" | "receiver" | "redirect";
      mandate?: {
        acceptance?: {
          date?: number;
          ip?: string;
          offline?: { contact_email: string };
          online?: { date?: number; ip?: string; user_agent?: string };
          status: "accepted" | "pending" | "refused" | "revoked";
          type?: "offline" | "online";
          user_agent?: string;
        };
        amount?: number | "";
        currency?: string;
        interval?: "one_time" | "scheduled" | "variable";
        notification_method?: "deprecated_none" | "email" | "manual" | "none" | "stripe_email";
      };
      metadata?: Record<string, string>;
      original_source?: string;
      owner?: {
        address?: {
          city?: string;
          country?: string;
          line1?: string;
          line2?: string;
          postal_code?: string;
          state?: string;
        };
        email?: string;
        name?: string;
        phone?: string;
      };
      receiver?: { refund_attributes_method?: "email" | "manual" | "none" };
      redirect?: { return_url: string };
      source_order?: {
        items?: {
          amount?: number;
          currency?: string;
          description?: string;
          parent?: string;
          quantity?: number;
          type?: "discount" | "shipping" | "sku" | "tax";
        }[];
        shipping?: {
          address: {
            city?: string;
            country?: string;
            line1: string;
            line2?: string;
            postal_code?: string;
            state?: string;
          };
          carrier?: string;
          name?: string;
          phone?: string;
          tracking_number?: string;
        };
      };
      statement_descriptor?: string;
      token?: string;
      type?: string;
      usage?: "reusable" | "single_use";
    };
    export type RequestHeaders = {};
    export type ResponseBody = Source;
  }
  /**
   * @description <p>Retrieves an existing source object. Supply the unique source ID from a source creation request and Stripe will return the corresponding up-to-date source object information.</p>
   * @name GetSourcesSource
   * @request GET:/v1/sources/{source}
   * @secure
   * @response `200` `Source` Successful response.
   * @response `default` `Error` Error response.
   */
  export namespace GetSourcesSource {
    export type RequestParams = { source: string };
    export type RequestQuery = { client_secret?: string; expand?: string[] };
    export type RequestBody = CardMandatePaymentMethodDetails;
    export type RequestHeaders = {};
    export type ResponseBody = Source;
  }
  /**
   * @description <p>Updates the specified source by setting the values of the parameters passed. Any parameters not provided will be left unchanged.</p> <p>This request accepts the <code>metadata</code> and <code>owner</code> as arguments. It is also possible to update type specific information for selected payment methods. Please refer to our <a href="/docs/sources">payment method guides</a> for more detail.</p>
   * @name PostSourcesSource
   * @request POST:/v1/sources/{source}
   * @secure
   * @response `200` `Source` Successful response.
   * @response `default` `Error` Error response.
   */
  export namespace PostSourcesSource {
    export type RequestParams = { source: string };
    export type RequestQuery = {};
    export type RequestBody = {
      amount?: number;
      expand?: string[];
      mandate?: {
        acceptance?: {
          date?: number;
          ip?: string;
          offline?: { contact_email: string };
          online?: { date?: number; ip?: string; user_agent?: string };
          status: "accepted" | "pending" | "refused" | "revoked";
          type?: "offline" | "online";
          user_agent?: string;
        };
        amount?: number | "";
        currency?: string;
        interval?: "one_time" | "scheduled" | "variable";
        notification_method?: "deprecated_none" | "email" | "manual" | "none" | "stripe_email";
      };
      metadata?: Record<string, string> | "" | (Record<string, string> & "");
      owner?: {
        address?: {
          city?: string;
          country?: string;
          line1?: string;
          line2?: string;
          postal_code?: string;
          state?: string;
        };
        email?: string;
        name?: string;
        phone?: string;
      };
      source_order?: {
        items?: {
          amount?: number;
          currency?: string;
          description?: string;
          parent?: string;
          quantity?: number;
          type?: "discount" | "shipping" | "sku" | "tax";
        }[];
        shipping?: {
          address: {
            city?: string;
            country?: string;
            line1: string;
            line2?: string;
            postal_code?: string;
            state?: string;
          };
          carrier?: string;
          name?: string;
          phone?: string;
          tracking_number?: string;
        };
      };
    };
    export type RequestHeaders = {};
    export type ResponseBody = Source;
  }
  /**
   * @description <p>Retrieves a new Source MandateNotification.</p>
   * @name GetSourcesSourceMandateNotificationsMandateNotification
   * @request GET:/v1/sources/{source}/mandate_notifications/{mandate_notification}
   * @secure
   * @response `200` `SourceMandateNotification` Successful response.
   * @response `default` `Error` Error response.
   */
  export namespace GetSourcesSourceMandateNotificationsMandateNotification {
    export type RequestParams = { mandateNotification: string; source: string };
    export type RequestQuery = { expand?: string[] };
    export type RequestBody = CardMandatePaymentMethodDetails;
    export type RequestHeaders = {};
    export type ResponseBody = SourceMandateNotification;
  }
  /**
   * @description <p>List source transactions for a given source.</p>
   * @name GetSourcesSourceSourceTransactions
   * @request GET:/v1/sources/{source}/source_transactions
   * @secure
   * @response `200` `{ data: (SourceTransaction)[], has_more: boolean, object: "list", url: string }` Successful response.
   * @response `default` `Error` Error response.
   */
  export namespace GetSourcesSourceSourceTransactions {
    export type RequestParams = { source: string };
    export type RequestQuery = { ending_before?: string; expand?: string[]; limit?: number; starting_after?: string };
    export type RequestBody = CardMandatePaymentMethodDetails;
    export type RequestHeaders = {};
    export type ResponseBody = { data: SourceTransaction[]; has_more: boolean; object: "list"; url: string };
  }
  /**
   * @description <p>Retrieve an existing source transaction object. Supply the unique source ID from a source creation request and the source transaction ID and Stripe will return the corresponding up-to-date source object information.</p>
   * @name GetSourcesSourceSourceTransactionsSourceTransaction
   * @request GET:/v1/sources/{source}/source_transactions/{source_transaction}
   * @secure
   * @response `200` `SourceTransaction` Successful response.
   * @response `default` `Error` Error response.
   */
  export namespace GetSourcesSourceSourceTransactionsSourceTransaction {
    export type RequestParams = { source: string; sourceTransaction: string };
    export type RequestQuery = { expand?: string[] };
    export type RequestBody = CardMandatePaymentMethodDetails;
    export type RequestHeaders = {};
    export type ResponseBody = SourceTransaction;
  }
  /**
   * @description <p>Verify a given source.</p>
   * @name PostSourcesSourceVerify
   * @request POST:/v1/sources/{source}/verify
   * @secure
   * @response `200` `Source` Successful response.
   * @response `default` `Error` Error response.
   */
  export namespace PostSourcesSourceVerify {
    export type RequestParams = { source: string };
    export type RequestQuery = {};
    export type RequestBody = { expand?: string[]; values: string[] };
    export type RequestHeaders = {};
    export type ResponseBody = Source;
  }
  /**
   * @description <p>Returns a list of your subscription items for a given subscription.</p>
   * @name GetSubscriptionItems
   * @request GET:/v1/subscription_items
   * @secure
   * @response `200` `{ data: (SubscriptionItem)[], has_more: boolean, object: "list", url: string }` Successful response.
   * @response `default` `Error` Error response.
   */
  export namespace GetSubscriptionItems {
    export type RequestParams = {};
    export type RequestQuery = {
      ending_before?: string;
      expand?: string[];
      limit?: number;
      starting_after?: string;
      subscription: string;
    };
    export type RequestBody = CardMandatePaymentMethodDetails;
    export type RequestHeaders = {};
    export type ResponseBody = { data: SubscriptionItem[]; has_more: boolean; object: "list"; url: string };
  }
  /**
   * @description <p>Adds a new item to an existing subscription. No existing items will be changed or replaced.</p>
   * @name PostSubscriptionItems
   * @request POST:/v1/subscription_items
   * @secure
   * @response `200` `SubscriptionItem` Successful response.
   * @response `default` `Error` Error response.
   */
  export namespace PostSubscriptionItems {
    export type RequestParams = {};
    export type RequestQuery = {};
    export type RequestBody = {
      billing_thresholds?: { usage_gte: number } | "" | ({ usage_gte: number } & "");
      expand?: string[];
      metadata?: Record<string, string>;
      payment_behavior?: "allow_incomplete" | "default_incomplete" | "error_if_incomplete" | "pending_if_incomplete";
      price?: string;
      price_data?: {
        currency: string;
        product: string;
        recurring: { interval: "day" | "month" | "week" | "year"; interval_count?: number };
        tax_behavior?: "exclusive" | "inclusive" | "unspecified";
        unit_amount?: number;
        unit_amount_decimal?: string;
      };
      proration_behavior?: "always_invoice" | "create_prorations" | "none";
      proration_date?: number;
      quantity?: number;
      subscription: string;
      tax_rates?: string[] | "" | (string[] & "");
    };
    export type RequestHeaders = {};
    export type ResponseBody = SubscriptionItem;
  }
  /**
   * @description <p>Deletes an item from the subscription. Removing a subscription item from a subscription will not cancel the subscription.</p>
   * @name DeleteSubscriptionItemsItem
   * @request DELETE:/v1/subscription_items/{item}
   * @secure
   * @response `200` `DeletedSubscriptionItem` Successful response.
   * @response `default` `Error` Error response.
   */
  export namespace DeleteSubscriptionItemsItem {
    export type RequestParams = { item: string };
    export type RequestQuery = {};
    export type RequestBody = {
      clear_usage?: boolean;
      proration_behavior?: "always_invoice" | "create_prorations" | "none";
      proration_date?: number;
    };
    export type RequestHeaders = {};
    export type ResponseBody = DeletedSubscriptionItem;
  }
  /**
   * @description <p>Retrieves the subscription item with the given ID.</p>
   * @name GetSubscriptionItemsItem
   * @request GET:/v1/subscription_items/{item}
   * @secure
   * @response `200` `SubscriptionItem` Successful response.
   * @response `default` `Error` Error response.
   */
  export namespace GetSubscriptionItemsItem {
    export type RequestParams = { item: string };
    export type RequestQuery = { expand?: string[] };
    export type RequestBody = CardMandatePaymentMethodDetails;
    export type RequestHeaders = {};
    export type ResponseBody = SubscriptionItem;
  }
  /**
   * @description <p>Updates the plan or quantity of an item on a current subscription.</p>
   * @name PostSubscriptionItemsItem
   * @request POST:/v1/subscription_items/{item}
   * @secure
   * @response `200` `SubscriptionItem` Successful response.
   * @response `default` `Error` Error response.
   */
  export namespace PostSubscriptionItemsItem {
    export type RequestParams = { item: string };
    export type RequestQuery = {};
    export type RequestBody = {
      billing_thresholds?: { usage_gte: number } | "" | ({ usage_gte: number } & "");
      expand?: string[];
      metadata?: Record<string, string> | "" | (Record<string, string> & "");
      off_session?: boolean;
      payment_behavior?: "allow_incomplete" | "default_incomplete" | "error_if_incomplete" | "pending_if_incomplete";
      price?: string;
      price_data?: {
        currency: string;
        product: string;
        recurring: { interval: "day" | "month" | "week" | "year"; interval_count?: number };
        tax_behavior?: "exclusive" | "inclusive" | "unspecified";
        unit_amount?: number;
        unit_amount_decimal?: string;
      };
      proration_behavior?: "always_invoice" | "create_prorations" | "none";
      proration_date?: number;
      quantity?: number;
      tax_rates?: string[] | "" | (string[] & "");
    };
    export type RequestHeaders = {};
    export type ResponseBody = SubscriptionItem;
  }
  /**
   * @description <p>For the specified subscription item, returns a list of summary objects. Each object in the list provides usage information that’s been summarized from multiple usage records and over a subscription billing period (e.g., 15 usage records in the month of September).</p> <p>The list is sorted in reverse-chronological order (newest first). The first list item represents the most current usage period that hasn’t ended yet. Since new usage records can still be added, the returned summary information for the subscription item’s ID should be seen as unstable until the subscription billing period ends.</p>
   * @name GetSubscriptionItemsSubscriptionItemUsageRecordSummaries
   * @request GET:/v1/subscription_items/{subscription_item}/usage_record_summaries
   * @secure
   * @response `200` `{ data: (UsageRecordSummary)[], has_more: boolean, object: "list", url: string }` Successful response.
   * @response `default` `Error` Error response.
   */
  export namespace GetSubscriptionItemsSubscriptionItemUsageRecordSummaries {
    export type RequestParams = { subscriptionItem: string };
    export type RequestQuery = { ending_before?: string; expand?: string[]; limit?: number; starting_after?: string };
    export type RequestBody = CardMandatePaymentMethodDetails;
    export type RequestHeaders = {};
    export type ResponseBody = { data: UsageRecordSummary[]; has_more: boolean; object: "list"; url: string };
  }
  /**
   * @description <p>Creates a usage record for a specified subscription item and date, and fills it with a quantity.</p> <p>Usage records provide <code>quantity</code> information that Stripe uses to track how much a customer is using your service. With usage information and the pricing model set up by the <a href="https://stripe.com/docs/billing/subscriptions/metered-billing">metered billing</a> plan, Stripe helps you send accurate invoices to your customers.</p> <p>The default calculation for usage is to add up all the <code>quantity</code> values of the usage records within a billing period. You can change this default behavior with the billing plan’s <code>aggregate_usage</code> <a href="/docs/api/plans/create#create_plan-aggregate_usage">parameter</a>. When there is more than one usage record with the same timestamp, Stripe adds the <code>quantity</code> values together. In most cases, this is the desired resolution, however, you can change this behavior with the <code>action</code> parameter.</p> <p>The default pricing model for metered billing is <a href="/docs/api/plans/object#plan_object-billing_scheme">per-unit pricing</a>. For finer granularity, you can configure metered billing to have a <a href="https://stripe.com/docs/billing/subscriptions/tiers">tiered pricing</a> model.</p>
   * @name PostSubscriptionItemsSubscriptionItemUsageRecords
   * @request POST:/v1/subscription_items/{subscription_item}/usage_records
   * @secure
   * @response `200` `UsageRecord` Successful response.
   * @response `default` `Error` Error response.
   */
  export namespace PostSubscriptionItemsSubscriptionItemUsageRecords {
    export type RequestParams = { subscriptionItem: string };
    export type RequestQuery = {};
    export type RequestBody = {
      action?: "increment" | "set";
      expand?: string[];
      quantity: number;
      timestamp?: "now" | number;
    };
    export type RequestHeaders = {};
    export type ResponseBody = UsageRecord;
  }
  /**
   * @description <p>Retrieves the list of your subscription schedules.</p>
   * @name GetSubscriptionSchedules
   * @request GET:/v1/subscription_schedules
   * @secure
   * @response `200` `{ data: (SubscriptionSchedule)[], has_more: boolean, object: "list", url: string }` Successful response.
   * @response `default` `Error` Error response.
   */
  export namespace GetSubscriptionSchedules {
    export type RequestParams = {};
    export type RequestQuery = {
      canceled_at?: { gt?: number; gte?: number; lt?: number; lte?: number } | number;
      completed_at?: { gt?: number; gte?: number; lt?: number; lte?: number } | number;
      created?: { gt?: number; gte?: number; lt?: number; lte?: number } | number;
      customer?: string;
      ending_before?: string;
      expand?: string[];
      limit?: number;
      released_at?: { gt?: number; gte?: number; lt?: number; lte?: number } | number;
      scheduled?: boolean;
      starting_after?: string;
    };
    export type RequestBody = CardMandatePaymentMethodDetails;
    export type RequestHeaders = {};
    export type ResponseBody = { data: SubscriptionSchedule[]; has_more: boolean; object: "list"; url: string };
  }
  /**
   * @description <p>Creates a new subscription schedule object. Each customer can have up to 500 active or scheduled subscriptions.</p>
   * @name PostSubscriptionSchedules
   * @request POST:/v1/subscription_schedules
   * @secure
   * @response `200` `SubscriptionSchedule` Successful response.
   * @response `default` `Error` Error response.
   */
  export namespace PostSubscriptionSchedules {
    export type RequestParams = {};
    export type RequestQuery = {};
    export type RequestBody = {
      customer?: string;
      default_settings?: {
        application_fee_percent?: number;
        automatic_tax?: { enabled: boolean };
        billing_cycle_anchor?: "automatic" | "phase_start";
        billing_thresholds?:
          | { amount_gte?: number; reset_billing_cycle_anchor?: boolean }
          | ""
          | ({ amount_gte?: number; reset_billing_cycle_anchor?: boolean } & "");
        collection_method?: "charge_automatically" | "send_invoice";
        default_payment_method?: string;
        invoice_settings?: { days_until_due?: number };
        transfer_data?:
          | { amount_percent?: number; destination: string }
          | ""
          | ({ amount_percent?: number; destination: string } & "");
      };
      end_behavior?: "cancel" | "none" | "release" | "renew";
      expand?: string[];
      from_subscription?: string;
      metadata?: Record<string, string> | "" | (Record<string, string> & "");
      phases?: {
        add_invoice_items?: {
          price?: string;
          price_data?: {
            currency: string;
            product: string;
            tax_behavior?: "exclusive" | "inclusive" | "unspecified";
            unit_amount?: number;
            unit_amount_decimal?: string;
          };
          quantity?: number;
          tax_rates?: string[] | "" | (string[] & "");
        }[];
        application_fee_percent?: number;
        automatic_tax?: { enabled: boolean };
        billing_cycle_anchor?: "automatic" | "phase_start";
        billing_thresholds?:
          | { amount_gte?: number; reset_billing_cycle_anchor?: boolean }
          | ""
          | ({ amount_gte?: number; reset_billing_cycle_anchor?: boolean } & "");
        collection_method?: "charge_automatically" | "send_invoice";
        coupon?: string;
        default_payment_method?: string;
        default_tax_rates?: string[] | "" | (string[] & "");
        end_date?: number;
        invoice_settings?: { days_until_due?: number };
        items: {
          billing_thresholds?: { usage_gte: number } | "" | ({ usage_gte: number } & "");
          price?: string;
          price_data?: {
            currency: string;
            product: string;
            recurring: { interval: "day" | "month" | "week" | "year"; interval_count?: number };
            tax_behavior?: "exclusive" | "inclusive" | "unspecified";
            unit_amount?: number;
            unit_amount_decimal?: string;
          };
          quantity?: number;
          tax_rates?: string[] | "" | (string[] & "");
        }[];
        iterations?: number;
        proration_behavior?: "always_invoice" | "create_prorations" | "none";
        transfer_data?: { amount_percent?: number; destination: string };
        trial?: boolean;
        trial_end?: number;
      }[];
      start_date?: number | "now";
    };
    export type RequestHeaders = {};
    export type ResponseBody = SubscriptionSchedule;
  }
  /**
   * @description <p>Retrieves the details of an existing subscription schedule. You only need to supply the unique subscription schedule identifier that was returned upon subscription schedule creation.</p>
   * @name GetSubscriptionSchedulesSchedule
   * @request GET:/v1/subscription_schedules/{schedule}
   * @secure
   * @response `200` `SubscriptionSchedule` Successful response.
   * @response `default` `Error` Error response.
   */
  export namespace GetSubscriptionSchedulesSchedule {
    export type RequestParams = { schedule: string };
    export type RequestQuery = { expand?: string[] };
    export type RequestBody = CardMandatePaymentMethodDetails;
    export type RequestHeaders = {};
    export type ResponseBody = SubscriptionSchedule;
  }
  /**
   * @description <p>Updates an existing subscription schedule.</p>
   * @name PostSubscriptionSchedulesSchedule
   * @request POST:/v1/subscription_schedules/{schedule}
   * @secure
   * @response `200` `SubscriptionSchedule` Successful response.
   * @response `default` `Error` Error response.
   */
  export namespace PostSubscriptionSchedulesSchedule {
    export type RequestParams = { schedule: string };
    export type RequestQuery = {};
    export type RequestBody = {
      default_settings?: {
        application_fee_percent?: number;
        automatic_tax?: { enabled: boolean };
        billing_cycle_anchor?: "automatic" | "phase_start";
        billing_thresholds?:
          | { amount_gte?: number; reset_billing_cycle_anchor?: boolean }
          | ""
          | ({ amount_gte?: number; reset_billing_cycle_anchor?: boolean } & "");
        collection_method?: "charge_automatically" | "send_invoice";
        default_payment_method?: string;
        invoice_settings?: { days_until_due?: number };
        transfer_data?:
          | { amount_percent?: number; destination: string }
          | ""
          | ({ amount_percent?: number; destination: string } & "");
      };
      end_behavior?: "cancel" | "none" | "release" | "renew";
      expand?: string[];
      metadata?: Record<string, string> | "" | (Record<string, string> & "");
      phases?: {
        add_invoice_items?: {
          price?: string;
          price_data?: {
            currency: string;
            product: string;
            tax_behavior?: "exclusive" | "inclusive" | "unspecified";
            unit_amount?: number;
            unit_amount_decimal?: string;
          };
          quantity?: number;
          tax_rates?: string[] | "" | (string[] & "");
        }[];
        application_fee_percent?: number;
        automatic_tax?: { enabled: boolean };
        billing_cycle_anchor?: "automatic" | "phase_start";
        billing_thresholds?:
          | { amount_gte?: number; reset_billing_cycle_anchor?: boolean }
          | ""
          | ({ amount_gte?: number; reset_billing_cycle_anchor?: boolean } & "");
        collection_method?: "charge_automatically" | "send_invoice";
        coupon?: string;
        default_payment_method?: string;
        default_tax_rates?: string[] | "" | (string[] & "");
        end_date?: number | "now";
        invoice_settings?: { days_until_due?: number };
        items: {
          billing_thresholds?: { usage_gte: number } | "" | ({ usage_gte: number } & "");
          price?: string;
          price_data?: {
            currency: string;
            product: string;
            recurring: { interval: "day" | "month" | "week" | "year"; interval_count?: number };
            tax_behavior?: "exclusive" | "inclusive" | "unspecified";
            unit_amount?: number;
            unit_amount_decimal?: string;
          };
          quantity?: number;
          tax_rates?: string[] | "" | (string[] & "");
        }[];
        iterations?: number;
        proration_behavior?: "always_invoice" | "create_prorations" | "none";
        start_date?: number | "now";
        transfer_data?: { amount_percent?: number; destination: string };
        trial?: boolean;
        trial_end?: number | "now";
      }[];
      proration_behavior?: "always_invoice" | "create_prorations" | "none";
    };
    export type RequestHeaders = {};
    export type ResponseBody = SubscriptionSchedule;
  }
  /**
   * @description <p>Cancels a subscription schedule and its associated subscription immediately (if the subscription schedule has an active subscription). A subscription schedule can only be canceled if its status is <code>not_started</code> or <code>active</code>.</p>
   * @name PostSubscriptionSchedulesScheduleCancel
   * @request POST:/v1/subscription_schedules/{schedule}/cancel
   * @secure
   * @response `200` `SubscriptionSchedule` Successful response.
   * @response `default` `Error` Error response.
   */
  export namespace PostSubscriptionSchedulesScheduleCancel {
    export type RequestParams = { schedule: string };
    export type RequestQuery = {};
    export type RequestBody = { expand?: string[]; invoice_now?: boolean; prorate?: boolean };
    export type RequestHeaders = {};
    export type ResponseBody = SubscriptionSchedule;
  }
  /**
   * @description <p>Releases the subscription schedule immediately, which will stop scheduling of its phases, but leave any existing subscription in place. A schedule can only be released if its status is <code>not_started</code> or <code>active</code>. If the subscription schedule is currently associated with a subscription, releasing it will remove its <code>subscription</code> property and set the subscription’s ID to the <code>released_subscription</code> property.</p>
   * @name PostSubscriptionSchedulesScheduleRelease
   * @request POST:/v1/subscription_schedules/{schedule}/release
   * @secure
   * @response `200` `SubscriptionSchedule` Successful response.
   * @response `default` `Error` Error response.
   */
  export namespace PostSubscriptionSchedulesScheduleRelease {
    export type RequestParams = { schedule: string };
    export type RequestQuery = {};
    export type RequestBody = { expand?: string[]; preserve_cancel_date?: boolean };
    export type RequestHeaders = {};
    export type ResponseBody = SubscriptionSchedule;
  }
  /**
   * @description <p>By default, returns a list of subscriptions that have not been canceled. In order to list canceled subscriptions, specify <code>status=canceled</code>.</p>
   * @name GetSubscriptions
   * @request GET:/v1/subscriptions
   * @secure
   * @response `200` `{ data: (Subscription)[], has_more: boolean, object: "list", url: string }` Successful response.
   * @response `default` `Error` Error response.
   */
  export namespace GetSubscriptions {
    export type RequestParams = {};
    export type RequestQuery = {
      collection_method?: "charge_automatically" | "send_invoice";
      created?: { gt?: number; gte?: number; lt?: number; lte?: number } | number;
      current_period_end?: { gt?: number; gte?: number; lt?: number; lte?: number } | number;
      current_period_start?: { gt?: number; gte?: number; lt?: number; lte?: number } | number;
      customer?: string;
      ending_before?: string;
      expand?: string[];
      limit?: number;
      price?: string;
      starting_after?: string;
      status?:
        | "active"
        | "all"
        | "canceled"
        | "ended"
        | "incomplete"
        | "incomplete_expired"
        | "past_due"
        | "trialing"
        | "unpaid";
    };
    export type RequestBody = CardMandatePaymentMethodDetails;
    export type RequestHeaders = {};
    export type ResponseBody = { data: Subscription[]; has_more: boolean; object: "list"; url: string };
  }
  /**
   * @description <p>Creates a new subscription on an existing customer. Each customer can have up to 500 active or scheduled subscriptions.</p>
   * @name PostSubscriptions
   * @request POST:/v1/subscriptions
   * @secure
   * @response `200` `Subscription` Successful response.
   * @response `default` `Error` Error response.
   */
  export namespace PostSubscriptions {
    export type RequestParams = {};
    export type RequestQuery = {};
    export type RequestBody = {
      add_invoice_items?: {
        price?: string;
        price_data?: {
          currency: string;
          product: string;
          tax_behavior?: "exclusive" | "inclusive" | "unspecified";
          unit_amount?: number;
          unit_amount_decimal?: string;
        };
        quantity?: number;
        tax_rates?: string[] | "" | (string[] & "");
      }[];
      application_fee_percent?: number;
      automatic_tax?: { enabled: boolean };
      backdate_start_date?: number;
      billing_cycle_anchor?: number;
      billing_thresholds?:
        | { amount_gte?: number; reset_billing_cycle_anchor?: boolean }
        | ""
        | ({ amount_gte?: number; reset_billing_cycle_anchor?: boolean } & "");
      cancel_at?: number;
      cancel_at_period_end?: boolean;
      collection_method?: "charge_automatically" | "send_invoice";
      coupon?: string;
      customer: string;
      days_until_due?: number;
      default_payment_method?: string;
      default_source?: string;
      default_tax_rates?: string[] | "" | (string[] & "");
      expand?: string[];
      items?: {
        billing_thresholds?: { usage_gte: number } | "" | ({ usage_gte: number } & "");
        metadata?: Record<string, string>;
        price?: string;
        price_data?: {
          currency: string;
          product: string;
          recurring: { interval: "day" | "month" | "week" | "year"; interval_count?: number };
          tax_behavior?: "exclusive" | "inclusive" | "unspecified";
          unit_amount?: number;
          unit_amount_decimal?: string;
        };
        quantity?: number;
        tax_rates?: string[] | "" | (string[] & "");
      }[];
      metadata?: Record<string, string> | "" | (Record<string, string> & "");
      off_session?: boolean;
      payment_behavior?: "allow_incomplete" | "default_incomplete" | "error_if_incomplete" | "pending_if_incomplete";
      payment_settings?: {
        payment_method_options?: {
          acss_debit?:
            | {
                mandate_options?: { transaction_type?: "business" | "personal" };
                verification_method?: "automatic" | "instant" | "microdeposits";
              }
            | ""
            | ({
                mandate_options?: { transaction_type?: "business" | "personal" };
                verification_method?: "automatic" | "instant" | "microdeposits";
              } & "");
          bancontact?:
            | { preferred_language?: "de" | "en" | "fr" | "nl" }
            | ""
            | ({ preferred_language?: "de" | "en" | "fr" | "nl" } & "");
          card?:
            | {
                mandate_options?: { amount?: number; amount_type?: "fixed" | "maximum"; description?: string };
                request_three_d_secure?: "any" | "automatic";
              }
            | ""
            | ({
                mandate_options?: { amount?: number; amount_type?: "fixed" | "maximum"; description?: string };
                request_three_d_secure?: "any" | "automatic";
              } & "");
        };
        payment_method_types?:
          | (
              | "ach_credit_transfer"
              | "ach_debit"
              | "acss_debit"
              | "au_becs_debit"
              | "bacs_debit"
              | "bancontact"
              | "boleto"
              | "card"
              | "fpx"
              | "giropay"
              | "ideal"
              | "sepa_debit"
              | "sofort"
              | "wechat_pay"
            )[]
          | ""
          | ((
              | "ach_credit_transfer"
              | "ach_debit"
              | "acss_debit"
              | "au_becs_debit"
              | "bacs_debit"
              | "bancontact"
              | "boleto"
              | "card"
              | "fpx"
              | "giropay"
              | "ideal"
              | "sepa_debit"
              | "sofort"
              | "wechat_pay"
            )[] &
              "");
      };
      pending_invoice_item_interval?:
        | { interval: "day" | "month" | "week" | "year"; interval_count?: number }
        | ""
        | ({ interval: "day" | "month" | "week" | "year"; interval_count?: number } & "");
      promotion_code?: string;
      proration_behavior?: "always_invoice" | "create_prorations" | "none";
      transfer_data?: { amount_percent?: number; destination: string };
      trial_end?: "now" | number;
      trial_from_plan?: boolean;
      trial_period_days?: number;
    };
    export type RequestHeaders = {};
    export type ResponseBody = Subscription;
  }
  /**
   * @description <p>Cancels a customer’s subscription immediately. The customer will not be charged again for the subscription.</p> <p>Note, however, that any pending invoice items that you’ve created will still be charged for at the end of the period, unless manually <a href="#delete_invoiceitem">deleted</a>. If you’ve set the subscription to cancel at the end of the period, any pending prorations will also be left in place and collected at the end of the period. But if the subscription is set to cancel immediately, pending prorations will be removed.</p> <p>By default, upon subscription cancellation, Stripe will stop automatic collection of all finalized invoices for the customer. This is intended to prevent unexpected payment attempts after the customer has canceled a subscription. However, you can resume automatic collection of the invoices manually after subscription cancellation to have us proceed. Or, you could check for unpaid invoices before allowing the customer to cancel the subscription at all.</p>
   * @name DeleteSubscriptionsSubscriptionExposedId
   * @request DELETE:/v1/subscriptions/{subscription_exposed_id}
   * @secure
   * @response `200` `Subscription` Successful response.
   * @response `default` `Error` Error response.
   */
  export namespace DeleteSubscriptionsSubscriptionExposedId {
    export type RequestParams = { subscriptionExposedId: string };
    export type RequestQuery = {};
    export type RequestBody = { expand?: string[]; invoice_now?: boolean; prorate?: boolean };
    export type RequestHeaders = {};
    export type ResponseBody = Subscription;
  }
  /**
   * @description <p>Retrieves the subscription with the given ID.</p>
   * @name GetSubscriptionsSubscriptionExposedId
   * @request GET:/v1/subscriptions/{subscription_exposed_id}
   * @secure
   * @response `200` `Subscription` Successful response.
   * @response `default` `Error` Error response.
   */
  export namespace GetSubscriptionsSubscriptionExposedId {
    export type RequestParams = { subscriptionExposedId: string };
    export type RequestQuery = { expand?: string[] };
    export type RequestBody = CardMandatePaymentMethodDetails;
    export type RequestHeaders = {};
    export type ResponseBody = Subscription;
  }
  /**
   * @description <p>Updates an existing subscription on a customer to match the specified parameters. When changing plans or quantities, we will optionally prorate the price we charge next month to make up for any price changes. To preview how the proration will be calculated, use the <a href="#upcoming_invoice">upcoming invoice</a> endpoint.</p>
   * @name PostSubscriptionsSubscriptionExposedId
   * @request POST:/v1/subscriptions/{subscription_exposed_id}
   * @secure
   * @response `200` `Subscription` Successful response.
   * @response `default` `Error` Error response.
   */
  export namespace PostSubscriptionsSubscriptionExposedId {
    export type RequestParams = { subscriptionExposedId: string };
    export type RequestQuery = {};
    export type RequestBody = {
      add_invoice_items?: {
        price?: string;
        price_data?: {
          currency: string;
          product: string;
          tax_behavior?: "exclusive" | "inclusive" | "unspecified";
          unit_amount?: number;
          unit_amount_decimal?: string;
        };
        quantity?: number;
        tax_rates?: string[] | "" | (string[] & "");
      }[];
      application_fee_percent?: number;
      automatic_tax?: { enabled: boolean };
      billing_cycle_anchor?: "now" | "unchanged";
      billing_thresholds?:
        | { amount_gte?: number; reset_billing_cycle_anchor?: boolean }
        | ""
        | ({ amount_gte?: number; reset_billing_cycle_anchor?: boolean } & "");
      cancel_at?: number | "";
      cancel_at_period_end?: boolean;
      collection_method?: "charge_automatically" | "send_invoice";
      coupon?: string;
      days_until_due?: number;
      default_payment_method?: string;
      default_source?: string;
      default_tax_rates?: string[] | "" | (string[] & "");
      expand?: string[];
      items?: {
        billing_thresholds?: { usage_gte: number } | "" | ({ usage_gte: number } & "");
        clear_usage?: boolean;
        deleted?: boolean;
        id?: string;
        metadata?: Record<string, string> | "" | (Record<string, string> & "");
        price?: string;
        price_data?: {
          currency: string;
          product: string;
          recurring: { interval: "day" | "month" | "week" | "year"; interval_count?: number };
          tax_behavior?: "exclusive" | "inclusive" | "unspecified";
          unit_amount?: number;
          unit_amount_decimal?: string;
        };
        quantity?: number;
        tax_rates?: string[] | "" | (string[] & "");
      }[];
      metadata?: Record<string, string> | "" | (Record<string, string> & "");
      off_session?: boolean;
      pause_collection?:
        | { behavior: "keep_as_draft" | "mark_uncollectible" | "void"; resumes_at?: number }
        | ""
        | ({ behavior: "keep_as_draft" | "mark_uncollectible" | "void"; resumes_at?: number } & "");
      payment_behavior?: "allow_incomplete" | "default_incomplete" | "error_if_incomplete" | "pending_if_incomplete";
      payment_settings?: {
        payment_method_options?: {
          acss_debit?:
            | {
                mandate_options?: { transaction_type?: "business" | "personal" };
                verification_method?: "automatic" | "instant" | "microdeposits";
              }
            | ""
            | ({
                mandate_options?: { transaction_type?: "business" | "personal" };
                verification_method?: "automatic" | "instant" | "microdeposits";
              } & "");
          bancontact?:
            | { preferred_language?: "de" | "en" | "fr" | "nl" }
            | ""
            | ({ preferred_language?: "de" | "en" | "fr" | "nl" } & "");
          card?:
            | {
                mandate_options?: { amount?: number; amount_type?: "fixed" | "maximum"; description?: string };
                request_three_d_secure?: "any" | "automatic";
              }
            | ""
            | ({
                mandate_options?: { amount?: number; amount_type?: "fixed" | "maximum"; description?: string };
                request_three_d_secure?: "any" | "automatic";
              } & "");
        };
        payment_method_types?:
          | (
              | "ach_credit_transfer"
              | "ach_debit"
              | "acss_debit"
              | "au_becs_debit"
              | "bacs_debit"
              | "bancontact"
              | "boleto"
              | "card"
              | "fpx"
              | "giropay"
              | "ideal"
              | "sepa_debit"
              | "sofort"
              | "wechat_pay"
            )[]
          | ""
          | ((
              | "ach_credit_transfer"
              | "ach_debit"
              | "acss_debit"
              | "au_becs_debit"
              | "bacs_debit"
              | "bancontact"
              | "boleto"
              | "card"
              | "fpx"
              | "giropay"
              | "ideal"
              | "sepa_debit"
              | "sofort"
              | "wechat_pay"
            )[] &
              "");
      };
      pending_invoice_item_interval?:
        | { interval: "day" | "month" | "week" | "year"; interval_count?: number }
        | ""
        | ({ interval: "day" | "month" | "week" | "year"; interval_count?: number } & "");
      promotion_code?: string;
      proration_behavior?: "always_invoice" | "create_prorations" | "none";
      proration_date?: number;
      transfer_data?:
        | { amount_percent?: number; destination: string }
        | ""
        | ({ amount_percent?: number; destination: string } & "");
      trial_end?: "now" | number;
      trial_from_plan?: boolean;
    };
    export type RequestHeaders = {};
    export type ResponseBody = Subscription;
  }
  /**
   * @description <p>Removes the currently applied discount on a subscription.</p>
   * @name DeleteSubscriptionsSubscriptionExposedIdDiscount
   * @request DELETE:/v1/subscriptions/{subscription_exposed_id}/discount
   * @secure
   * @response `200` `DeletedDiscount` Successful response.
   * @response `default` `Error` Error response.
   */
  export namespace DeleteSubscriptionsSubscriptionExposedIdDiscount {
    export type RequestParams = { subscriptionExposedId: string };
    export type RequestQuery = {};
    export type RequestBody = CardMandatePaymentMethodDetails;
    export type RequestHeaders = {};
    export type ResponseBody = DeletedDiscount;
  }
  /**
   * @description <p>A list of <a href="https://stripe.com/docs/tax/tax-codes">all tax codes available</a> to add to Products in order to allow specific tax calculations.</p>
   * @name GetTaxCodes
   * @request GET:/v1/tax_codes
   * @secure
   * @response `200` `{ data: (TaxCode)[], has_more: boolean, object: "list", url: string }` Successful response.
   * @response `default` `Error` Error response.
   */
  export namespace GetTaxCodes {
    export type RequestParams = {};
    export type RequestQuery = { ending_before?: string; expand?: string[]; limit?: number; starting_after?: string };
    export type RequestBody = CardMandatePaymentMethodDetails;
    export type RequestHeaders = {};
    export type ResponseBody = { data: TaxCode[]; has_more: boolean; object: "list"; url: string };
  }
  /**
   * @description <p>Retrieves the details of an existing tax code. Supply the unique tax code ID and Stripe will return the corresponding tax code information.</p>
   * @name GetTaxCodesId
   * @request GET:/v1/tax_codes/{id}
   * @secure
   * @response `200` `TaxCode` Successful response.
   * @response `default` `Error` Error response.
   */
  export namespace GetTaxCodesId {
    export type RequestParams = { id: string };
    export type RequestQuery = { expand?: string[] };
    export type RequestBody = CardMandatePaymentMethodDetails;
    export type RequestHeaders = {};
    export type ResponseBody = TaxCode;
  }
  /**
   * @description <p>Returns a list of your tax rates. Tax rates are returned sorted by creation date, with the most recently created tax rates appearing first.</p>
   * @name GetTaxRates
   * @request GET:/v1/tax_rates
   * @secure
   * @response `200` `{ data: (TaxRate)[], has_more: boolean, object: "list", url: string }` Successful response.
   * @response `default` `Error` Error response.
   */
  export namespace GetTaxRates {
    export type RequestParams = {};
    export type RequestQuery = {
      active?: boolean;
      created?: { gt?: number; gte?: number; lt?: number; lte?: number } | number;
      ending_before?: string;
      expand?: string[];
      inclusive?: boolean;
      limit?: number;
      starting_after?: string;
    };
    export type RequestBody = CardMandatePaymentMethodDetails;
    export type RequestHeaders = {};
    export type ResponseBody = { data: TaxRate[]; has_more: boolean; object: "list"; url: string };
  }
  /**
   * @description <p>Creates a new tax rate.</p>
   * @name PostTaxRates
   * @request POST:/v1/tax_rates
   * @secure
   * @response `200` `TaxRate` Successful response.
   * @response `default` `Error` Error response.
   */
  export namespace PostTaxRates {
    export type RequestParams = {};
    export type RequestQuery = {};
    export type RequestBody = {
      active?: boolean;
      country?: string;
      description?: string;
      display_name: string;
      expand?: string[];
      inclusive: boolean;
      jurisdiction?: string;
      metadata?: Record<string, string>;
      percentage: number;
      state?: string;
      tax_type?: "gst" | "hst" | "jct" | "pst" | "qst" | "rst" | "sales_tax" | "vat";
    };
    export type RequestHeaders = {};
    export type ResponseBody = TaxRate;
  }
  /**
   * @description <p>Retrieves a tax rate with the given ID</p>
   * @name GetTaxRatesTaxRate
   * @request GET:/v1/tax_rates/{tax_rate}
   * @secure
   * @response `200` `TaxRate` Successful response.
   * @response `default` `Error` Error response.
   */
  export namespace GetTaxRatesTaxRate {
    export type RequestParams = { taxRate: string };
    export type RequestQuery = { expand?: string[] };
    export type RequestBody = CardMandatePaymentMethodDetails;
    export type RequestHeaders = {};
    export type ResponseBody = TaxRate;
  }
  /**
   * @description <p>Updates an existing tax rate.</p>
   * @name PostTaxRatesTaxRate
   * @request POST:/v1/tax_rates/{tax_rate}
   * @secure
   * @response `200` `TaxRate` Successful response.
   * @response `default` `Error` Error response.
   */
  export namespace PostTaxRatesTaxRate {
    export type RequestParams = { taxRate: string };
    export type RequestQuery = {};
    export type RequestBody = {
      active?: boolean;
      country?: string;
      description?: string;
      display_name?: string;
      expand?: string[];
      jurisdiction?: string;
      metadata?: Record<string, string> | "" | (Record<string, string> & "");
      state?: string;
      tax_type?: "gst" | "hst" | "jct" | "pst" | "qst" | "rst" | "sales_tax" | "vat";
    };
    export type RequestHeaders = {};
    export type ResponseBody = TaxRate;
  }
  /**
   * @description <p>To connect to a reader the Stripe Terminal SDK needs to retrieve a short-lived connection token from Stripe, proxied through your server. On your backend, add an endpoint that creates and returns a connection token.</p>
   * @name PostTerminalConnectionTokens
   * @request POST:/v1/terminal/connection_tokens
   * @secure
   * @response `200` `TerminalConnectionToken` Successful response.
   * @response `default` `Error` Error response.
   */
  export namespace PostTerminalConnectionTokens {
    export type RequestParams = {};
    export type RequestQuery = {};
    export type RequestBody = { expand?: string[]; location?: string };
    export type RequestHeaders = {};
    export type ResponseBody = TerminalConnectionToken;
  }
  /**
   * @description <p>Returns a list of <code>Location</code> objects.</p>
   * @name GetTerminalLocations
   * @request GET:/v1/terminal/locations
   * @secure
   * @response `200` `{ data: (TerminalLocation)[], has_more: boolean, object: "list", url: string }` Successful response.
   * @response `default` `Error` Error response.
   */
  export namespace GetTerminalLocations {
    export type RequestParams = {};
    export type RequestQuery = { ending_before?: string; expand?: string[]; limit?: number; starting_after?: string };
    export type RequestBody = CardMandatePaymentMethodDetails;
    export type RequestHeaders = {};
    export type ResponseBody = { data: TerminalLocation[]; has_more: boolean; object: "list"; url: string };
  }
  /**
   * @description <p>Creates a new <code>Location</code> object. For further details, including which address fields are required in each country, see the <a href="/docs/terminal/fleet/locations">Manage locations</a> guide.</p>
   * @name PostTerminalLocations
   * @request POST:/v1/terminal/locations
   * @secure
   * @response `200` `TerminalLocation` Successful response.
   * @response `default` `Error` Error response.
   */
  export namespace PostTerminalLocations {
    export type RequestParams = {};
    export type RequestQuery = {};
    export type RequestBody = {
      address: { city?: string; country: string; line1?: string; line2?: string; postal_code?: string; state?: string };
      display_name: string;
      expand?: string[];
      metadata?: Record<string, string> | "" | (Record<string, string> & "");
    };
    export type RequestHeaders = {};
    export type ResponseBody = TerminalLocation;
  }
  /**
   * @description <p>Deletes a <code>Location</code> object.</p>
   * @name DeleteTerminalLocationsLocation
   * @request DELETE:/v1/terminal/locations/{location}
   * @secure
   * @response `200` `DeletedTerminalLocation` Successful response.
   * @response `default` `Error` Error response.
   */
  export namespace DeleteTerminalLocationsLocation {
    export type RequestParams = { location: string };
    export type RequestQuery = {};
    export type RequestBody = CardMandatePaymentMethodDetails;
    export type RequestHeaders = {};
    export type ResponseBody = DeletedTerminalLocation;
  }
  /**
   * @description <p>Retrieves a <code>Location</code> object.</p>
   * @name GetTerminalLocationsLocation
   * @request GET:/v1/terminal/locations/{location}
   * @secure
   * @response `200` `TerminalLocation` Successful response.
   * @response `default` `Error` Error response.
   */
  export namespace GetTerminalLocationsLocation {
    export type RequestParams = { location: string };
    export type RequestQuery = { expand?: string[] };
    export type RequestBody = CardMandatePaymentMethodDetails;
    export type RequestHeaders = {};
    export type ResponseBody = TerminalLocation;
  }
  /**
   * @description <p>Updates a <code>Location</code> object by setting the values of the parameters passed. Any parameters not provided will be left unchanged.</p>
   * @name PostTerminalLocationsLocation
   * @request POST:/v1/terminal/locations/{location}
   * @secure
   * @response `200` `TerminalLocation` Successful response.
   * @response `default` `Error` Error response.
   */
  export namespace PostTerminalLocationsLocation {
    export type RequestParams = { location: string };
    export type RequestQuery = {};
    export type RequestBody = {
      address?: {
        city?: string;
        country?: string;
        line1?: string;
        line2?: string;
        postal_code?: string;
        state?: string;
      };
      display_name?: string;
      expand?: string[];
      metadata?: Record<string, string> | "" | (Record<string, string> & "");
    };
    export type RequestHeaders = {};
    export type ResponseBody = TerminalLocation;
  }
  /**
   * @description <p>Returns a list of <code>Reader</code> objects.</p>
   * @name GetTerminalReaders
   * @request GET:/v1/terminal/readers
   * @secure
   * @response `200` `{ data: (TerminalReader)[], has_more: boolean, object: "list", url: string }` Successful response.
   * @response `default` `Error` Error response.
   */
  export namespace GetTerminalReaders {
    export type RequestParams = {};
    export type RequestQuery = {
      device_type?: "bbpos_chipper2x" | "bbpos_wisepos_e" | "verifone_P400";
      ending_before?: string;
      expand?: string[];
      limit?: number;
      location?: string;
      starting_after?: string;
      status?: "offline" | "online";
    };
    export type RequestBody = CardMandatePaymentMethodDetails;
    export type RequestHeaders = {};
    export type ResponseBody = { data: TerminalReader[]; has_more: boolean; object: "list"; url: string };
  }
  /**
   * @description <p>Creates a new <code>Reader</code> object.</p>
   * @name PostTerminalReaders
   * @request POST:/v1/terminal/readers
   * @secure
   * @response `200` `TerminalReader` Successful response.
   * @response `default` `Error` Error response.
   */
  export namespace PostTerminalReaders {
    export type RequestParams = {};
    export type RequestQuery = {};
    export type RequestBody = {
      expand?: string[];
      label?: string;
      location?: string;
      metadata?: Record<string, string> | "" | (Record<string, string> & "");
      registration_code: string;
    };
    export type RequestHeaders = {};
    export type ResponseBody = TerminalReader;
  }
  /**
   * @description <p>Deletes a <code>Reader</code> object.</p>
   * @name DeleteTerminalReadersReader
   * @request DELETE:/v1/terminal/readers/{reader}
   * @secure
   * @response `200` `DeletedTerminalReader` Successful response.
   * @response `default` `Error` Error response.
   */
  export namespace DeleteTerminalReadersReader {
    export type RequestParams = { reader: string };
    export type RequestQuery = {};
    export type RequestBody = CardMandatePaymentMethodDetails;
    export type RequestHeaders = {};
    export type ResponseBody = DeletedTerminalReader;
  }
  /**
   * @description <p>Retrieves a <code>Reader</code> object.</p>
   * @name GetTerminalReadersReader
   * @request GET:/v1/terminal/readers/{reader}
   * @secure
   * @response `200` `TerminalReader` Successful response.
   * @response `default` `Error` Error response.
   */
  export namespace GetTerminalReadersReader {
    export type RequestParams = { reader: string };
    export type RequestQuery = { expand?: string[] };
    export type RequestBody = CardMandatePaymentMethodDetails;
    export type RequestHeaders = {};
    export type ResponseBody = TerminalReader;
  }
  /**
   * @description <p>Updates a <code>Reader</code> object by setting the values of the parameters passed. Any parameters not provided will be left unchanged.</p>
   * @name PostTerminalReadersReader
   * @request POST:/v1/terminal/readers/{reader}
   * @secure
   * @response `200` `TerminalReader` Successful response.
   * @response `default` `Error` Error response.
   */
  export namespace PostTerminalReadersReader {
    export type RequestParams = { reader: string };
    export type RequestQuery = {};
    export type RequestBody = {
      expand?: string[];
      label?: string;
      metadata?: Record<string, string> | "" | (Record<string, string> & "");
    };
    export type RequestHeaders = {};
    export type ResponseBody = TerminalReader;
  }
  /**
   * @description <p>Creates a single-use token that represents a bank account’s details. This token can be used with any API method in place of a bank account dictionary. This token can be used only once, by attaching it to a <a href="#accounts">Custom account</a>.</p>
   * @name PostTokens
   * @request POST:/v1/tokens
   * @secure
   * @response `200` `Token` Successful response.
   * @response `default` `Error` Error response.
   */
  export namespace PostTokens {
    export type RequestParams = {};
    export type RequestQuery = {};
    export type RequestBody = {
      account?: {
        business_type?: "company" | "government_entity" | "individual" | "non_profit";
        company?: {
          address?: {
            city?: string;
            country?: string;
            line1?: string;
            line2?: string;
            postal_code?: string;
            state?: string;
          };
          address_kana?: {
            city?: string;
            country?: string;
            line1?: string;
            line2?: string;
            postal_code?: string;
            state?: string;
            town?: string;
          };
          address_kanji?: {
            city?: string;
            country?: string;
            line1?: string;
            line2?: string;
            postal_code?: string;
            state?: string;
            town?: string;
          };
          directors_provided?: boolean;
          executives_provided?: boolean;
          name?: string;
          name_kana?: string;
          name_kanji?: string;
          owners_provided?: boolean;
          ownership_declaration?: { date?: number; ip?: string; user_agent?: string };
          ownership_declaration_shown_and_signed?: boolean;
          phone?: string;
          registration_number?: string;
          structure?:
            | ""
            | "free_zone_establishment"
            | "free_zone_llc"
            | "government_instrumentality"
            | "governmental_unit"
            | "incorporated_non_profit"
            | "limited_liability_partnership"
            | "llc"
            | "multi_member_llc"
            | "private_company"
            | "private_corporation"
            | "private_partnership"
            | "public_company"
            | "public_corporation"
            | "public_partnership"
            | "single_member_llc"
            | "sole_establishment"
            | "sole_proprietorship"
            | "tax_exempt_government_instrumentality"
            | "unincorporated_association"
            | "unincorporated_non_profit";
          tax_id?: string;
          tax_id_registrar?: string;
          vat_id?: string;
          verification?: { document?: { back?: string; front?: string } };
        };
        individual?: {
          address?: {
            city?: string;
            country?: string;
            line1?: string;
            line2?: string;
            postal_code?: string;
            state?: string;
          };
          address_kana?: {
            city?: string;
            country?: string;
            line1?: string;
            line2?: string;
            postal_code?: string;
            state?: string;
            town?: string;
          };
          address_kanji?: {
            city?: string;
            country?: string;
            line1?: string;
            line2?: string;
            postal_code?: string;
            state?: string;
            town?: string;
          };
          dob?: { day: number; month: number; year: number } | "" | ({ day: number; month: number; year: number } & "");
          email?: string;
          first_name?: string;
          first_name_kana?: string;
          first_name_kanji?: string;
          full_name_aliases?: string[] | "" | (string[] & "");
          gender?: string;
          id_number?: string;
          last_name?: string;
          last_name_kana?: string;
          last_name_kanji?: string;
          maiden_name?: string;
          metadata?: Record<string, string> | "" | (Record<string, string> & "");
          phone?: string;
          political_exposure?: "existing" | "none";
          ssn_last_4?: string;
          verification?: {
            additional_document?: { back?: string; front?: string };
            document?: { back?: string; front?: string };
          };
        };
        tos_shown_and_accepted?: boolean;
      };
      bank_account?: {
        account_holder_name?: string;
        account_holder_type?: "company" | "individual";
        account_number: string;
        account_type?: "checking" | "futsu" | "savings" | "toza";
        country: string;
        currency?: string;
        routing_number?: string;
      };
      card?:
        | {
            address_city?: string;
            address_country?: string;
            address_line1?: string;
            address_line2?: string;
            address_state?: string;
            address_zip?: string;
            currency?: string;
            cvc?: string;
            exp_month: string;
            exp_year: string;
            name?: string;
            number: string;
          }
        | string;
      customer?: string;
      cvc_update?: { cvc: string };
      expand?: string[];
      person?: {
        address?: {
          city?: string;
          country?: string;
          line1?: string;
          line2?: string;
          postal_code?: string;
          state?: string;
        };
        address_kana?: {
          city?: string;
          country?: string;
          line1?: string;
          line2?: string;
          postal_code?: string;
          state?: string;
          town?: string;
        };
        address_kanji?: {
          city?: string;
          country?: string;
          line1?: string;
          line2?: string;
          postal_code?: string;
          state?: string;
          town?: string;
        };
        dob?: { day: number; month: number; year: number } | "" | ({ day: number; month: number; year: number } & "");
        documents?: {
          company_authorization?: { files?: string[] };
          passport?: { files?: string[] };
          visa?: { files?: string[] };
        };
        email?: string;
        first_name?: string;
        first_name_kana?: string;
        first_name_kanji?: string;
        full_name_aliases?: string[] | "" | (string[] & "");
        gender?: string;
        id_number?: string;
        last_name?: string;
        last_name_kana?: string;
        last_name_kanji?: string;
        maiden_name?: string;
        metadata?: Record<string, string> | "" | (Record<string, string> & "");
        nationality?: string;
        phone?: string;
        political_exposure?: string;
        relationship?: {
          director?: boolean;
          executive?: boolean;
          owner?: boolean;
          percent_ownership?: number | "";
          representative?: boolean;
          title?: string;
        };
        ssn_last_4?: string;
        verification?: {
          additional_document?: { back?: string; front?: string };
          document?: { back?: string; front?: string };
        };
      };
      pii?: { id_number?: string };
    };
    export type RequestHeaders = {};
    export type ResponseBody = Token;
  }
  /**
   * @description <p>Retrieves the token with the given ID.</p>
   * @name GetTokensToken
   * @request GET:/v1/tokens/{token}
   * @secure
   * @response `200` `Token` Successful response.
   * @response `default` `Error` Error response.
   */
  export namespace GetTokensToken {
    export type RequestParams = { token: string };
    export type RequestQuery = { expand?: string[] };
    export type RequestBody = CardMandatePaymentMethodDetails;
    export type RequestHeaders = {};
    export type ResponseBody = Token;
  }
  /**
   * @description <p>Returns a list of top-ups.</p>
   * @name GetTopups
   * @request GET:/v1/topups
   * @secure
   * @response `200` `{ data: (Topup)[], has_more: boolean, object: "list", url: string }` Successful response.
   * @response `default` `Error` Error response.
   */
  export namespace GetTopups {
    export type RequestParams = {};
    export type RequestQuery = {
      amount?: { gt?: number; gte?: number; lt?: number; lte?: number } | number;
      created?: { gt?: number; gte?: number; lt?: number; lte?: number } | number;
      ending_before?: string;
      expand?: string[];
      limit?: number;
      starting_after?: string;
      status?: "canceled" | "failed" | "pending" | "succeeded";
    };
    export type RequestBody = CardMandatePaymentMethodDetails;
    export type RequestHeaders = {};
    export type ResponseBody = { data: Topup[]; has_more: boolean; object: "list"; url: string };
  }
  /**
   * @description <p>Top up the balance of an account</p>
   * @name PostTopups
   * @request POST:/v1/topups
   * @secure
   * @response `200` `Topup` Successful response.
   * @response `default` `Error` Error response.
   */
  export namespace PostTopups {
    export type RequestParams = {};
    export type RequestQuery = {};
    export type RequestBody = {
      amount: number;
      currency: string;
      description?: string;
      expand?: string[];
      metadata?: Record<string, string> | "" | (Record<string, string> & "");
      source?: string;
      statement_descriptor?: string;
      transfer_group?: string;
    };
    export type RequestHeaders = {};
    export type ResponseBody = Topup;
  }
  /**
   * @description <p>Retrieves the details of a top-up that has previously been created. Supply the unique top-up ID that was returned from your previous request, and Stripe will return the corresponding top-up information.</p>
   * @name GetTopupsTopup
   * @request GET:/v1/topups/{topup}
   * @secure
   * @response `200` `Topup` Successful response.
   * @response `default` `Error` Error response.
   */
  export namespace GetTopupsTopup {
    export type RequestParams = { topup: string };
    export type RequestQuery = { expand?: string[] };
    export type RequestBody = CardMandatePaymentMethodDetails;
    export type RequestHeaders = {};
    export type ResponseBody = Topup;
  }
  /**
   * @description <p>Updates the metadata of a top-up. Other top-up details are not editable by design.</p>
   * @name PostTopupsTopup
   * @request POST:/v1/topups/{topup}
   * @secure
   * @response `200` `Topup` Successful response.
   * @response `default` `Error` Error response.
   */
  export namespace PostTopupsTopup {
    export type RequestParams = { topup: string };
    export type RequestQuery = {};
    export type RequestBody = {
      description?: string;
      expand?: string[];
      metadata?: Record<string, string> | "" | (Record<string, string> & "");
    };
    export type RequestHeaders = {};
    export type ResponseBody = Topup;
  }
  /**
   * @description <p>Cancels a top-up. Only pending top-ups can be canceled.</p>
   * @name PostTopupsTopupCancel
   * @request POST:/v1/topups/{topup}/cancel
   * @secure
   * @response `200` `Topup` Successful response.
   * @response `default` `Error` Error response.
   */
  export namespace PostTopupsTopupCancel {
    export type RequestParams = { topup: string };
    export type RequestQuery = {};
    export type RequestBody = { expand?: string[] };
    export type RequestHeaders = {};
    export type ResponseBody = Topup;
  }
  /**
   * @description <p>Returns a list of existing transfers sent to connected accounts. The transfers are returned in sorted order, with the most recently created transfers appearing first.</p>
   * @name GetTransfers
   * @request GET:/v1/transfers
   * @secure
   * @response `200` `{ data: (Transfer)[], has_more: boolean, object: "list", url: string }` Successful response.
   * @response `default` `Error` Error response.
   */
  export namespace GetTransfers {
    export type RequestParams = {};
    export type RequestQuery = {
      created?: { gt?: number; gte?: number; lt?: number; lte?: number } | number;
      destination?: string;
      ending_before?: string;
      expand?: string[];
      limit?: number;
      starting_after?: string;
      transfer_group?: string;
    };
    export type RequestBody = CardMandatePaymentMethodDetails;
    export type RequestHeaders = {};
    export type ResponseBody = { data: Transfer[]; has_more: boolean; object: "list"; url: string };
  }
  /**
   * @description <p>To send funds from your Stripe account to a connected account, you create a new transfer object. Your <a href="#balance">Stripe balance</a> must be able to cover the transfer amount, or you’ll receive an “Insufficient Funds” error.</p>
   * @name PostTransfers
   * @request POST:/v1/transfers
   * @secure
   * @response `200` `Transfer` Successful response.
   * @response `default` `Error` Error response.
   */
  export namespace PostTransfers {
    export type RequestParams = {};
    export type RequestQuery = {};
    export type RequestBody = {
      amount?: number;
      currency: string;
      description?: string;
      destination: string;
      expand?: string[];
      metadata?: Record<string, string>;
      source_transaction?: string;
      source_type?: "bank_account" | "card" | "fpx";
      transfer_group?: string;
    };
    export type RequestHeaders = {};
    export type ResponseBody = Transfer;
  }
  /**
   * @description <p>You can see a list of the reversals belonging to a specific transfer. Note that the 10 most recent reversals are always available by default on the transfer object. If you need more than those 10, you can use this API method and the <code>limit</code> and <code>starting_after</code> parameters to page through additional reversals.</p>
   * @name GetTransfersIdReversals
   * @request GET:/v1/transfers/{id}/reversals
   * @secure
   * @response `200` `{ data: (TransferReversal)[], has_more: boolean, object: "list", url: string }` Successful response.
   * @response `default` `Error` Error response.
   */
  export namespace GetTransfersIdReversals {
    export type RequestParams = { id: string };
    export type RequestQuery = { ending_before?: string; expand?: string[]; limit?: number; starting_after?: string };
    export type RequestBody = CardMandatePaymentMethodDetails;
    export type RequestHeaders = {};
    export type ResponseBody = { data: TransferReversal[]; has_more: boolean; object: "list"; url: string };
  }
  /**
   * @description <p>When you create a new reversal, you must specify a transfer to create it on.</p> <p>When reversing transfers, you can optionally reverse part of the transfer. You can do so as many times as you wish until the entire transfer has been reversed.</p> <p>Once entirely reversed, a transfer can’t be reversed again. This method will return an error when called on an already-reversed transfer, or when trying to reverse more money than is left on a transfer.</p>
   * @name PostTransfersIdReversals
   * @request POST:/v1/transfers/{id}/reversals
   * @secure
   * @response `200` `TransferReversal` Successful response.
   * @response `default` `Error` Error response.
   */
  export namespace PostTransfersIdReversals {
    export type RequestParams = { id: string };
    export type RequestQuery = {};
    export type RequestBody = {
      amount?: number;
      description?: string;
      expand?: string[];
      metadata?: Record<string, string> | "" | (Record<string, string> & "");
      refund_application_fee?: boolean;
    };
    export type RequestHeaders = {};
    export type ResponseBody = TransferReversal;
  }
  /**
   * @description <p>Retrieves the details of an existing transfer. Supply the unique transfer ID from either a transfer creation request or the transfer list, and Stripe will return the corresponding transfer information.</p>
   * @name GetTransfersTransfer
   * @request GET:/v1/transfers/{transfer}
   * @secure
   * @response `200` `Transfer` Successful response.
   * @response `default` `Error` Error response.
   */
  export namespace GetTransfersTransfer {
    export type RequestParams = { transfer: string };
    export type RequestQuery = { expand?: string[] };
    export type RequestBody = CardMandatePaymentMethodDetails;
    export type RequestHeaders = {};
    export type ResponseBody = Transfer;
  }
  /**
   * @description <p>Updates the specified transfer by setting the values of the parameters passed. Any parameters not provided will be left unchanged.</p> <p>This request accepts only metadata as an argument.</p>
   * @name PostTransfersTransfer
   * @request POST:/v1/transfers/{transfer}
   * @secure
   * @response `200` `Transfer` Successful response.
   * @response `default` `Error` Error response.
   */
  export namespace PostTransfersTransfer {
    export type RequestParams = { transfer: string };
    export type RequestQuery = {};
    export type RequestBody = {
      description?: string;
      expand?: string[];
      metadata?: Record<string, string> | "" | (Record<string, string> & "");
    };
    export type RequestHeaders = {};
    export type ResponseBody = Transfer;
  }
  /**
   * @description <p>By default, you can see the 10 most recent reversals stored directly on the transfer object, but you can also retrieve details about a specific reversal stored on the transfer.</p>
   * @name GetTransfersTransferReversalsId
   * @request GET:/v1/transfers/{transfer}/reversals/{id}
   * @secure
   * @response `200` `TransferReversal` Successful response.
   * @response `default` `Error` Error response.
   */
  export namespace GetTransfersTransferReversalsId {
    export type RequestParams = { id: string; transfer: string };
    export type RequestQuery = { expand?: string[] };
    export type RequestBody = CardMandatePaymentMethodDetails;
    export type RequestHeaders = {};
    export type ResponseBody = TransferReversal;
  }
  /**
   * @description <p>Updates the specified reversal by setting the values of the parameters passed. Any parameters not provided will be left unchanged.</p> <p>This request only accepts metadata and description as arguments.</p>
   * @name PostTransfersTransferReversalsId
   * @request POST:/v1/transfers/{transfer}/reversals/{id}
   * @secure
   * @response `200` `TransferReversal` Successful response.
   * @response `default` `Error` Error response.
   */
  export namespace PostTransfersTransferReversalsId {
    export type RequestParams = { id: string; transfer: string };
    export type RequestQuery = {};
    export type RequestBody = {
      expand?: string[];
      metadata?: Record<string, string> | "" | (Record<string, string> & "");
    };
    export type RequestHeaders = {};
    export type ResponseBody = TransferReversal;
  }
  /**
   * @description <p>Returns a list of your webhook endpoints.</p>
   * @name GetWebhookEndpoints
   * @request GET:/v1/webhook_endpoints
   * @secure
   * @response `200` `{ data: (WebhookEndpoint)[], has_more: boolean, object: "list", url: string }` Successful response.
   * @response `default` `Error` Error response.
   */
  export namespace GetWebhookEndpoints {
    export type RequestParams = {};
    export type RequestQuery = { ending_before?: string; expand?: string[]; limit?: number; starting_after?: string };
    export type RequestBody = CardMandatePaymentMethodDetails;
    export type RequestHeaders = {};
    export type ResponseBody = { data: WebhookEndpoint[]; has_more: boolean; object: "list"; url: string };
  }
  /**
   * @description <p>A webhook endpoint must have a <code>url</code> and a list of <code>enabled_events</code>. You may optionally specify the Boolean <code>connect</code> parameter. If set to true, then a Connect webhook endpoint that notifies the specified <code>url</code> about events from all connected accounts is created; otherwise an account webhook endpoint that notifies the specified <code>url</code> only about events from your account is created. You can also create webhook endpoints in the <a href="https://dashboard.stripe.com/account/webhooks">webhooks settings</a> section of the Dashboard.</p>
   * @name PostWebhookEndpoints
   * @request POST:/v1/webhook_endpoints
   * @secure
   * @response `200` `WebhookEndpoint` Successful response.
   * @response `default` `Error` Error response.
   */
  export namespace PostWebhookEndpoints {
    export type RequestParams = {};
    export type RequestQuery = {};
    export type RequestBody = {
      api_version?:
        | "2011-01-01"
        | "2011-06-21"
        | "2011-06-28"
        | "2011-08-01"
        | "2011-09-15"
        | "2011-11-17"
        | "2012-02-23"
        | "2012-03-25"
        | "2012-06-18"
        | "2012-06-28"
        | "2012-07-09"
        | "2012-09-24"
        | "2012-10-26"
        | "2012-11-07"
        | "2013-02-11"
        | "2013-02-13"
        | "2013-07-05"
        | "2013-08-12"
        | "2013-08-13"
        | "2013-10-29"
        | "2013-12-03"
        | "2014-01-31"
        | "2014-03-13"
        | "2014-03-28"
        | "2014-05-19"
        | "2014-06-13"
        | "2014-06-17"
        | "2014-07-22"
        | "2014-07-26"
        | "2014-08-04"
        | "2014-08-20"
        | "2014-09-08"
        | "2014-10-07"
        | "2014-11-05"
        | "2014-11-20"
        | "2014-12-08"
        | "2014-12-17"
        | "2014-12-22"
        | "2015-01-11"
        | "2015-01-26"
        | "2015-02-10"
        | "2015-02-16"
        | "2015-02-18"
        | "2015-03-24"
        | "2015-04-07"
        | "2015-06-15"
        | "2015-07-07"
        | "2015-07-13"
        | "2015-07-28"
        | "2015-08-07"
        | "2015-08-19"
        | "2015-09-03"
        | "2015-09-08"
        | "2015-09-23"
        | "2015-10-01"
        | "2015-10-12"
        | "2015-10-16"
        | "2016-02-03"
        | "2016-02-19"
        | "2016-02-22"
        | "2016-02-23"
        | "2016-02-29"
        | "2016-03-07"
        | "2016-06-15"
        | "2016-07-06"
        | "2016-10-19"
        | "2017-01-27"
        | "2017-02-14"
        | "2017-04-06"
        | "2017-05-25"
        | "2017-06-05"
        | "2017-08-15"
        | "2017-12-14"
        | "2018-01-23"
        | "2018-02-05"
        | "2018-02-06"
        | "2018-02-28"
        | "2018-05-21"
        | "2018-07-27"
        | "2018-08-23"
        | "2018-09-06"
        | "2018-09-24"
        | "2018-10-31"
        | "2018-11-08"
        | "2019-02-11"
        | "2019-02-19"
        | "2019-03-14"
        | "2019-05-16"
        | "2019-08-14"
        | "2019-09-09"
        | "2019-10-08"
        | "2019-10-17"
        | "2019-11-05"
        | "2019-12-03"
        | "2020-03-02"
        | "2020-08-27";
      connect?: boolean;
      description?: string;
      enabled_events: (
        | "*"
        | "account.application.authorized"
        | "account.application.deauthorized"
        | "account.external_account.created"
        | "account.external_account.deleted"
        | "account.external_account.updated"
        | "account.updated"
        | "application_fee.created"
        | "application_fee.refund.updated"
        | "application_fee.refunded"
        | "balance.available"
        | "billing_portal.configuration.created"
        | "billing_portal.configuration.updated"
        | "capability.updated"
        | "charge.captured"
        | "charge.dispute.closed"
        | "charge.dispute.created"
        | "charge.dispute.funds_reinstated"
        | "charge.dispute.funds_withdrawn"
        | "charge.dispute.updated"
        | "charge.expired"
        | "charge.failed"
        | "charge.pending"
        | "charge.refund.updated"
        | "charge.refunded"
        | "charge.succeeded"
        | "charge.updated"
        | "checkout.session.async_payment_failed"
        | "checkout.session.async_payment_succeeded"
        | "checkout.session.completed"
        | "checkout.session.expired"
        | "coupon.created"
        | "coupon.deleted"
        | "coupon.updated"
        | "credit_note.created"
        | "credit_note.updated"
        | "credit_note.voided"
        | "customer.created"
        | "customer.deleted"
        | "customer.discount.created"
        | "customer.discount.deleted"
        | "customer.discount.updated"
        | "customer.source.created"
        | "customer.source.deleted"
        | "customer.source.expiring"
        | "customer.source.updated"
        | "customer.subscription.created"
        | "customer.subscription.deleted"
        | "customer.subscription.pending_update_applied"
        | "customer.subscription.pending_update_expired"
        | "customer.subscription.trial_will_end"
        | "customer.subscription.updated"
        | "customer.tax_id.created"
        | "customer.tax_id.deleted"
        | "customer.tax_id.updated"
        | "customer.updated"
        | "file.created"
        | "identity.verification_session.canceled"
        | "identity.verification_session.created"
        | "identity.verification_session.processing"
        | "identity.verification_session.redacted"
        | "identity.verification_session.requires_input"
        | "identity.verification_session.verified"
        | "invoice.created"
        | "invoice.deleted"
        | "invoice.finalization_failed"
        | "invoice.finalized"
        | "invoice.marked_uncollectible"
        | "invoice.paid"
        | "invoice.payment_action_required"
        | "invoice.payment_failed"
        | "invoice.payment_succeeded"
        | "invoice.sent"
        | "invoice.upcoming"
        | "invoice.updated"
        | "invoice.voided"
        | "invoiceitem.created"
        | "invoiceitem.deleted"
        | "invoiceitem.updated"
        | "issuing_authorization.created"
        | "issuing_authorization.request"
        | "issuing_authorization.updated"
        | "issuing_card.created"
        | "issuing_card.updated"
        | "issuing_cardholder.created"
        | "issuing_cardholder.updated"
        | "issuing_dispute.closed"
        | "issuing_dispute.created"
        | "issuing_dispute.funds_reinstated"
        | "issuing_dispute.submitted"
        | "issuing_dispute.updated"
        | "issuing_transaction.created"
        | "issuing_transaction.updated"
        | "mandate.updated"
        | "order.created"
        | "order.payment_failed"
        | "order.payment_succeeded"
        | "order.updated"
        | "order_return.created"
        | "payment_intent.amount_capturable_updated"
        | "payment_intent.canceled"
        | "payment_intent.created"
        | "payment_intent.payment_failed"
        | "payment_intent.processing"
        | "payment_intent.requires_action"
        | "payment_intent.succeeded"
        | "payment_method.attached"
        | "payment_method.automatically_updated"
        | "payment_method.detached"
        | "payment_method.updated"
        | "payout.canceled"
        | "payout.created"
        | "payout.failed"
        | "payout.paid"
        | "payout.updated"
        | "person.created"
        | "person.deleted"
        | "person.updated"
        | "plan.created"
        | "plan.deleted"
        | "plan.updated"
        | "price.created"
        | "price.deleted"
        | "price.updated"
        | "product.created"
        | "product.deleted"
        | "product.updated"
        | "promotion_code.created"
        | "promotion_code.updated"
        | "quote.accepted"
        | "quote.canceled"
        | "quote.created"
        | "quote.finalized"
        | "radar.early_fraud_warning.created"
        | "radar.early_fraud_warning.updated"
        | "recipient.created"
        | "recipient.deleted"
        | "recipient.updated"
        | "reporting.report_run.failed"
        | "reporting.report_run.succeeded"
        | "reporting.report_type.updated"
        | "review.closed"
        | "review.opened"
        | "setup_intent.canceled"
        | "setup_intent.created"
        | "setup_intent.requires_action"
        | "setup_intent.setup_failed"
        | "setup_intent.succeeded"
        | "sigma.scheduled_query_run.created"
        | "sku.created"
        | "sku.deleted"
        | "sku.updated"
        | "source.canceled"
        | "source.chargeable"
        | "source.failed"
        | "source.mandate_notification"
        | "source.refund_attributes_required"
        | "source.transaction.created"
        | "source.transaction.updated"
        | "subscription_schedule.aborted"
        | "subscription_schedule.canceled"
        | "subscription_schedule.completed"
        | "subscription_schedule.created"
        | "subscription_schedule.expiring"
        | "subscription_schedule.released"
        | "subscription_schedule.updated"
        | "tax_rate.created"
        | "tax_rate.updated"
        | "topup.canceled"
        | "topup.created"
        | "topup.failed"
        | "topup.reversed"
        | "topup.succeeded"
        | "transfer.created"
        | "transfer.failed"
        | "transfer.paid"
        | "transfer.reversed"
        | "transfer.updated"
      )[];
      expand?: string[];
      metadata?: Record<string, string> | "" | (Record<string, string> & "");
      url: string;
    };
    export type RequestHeaders = {};
    export type ResponseBody = WebhookEndpoint;
  }
  /**
   * @description <p>You can also delete webhook endpoints via the <a href="https://dashboard.stripe.com/account/webhooks">webhook endpoint management</a> page of the Stripe dashboard.</p>
   * @name DeleteWebhookEndpointsWebhookEndpoint
   * @request DELETE:/v1/webhook_endpoints/{webhook_endpoint}
   * @secure
   * @response `200` `DeletedWebhookEndpoint` Successful response.
   * @response `default` `Error` Error response.
   */
  export namespace DeleteWebhookEndpointsWebhookEndpoint {
    export type RequestParams = { webhookEndpoint: string };
    export type RequestQuery = {};
    export type RequestBody = CardMandatePaymentMethodDetails;
    export type RequestHeaders = {};
    export type ResponseBody = DeletedWebhookEndpoint;
  }
  /**
   * @description <p>Retrieves the webhook endpoint with the given ID.</p>
   * @name GetWebhookEndpointsWebhookEndpoint
   * @request GET:/v1/webhook_endpoints/{webhook_endpoint}
   * @secure
   * @response `200` `WebhookEndpoint` Successful response.
   * @response `default` `Error` Error response.
   */
  export namespace GetWebhookEndpointsWebhookEndpoint {
    export type RequestParams = { webhookEndpoint: string };
    export type RequestQuery = { expand?: string[] };
    export type RequestBody = CardMandatePaymentMethodDetails;
    export type RequestHeaders = {};
    export type ResponseBody = WebhookEndpoint;
  }
  /**
   * @description <p>Updates the webhook endpoint. You may edit the <code>url</code>, the list of <code>enabled_events</code>, and the status of your endpoint.</p>
   * @name PostWebhookEndpointsWebhookEndpoint
   * @request POST:/v1/webhook_endpoints/{webhook_endpoint}
   * @secure
   * @response `200` `WebhookEndpoint` Successful response.
   * @response `default` `Error` Error response.
   */
  export namespace PostWebhookEndpointsWebhookEndpoint {
    export type RequestParams = { webhookEndpoint: string };
    export type RequestQuery = {};
    export type RequestBody = {
      description?: string;
      disabled?: boolean;
      enabled_events?: (
        | "*"
        | "account.application.authorized"
        | "account.application.deauthorized"
        | "account.external_account.created"
        | "account.external_account.deleted"
        | "account.external_account.updated"
        | "account.updated"
        | "application_fee.created"
        | "application_fee.refund.updated"
        | "application_fee.refunded"
        | "balance.available"
        | "billing_portal.configuration.created"
        | "billing_portal.configuration.updated"
        | "capability.updated"
        | "charge.captured"
        | "charge.dispute.closed"
        | "charge.dispute.created"
        | "charge.dispute.funds_reinstated"
        | "charge.dispute.funds_withdrawn"
        | "charge.dispute.updated"
        | "charge.expired"
        | "charge.failed"
        | "charge.pending"
        | "charge.refund.updated"
        | "charge.refunded"
        | "charge.succeeded"
        | "charge.updated"
        | "checkout.session.async_payment_failed"
        | "checkout.session.async_payment_succeeded"
        | "checkout.session.completed"
        | "checkout.session.expired"
        | "coupon.created"
        | "coupon.deleted"
        | "coupon.updated"
        | "credit_note.created"
        | "credit_note.updated"
        | "credit_note.voided"
        | "customer.created"
        | "customer.deleted"
        | "customer.discount.created"
        | "customer.discount.deleted"
        | "customer.discount.updated"
        | "customer.source.created"
        | "customer.source.deleted"
        | "customer.source.expiring"
        | "customer.source.updated"
        | "customer.subscription.created"
        | "customer.subscription.deleted"
        | "customer.subscription.pending_update_applied"
        | "customer.subscription.pending_update_expired"
        | "customer.subscription.trial_will_end"
        | "customer.subscription.updated"
        | "customer.tax_id.created"
        | "customer.tax_id.deleted"
        | "customer.tax_id.updated"
        | "customer.updated"
        | "file.created"
        | "identity.verification_session.canceled"
        | "identity.verification_session.created"
        | "identity.verification_session.processing"
        | "identity.verification_session.redacted"
        | "identity.verification_session.requires_input"
        | "identity.verification_session.verified"
        | "invoice.created"
        | "invoice.deleted"
        | "invoice.finalization_failed"
        | "invoice.finalized"
        | "invoice.marked_uncollectible"
        | "invoice.paid"
        | "invoice.payment_action_required"
        | "invoice.payment_failed"
        | "invoice.payment_succeeded"
        | "invoice.sent"
        | "invoice.upcoming"
        | "invoice.updated"
        | "invoice.voided"
        | "invoiceitem.created"
        | "invoiceitem.deleted"
        | "invoiceitem.updated"
        | "issuing_authorization.created"
        | "issuing_authorization.request"
        | "issuing_authorization.updated"
        | "issuing_card.created"
        | "issuing_card.updated"
        | "issuing_cardholder.created"
        | "issuing_cardholder.updated"
        | "issuing_dispute.closed"
        | "issuing_dispute.created"
        | "issuing_dispute.funds_reinstated"
        | "issuing_dispute.submitted"
        | "issuing_dispute.updated"
        | "issuing_transaction.created"
        | "issuing_transaction.updated"
        | "mandate.updated"
        | "order.created"
        | "order.payment_failed"
        | "order.payment_succeeded"
        | "order.updated"
        | "order_return.created"
        | "payment_intent.amount_capturable_updated"
        | "payment_intent.canceled"
        | "payment_intent.created"
        | "payment_intent.payment_failed"
        | "payment_intent.processing"
        | "payment_intent.requires_action"
        | "payment_intent.succeeded"
        | "payment_method.attached"
        | "payment_method.automatically_updated"
        | "payment_method.detached"
        | "payment_method.updated"
        | "payout.canceled"
        | "payout.created"
        | "payout.failed"
        | "payout.paid"
        | "payout.updated"
        | "person.created"
        | "person.deleted"
        | "person.updated"
        | "plan.created"
        | "plan.deleted"
        | "plan.updated"
        | "price.created"
        | "price.deleted"
        | "price.updated"
        | "product.created"
        | "product.deleted"
        | "product.updated"
        | "promotion_code.created"
        | "promotion_code.updated"
        | "quote.accepted"
        | "quote.canceled"
        | "quote.created"
        | "quote.finalized"
        | "radar.early_fraud_warning.created"
        | "radar.early_fraud_warning.updated"
        | "recipient.created"
        | "recipient.deleted"
        | "recipient.updated"
        | "reporting.report_run.failed"
        | "reporting.report_run.succeeded"
        | "reporting.report_type.updated"
        | "review.closed"
        | "review.opened"
        | "setup_intent.canceled"
        | "setup_intent.created"
        | "setup_intent.requires_action"
        | "setup_intent.setup_failed"
        | "setup_intent.succeeded"
        | "sigma.scheduled_query_run.created"
        | "sku.created"
        | "sku.deleted"
        | "sku.updated"
        | "source.canceled"
        | "source.chargeable"
        | "source.failed"
        | "source.mandate_notification"
        | "source.refund_attributes_required"
        | "source.transaction.created"
        | "source.transaction.updated"
        | "subscription_schedule.aborted"
        | "subscription_schedule.canceled"
        | "subscription_schedule.completed"
        | "subscription_schedule.created"
        | "subscription_schedule.expiring"
        | "subscription_schedule.released"
        | "subscription_schedule.updated"
        | "tax_rate.created"
        | "tax_rate.updated"
        | "topup.canceled"
        | "topup.created"
        | "topup.failed"
        | "topup.reversed"
        | "topup.succeeded"
        | "transfer.created"
        | "transfer.failed"
        | "transfer.paid"
        | "transfer.reversed"
        | "transfer.updated"
      )[];
      expand?: string[];
      metadata?: Record<string, string> | "" | (Record<string, string> & "");
      url?: string;
    };
    export type RequestHeaders = {};
    export type ResponseBody = WebhookEndpoint;
  }
}

import axios, { AxiosInstance, AxiosRequestConfig, AxiosResponse, ResponseType } from "axios";

export type QueryParamsType = Record<string | number, any>;

export interface FullRequestParams extends Omit<AxiosRequestConfig, "data" | "params" | "url" | "responseType"> {
  /** set parameter to `true` for call `securityWorker` for this request */
  secure?: boolean;
  /** request path */
  path: string;
  /** content type of request body */
  type?: ContentType;
  /** query params */
  query?: QueryParamsType;
  /** format of response (i.e. response.json() -> format: "json") */
  format?: ResponseType;
  /** request body */
  body?: unknown;
}

export type RequestParams = Omit<FullRequestParams, "body" | "method" | "query" | "path">;

export interface ApiConfig<SecurityDataType = unknown> extends Omit<AxiosRequestConfig, "data" | "cancelToken"> {
  securityWorker?: (
    securityData: SecurityDataType | null,
  ) => Promise<AxiosRequestConfig | void> | AxiosRequestConfig | void;
  secure?: boolean;
  format?: ResponseType;
}

export enum ContentType {
  Json = "application/json",
  FormData = "multipart/form-data",
  UrlEncoded = "application/x-www-form-urlencoded",
}

export class HttpClient<SecurityDataType = unknown> {
  public instance: AxiosInstance;
  private securityData: SecurityDataType | null = null;
  private securityWorker?: ApiConfig<SecurityDataType>["securityWorker"];
  private secure?: boolean;
  private format?: ResponseType;

  constructor({ securityWorker, secure, format, ...axiosConfig }: ApiConfig<SecurityDataType> = {}) {
    this.instance = axios.create({ ...axiosConfig, baseURL: axiosConfig.baseURL || "https://api.stripe.com/" });
    this.secure = secure;
    this.format = format;
    this.securityWorker = securityWorker;
  }

  public setSecurityData = (data: SecurityDataType | null) => {
    this.securityData = data;
  };

  private mergeRequestParams(params1: AxiosRequestConfig, params2?: AxiosRequestConfig): AxiosRequestConfig {
    return {
      ...this.instance.defaults,
      ...params1,
      ...(params2 || {}),
      headers: {
        ...(this.instance.defaults.headers || {}),
        ...(params1.headers || {}),
        ...((params2 && params2.headers) || {}),
      },
    };
  }

  private createFormData(input: Record<string, unknown>): FormData {
    return Object.keys(input || {}).reduce((formData, key) => {
      const property = input[key];
      formData.append(
        key,
        property instanceof Blob
          ? property
          : typeof property === "object" && property !== null
          ? JSON.stringify(property)
          : `${property}`,
      );
      return formData;
    }, new FormData());
  }

  public request = async <T = any, _E = any>({
    secure,
    path,
    type,
    query,
    format,
    body,
    ...params
  }: FullRequestParams): Promise<AxiosResponse<T>> => {
    const secureParams =
      ((typeof secure === "boolean" ? secure : this.secure) &&
        this.securityWorker &&
        (await this.securityWorker(this.securityData))) ||
      {};
    const requestParams = this.mergeRequestParams(params, secureParams);
    const responseFormat = (format && this.format) || void 0;

    if (type === ContentType.FormData && body && body !== null && typeof body === "object") {
      requestParams.headers.common = { Accept: "*/*" };
      requestParams.headers.post = {};
      requestParams.headers.put = {};

      body = this.createFormData(body as Record<string, unknown>);
    }

    return this.instance.request({
      ...requestParams,
      headers: {
        ...(type && type !== ContentType.FormData ? { "Content-Type": type } : {}),
        ...(requestParams.headers || {}),
      },
      params: query,
      responseType: responseFormat,
      data: body,
      url: path,
    });
  };
}

/**
 * @title Stripe API
 * @version 2020-08-27
 * @termsOfService https://stripe.com/us/terms/
 * @baseUrl https://api.stripe.com/
 * @contact Stripe Dev Platform Team <dev-platform@stripe.com> (https://stripe.com)
 *
 * The Stripe REST API. Please see https://stripe.com/docs/api for more details.
 */
export class Api<SecurityDataType extends unknown> extends HttpClient<SecurityDataType> {
  v1 = {
    /**
     * @description <p>Initiate 3D Secure authentication.</p>
     *
     * @name Post3DSecure
     * @request POST:/v1/3d_secure
     * @secure
     * @response `200` `ThreeDSecure` Successful response.
     * @response `default` `Error` Error response.
     */
    post3DSecure: (
      data: {
        amount: number;
        card?: string;
        currency: string;
        customer?: string;
        expand?: string[];
        return_url: string;
      },
      params: RequestParams = {},
    ) =>
      this.request<ThreeDSecure, Error>({
        path: `/v1/3d_secure`,
        method: "POST",
        body: data,
        secure: true,
        type: ContentType.UrlEncoded,
        format: "json",
        ...params,
      }),

    /**
     * @description <p>Retrieves a 3D Secure object.</p>
     *
     * @name Get3DSecureThreeDSecure
     * @request GET:/v1/3d_secure/{three_d_secure}
     * @secure
     * @response `200` `ThreeDSecure` Successful response.
     * @response `default` `Error` Error response.
     */
    get3DSecureThreeDSecure: (
      threeDSecure: string,
      query?: { expand?: string[] },
      data?: CardMandatePaymentMethodDetails,
      params: RequestParams = {},
    ) =>
      this.request<ThreeDSecure, Error>({
        path: `/v1/3d_secure/${threeDSecure}`,
        method: "GET",
        query: query,
        body: data,
        secure: true,
        type: ContentType.UrlEncoded,
        format: "json",
        ...params,
      }),

    /**
     * @description <p>With <a href="/docs/connect">Connect</a>, you can delete accounts you manage.</p> <p>Accounts created using test-mode keys can be deleted at any time. Custom or Express accounts created using live-mode keys can only be deleted once all balances are zero.</p> <p>If you want to delete your own account, use the <a href="https://dashboard.stripe.com/account">account information tab in your account settings</a> instead.</p>
     *
     * @name DeleteAccount
     * @request DELETE:/v1/account
     * @secure
     * @response `200` `DeletedAccount` Successful response.
     * @response `default` `Error` Error response.
     */
    deleteAccount: (data?: { account?: string }, params: RequestParams = {}) =>
      this.request<DeletedAccount, Error>({
        path: `/v1/account`,
        method: "DELETE",
        body: data,
        secure: true,
        type: ContentType.UrlEncoded,
        format: "json",
        ...params,
      }),

    /**
     * @description <p>Retrieves the details of an account.</p>
     *
     * @name GetAccount
     * @request GET:/v1/account
     * @secure
     * @response `200` `Account` Successful response.
     * @response `default` `Error` Error response.
     */
    getAccount: (query?: { expand?: string[] }, data?: CardMandatePaymentMethodDetails, params: RequestParams = {}) =>
      this.request<Account, Error>({
        path: `/v1/account`,
        method: "GET",
        query: query,
        body: data,
        secure: true,
        type: ContentType.UrlEncoded,
        format: "json",
        ...params,
      }),

    /**
     * @description <p>Updates a <a href="/docs/connect/accounts">connected account</a> by setting the values of the parameters passed. Any parameters not provided are left unchanged. Most parameters can be changed only for Custom accounts. (These are marked <strong>Custom Only</strong> below.) Parameters marked <strong>Custom and Express</strong> are not supported for Standard accounts.</p> <p>To update your own account, use the <a href="https://dashboard.stripe.com/account">Dashboard</a>. Refer to our <a href="/docs/connect/updating-accounts">Connect</a> documentation to learn more about updating accounts.</p>
     *
     * @name PostAccount
     * @request POST:/v1/account
     * @secure
     * @response `200` `Account` Successful response.
     * @response `default` `Error` Error response.
     */
    postAccount: (
      data?: {
        account_token?: string;
        bank_account?:
          | {
              account_holder_name?: string;
              account_holder_type?: "company" | "individual";
              account_number: string;
              account_type?: "checking" | "futsu" | "savings" | "toza";
              country: string;
              currency?: string;
              object?: "bank_account";
              routing_number?: string;
            }
          | string;
        business_profile?: {
          mcc?: string;
          name?: string;
          product_description?: string;
          support_address?: {
            city?: string;
            country?: string;
            line1?: string;
            line2?: string;
            postal_code?: string;
            state?: string;
          };
          support_email?: string;
          support_phone?: string;
          support_url?: string | "";
          url?: string;
        };
        business_type?: "company" | "government_entity" | "individual" | "non_profit";
        capabilities?: {
          acss_debit_payments?: { requested?: boolean };
          afterpay_clearpay_payments?: { requested?: boolean };
          au_becs_debit_payments?: { requested?: boolean };
          bacs_debit_payments?: { requested?: boolean };
          bancontact_payments?: { requested?: boolean };
          boleto_payments?: { requested?: boolean };
          card_issuing?: { requested?: boolean };
          card_payments?: { requested?: boolean };
          cartes_bancaires_payments?: { requested?: boolean };
          eps_payments?: { requested?: boolean };
          fpx_payments?: { requested?: boolean };
          giropay_payments?: { requested?: boolean };
          grabpay_payments?: { requested?: boolean };
          ideal_payments?: { requested?: boolean };
          jcb_payments?: { requested?: boolean };
          klarna_payments?: { requested?: boolean };
          legacy_payments?: { requested?: boolean };
          oxxo_payments?: { requested?: boolean };
          p24_payments?: { requested?: boolean };
          sepa_debit_payments?: { requested?: boolean };
          sofort_payments?: { requested?: boolean };
          tax_reporting_us_1099_k?: { requested?: boolean };
          tax_reporting_us_1099_misc?: { requested?: boolean };
          transfers?: { requested?: boolean };
        };
        company?: {
          address?: {
            city?: string;
            country?: string;
            line1?: string;
            line2?: string;
            postal_code?: string;
            state?: string;
          };
          address_kana?: {
            city?: string;
            country?: string;
            line1?: string;
            line2?: string;
            postal_code?: string;
            state?: string;
            town?: string;
          };
          address_kanji?: {
            city?: string;
            country?: string;
            line1?: string;
            line2?: string;
            postal_code?: string;
            state?: string;
            town?: string;
          };
          directors_provided?: boolean;
          executives_provided?: boolean;
          name?: string;
          name_kana?: string;
          name_kanji?: string;
          owners_provided?: boolean;
          ownership_declaration?: { date?: number; ip?: string; user_agent?: string };
          phone?: string;
          registration_number?: string;
          structure?:
            | ""
            | "free_zone_establishment"
            | "free_zone_llc"
            | "government_instrumentality"
            | "governmental_unit"
            | "incorporated_non_profit"
            | "limited_liability_partnership"
            | "llc"
            | "multi_member_llc"
            | "private_company"
            | "private_corporation"
            | "private_partnership"
            | "public_company"
            | "public_corporation"
            | "public_partnership"
            | "single_member_llc"
            | "sole_establishment"
            | "sole_proprietorship"
            | "tax_exempt_government_instrumentality"
            | "unincorporated_association"
            | "unincorporated_non_profit";
          tax_id?: string;
          tax_id_registrar?: string;
          vat_id?: string;
          verification?: { document?: { back?: string; front?: string } };
        };
        default_currency?: string;
        documents?: {
          bank_account_ownership_verification?: { files?: string[] };
          company_license?: { files?: string[] };
          company_memorandum_of_association?: { files?: string[] };
          company_ministerial_decree?: { files?: string[] };
          company_registration_verification?: { files?: string[] };
          company_tax_id_verification?: { files?: string[] };
          proof_of_registration?: { files?: string[] };
        };
        email?: string;
        expand?: string[];
        external_account?: string;
        individual?: {
          address?: {
            city?: string;
            country?: string;
            line1?: string;
            line2?: string;
            postal_code?: string;
            state?: string;
          };
          address_kana?: {
            city?: string;
            country?: string;
            line1?: string;
            line2?: string;
            postal_code?: string;
            state?: string;
            town?: string;
          };
          address_kanji?: {
            city?: string;
            country?: string;
            line1?: string;
            line2?: string;
            postal_code?: string;
            state?: string;
            town?: string;
          };
          dob?: { day: number; month: number; year: number } | "" | ({ day: number; month: number; year: number } & "");
          email?: string;
          first_name?: string;
          first_name_kana?: string;
          first_name_kanji?: string;
          full_name_aliases?: string[] | "" | (string[] & "");
          gender?: string;
          id_number?: string;
          last_name?: string;
          last_name_kana?: string;
          last_name_kanji?: string;
          maiden_name?: string;
          metadata?: Record<string, string> | "" | (Record<string, string> & "");
          phone?: string;
          political_exposure?: "existing" | "none";
          ssn_last_4?: string;
          verification?: {
            additional_document?: { back?: string; front?: string };
            document?: { back?: string; front?: string };
          };
        };
        metadata?: Record<string, string> | "" | (Record<string, string> & "");
        settings?: {
          branding?: { icon?: string; logo?: string; primary_color?: string; secondary_color?: string };
          card_issuing?: { tos_acceptance?: { date?: number; ip?: string; user_agent?: string } };
          card_payments?: {
            decline_on?: { avs_failure?: boolean; cvc_failure?: boolean };
            statement_descriptor_prefix?: string;
          };
          payments?: {
            statement_descriptor?: string;
            statement_descriptor_kana?: string;
            statement_descriptor_kanji?: string;
          };
          payouts?: {
            debit_negative_balances?: boolean;
            schedule?: {
              delay_days?: "minimum" | number;
              interval?: "daily" | "manual" | "monthly" | "weekly";
              monthly_anchor?: number;
              weekly_anchor?: "friday" | "monday" | "saturday" | "sunday" | "thursday" | "tuesday" | "wednesday";
            };
            statement_descriptor?: string;
          };
        };
        tos_acceptance?: { date?: number; ip?: string; service_agreement?: string; user_agent?: string };
      },
      params: RequestParams = {},
    ) =>
      this.request<Account, Error>({
        path: `/v1/account`,
        method: "POST",
        body: data,
        secure: true,
        type: ContentType.UrlEncoded,
        format: "json",
        ...params,
      }),

    /**
     * @description <p>Create an external account for a given account.</p>
     *
     * @name PostAccountBankAccounts
     * @request POST:/v1/account/bank_accounts
     * @secure
     * @response `200` `ExternalAccount` Successful response.
     * @response `default` `Error` Error response.
     */
    postAccountBankAccounts: (
      data?: {
        bank_account?:
          | {
              account_holder_name?: string;
              account_holder_type?: "company" | "individual";
              account_number: string;
              account_type?: "checking" | "futsu" | "savings" | "toza";
              country: string;
              currency?: string;
              object?: "bank_account";
              routing_number?: string;
            }
          | string;
        default_for_currency?: boolean;
        expand?: string[];
        external_account?: string;
        metadata?: Record<string, string>;
      },
      params: RequestParams = {},
    ) =>
      this.request<ExternalAccount, Error>({
        path: `/v1/account/bank_accounts`,
        method: "POST",
        body: data,
        secure: true,
        type: ContentType.UrlEncoded,
        format: "json",
        ...params,
      }),

    /**
     * @description <p>Delete a specified external account for a given account.</p>
     *
     * @name DeleteAccountBankAccountsId
     * @request DELETE:/v1/account/bank_accounts/{id}
     * @secure
     * @response `200` `DeletedExternalAccount` Successful response.
     * @response `default` `Error` Error response.
     */
    deleteAccountBankAccountsId: (id: string, data?: CardMandatePaymentMethodDetails, params: RequestParams = {}) =>
      this.request<DeletedExternalAccount, Error>({
        path: `/v1/account/bank_accounts/${id}`,
        method: "DELETE",
        body: data,
        secure: true,
        type: ContentType.UrlEncoded,
        format: "json",
        ...params,
      }),

    /**
     * @description <p>Retrieve a specified external account for a given account.</p>
     *
     * @name GetAccountBankAccountsId
     * @request GET:/v1/account/bank_accounts/{id}
     * @secure
     * @response `200` `ExternalAccount` Successful response.
     * @response `default` `Error` Error response.
     */
    getAccountBankAccountsId: (
      id: string,
      query?: { expand?: string[] },
      data?: CardMandatePaymentMethodDetails,
      params: RequestParams = {},
    ) =>
      this.request<ExternalAccount, Error>({
        path: `/v1/account/bank_accounts/${id}`,
        method: "GET",
        query: query,
        body: data,
        secure: true,
        type: ContentType.UrlEncoded,
        format: "json",
        ...params,
      }),

    /**
     * @description <p>Updates the metadata, account holder name, account holder type of a bank account belonging to a <a href="/docs/connect/custom-accounts">Custom account</a>, and optionally sets it as the default for its currency. Other bank account details are not editable by design.</p> <p>You can re-enable a disabled bank account by performing an update call without providing any arguments or changes.</p>
     *
     * @name PostAccountBankAccountsId
     * @request POST:/v1/account/bank_accounts/{id}
     * @secure
     * @response `200` `ExternalAccount` Successful response.
     * @response `default` `Error` Error response.
     */
    postAccountBankAccountsId: (
      id: string,
      data?: {
        account_holder_name?: string;
        account_holder_type?: "" | "company" | "individual";
        account_type?: "checking" | "futsu" | "savings" | "toza";
        address_city?: string;
        address_country?: string;
        address_line1?: string;
        address_line2?: string;
        address_state?: string;
        address_zip?: string;
        default_for_currency?: boolean;
        exp_month?: string;
        exp_year?: string;
        expand?: string[];
        metadata?: Record<string, string> | "" | (Record<string, string> & "");
        name?: string;
      },
      params: RequestParams = {},
    ) =>
      this.request<ExternalAccount, Error>({
        path: `/v1/account/bank_accounts/${id}`,
        method: "POST",
        body: data,
        secure: true,
        type: ContentType.UrlEncoded,
        format: "json",
        ...params,
      }),

    /**
     * @description <p>Returns a list of capabilities associated with the account. The capabilities are returned sorted by creation date, with the most recent capability appearing first.</p>
     *
     * @name GetAccountCapabilities
     * @request GET:/v1/account/capabilities
     * @secure
     * @response `200` `{ data: (Capability)[], has_more: boolean, object: "list", url: string }` Successful response.
     * @response `default` `Error` Error response.
     */
    getAccountCapabilities: (
      query?: { expand?: string[] },
      data?: CardMandatePaymentMethodDetails,
      params: RequestParams = {},
    ) =>
      this.request<{ data: Capability[]; has_more: boolean; object: "list"; url: string }, Error>({
        path: `/v1/account/capabilities`,
        method: "GET",
        query: query,
        body: data,
        secure: true,
        type: ContentType.UrlEncoded,
        format: "json",
        ...params,
      }),

    /**
     * @description <p>Retrieves information about the specified Account Capability.</p>
     *
     * @name GetAccountCapabilitiesCapability
     * @request GET:/v1/account/capabilities/{capability}
     * @secure
     * @response `200` `Capability` Successful response.
     * @response `default` `Error` Error response.
     */
    getAccountCapabilitiesCapability: (
      capability: string,
      query?: { expand?: string[] },
      data?: CardMandatePaymentMethodDetails,
      params: RequestParams = {},
    ) =>
      this.request<Capability, Error>({
        path: `/v1/account/capabilities/${capability}`,
        method: "GET",
        query: query,
        body: data,
        secure: true,
        type: ContentType.UrlEncoded,
        format: "json",
        ...params,
      }),

    /**
     * @description <p>Updates an existing Account Capability.</p>
     *
     * @name PostAccountCapabilitiesCapability
     * @request POST:/v1/account/capabilities/{capability}
     * @secure
     * @response `200` `Capability` Successful response.
     * @response `default` `Error` Error response.
     */
    postAccountCapabilitiesCapability: (
      capability: string,
      data?: { expand?: string[]; requested?: boolean },
      params: RequestParams = {},
    ) =>
      this.request<Capability, Error>({
        path: `/v1/account/capabilities/${capability}`,
        method: "POST",
        body: data,
        secure: true,
        type: ContentType.UrlEncoded,
        format: "json",
        ...params,
      }),

    /**
     * @description <p>List external accounts for an account.</p>
     *
     * @name GetAccountExternalAccounts
     * @request GET:/v1/account/external_accounts
     * @secure
     * @response `200` `{ data: ((BankAccount | Card | (BankAccount & Card)))[], has_more: boolean, object: "list", url: string }` Successful response.
     * @response `default` `Error` Error response.
     */
    getAccountExternalAccounts: (
      query?: { ending_before?: string; expand?: string[]; limit?: number; starting_after?: string },
      data?: CardMandatePaymentMethodDetails,
      params: RequestParams = {},
    ) =>
      this.request<
        { data: (BankAccount | Card | (BankAccount & Card))[]; has_more: boolean; object: "list"; url: string },
        Error
      >({
        path: `/v1/account/external_accounts`,
        method: "GET",
        query: query,
        body: data,
        secure: true,
        type: ContentType.UrlEncoded,
        format: "json",
        ...params,
      }),

    /**
     * @description <p>Create an external account for a given account.</p>
     *
     * @name PostAccountExternalAccounts
     * @request POST:/v1/account/external_accounts
     * @secure
     * @response `200` `ExternalAccount` Successful response.
     * @response `default` `Error` Error response.
     */
    postAccountExternalAccounts: (
      data?: {
        bank_account?:
          | {
              account_holder_name?: string;
              account_holder_type?: "company" | "individual";
              account_number: string;
              account_type?: "checking" | "futsu" | "savings" | "toza";
              country: string;
              currency?: string;
              object?: "bank_account";
              routing_number?: string;
            }
          | string;
        default_for_currency?: boolean;
        expand?: string[];
        external_account?: string;
        metadata?: Record<string, string>;
      },
      params: RequestParams = {},
    ) =>
      this.request<ExternalAccount, Error>({
        path: `/v1/account/external_accounts`,
        method: "POST",
        body: data,
        secure: true,
        type: ContentType.UrlEncoded,
        format: "json",
        ...params,
      }),

    /**
     * @description <p>Delete a specified external account for a given account.</p>
     *
     * @name DeleteAccountExternalAccountsId
     * @request DELETE:/v1/account/external_accounts/{id}
     * @secure
     * @response `200` `DeletedExternalAccount` Successful response.
     * @response `default` `Error` Error response.
     */
    deleteAccountExternalAccountsId: (id: string, data?: CardMandatePaymentMethodDetails, params: RequestParams = {}) =>
      this.request<DeletedExternalAccount, Error>({
        path: `/v1/account/external_accounts/${id}`,
        method: "DELETE",
        body: data,
        secure: true,
        type: ContentType.UrlEncoded,
        format: "json",
        ...params,
      }),

    /**
     * @description <p>Retrieve a specified external account for a given account.</p>
     *
     * @name GetAccountExternalAccountsId
     * @request GET:/v1/account/external_accounts/{id}
     * @secure
     * @response `200` `ExternalAccount` Successful response.
     * @response `default` `Error` Error response.
     */
    getAccountExternalAccountsId: (
      id: string,
      query?: { expand?: string[] },
      data?: CardMandatePaymentMethodDetails,
      params: RequestParams = {},
    ) =>
      this.request<ExternalAccount, Error>({
        path: `/v1/account/external_accounts/${id}`,
        method: "GET",
        query: query,
        body: data,
        secure: true,
        type: ContentType.UrlEncoded,
        format: "json",
        ...params,
      }),

    /**
     * @description <p>Updates the metadata, account holder name, account holder type of a bank account belonging to a <a href="/docs/connect/custom-accounts">Custom account</a>, and optionally sets it as the default for its currency. Other bank account details are not editable by design.</p> <p>You can re-enable a disabled bank account by performing an update call without providing any arguments or changes.</p>
     *
     * @name PostAccountExternalAccountsId
     * @request POST:/v1/account/external_accounts/{id}
     * @secure
     * @response `200` `ExternalAccount` Successful response.
     * @response `default` `Error` Error response.
     */
    postAccountExternalAccountsId: (
      id: string,
      data?: {
        account_holder_name?: string;
        account_holder_type?: "" | "company" | "individual";
        account_type?: "checking" | "futsu" | "savings" | "toza";
        address_city?: string;
        address_country?: string;
        address_line1?: string;
        address_line2?: string;
        address_state?: string;
        address_zip?: string;
        default_for_currency?: boolean;
        exp_month?: string;
        exp_year?: string;
        expand?: string[];
        metadata?: Record<string, string> | "" | (Record<string, string> & "");
        name?: string;
      },
      params: RequestParams = {},
    ) =>
      this.request<ExternalAccount, Error>({
        path: `/v1/account/external_accounts/${id}`,
        method: "POST",
        body: data,
        secure: true,
        type: ContentType.UrlEncoded,
        format: "json",
        ...params,
      }),

    /**
     * @description <p>Creates a single-use login link for an Express account to access their Stripe dashboard.</p> <p><strong>You may only create login links for <a href="/docs/connect/express-accounts">Express accounts</a> connected to your platform</strong>.</p>
     *
     * @name PostAccountLoginLinks
     * @request POST:/v1/account/login_links
     * @secure
     * @response `200` `LoginLink` Successful response.
     * @response `default` `Error` Error response.
     */
    postAccountLoginLinks: (
      data: { account: string; expand?: string[]; redirect_url?: string },
      params: RequestParams = {},
    ) =>
      this.request<LoginLink, Error>({
        path: `/v1/account/login_links`,
        method: "POST",
        body: data,
        secure: true,
        type: ContentType.UrlEncoded,
        format: "json",
        ...params,
      }),

    /**
     * @description <p>Returns a list of people associated with the account’s legal entity. The people are returned sorted by creation date, with the most recent people appearing first.</p>
     *
     * @name GetAccountPeople
     * @request GET:/v1/account/people
     * @secure
     * @response `200` `{ data: (Person)[], has_more: boolean, object: "list", url: string }` Successful response.
     * @response `default` `Error` Error response.
     */
    getAccountPeople: (
      query?: {
        ending_before?: string;
        expand?: string[];
        limit?: number;
        relationship?: { director?: boolean; executive?: boolean; owner?: boolean; representative?: boolean };
        starting_after?: string;
      },
      data?: CardMandatePaymentMethodDetails,
      params: RequestParams = {},
    ) =>
      this.request<{ data: Person[]; has_more: boolean; object: "list"; url: string }, Error>({
        path: `/v1/account/people`,
        method: "GET",
        query: query,
        body: data,
        secure: true,
        type: ContentType.UrlEncoded,
        format: "json",
        ...params,
      }),

    /**
     * @description <p>Creates a new person.</p>
     *
     * @name PostAccountPeople
     * @request POST:/v1/account/people
     * @secure
     * @response `200` `Person` Successful response.
     * @response `default` `Error` Error response.
     */
    postAccountPeople: (
      data?: {
        account?: string;
        address?: {
          city?: string;
          country?: string;
          line1?: string;
          line2?: string;
          postal_code?: string;
          state?: string;
        };
        address_kana?: {
          city?: string;
          country?: string;
          line1?: string;
          line2?: string;
          postal_code?: string;
          state?: string;
          town?: string;
        };
        address_kanji?: {
          city?: string;
          country?: string;
          line1?: string;
          line2?: string;
          postal_code?: string;
          state?: string;
          town?: string;
        };
        dob?: { day: number; month: number; year: number } | "" | ({ day: number; month: number; year: number } & "");
        documents?: {
          company_authorization?: { files?: string[] };
          passport?: { files?: string[] };
          visa?: { files?: string[] };
        };
        email?: string;
        expand?: string[];
        first_name?: string;
        first_name_kana?: string;
        first_name_kanji?: string;
        full_name_aliases?: string[] | "" | (string[] & "");
        gender?: string;
        id_number?: string;
        last_name?: string;
        last_name_kana?: string;
        last_name_kanji?: string;
        maiden_name?: string;
        metadata?: Record<string, string> | "" | (Record<string, string> & "");
        nationality?: string;
        person_token?: string;
        phone?: string;
        political_exposure?: string;
        relationship?: {
          director?: boolean;
          executive?: boolean;
          owner?: boolean;
          percent_ownership?: number | "";
          representative?: boolean;
          title?: string;
        };
        ssn_last_4?: string;
        verification?: {
          additional_document?: { back?: string; front?: string };
          document?: { back?: string; front?: string };
        };
      },
      params: RequestParams = {},
    ) =>
      this.request<Person, Error>({
        path: `/v1/account/people`,
        method: "POST",
        body: data,
        secure: true,
        type: ContentType.UrlEncoded,
        format: "json",
        ...params,
      }),

    /**
     * @description <p>Deletes an existing person’s relationship to the account’s legal entity. Any person with a relationship for an account can be deleted through the API, except if the person is the <code>account_opener</code>. If your integration is using the <code>executive</code> parameter, you cannot delete the only verified <code>executive</code> on file.</p>
     *
     * @name DeleteAccountPeoplePerson
     * @request DELETE:/v1/account/people/{person}
     * @secure
     * @response `200` `DeletedPerson` Successful response.
     * @response `default` `Error` Error response.
     */
    deleteAccountPeoplePerson: (person: string, data?: CardMandatePaymentMethodDetails, params: RequestParams = {}) =>
      this.request<DeletedPerson, Error>({
        path: `/v1/account/people/${person}`,
        method: "DELETE",
        body: data,
        secure: true,
        type: ContentType.UrlEncoded,
        format: "json",
        ...params,
      }),

    /**
     * @description <p>Retrieves an existing person.</p>
     *
     * @name GetAccountPeoplePerson
     * @request GET:/v1/account/people/{person}
     * @secure
     * @response `200` `Person` Successful response.
     * @response `default` `Error` Error response.
     */
    getAccountPeoplePerson: (
      person: string,
      query?: { expand?: string[] },
      data?: CardMandatePaymentMethodDetails,
      params: RequestParams = {},
    ) =>
      this.request<Person, Error>({
        path: `/v1/account/people/${person}`,
        method: "GET",
        query: query,
        body: data,
        secure: true,
        type: ContentType.UrlEncoded,
        format: "json",
        ...params,
      }),

    /**
     * @description <p>Updates an existing person.</p>
     *
     * @name PostAccountPeoplePerson
     * @request POST:/v1/account/people/{person}
     * @secure
     * @response `200` `Person` Successful response.
     * @response `default` `Error` Error response.
     */
    postAccountPeoplePerson: (
      person: string,
      data?: {
        account?: string;
        address?: {
          city?: string;
          country?: string;
          line1?: string;
          line2?: string;
          postal_code?: string;
          state?: string;
        };
        address_kana?: {
          city?: string;
          country?: string;
          line1?: string;
          line2?: string;
          postal_code?: string;
          state?: string;
          town?: string;
        };
        address_kanji?: {
          city?: string;
          country?: string;
          line1?: string;
          line2?: string;
          postal_code?: string;
          state?: string;
          town?: string;
        };
        dob?: { day: number; month: number; year: number } | "" | ({ day: number; month: number; year: number } & "");
        documents?: {
          company_authorization?: { files?: string[] };
          passport?: { files?: string[] };
          visa?: { files?: string[] };
        };
        email?: string;
        expand?: string[];
        first_name?: string;
        first_name_kana?: string;
        first_name_kanji?: string;
        full_name_aliases?: string[] | "" | (string[] & "");
        gender?: string;
        id_number?: string;
        last_name?: string;
        last_name_kana?: string;
        last_name_kanji?: string;
        maiden_name?: string;
        metadata?: Record<string, string> | "" | (Record<string, string> & "");
        nationality?: string;
        person_token?: string;
        phone?: string;
        political_exposure?: string;
        relationship?: {
          director?: boolean;
          executive?: boolean;
          owner?: boolean;
          percent_ownership?: number | "";
          representative?: boolean;
          title?: string;
        };
        ssn_last_4?: string;
        verification?: {
          additional_document?: { back?: string; front?: string };
          document?: { back?: string; front?: string };
        };
      },
      params: RequestParams = {},
    ) =>
      this.request<Person, Error>({
        path: `/v1/account/people/${person}`,
        method: "POST",
        body: data,
        secure: true,
        type: ContentType.UrlEncoded,
        format: "json",
        ...params,
      }),

    /**
     * @description <p>Returns a list of people associated with the account’s legal entity. The people are returned sorted by creation date, with the most recent people appearing first.</p>
     *
     * @name GetAccountPersons
     * @request GET:/v1/account/persons
     * @secure
     * @response `200` `{ data: (Person)[], has_more: boolean, object: "list", url: string }` Successful response.
     * @response `default` `Error` Error response.
     */
    getAccountPersons: (
      query?: {
        ending_before?: string;
        expand?: string[];
        limit?: number;
        relationship?: { director?: boolean; executive?: boolean; owner?: boolean; representative?: boolean };
        starting_after?: string;
      },
      data?: CardMandatePaymentMethodDetails,
      params: RequestParams = {},
    ) =>
      this.request<{ data: Person[]; has_more: boolean; object: "list"; url: string }, Error>({
        path: `/v1/account/persons`,
        method: "GET",
        query: query,
        body: data,
        secure: true,
        type: ContentType.UrlEncoded,
        format: "json",
        ...params,
      }),

    /**
     * @description <p>Creates a new person.</p>
     *
     * @name PostAccountPersons
     * @request POST:/v1/account/persons
     * @secure
     * @response `200` `Person` Successful response.
     * @response `default` `Error` Error response.
     */
    postAccountPersons: (
      data?: {
        account?: string;
        address?: {
          city?: string;
          country?: string;
          line1?: string;
          line2?: string;
          postal_code?: string;
          state?: string;
        };
        address_kana?: {
          city?: string;
          country?: string;
          line1?: string;
          line2?: string;
          postal_code?: string;
          state?: string;
          town?: string;
        };
        address_kanji?: {
          city?: string;
          country?: string;
          line1?: string;
          line2?: string;
          postal_code?: string;
          state?: string;
          town?: string;
        };
        dob?: { day: number; month: number; year: number } | "" | ({ day: number; month: number; year: number } & "");
        documents?: {
          company_authorization?: { files?: string[] };
          passport?: { files?: string[] };
          visa?: { files?: string[] };
        };
        email?: string;
        expand?: string[];
        first_name?: string;
        first_name_kana?: string;
        first_name_kanji?: string;
        full_name_aliases?: string[] | "" | (string[] & "");
        gender?: string;
        id_number?: string;
        last_name?: string;
        last_name_kana?: string;
        last_name_kanji?: string;
        maiden_name?: string;
        metadata?: Record<string, string> | "" | (Record<string, string> & "");
        nationality?: string;
        person_token?: string;
        phone?: string;
        political_exposure?: string;
        relationship?: {
          director?: boolean;
          executive?: boolean;
          owner?: boolean;
          percent_ownership?: number | "";
          representative?: boolean;
          title?: string;
        };
        ssn_last_4?: string;
        verification?: {
          additional_document?: { back?: string; front?: string };
          document?: { back?: string; front?: string };
        };
      },
      params: RequestParams = {},
    ) =>
      this.request<Person, Error>({
        path: `/v1/account/persons`,
        method: "POST",
        body: data,
        secure: true,
        type: ContentType.UrlEncoded,
        format: "json",
        ...params,
      }),

    /**
     * @description <p>Deletes an existing person’s relationship to the account’s legal entity. Any person with a relationship for an account can be deleted through the API, except if the person is the <code>account_opener</code>. If your integration is using the <code>executive</code> parameter, you cannot delete the only verified <code>executive</code> on file.</p>
     *
     * @name DeleteAccountPersonsPerson
     * @request DELETE:/v1/account/persons/{person}
     * @secure
     * @response `200` `DeletedPerson` Successful response.
     * @response `default` `Error` Error response.
     */
    deleteAccountPersonsPerson: (person: string, data?: CardMandatePaymentMethodDetails, params: RequestParams = {}) =>
      this.request<DeletedPerson, Error>({
        path: `/v1/account/persons/${person}`,
        method: "DELETE",
        body: data,
        secure: true,
        type: ContentType.UrlEncoded,
        format: "json",
        ...params,
      }),

    /**
     * @description <p>Retrieves an existing person.</p>
     *
     * @name GetAccountPersonsPerson
     * @request GET:/v1/account/persons/{person}
     * @secure
     * @response `200` `Person` Successful response.
     * @response `default` `Error` Error response.
     */
    getAccountPersonsPerson: (
      person: string,
      query?: { expand?: string[] },
      data?: CardMandatePaymentMethodDetails,
      params: RequestParams = {},
    ) =>
      this.request<Person, Error>({
        path: `/v1/account/persons/${person}`,
        method: "GET",
        query: query,
        body: data,
        secure: true,
        type: ContentType.UrlEncoded,
        format: "json",
        ...params,
      }),

    /**
     * @description <p>Updates an existing person.</p>
     *
     * @name PostAccountPersonsPerson
     * @request POST:/v1/account/persons/{person}
     * @secure
     * @response `200` `Person` Successful response.
     * @response `default` `Error` Error response.
     */
    postAccountPersonsPerson: (
      person: string,
      data?: {
        account?: string;
        address?: {
          city?: string;
          country?: string;
          line1?: string;
          line2?: string;
          postal_code?: string;
          state?: string;
        };
        address_kana?: {
          city?: string;
          country?: string;
          line1?: string;
          line2?: string;
          postal_code?: string;
          state?: string;
          town?: string;
        };
        address_kanji?: {
          city?: string;
          country?: string;
          line1?: string;
          line2?: string;
          postal_code?: string;
          state?: string;
          town?: string;
        };
        dob?: { day: number; month: number; year: number } | "" | ({ day: number; month: number; year: number } & "");
        documents?: {
          company_authorization?: { files?: string[] };
          passport?: { files?: string[] };
          visa?: { files?: string[] };
        };
        email?: string;
        expand?: string[];
        first_name?: string;
        first_name_kana?: string;
        first_name_kanji?: string;
        full_name_aliases?: string[] | "" | (string[] & "");
        gender?: string;
        id_number?: string;
        last_name?: string;
        last_name_kana?: string;
        last_name_kanji?: string;
        maiden_name?: string;
        metadata?: Record<string, string> | "" | (Record<string, string> & "");
        nationality?: string;
        person_token?: string;
        phone?: string;
        political_exposure?: string;
        relationship?: {
          director?: boolean;
          executive?: boolean;
          owner?: boolean;
          percent_ownership?: number | "";
          representative?: boolean;
          title?: string;
        };
        ssn_last_4?: string;
        verification?: {
          additional_document?: { back?: string; front?: string };
          document?: { back?: string; front?: string };
        };
      },
      params: RequestParams = {},
    ) =>
      this.request<Person, Error>({
        path: `/v1/account/persons/${person}`,
        method: "POST",
        body: data,
        secure: true,
        type: ContentType.UrlEncoded,
        format: "json",
        ...params,
      }),

    /**
     * @description <p>Creates an AccountLink object that includes a single-use Stripe URL that the platform can redirect their user to in order to take them through the Connect Onboarding flow.</p>
     *
     * @name PostAccountLinks
     * @request POST:/v1/account_links
     * @secure
     * @response `200` `AccountLink` Successful response.
     * @response `default` `Error` Error response.
     */
    postAccountLinks: (
      data: {
        account: string;
        collect?: "currently_due" | "eventually_due";
        expand?: string[];
        refresh_url?: string;
        return_url?: string;
        type: "account_onboarding" | "account_update";
      },
      params: RequestParams = {},
    ) =>
      this.request<AccountLink, Error>({
        path: `/v1/account_links`,
        method: "POST",
        body: data,
        secure: true,
        type: ContentType.UrlEncoded,
        format: "json",
        ...params,
      }),

    /**
     * @description <p>Returns a list of accounts connected to your platform via <a href="/docs/connect">Connect</a>. If you’re not a platform, the list is empty.</p>
     *
     * @name GetAccounts
     * @request GET:/v1/accounts
     * @secure
     * @response `200` `{ data: (Account)[], has_more: boolean, object: "list", url: string }` Successful response.
     * @response `default` `Error` Error response.
     */
    getAccounts: (
      query?: {
        created?: { gt?: number; gte?: number; lt?: number; lte?: number } | number;
        ending_before?: string;
        expand?: string[];
        limit?: number;
        starting_after?: string;
      },
      data?: CardMandatePaymentMethodDetails,
      params: RequestParams = {},
    ) =>
      this.request<{ data: Account[]; has_more: boolean; object: "list"; url: string }, Error>({
        path: `/v1/accounts`,
        method: "GET",
        query: query,
        body: data,
        secure: true,
        type: ContentType.UrlEncoded,
        format: "json",
        ...params,
      }),

    /**
     * @description <p>With <a href="/docs/connect">Connect</a>, you can create Stripe accounts for your users. To do this, you’ll first need to <a href="https://dashboard.stripe.com/account/applications/settings">register your platform</a>.</p>
     *
     * @name PostAccounts
     * @request POST:/v1/accounts
     * @secure
     * @response `200` `Account` Successful response.
     * @response `default` `Error` Error response.
     */
    postAccounts: (
      data?: {
        account_token?: string;
        bank_account?:
          | {
              account_holder_name?: string;
              account_holder_type?: "company" | "individual";
              account_number: string;
              account_type?: "checking" | "futsu" | "savings" | "toza";
              country: string;
              currency?: string;
              object?: "bank_account";
              routing_number?: string;
            }
          | string;
        business_profile?: {
          mcc?: string;
          name?: string;
          product_description?: string;
          support_address?: {
            city?: string;
            country?: string;
            line1?: string;
            line2?: string;
            postal_code?: string;
            state?: string;
          };
          support_email?: string;
          support_phone?: string;
          support_url?: string | "";
          url?: string;
        };
        business_type?: "company" | "government_entity" | "individual" | "non_profit";
        capabilities?: {
          acss_debit_payments?: { requested?: boolean };
          afterpay_clearpay_payments?: { requested?: boolean };
          au_becs_debit_payments?: { requested?: boolean };
          bacs_debit_payments?: { requested?: boolean };
          bancontact_payments?: { requested?: boolean };
          boleto_payments?: { requested?: boolean };
          card_issuing?: { requested?: boolean };
          card_payments?: { requested?: boolean };
          cartes_bancaires_payments?: { requested?: boolean };
          eps_payments?: { requested?: boolean };
          fpx_payments?: { requested?: boolean };
          giropay_payments?: { requested?: boolean };
          grabpay_payments?: { requested?: boolean };
          ideal_payments?: { requested?: boolean };
          jcb_payments?: { requested?: boolean };
          klarna_payments?: { requested?: boolean };
          legacy_payments?: { requested?: boolean };
          oxxo_payments?: { requested?: boolean };
          p24_payments?: { requested?: boolean };
          sepa_debit_payments?: { requested?: boolean };
          sofort_payments?: { requested?: boolean };
          tax_reporting_us_1099_k?: { requested?: boolean };
          tax_reporting_us_1099_misc?: { requested?: boolean };
          transfers?: { requested?: boolean };
        };
        company?: {
          address?: {
            city?: string;
            country?: string;
            line1?: string;
            line2?: string;
            postal_code?: string;
            state?: string;
          };
          address_kana?: {
            city?: string;
            country?: string;
            line1?: string;
            line2?: string;
            postal_code?: string;
            state?: string;
            town?: string;
          };
          address_kanji?: {
            city?: string;
            country?: string;
            line1?: string;
            line2?: string;
            postal_code?: string;
            state?: string;
            town?: string;
          };
          directors_provided?: boolean;
          executives_provided?: boolean;
          name?: string;
          name_kana?: string;
          name_kanji?: string;
          owners_provided?: boolean;
          ownership_declaration?: { date?: number; ip?: string; user_agent?: string };
          phone?: string;
          registration_number?: string;
          structure?:
            | ""
            | "free_zone_establishment"
            | "free_zone_llc"
            | "government_instrumentality"
            | "governmental_unit"
            | "incorporated_non_profit"
            | "limited_liability_partnership"
            | "llc"
            | "multi_member_llc"
            | "private_company"
            | "private_corporation"
            | "private_partnership"
            | "public_company"
            | "public_corporation"
            | "public_partnership"
            | "single_member_llc"
            | "sole_establishment"
            | "sole_proprietorship"
            | "tax_exempt_government_instrumentality"
            | "unincorporated_association"
            | "unincorporated_non_profit";
          tax_id?: string;
          tax_id_registrar?: string;
          vat_id?: string;
          verification?: { document?: { back?: string; front?: string } };
        };
        country?: string;
        default_currency?: string;
        documents?: {
          bank_account_ownership_verification?: { files?: string[] };
          company_license?: { files?: string[] };
          company_memorandum_of_association?: { files?: string[] };
          company_ministerial_decree?: { files?: string[] };
          company_registration_verification?: { files?: string[] };
          company_tax_id_verification?: { files?: string[] };
          proof_of_registration?: { files?: string[] };
        };
        email?: string;
        expand?: string[];
        external_account?: string;
        individual?: {
          address?: {
            city?: string;
            country?: string;
            line1?: string;
            line2?: string;
            postal_code?: string;
            state?: string;
          };
          address_kana?: {
            city?: string;
            country?: string;
            line1?: string;
            line2?: string;
            postal_code?: string;
            state?: string;
            town?: string;
          };
          address_kanji?: {
            city?: string;
            country?: string;
            line1?: string;
            line2?: string;
            postal_code?: string;
            state?: string;
            town?: string;
          };
          dob?: { day: number; month: number; year: number } | "" | ({ day: number; month: number; year: number } & "");
          email?: string;
          first_name?: string;
          first_name_kana?: string;
          first_name_kanji?: string;
          full_name_aliases?: string[] | "" | (string[] & "");
          gender?: string;
          id_number?: string;
          last_name?: string;
          last_name_kana?: string;
          last_name_kanji?: string;
          maiden_name?: string;
          metadata?: Record<string, string> | "" | (Record<string, string> & "");
          phone?: string;
          political_exposure?: "existing" | "none";
          ssn_last_4?: string;
          verification?: {
            additional_document?: { back?: string; front?: string };
            document?: { back?: string; front?: string };
          };
        };
        metadata?: Record<string, string> | "" | (Record<string, string> & "");
        settings?: {
          branding?: { icon?: string; logo?: string; primary_color?: string; secondary_color?: string };
          card_issuing?: { tos_acceptance?: { date?: number; ip?: string; user_agent?: string } };
          card_payments?: {
            decline_on?: { avs_failure?: boolean; cvc_failure?: boolean };
            statement_descriptor_prefix?: string;
          };
          payments?: {
            statement_descriptor?: string;
            statement_descriptor_kana?: string;
            statement_descriptor_kanji?: string;
          };
          payouts?: {
            debit_negative_balances?: boolean;
            schedule?: {
              delay_days?: "minimum" | number;
              interval?: "daily" | "manual" | "monthly" | "weekly";
              monthly_anchor?: number;
              weekly_anchor?: "friday" | "monday" | "saturday" | "sunday" | "thursday" | "tuesday" | "wednesday";
            };
            statement_descriptor?: string;
          };
        };
        tos_acceptance?: { date?: number; ip?: string; service_agreement?: string; user_agent?: string };
        type?: "custom" | "express" | "standard";
      },
      params: RequestParams = {},
    ) =>
      this.request<Account, Error>({
        path: `/v1/accounts`,
        method: "POST",
        body: data,
        secure: true,
        type: ContentType.UrlEncoded,
        format: "json",
        ...params,
      }),

    /**
     * @description <p>With <a href="/docs/connect">Connect</a>, you can delete accounts you manage.</p> <p>Accounts created using test-mode keys can be deleted at any time. Custom or Express accounts created using live-mode keys can only be deleted once all balances are zero.</p> <p>If you want to delete your own account, use the <a href="https://dashboard.stripe.com/account">account information tab in your account settings</a> instead.</p>
     *
     * @name DeleteAccountsAccount
     * @request DELETE:/v1/accounts/{account}
     * @secure
     * @response `200` `DeletedAccount` Successful response.
     * @response `default` `Error` Error response.
     */
    deleteAccountsAccount: (account: string, data?: CardMandatePaymentMethodDetails, params: RequestParams = {}) =>
      this.request<DeletedAccount, Error>({
        path: `/v1/accounts/${account}`,
        method: "DELETE",
        body: data,
        secure: true,
        type: ContentType.UrlEncoded,
        format: "json",
        ...params,
      }),

    /**
     * @description <p>Retrieves the details of an account.</p>
     *
     * @name GetAccountsAccount
     * @request GET:/v1/accounts/{account}
     * @secure
     * @response `200` `Account` Successful response.
     * @response `default` `Error` Error response.
     */
    getAccountsAccount: (
      account: string,
      query?: { expand?: string[] },
      data?: CardMandatePaymentMethodDetails,
      params: RequestParams = {},
    ) =>
      this.request<Account, Error>({
        path: `/v1/accounts/${account}`,
        method: "GET",
        query: query,
        body: data,
        secure: true,
        type: ContentType.UrlEncoded,
        format: "json",
        ...params,
      }),

    /**
     * @description <p>Updates a <a href="/docs/connect/accounts">connected account</a> by setting the values of the parameters passed. Any parameters not provided are left unchanged. Most parameters can be changed only for Custom accounts. (These are marked <strong>Custom Only</strong> below.) Parameters marked <strong>Custom and Express</strong> are not supported for Standard accounts.</p> <p>To update your own account, use the <a href="https://dashboard.stripe.com/account">Dashboard</a>. Refer to our <a href="/docs/connect/updating-accounts">Connect</a> documentation to learn more about updating accounts.</p>
     *
     * @name PostAccountsAccount
     * @request POST:/v1/accounts/{account}
     * @secure
     * @response `200` `Account` Successful response.
     * @response `default` `Error` Error response.
     */
    postAccountsAccount: (
      account: string,
      data?: {
        account_token?: string;
        bank_account?:
          | {
              account_holder_name?: string;
              account_holder_type?: "company" | "individual";
              account_number: string;
              account_type?: "checking" | "futsu" | "savings" | "toza";
              country: string;
              currency?: string;
              object?: "bank_account";
              routing_number?: string;
            }
          | string;
        business_profile?: {
          mcc?: string;
          name?: string;
          product_description?: string;
          support_address?: {
            city?: string;
            country?: string;
            line1?: string;
            line2?: string;
            postal_code?: string;
            state?: string;
          };
          support_email?: string;
          support_phone?: string;
          support_url?: string | "";
          url?: string;
        };
        business_type?: "company" | "government_entity" | "individual" | "non_profit";
        capabilities?: {
          acss_debit_payments?: { requested?: boolean };
          afterpay_clearpay_payments?: { requested?: boolean };
          au_becs_debit_payments?: { requested?: boolean };
          bacs_debit_payments?: { requested?: boolean };
          bancontact_payments?: { requested?: boolean };
          boleto_payments?: { requested?: boolean };
          card_issuing?: { requested?: boolean };
          card_payments?: { requested?: boolean };
          cartes_bancaires_payments?: { requested?: boolean };
          eps_payments?: { requested?: boolean };
          fpx_payments?: { requested?: boolean };
          giropay_payments?: { requested?: boolean };
          grabpay_payments?: { requested?: boolean };
          ideal_payments?: { requested?: boolean };
          jcb_payments?: { requested?: boolean };
          klarna_payments?: { requested?: boolean };
          legacy_payments?: { requested?: boolean };
          oxxo_payments?: { requested?: boolean };
          p24_payments?: { requested?: boolean };
          sepa_debit_payments?: { requested?: boolean };
          sofort_payments?: { requested?: boolean };
          tax_reporting_us_1099_k?: { requested?: boolean };
          tax_reporting_us_1099_misc?: { requested?: boolean };
          transfers?: { requested?: boolean };
        };
        company?: {
          address?: {
            city?: string;
            country?: string;
            line1?: string;
            line2?: string;
            postal_code?: string;
            state?: string;
          };
          address_kana?: {
            city?: string;
            country?: string;
            line1?: string;
            line2?: string;
            postal_code?: string;
            state?: string;
            town?: string;
          };
          address_kanji?: {
            city?: string;
            country?: string;
            line1?: string;
            line2?: string;
            postal_code?: string;
            state?: string;
            town?: string;
          };
          directors_provided?: boolean;
          executives_provided?: boolean;
          name?: string;
          name_kana?: string;
          name_kanji?: string;
          owners_provided?: boolean;
          ownership_declaration?: { date?: number; ip?: string; user_agent?: string };
          phone?: string;
          registration_number?: string;
          structure?:
            | ""
            | "free_zone_establishment"
            | "free_zone_llc"
            | "government_instrumentality"
            | "governmental_unit"
            | "incorporated_non_profit"
            | "limited_liability_partnership"
            | "llc"
            | "multi_member_llc"
            | "private_company"
            | "private_corporation"
            | "private_partnership"
            | "public_company"
            | "public_corporation"
            | "public_partnership"
            | "single_member_llc"
            | "sole_establishment"
            | "sole_proprietorship"
            | "tax_exempt_government_instrumentality"
            | "unincorporated_association"
            | "unincorporated_non_profit";
          tax_id?: string;
          tax_id_registrar?: string;
          vat_id?: string;
          verification?: { document?: { back?: string; front?: string } };
        };
        default_currency?: string;
        documents?: {
          bank_account_ownership_verification?: { files?: string[] };
          company_license?: { files?: string[] };
          company_memorandum_of_association?: { files?: string[] };
          company_ministerial_decree?: { files?: string[] };
          company_registration_verification?: { files?: string[] };
          company_tax_id_verification?: { files?: string[] };
          proof_of_registration?: { files?: string[] };
        };
        email?: string;
        expand?: string[];
        external_account?: string;
        individual?: {
          address?: {
            city?: string;
            country?: string;
            line1?: string;
            line2?: string;
            postal_code?: string;
            state?: string;
          };
          address_kana?: {
            city?: string;
            country?: string;
            line1?: string;
            line2?: string;
            postal_code?: string;
            state?: string;
            town?: string;
          };
          address_kanji?: {
            city?: string;
            country?: string;
            line1?: string;
            line2?: string;
            postal_code?: string;
            state?: string;
            town?: string;
          };
          dob?: { day: number; month: number; year: number } | "" | ({ day: number; month: number; year: number } & "");
          email?: string;
          first_name?: string;
          first_name_kana?: string;
          first_name_kanji?: string;
          full_name_aliases?: string[] | "" | (string[] & "");
          gender?: string;
          id_number?: string;
          last_name?: string;
          last_name_kana?: string;
          last_name_kanji?: string;
          maiden_name?: string;
          metadata?: Record<string, string> | "" | (Record<string, string> & "");
          phone?: string;
          political_exposure?: "existing" | "none";
          ssn_last_4?: string;
          verification?: {
            additional_document?: { back?: string; front?: string };
            document?: { back?: string; front?: string };
          };
        };
        metadata?: Record<string, string> | "" | (Record<string, string> & "");
        settings?: {
          branding?: { icon?: string; logo?: string; primary_color?: string; secondary_color?: string };
          card_issuing?: { tos_acceptance?: { date?: number; ip?: string; user_agent?: string } };
          card_payments?: {
            decline_on?: { avs_failure?: boolean; cvc_failure?: boolean };
            statement_descriptor_prefix?: string;
          };
          payments?: {
            statement_descriptor?: string;
            statement_descriptor_kana?: string;
            statement_descriptor_kanji?: string;
          };
          payouts?: {
            debit_negative_balances?: boolean;
            schedule?: {
              delay_days?: "minimum" | number;
              interval?: "daily" | "manual" | "monthly" | "weekly";
              monthly_anchor?: number;
              weekly_anchor?: "friday" | "monday" | "saturday" | "sunday" | "thursday" | "tuesday" | "wednesday";
            };
            statement_descriptor?: string;
          };
        };
        tos_acceptance?: { date?: number; ip?: string; service_agreement?: string; user_agent?: string };
      },
      params: RequestParams = {},
    ) =>
      this.request<Account, Error>({
        path: `/v1/accounts/${account}`,
        method: "POST",
        body: data,
        secure: true,
        type: ContentType.UrlEncoded,
        format: "json",
        ...params,
      }),

    /**
     * @description <p>Create an external account for a given account.</p>
     *
     * @name PostAccountsAccountBankAccounts
     * @request POST:/v1/accounts/{account}/bank_accounts
     * @secure
     * @response `200` `ExternalAccount` Successful response.
     * @response `default` `Error` Error response.
     */
    postAccountsAccountBankAccounts: (
      account: string,
      data?: {
        bank_account?:
          | {
              account_holder_name?: string;
              account_holder_type?: "company" | "individual";
              account_number: string;
              account_type?: "checking" | "futsu" | "savings" | "toza";
              country: string;
              currency?: string;
              object?: "bank_account";
              routing_number?: string;
            }
          | string;
        default_for_currency?: boolean;
        expand?: string[];
        external_account?: string;
        metadata?: Record<string, string>;
      },
      params: RequestParams = {},
    ) =>
      this.request<ExternalAccount, Error>({
        path: `/v1/accounts/${account}/bank_accounts`,
        method: "POST",
        body: data,
        secure: true,
        type: ContentType.UrlEncoded,
        format: "json",
        ...params,
      }),

    /**
     * @description <p>Delete a specified external account for a given account.</p>
     *
     * @name DeleteAccountsAccountBankAccountsId
     * @request DELETE:/v1/accounts/{account}/bank_accounts/{id}
     * @secure
     * @response `200` `DeletedExternalAccount` Successful response.
     * @response `default` `Error` Error response.
     */
    deleteAccountsAccountBankAccountsId: (
      account: string,
      id: string,
      data?: CardMandatePaymentMethodDetails,
      params: RequestParams = {},
    ) =>
      this.request<DeletedExternalAccount, Error>({
        path: `/v1/accounts/${account}/bank_accounts/${id}`,
        method: "DELETE",
        body: data,
        secure: true,
        type: ContentType.UrlEncoded,
        format: "json",
        ...params,
      }),

    /**
     * @description <p>Retrieve a specified external account for a given account.</p>
     *
     * @name GetAccountsAccountBankAccountsId
     * @request GET:/v1/accounts/{account}/bank_accounts/{id}
     * @secure
     * @response `200` `ExternalAccount` Successful response.
     * @response `default` `Error` Error response.
     */
    getAccountsAccountBankAccountsId: (
      account: string,
      id: string,
      query?: { expand?: string[] },
      data?: CardMandatePaymentMethodDetails,
      params: RequestParams = {},
    ) =>
      this.request<ExternalAccount, Error>({
        path: `/v1/accounts/${account}/bank_accounts/${id}`,
        method: "GET",
        query: query,
        body: data,
        secure: true,
        type: ContentType.UrlEncoded,
        format: "json",
        ...params,
      }),

    /**
     * @description <p>Updates the metadata, account holder name, account holder type of a bank account belonging to a <a href="/docs/connect/custom-accounts">Custom account</a>, and optionally sets it as the default for its currency. Other bank account details are not editable by design.</p> <p>You can re-enable a disabled bank account by performing an update call without providing any arguments or changes.</p>
     *
     * @name PostAccountsAccountBankAccountsId
     * @request POST:/v1/accounts/{account}/bank_accounts/{id}
     * @secure
     * @response `200` `ExternalAccount` Successful response.
     * @response `default` `Error` Error response.
     */
    postAccountsAccountBankAccountsId: (
      account: string,
      id: string,
      data?: {
        account_holder_name?: string;
        account_holder_type?: "" | "company" | "individual";
        account_type?: "checking" | "futsu" | "savings" | "toza";
        address_city?: string;
        address_country?: string;
        address_line1?: string;
        address_line2?: string;
        address_state?: string;
        address_zip?: string;
        default_for_currency?: boolean;
        exp_month?: string;
        exp_year?: string;
        expand?: string[];
        metadata?: Record<string, string> | "" | (Record<string, string> & "");
        name?: string;
      },
      params: RequestParams = {},
    ) =>
      this.request<ExternalAccount, Error>({
        path: `/v1/accounts/${account}/bank_accounts/${id}`,
        method: "POST",
        body: data,
        secure: true,
        type: ContentType.UrlEncoded,
        format: "json",
        ...params,
      }),

    /**
     * @description <p>Returns a list of capabilities associated with the account. The capabilities are returned sorted by creation date, with the most recent capability appearing first.</p>
     *
     * @name GetAccountsAccountCapabilities
     * @request GET:/v1/accounts/{account}/capabilities
     * @secure
     * @response `200` `{ data: (Capability)[], has_more: boolean, object: "list", url: string }` Successful response.
     * @response `default` `Error` Error response.
     */
    getAccountsAccountCapabilities: (
      account: string,
      query?: { expand?: string[] },
      data?: CardMandatePaymentMethodDetails,
      params: RequestParams = {},
    ) =>
      this.request<{ data: Capability[]; has_more: boolean; object: "list"; url: string }, Error>({
        path: `/v1/accounts/${account}/capabilities`,
        method: "GET",
        query: query,
        body: data,
        secure: true,
        type: ContentType.UrlEncoded,
        format: "json",
        ...params,
      }),

    /**
     * @description <p>Retrieves information about the specified Account Capability.</p>
     *
     * @name GetAccountsAccountCapabilitiesCapability
     * @request GET:/v1/accounts/{account}/capabilities/{capability}
     * @secure
     * @response `200` `Capability` Successful response.
     * @response `default` `Error` Error response.
     */
    getAccountsAccountCapabilitiesCapability: (
      account: string,
      capability: string,
      query?: { expand?: string[] },
      data?: CardMandatePaymentMethodDetails,
      params: RequestParams = {},
    ) =>
      this.request<Capability, Error>({
        path: `/v1/accounts/${account}/capabilities/${capability}`,
        method: "GET",
        query: query,
        body: data,
        secure: true,
        type: ContentType.UrlEncoded,
        format: "json",
        ...params,
      }),

    /**
     * @description <p>Updates an existing Account Capability.</p>
     *
     * @name PostAccountsAccountCapabilitiesCapability
     * @request POST:/v1/accounts/{account}/capabilities/{capability}
     * @secure
     * @response `200` `Capability` Successful response.
     * @response `default` `Error` Error response.
     */
    postAccountsAccountCapabilitiesCapability: (
      account: string,
      capability: string,
      data?: { expand?: string[]; requested?: boolean },
      params: RequestParams = {},
    ) =>
      this.request<Capability, Error>({
        path: `/v1/accounts/${account}/capabilities/${capability}`,
        method: "POST",
        body: data,
        secure: true,
        type: ContentType.UrlEncoded,
        format: "json",
        ...params,
      }),

    /**
     * @description <p>List external accounts for an account.</p>
     *
     * @name GetAccountsAccountExternalAccounts
     * @request GET:/v1/accounts/{account}/external_accounts
     * @secure
     * @response `200` `{ data: ((BankAccount | Card | (BankAccount & Card)))[], has_more: boolean, object: "list", url: string }` Successful response.
     * @response `default` `Error` Error response.
     */
    getAccountsAccountExternalAccounts: (
      account: string,
      query?: { ending_before?: string; expand?: string[]; limit?: number; starting_after?: string },
      data?: CardMandatePaymentMethodDetails,
      params: RequestParams = {},
    ) =>
      this.request<
        { data: (BankAccount | Card | (BankAccount & Card))[]; has_more: boolean; object: "list"; url: string },
        Error
      >({
        path: `/v1/accounts/${account}/external_accounts`,
        method: "GET",
        query: query,
        body: data,
        secure: true,
        type: ContentType.UrlEncoded,
        format: "json",
        ...params,
      }),

    /**
     * @description <p>Create an external account for a given account.</p>
     *
     * @name PostAccountsAccountExternalAccounts
     * @request POST:/v1/accounts/{account}/external_accounts
     * @secure
     * @response `200` `ExternalAccount` Successful response.
     * @response `default` `Error` Error response.
     */
    postAccountsAccountExternalAccounts: (
      account: string,
      data?: {
        bank_account?:
          | {
              account_holder_name?: string;
              account_holder_type?: "company" | "individual";
              account_number: string;
              account_type?: "checking" | "futsu" | "savings" | "toza";
              country: string;
              currency?: string;
              object?: "bank_account";
              routing_number?: string;
            }
          | string;
        default_for_currency?: boolean;
        expand?: string[];
        external_account?: string;
        metadata?: Record<string, string>;
      },
      params: RequestParams = {},
    ) =>
      this.request<ExternalAccount, Error>({
        path: `/v1/accounts/${account}/external_accounts`,
        method: "POST",
        body: data,
        secure: true,
        type: ContentType.UrlEncoded,
        format: "json",
        ...params,
      }),

    /**
     * @description <p>Delete a specified external account for a given account.</p>
     *
     * @name DeleteAccountsAccountExternalAccountsId
     * @request DELETE:/v1/accounts/{account}/external_accounts/{id}
     * @secure
     * @response `200` `DeletedExternalAccount` Successful response.
     * @response `default` `Error` Error response.
     */
    deleteAccountsAccountExternalAccountsId: (
      account: string,
      id: string,
      data?: CardMandatePaymentMethodDetails,
      params: RequestParams = {},
    ) =>
      this.request<DeletedExternalAccount, Error>({
        path: `/v1/accounts/${account}/external_accounts/${id}`,
        method: "DELETE",
        body: data,
        secure: true,
        type: ContentType.UrlEncoded,
        format: "json",
        ...params,
      }),

    /**
     * @description <p>Retrieve a specified external account for a given account.</p>
     *
     * @name GetAccountsAccountExternalAccountsId
     * @request GET:/v1/accounts/{account}/external_accounts/{id}
     * @secure
     * @response `200` `ExternalAccount` Successful response.
     * @response `default` `Error` Error response.
     */
    getAccountsAccountExternalAccountsId: (
      account: string,
      id: string,
      query?: { expand?: string[] },
      data?: CardMandatePaymentMethodDetails,
      params: RequestParams = {},
    ) =>
      this.request<ExternalAccount, Error>({
        path: `/v1/accounts/${account}/external_accounts/${id}`,
        method: "GET",
        query: query,
        body: data,
        secure: true,
        type: ContentType.UrlEncoded,
        format: "json",
        ...params,
      }),

    /**
     * @description <p>Updates the metadata, account holder name, account holder type of a bank account belonging to a <a href="/docs/connect/custom-accounts">Custom account</a>, and optionally sets it as the default for its currency. Other bank account details are not editable by design.</p> <p>You can re-enable a disabled bank account by performing an update call without providing any arguments or changes.</p>
     *
     * @name PostAccountsAccountExternalAccountsId
     * @request POST:/v1/accounts/{account}/external_accounts/{id}
     * @secure
     * @response `200` `ExternalAccount` Successful response.
     * @response `default` `Error` Error response.
     */
    postAccountsAccountExternalAccountsId: (
      account: string,
      id: string,
      data?: {
        account_holder_name?: string;
        account_holder_type?: "" | "company" | "individual";
        account_type?: "checking" | "futsu" | "savings" | "toza";
        address_city?: string;
        address_country?: string;
        address_line1?: string;
        address_line2?: string;
        address_state?: string;
        address_zip?: string;
        default_for_currency?: boolean;
        exp_month?: string;
        exp_year?: string;
        expand?: string[];
        metadata?: Record<string, string> | "" | (Record<string, string> & "");
        name?: string;
      },
      params: RequestParams = {},
    ) =>
      this.request<ExternalAccount, Error>({
        path: `/v1/accounts/${account}/external_accounts/${id}`,
        method: "POST",
        body: data,
        secure: true,
        type: ContentType.UrlEncoded,
        format: "json",
        ...params,
      }),

    /**
     * @description <p>Creates a single-use login link for an Express account to access their Stripe dashboard.</p> <p><strong>You may only create login links for <a href="/docs/connect/express-accounts">Express accounts</a> connected to your platform</strong>.</p>
     *
     * @name PostAccountsAccountLoginLinks
     * @request POST:/v1/accounts/{account}/login_links
     * @secure
     * @response `200` `LoginLink` Successful response.
     * @response `default` `Error` Error response.
     */
    postAccountsAccountLoginLinks: (
      account: string,
      data?: { expand?: string[]; redirect_url?: string },
      params: RequestParams = {},
    ) =>
      this.request<LoginLink, Error>({
        path: `/v1/accounts/${account}/login_links`,
        method: "POST",
        body: data,
        secure: true,
        type: ContentType.UrlEncoded,
        format: "json",
        ...params,
      }),

    /**
     * @description <p>Returns a list of people associated with the account’s legal entity. The people are returned sorted by creation date, with the most recent people appearing first.</p>
     *
     * @name GetAccountsAccountPeople
     * @request GET:/v1/accounts/{account}/people
     * @secure
     * @response `200` `{ data: (Person)[], has_more: boolean, object: "list", url: string }` Successful response.
     * @response `default` `Error` Error response.
     */
    getAccountsAccountPeople: (
      account: string,
      query?: {
        ending_before?: string;
        expand?: string[];
        limit?: number;
        relationship?: { director?: boolean; executive?: boolean; owner?: boolean; representative?: boolean };
        starting_after?: string;
      },
      data?: CardMandatePaymentMethodDetails,
      params: RequestParams = {},
    ) =>
      this.request<{ data: Person[]; has_more: boolean; object: "list"; url: string }, Error>({
        path: `/v1/accounts/${account}/people`,
        method: "GET",
        query: query,
        body: data,
        secure: true,
        type: ContentType.UrlEncoded,
        format: "json",
        ...params,
      }),

    /**
     * @description <p>Creates a new person.</p>
     *
     * @name PostAccountsAccountPeople
     * @request POST:/v1/accounts/{account}/people
     * @secure
     * @response `200` `Person` Successful response.
     * @response `default` `Error` Error response.
     */
    postAccountsAccountPeople: (
      account: string,
      data?: {
        address?: {
          city?: string;
          country?: string;
          line1?: string;
          line2?: string;
          postal_code?: string;
          state?: string;
        };
        address_kana?: {
          city?: string;
          country?: string;
          line1?: string;
          line2?: string;
          postal_code?: string;
          state?: string;
          town?: string;
        };
        address_kanji?: {
          city?: string;
          country?: string;
          line1?: string;
          line2?: string;
          postal_code?: string;
          state?: string;
          town?: string;
        };
        dob?: { day: number; month: number; year: number } | "" | ({ day: number; month: number; year: number } & "");
        documents?: {
          company_authorization?: { files?: string[] };
          passport?: { files?: string[] };
          visa?: { files?: string[] };
        };
        email?: string;
        expand?: string[];
        first_name?: string;
        first_name_kana?: string;
        first_name_kanji?: string;
        full_name_aliases?: string[] | "" | (string[] & "");
        gender?: string;
        id_number?: string;
        last_name?: string;
        last_name_kana?: string;
        last_name_kanji?: string;
        maiden_name?: string;
        metadata?: Record<string, string> | "" | (Record<string, string> & "");
        nationality?: string;
        person_token?: string;
        phone?: string;
        political_exposure?: string;
        relationship?: {
          director?: boolean;
          executive?: boolean;
          owner?: boolean;
          percent_ownership?: number | "";
          representative?: boolean;
          title?: string;
        };
        ssn_last_4?: string;
        verification?: {
          additional_document?: { back?: string; front?: string };
          document?: { back?: string; front?: string };
        };
      },
      params: RequestParams = {},
    ) =>
      this.request<Person, Error>({
        path: `/v1/accounts/${account}/people`,
        method: "POST",
        body: data,
        secure: true,
        type: ContentType.UrlEncoded,
        format: "json",
        ...params,
      }),

    /**
     * @description <p>Deletes an existing person’s relationship to the account’s legal entity. Any person with a relationship for an account can be deleted through the API, except if the person is the <code>account_opener</code>. If your integration is using the <code>executive</code> parameter, you cannot delete the only verified <code>executive</code> on file.</p>
     *
     * @name DeleteAccountsAccountPeoplePerson
     * @request DELETE:/v1/accounts/{account}/people/{person}
     * @secure
     * @response `200` `DeletedPerson` Successful response.
     * @response `default` `Error` Error response.
     */
    deleteAccountsAccountPeoplePerson: (
      account: string,
      person: string,
      data?: CardMandatePaymentMethodDetails,
      params: RequestParams = {},
    ) =>
      this.request<DeletedPerson, Error>({
        path: `/v1/accounts/${account}/people/${person}`,
        method: "DELETE",
        body: data,
        secure: true,
        type: ContentType.UrlEncoded,
        format: "json",
        ...params,
      }),

    /**
     * @description <p>Retrieves an existing person.</p>
     *
     * @name GetAccountsAccountPeoplePerson
     * @request GET:/v1/accounts/{account}/people/{person}
     * @secure
     * @response `200` `Person` Successful response.
     * @response `default` `Error` Error response.
     */
    getAccountsAccountPeoplePerson: (
      account: string,
      person: string,
      query?: { expand?: string[] },
      data?: CardMandatePaymentMethodDetails,
      params: RequestParams = {},
    ) =>
      this.request<Person, Error>({
        path: `/v1/accounts/${account}/people/${person}`,
        method: "GET",
        query: query,
        body: data,
        secure: true,
        type: ContentType.UrlEncoded,
        format: "json",
        ...params,
      }),

    /**
     * @description <p>Updates an existing person.</p>
     *
     * @name PostAccountsAccountPeoplePerson
     * @request POST:/v1/accounts/{account}/people/{person}
     * @secure
     * @response `200` `Person` Successful response.
     * @response `default` `Error` Error response.
     */
    postAccountsAccountPeoplePerson: (
      account: string,
      person: string,
      data?: {
        address?: {
          city?: string;
          country?: string;
          line1?: string;
          line2?: string;
          postal_code?: string;
          state?: string;
        };
        address_kana?: {
          city?: string;
          country?: string;
          line1?: string;
          line2?: string;
          postal_code?: string;
          state?: string;
          town?: string;
        };
        address_kanji?: {
          city?: string;
          country?: string;
          line1?: string;
          line2?: string;
          postal_code?: string;
          state?: string;
          town?: string;
        };
        dob?: { day: number; month: number; year: number } | "" | ({ day: number; month: number; year: number } & "");
        documents?: {
          company_authorization?: { files?: string[] };
          passport?: { files?: string[] };
          visa?: { files?: string[] };
        };
        email?: string;
        expand?: string[];
        first_name?: string;
        first_name_kana?: string;
        first_name_kanji?: string;
        full_name_aliases?: string[] | "" | (string[] & "");
        gender?: string;
        id_number?: string;
        last_name?: string;
        last_name_kana?: string;
        last_name_kanji?: string;
        maiden_name?: string;
        metadata?: Record<string, string> | "" | (Record<string, string> & "");
        nationality?: string;
        person_token?: string;
        phone?: string;
        political_exposure?: string;
        relationship?: {
          director?: boolean;
          executive?: boolean;
          owner?: boolean;
          percent_ownership?: number | "";
          representative?: boolean;
          title?: string;
        };
        ssn_last_4?: string;
        verification?: {
          additional_document?: { back?: string; front?: string };
          document?: { back?: string; front?: string };
        };
      },
      params: RequestParams = {},
    ) =>
      this.request<Person, Error>({
        path: `/v1/accounts/${account}/people/${person}`,
        method: "POST",
        body: data,
        secure: true,
        type: ContentType.UrlEncoded,
        format: "json",
        ...params,
      }),

    /**
     * @description <p>Returns a list of people associated with the account’s legal entity. The people are returned sorted by creation date, with the most recent people appearing first.</p>
     *
     * @name GetAccountsAccountPersons
     * @request GET:/v1/accounts/{account}/persons
     * @secure
     * @response `200` `{ data: (Person)[], has_more: boolean, object: "list", url: string }` Successful response.
     * @response `default` `Error` Error response.
     */
    getAccountsAccountPersons: (
      account: string,
      query?: {
        ending_before?: string;
        expand?: string[];
        limit?: number;
        relationship?: { director?: boolean; executive?: boolean; owner?: boolean; representative?: boolean };
        starting_after?: string;
      },
      data?: CardMandatePaymentMethodDetails,
      params: RequestParams = {},
    ) =>
      this.request<{ data: Person[]; has_more: boolean; object: "list"; url: string }, Error>({
        path: `/v1/accounts/${account}/persons`,
        method: "GET",
        query: query,
        body: data,
        secure: true,
        type: ContentType.UrlEncoded,
        format: "json",
        ...params,
      }),

    /**
     * @description <p>Creates a new person.</p>
     *
     * @name PostAccountsAccountPersons
     * @request POST:/v1/accounts/{account}/persons
     * @secure
     * @response `200` `Person` Successful response.
     * @response `default` `Error` Error response.
     */
    postAccountsAccountPersons: (
      account: string,
      data?: {
        address?: {
          city?: string;
          country?: string;
          line1?: string;
          line2?: string;
          postal_code?: string;
          state?: string;
        };
        address_kana?: {
          city?: string;
          country?: string;
          line1?: string;
          line2?: string;
          postal_code?: string;
          state?: string;
          town?: string;
        };
        address_kanji?: {
          city?: string;
          country?: string;
          line1?: string;
          line2?: string;
          postal_code?: string;
          state?: string;
          town?: string;
        };
        dob?: { day: number; month: number; year: number } | "" | ({ day: number; month: number; year: number } & "");
        documents?: {
          company_authorization?: { files?: string[] };
          passport?: { files?: string[] };
          visa?: { files?: string[] };
        };
        email?: string;
        expand?: string[];
        first_name?: string;
        first_name_kana?: string;
        first_name_kanji?: string;
        full_name_aliases?: string[] | "" | (string[] & "");
        gender?: string;
        id_number?: string;
        last_name?: string;
        last_name_kana?: string;
        last_name_kanji?: string;
        maiden_name?: string;
        metadata?: Record<string, string> | "" | (Record<string, string> & "");
        nationality?: string;
        person_token?: string;
        phone?: string;
        political_exposure?: string;
        relationship?: {
          director?: boolean;
          executive?: boolean;
          owner?: boolean;
          percent_ownership?: number | "";
          representative?: boolean;
          title?: string;
        };
        ssn_last_4?: string;
        verification?: {
          additional_document?: { back?: string; front?: string };
          document?: { back?: string; front?: string };
        };
      },
      params: RequestParams = {},
    ) =>
      this.request<Person, Error>({
        path: `/v1/accounts/${account}/persons`,
        method: "POST",
        body: data,
        secure: true,
        type: ContentType.UrlEncoded,
        format: "json",
        ...params,
      }),

    /**
     * @description <p>Deletes an existing person’s relationship to the account’s legal entity. Any person with a relationship for an account can be deleted through the API, except if the person is the <code>account_opener</code>. If your integration is using the <code>executive</code> parameter, you cannot delete the only verified <code>executive</code> on file.</p>
     *
     * @name DeleteAccountsAccountPersonsPerson
     * @request DELETE:/v1/accounts/{account}/persons/{person}
     * @secure
     * @response `200` `DeletedPerson` Successful response.
     * @response `default` `Error` Error response.
     */
    deleteAccountsAccountPersonsPerson: (
      account: string,
      person: string,
      data?: CardMandatePaymentMethodDetails,
      params: RequestParams = {},
    ) =>
      this.request<DeletedPerson, Error>({
        path: `/v1/accounts/${account}/persons/${person}`,
        method: "DELETE",
        body: data,
        secure: true,
        type: ContentType.UrlEncoded,
        format: "json",
        ...params,
      }),

    /**
     * @description <p>Retrieves an existing person.</p>
     *
     * @name GetAccountsAccountPersonsPerson
     * @request GET:/v1/accounts/{account}/persons/{person}
     * @secure
     * @response `200` `Person` Successful response.
     * @response `default` `Error` Error response.
     */
    getAccountsAccountPersonsPerson: (
      account: string,
      person: string,
      query?: { expand?: string[] },
      data?: CardMandatePaymentMethodDetails,
      params: RequestParams = {},
    ) =>
      this.request<Person, Error>({
        path: `/v1/accounts/${account}/persons/${person}`,
        method: "GET",
        query: query,
        body: data,
        secure: true,
        type: ContentType.UrlEncoded,
        format: "json",
        ...params,
      }),

    /**
     * @description <p>Updates an existing person.</p>
     *
     * @name PostAccountsAccountPersonsPerson
     * @request POST:/v1/accounts/{account}/persons/{person}
     * @secure
     * @response `200` `Person` Successful response.
     * @response `default` `Error` Error response.
     */
    postAccountsAccountPersonsPerson: (
      account: string,
      person: string,
      data?: {
        address?: {
          city?: string;
          country?: string;
          line1?: string;
          line2?: string;
          postal_code?: string;
          state?: string;
        };
        address_kana?: {
          city?: string;
          country?: string;
          line1?: string;
          line2?: string;
          postal_code?: string;
          state?: string;
          town?: string;
        };
        address_kanji?: {
          city?: string;
          country?: string;
          line1?: string;
          line2?: string;
          postal_code?: string;
          state?: string;
          town?: string;
        };
        dob?: { day: number; month: number; year: number } | "" | ({ day: number; month: number; year: number } & "");
        documents?: {
          company_authorization?: { files?: string[] };
          passport?: { files?: string[] };
          visa?: { files?: string[] };
        };
        email?: string;
        expand?: string[];
        first_name?: string;
        first_name_kana?: string;
        first_name_kanji?: string;
        full_name_aliases?: string[] | "" | (string[] & "");
        gender?: string;
        id_number?: string;
        last_name?: string;
        last_name_kana?: string;
        last_name_kanji?: string;
        maiden_name?: string;
        metadata?: Record<string, string> | "" | (Record<string, string> & "");
        nationality?: string;
        person_token?: string;
        phone?: string;
        political_exposure?: string;
        relationship?: {
          director?: boolean;
          executive?: boolean;
          owner?: boolean;
          percent_ownership?: number | "";
          representative?: boolean;
          title?: string;
        };
        ssn_last_4?: string;
        verification?: {
          additional_document?: { back?: string; front?: string };
          document?: { back?: string; front?: string };
        };
      },
      params: RequestParams = {},
    ) =>
      this.request<Person, Error>({
        path: `/v1/accounts/${account}/persons/${person}`,
        method: "POST",
        body: data,
        secure: true,
        type: ContentType.UrlEncoded,
        format: "json",
        ...params,
      }),

    /**
     * @description <p>With <a href="/docs/connect">Connect</a>, you may flag accounts as suspicious.</p> <p>Test-mode Custom and Express accounts can be rejected at any time. Accounts created using live-mode keys may only be rejected once all balances are zero.</p>
     *
     * @name PostAccountsAccountReject
     * @request POST:/v1/accounts/{account}/reject
     * @secure
     * @response `200` `Account` Successful response.
     * @response `default` `Error` Error response.
     */
    postAccountsAccountReject: (
      account: string,
      data: { expand?: string[]; reason: string },
      params: RequestParams = {},
    ) =>
      this.request<Account, Error>({
        path: `/v1/accounts/${account}/reject`,
        method: "POST",
        body: data,
        secure: true,
        type: ContentType.UrlEncoded,
        format: "json",
        ...params,
      }),

    /**
     * @description <p>List apple pay domains.</p>
     *
     * @name GetApplePayDomains
     * @request GET:/v1/apple_pay/domains
     * @secure
     * @response `200` `{ data: (ApplePayDomain)[], has_more: boolean, object: "list", url: string }` Successful response.
     * @response `default` `Error` Error response.
     */
    getApplePayDomains: (
      query?: {
        domain_name?: string;
        ending_before?: string;
        expand?: string[];
        limit?: number;
        starting_after?: string;
      },
      data?: CardMandatePaymentMethodDetails,
      params: RequestParams = {},
    ) =>
      this.request<{ data: ApplePayDomain[]; has_more: boolean; object: "list"; url: string }, Error>({
        path: `/v1/apple_pay/domains`,
        method: "GET",
        query: query,
        body: data,
        secure: true,
        type: ContentType.UrlEncoded,
        format: "json",
        ...params,
      }),

    /**
     * @description <p>Create an apple pay domain.</p>
     *
     * @name PostApplePayDomains
     * @request POST:/v1/apple_pay/domains
     * @secure
     * @response `200` `ApplePayDomain` Successful response.
     * @response `default` `Error` Error response.
     */
    postApplePayDomains: (data: { domain_name: string; expand?: string[] }, params: RequestParams = {}) =>
      this.request<ApplePayDomain, Error>({
        path: `/v1/apple_pay/domains`,
        method: "POST",
        body: data,
        secure: true,
        type: ContentType.UrlEncoded,
        format: "json",
        ...params,
      }),

    /**
     * @description <p>Delete an apple pay domain.</p>
     *
     * @name DeleteApplePayDomainsDomain
     * @request DELETE:/v1/apple_pay/domains/{domain}
     * @secure
     * @response `200` `DeletedApplePayDomain` Successful response.
     * @response `default` `Error` Error response.
     */
    deleteApplePayDomainsDomain: (domain: string, data?: CardMandatePaymentMethodDetails, params: RequestParams = {}) =>
      this.request<DeletedApplePayDomain, Error>({
        path: `/v1/apple_pay/domains/${domain}`,
        method: "DELETE",
        body: data,
        secure: true,
        type: ContentType.UrlEncoded,
        format: "json",
        ...params,
      }),

    /**
     * @description <p>Retrieve an apple pay domain.</p>
     *
     * @name GetApplePayDomainsDomain
     * @request GET:/v1/apple_pay/domains/{domain}
     * @secure
     * @response `200` `ApplePayDomain` Successful response.
     * @response `default` `Error` Error response.
     */
    getApplePayDomainsDomain: (
      domain: string,
      query?: { expand?: string[] },
      data?: CardMandatePaymentMethodDetails,
      params: RequestParams = {},
    ) =>
      this.request<ApplePayDomain, Error>({
        path: `/v1/apple_pay/domains/${domain}`,
        method: "GET",
        query: query,
        body: data,
        secure: true,
        type: ContentType.UrlEncoded,
        format: "json",
        ...params,
      }),

    /**
     * @description <p>Returns a list of application fees you’ve previously collected. The application fees are returned in sorted order, with the most recent fees appearing first.</p>
     *
     * @name GetApplicationFees
     * @request GET:/v1/application_fees
     * @secure
     * @response `200` `{ data: (ApplicationFee)[], has_more: boolean, object: "list", url: string }` Successful response.
     * @response `default` `Error` Error response.
     */
    getApplicationFees: (
      query?: {
        charge?: string;
        created?: { gt?: number; gte?: number; lt?: number; lte?: number } | number;
        ending_before?: string;
        expand?: string[];
        limit?: number;
        starting_after?: string;
      },
      data?: CardMandatePaymentMethodDetails,
      params: RequestParams = {},
    ) =>
      this.request<{ data: ApplicationFee[]; has_more: boolean; object: "list"; url: string }, Error>({
        path: `/v1/application_fees`,
        method: "GET",
        query: query,
        body: data,
        secure: true,
        type: ContentType.UrlEncoded,
        format: "json",
        ...params,
      }),

    /**
     * @description <p>By default, you can see the 10 most recent refunds stored directly on the application fee object, but you can also retrieve details about a specific refund stored on the application fee.</p>
     *
     * @name GetApplicationFeesFeeRefundsId
     * @request GET:/v1/application_fees/{fee}/refunds/{id}
     * @secure
     * @response `200` `FeeRefund` Successful response.
     * @response `default` `Error` Error response.
     */
    getApplicationFeesFeeRefundsId: (
      fee: string,
      id: string,
      query?: { expand?: string[] },
      data?: CardMandatePaymentMethodDetails,
      params: RequestParams = {},
    ) =>
      this.request<FeeRefund, Error>({
        path: `/v1/application_fees/${fee}/refunds/${id}`,
        method: "GET",
        query: query,
        body: data,
        secure: true,
        type: ContentType.UrlEncoded,
        format: "json",
        ...params,
      }),

    /**
     * @description <p>Updates the specified application fee refund by setting the values of the parameters passed. Any parameters not provided will be left unchanged.</p> <p>This request only accepts metadata as an argument.</p>
     *
     * @name PostApplicationFeesFeeRefundsId
     * @request POST:/v1/application_fees/{fee}/refunds/{id}
     * @secure
     * @response `200` `FeeRefund` Successful response.
     * @response `default` `Error` Error response.
     */
    postApplicationFeesFeeRefundsId: (
      fee: string,
      id: string,
      data?: { expand?: string[]; metadata?: Record<string, string> | "" | (Record<string, string> & "") },
      params: RequestParams = {},
    ) =>
      this.request<FeeRefund, Error>({
        path: `/v1/application_fees/${fee}/refunds/${id}`,
        method: "POST",
        body: data,
        secure: true,
        type: ContentType.UrlEncoded,
        format: "json",
        ...params,
      }),

    /**
     * @description <p>Retrieves the details of an application fee that your account has collected. The same information is returned when refunding the application fee.</p>
     *
     * @name GetApplicationFeesId
     * @request GET:/v1/application_fees/{id}
     * @secure
     * @response `200` `ApplicationFee` Successful response.
     * @response `default` `Error` Error response.
     */
    getApplicationFeesId: (
      id: string,
      query?: { expand?: string[] },
      data?: CardMandatePaymentMethodDetails,
      params: RequestParams = {},
    ) =>
      this.request<ApplicationFee, Error>({
        path: `/v1/application_fees/${id}`,
        method: "GET",
        query: query,
        body: data,
        secure: true,
        type: ContentType.UrlEncoded,
        format: "json",
        ...params,
      }),

    /**
     * No description
     *
     * @name PostApplicationFeesIdRefund
     * @request POST:/v1/application_fees/{id}/refund
     * @secure
     * @response `200` `ApplicationFee` Successful response.
     * @response `default` `Error` Error response.
     */
    postApplicationFeesIdRefund: (
      id: string,
      data?: { amount?: number; directive?: string; expand?: string[] },
      params: RequestParams = {},
    ) =>
      this.request<ApplicationFee, Error>({
        path: `/v1/application_fees/${id}/refund`,
        method: "POST",
        body: data,
        secure: true,
        type: ContentType.UrlEncoded,
        format: "json",
        ...params,
      }),

    /**
     * @description <p>You can see a list of the refunds belonging to a specific application fee. Note that the 10 most recent refunds are always available by default on the application fee object. If you need more than those 10, you can use this API method and the <code>limit</code> and <code>starting_after</code> parameters to page through additional refunds.</p>
     *
     * @name GetApplicationFeesIdRefunds
     * @request GET:/v1/application_fees/{id}/refunds
     * @secure
     * @response `200` `{ data: (FeeRefund)[], has_more: boolean, object: "list", url: string }` Successful response.
     * @response `default` `Error` Error response.
     */
    getApplicationFeesIdRefunds: (
      id: string,
      query?: { ending_before?: string; expand?: string[]; limit?: number; starting_after?: string },
      data?: CardMandatePaymentMethodDetails,
      params: RequestParams = {},
    ) =>
      this.request<{ data: FeeRefund[]; has_more: boolean; object: "list"; url: string }, Error>({
        path: `/v1/application_fees/${id}/refunds`,
        method: "GET",
        query: query,
        body: data,
        secure: true,
        type: ContentType.UrlEncoded,
        format: "json",
        ...params,
      }),

    /**
     * @description <p>Refunds an application fee that has previously been collected but not yet refunded. Funds will be refunded to the Stripe account from which the fee was originally collected.</p> <p>You can optionally refund only part of an application fee. You can do so multiple times, until the entire fee has been refunded.</p> <p>Once entirely refunded, an application fee can’t be refunded again. This method will raise an error when called on an already-refunded application fee, or when trying to refund more money than is left on an application fee.</p>
     *
     * @name PostApplicationFeesIdRefunds
     * @request POST:/v1/application_fees/{id}/refunds
     * @secure
     * @response `200` `FeeRefund` Successful response.
     * @response `default` `Error` Error response.
     */
    postApplicationFeesIdRefunds: (
      id: string,
      data?: { amount?: number; expand?: string[]; metadata?: Record<string, string> },
      params: RequestParams = {},
    ) =>
      this.request<FeeRefund, Error>({
        path: `/v1/application_fees/${id}/refunds`,
        method: "POST",
        body: data,
        secure: true,
        type: ContentType.UrlEncoded,
        format: "json",
        ...params,
      }),

    /**
     * @description <p>Retrieves the current account balance, based on the authentication that was used to make the request. For a sample request, see <a href="/docs/connect/account-balances#accounting-for-negative-balances">Accounting for negative balances</a>.</p>
     *
     * @name GetBalance
     * @request GET:/v1/balance
     * @secure
     * @response `200` `Balance` Successful response.
     * @response `default` `Error` Error response.
     */
    getBalance: (query?: { expand?: string[] }, data?: CardMandatePaymentMethodDetails, params: RequestParams = {}) =>
      this.request<Balance, Error>({
        path: `/v1/balance`,
        method: "GET",
        query: query,
        body: data,
        secure: true,
        type: ContentType.UrlEncoded,
        format: "json",
        ...params,
      }),

    /**
     * @description <p>Returns a list of transactions that have contributed to the Stripe account balance (e.g., charges, transfers, and so forth). The transactions are returned in sorted order, with the most recent transactions appearing first.</p> <p>Note that this endpoint was previously called “Balance history” and used the path <code>/v1/balance/history</code>.</p>
     *
     * @name GetBalanceHistory
     * @request GET:/v1/balance/history
     * @secure
     * @response `200` `{ data: (BalanceTransaction)[], has_more: boolean, object: "list", url: string }` Successful response.
     * @response `default` `Error` Error response.
     */
    getBalanceHistory: (
      query?: {
        created?: { gt?: number; gte?: number; lt?: number; lte?: number } | number;
        currency?: string;
        ending_before?: string;
        expand?: string[];
        limit?: number;
        payout?: string;
        source?: string;
        starting_after?: string;
        type?: string;
      },
      data?: CardMandatePaymentMethodDetails,
      params: RequestParams = {},
    ) =>
      this.request<{ data: BalanceTransaction[]; has_more: boolean; object: "list"; url: string }, Error>({
        path: `/v1/balance/history`,
        method: "GET",
        query: query,
        body: data,
        secure: true,
        type: ContentType.UrlEncoded,
        format: "json",
        ...params,
      }),

    /**
     * @description <p>Retrieves the balance transaction with the given ID.</p> <p>Note that this endpoint previously used the path <code>/v1/balance/history/:id</code>.</p>
     *
     * @name GetBalanceHistoryId
     * @request GET:/v1/balance/history/{id}
     * @secure
     * @response `200` `BalanceTransaction` Successful response.
     * @response `default` `Error` Error response.
     */
    getBalanceHistoryId: (
      id: string,
      query?: { expand?: string[] },
      data?: CardMandatePaymentMethodDetails,
      params: RequestParams = {},
    ) =>
      this.request<BalanceTransaction, Error>({
        path: `/v1/balance/history/${id}`,
        method: "GET",
        query: query,
        body: data,
        secure: true,
        type: ContentType.UrlEncoded,
        format: "json",
        ...params,
      }),

    /**
     * @description <p>Returns a list of transactions that have contributed to the Stripe account balance (e.g., charges, transfers, and so forth). The transactions are returned in sorted order, with the most recent transactions appearing first.</p> <p>Note that this endpoint was previously called “Balance history” and used the path <code>/v1/balance/history</code>.</p>
     *
     * @name GetBalanceTransactions
     * @request GET:/v1/balance_transactions
     * @secure
     * @response `200` `{ data: (BalanceTransaction)[], has_more: boolean, object: "list", url: string }` Successful response.
     * @response `default` `Error` Error response.
     */
    getBalanceTransactions: (
      query?: {
        created?: { gt?: number; gte?: number; lt?: number; lte?: number } | number;
        currency?: string;
        ending_before?: string;
        expand?: string[];
        limit?: number;
        payout?: string;
        source?: string;
        starting_after?: string;
        type?: string;
      },
      data?: CardMandatePaymentMethodDetails,
      params: RequestParams = {},
    ) =>
      this.request<{ data: BalanceTransaction[]; has_more: boolean; object: "list"; url: string }, Error>({
        path: `/v1/balance_transactions`,
        method: "GET",
        query: query,
        body: data,
        secure: true,
        type: ContentType.UrlEncoded,
        format: "json",
        ...params,
      }),

    /**
     * @description <p>Retrieves the balance transaction with the given ID.</p> <p>Note that this endpoint previously used the path <code>/v1/balance/history/:id</code>.</p>
     *
     * @name GetBalanceTransactionsId
     * @request GET:/v1/balance_transactions/{id}
     * @secure
     * @response `200` `BalanceTransaction` Successful response.
     * @response `default` `Error` Error response.
     */
    getBalanceTransactionsId: (
      id: string,
      query?: { expand?: string[] },
      data?: CardMandatePaymentMethodDetails,
      params: RequestParams = {},
    ) =>
      this.request<BalanceTransaction, Error>({
        path: `/v1/balance_transactions/${id}`,
        method: "GET",
        query: query,
        body: data,
        secure: true,
        type: ContentType.UrlEncoded,
        format: "json",
        ...params,
      }),

    /**
     * @description <p>Returns a list of configurations that describe the functionality of the customer portal.</p>
     *
     * @name GetBillingPortalConfigurations
     * @request GET:/v1/billing_portal/configurations
     * @secure
     * @response `200` `{ data: (BillingPortalConfiguration)[], has_more: boolean, object: "list", url: string }` Successful response.
     * @response `default` `Error` Error response.
     */
    getBillingPortalConfigurations: (
      query?: {
        active?: boolean;
        ending_before?: string;
        expand?: string[];
        is_default?: boolean;
        limit?: number;
        starting_after?: string;
      },
      data?: CardMandatePaymentMethodDetails,
      params: RequestParams = {},
    ) =>
      this.request<{ data: BillingPortalConfiguration[]; has_more: boolean; object: "list"; url: string }, Error>({
        path: `/v1/billing_portal/configurations`,
        method: "GET",
        query: query,
        body: data,
        secure: true,
        type: ContentType.UrlEncoded,
        format: "json",
        ...params,
      }),

    /**
     * @description <p>Creates a configuration that describes the functionality and behavior of a PortalSession</p>
     *
     * @name PostBillingPortalConfigurations
     * @request POST:/v1/billing_portal/configurations
     * @secure
     * @response `200` `BillingPortalConfiguration` Successful response.
     * @response `default` `Error` Error response.
     */
    postBillingPortalConfigurations: (
      data: {
        business_profile: { headline?: string; privacy_policy_url: string; terms_of_service_url: string };
        default_return_url?: string | "";
        expand?: string[];
        features: {
          customer_update?: {
            allowed_updates:
              | ("address" | "email" | "phone" | "shipping" | "tax_id")[]
              | ""
              | (("address" | "email" | "phone" | "shipping" | "tax_id")[] & "");
            enabled: boolean;
          };
          invoice_history?: { enabled: boolean };
          payment_method_update?: { enabled: boolean };
          subscription_cancel?: {
            cancellation_reason?: {
              enabled: boolean;
              options:
                | (
                    | "customer_service"
                    | "low_quality"
                    | "missing_features"
                    | "other"
                    | "switched_service"
                    | "too_complex"
                    | "too_expensive"
                    | "unused"
                  )[]
                | ""
                | ((
                    | "customer_service"
                    | "low_quality"
                    | "missing_features"
                    | "other"
                    | "switched_service"
                    | "too_complex"
                    | "too_expensive"
                    | "unused"
                  )[] &
                    "");
            };
            enabled: boolean;
            mode?: "at_period_end" | "immediately";
            proration_behavior?: "always_invoice" | "create_prorations" | "none";
          };
          subscription_pause?: { enabled?: boolean };
          subscription_update?: {
            default_allowed_updates:
              | ("price" | "promotion_code" | "quantity")[]
              | ""
              | (("price" | "promotion_code" | "quantity")[] & "");
            enabled: boolean;
            products: { prices: string[]; product: string }[] | "" | ({ prices: string[]; product: string }[] & "");
            proration_behavior?: "always_invoice" | "create_prorations" | "none";
          };
        };
        metadata?: Record<string, string>;
      },
      params: RequestParams = {},
    ) =>
      this.request<BillingPortalConfiguration, Error>({
        path: `/v1/billing_portal/configurations`,
        method: "POST",
        body: data,
        secure: true,
        type: ContentType.UrlEncoded,
        format: "json",
        ...params,
      }),

    /**
     * @description <p>Retrieves a configuration that describes the functionality of the customer portal.</p>
     *
     * @name GetBillingPortalConfigurationsConfiguration
     * @request GET:/v1/billing_portal/configurations/{configuration}
     * @secure
     * @response `200` `BillingPortalConfiguration` Successful response.
     * @response `default` `Error` Error response.
     */
    getBillingPortalConfigurationsConfiguration: (
      configuration: string,
      query?: { expand?: string[] },
      data?: CardMandatePaymentMethodDetails,
      params: RequestParams = {},
    ) =>
      this.request<BillingPortalConfiguration, Error>({
        path: `/v1/billing_portal/configurations/${configuration}`,
        method: "GET",
        query: query,
        body: data,
        secure: true,
        type: ContentType.UrlEncoded,
        format: "json",
        ...params,
      }),

    /**
     * @description <p>Updates a configuration that describes the functionality of the customer portal.</p>
     *
     * @name PostBillingPortalConfigurationsConfiguration
     * @request POST:/v1/billing_portal/configurations/{configuration}
     * @secure
     * @response `200` `BillingPortalConfiguration` Successful response.
     * @response `default` `Error` Error response.
     */
    postBillingPortalConfigurationsConfiguration: (
      configuration: string,
      data?: {
        active?: boolean;
        business_profile?: { headline?: string; privacy_policy_url?: string; terms_of_service_url?: string };
        default_return_url?: string | "";
        expand?: string[];
        features?: {
          customer_update?: {
            allowed_updates?:
              | ("address" | "email" | "phone" | "shipping" | "tax_id")[]
              | ""
              | (("address" | "email" | "phone" | "shipping" | "tax_id")[] & "");
            enabled?: boolean;
          };
          invoice_history?: { enabled: boolean };
          payment_method_update?: { enabled: boolean };
          subscription_cancel?: {
            cancellation_reason?: {
              enabled: boolean;
              options?:
                | (
                    | "customer_service"
                    | "low_quality"
                    | "missing_features"
                    | "other"
                    | "switched_service"
                    | "too_complex"
                    | "too_expensive"
                    | "unused"
                  )[]
                | ""
                | ((
                    | "customer_service"
                    | "low_quality"
                    | "missing_features"
                    | "other"
                    | "switched_service"
                    | "too_complex"
                    | "too_expensive"
                    | "unused"
                  )[] &
                    "");
            };
            enabled?: boolean;
            mode?: "at_period_end" | "immediately";
            proration_behavior?: "always_invoice" | "create_prorations" | "none";
          };
          subscription_pause?: { enabled?: boolean };
          subscription_update?: {
            default_allowed_updates?:
              | ("price" | "promotion_code" | "quantity")[]
              | ""
              | (("price" | "promotion_code" | "quantity")[] & "");
            enabled?: boolean;
            products?: { prices: string[]; product: string }[] | "" | ({ prices: string[]; product: string }[] & "");
            proration_behavior?: "always_invoice" | "create_prorations" | "none";
          };
        };
        metadata?: Record<string, string> | "" | (Record<string, string> & "");
      },
      params: RequestParams = {},
    ) =>
      this.request<BillingPortalConfiguration, Error>({
        path: `/v1/billing_portal/configurations/${configuration}`,
        method: "POST",
        body: data,
        secure: true,
        type: ContentType.UrlEncoded,
        format: "json",
        ...params,
      }),

    /**
     * @description <p>Creates a session of the customer portal.</p>
     *
     * @name PostBillingPortalSessions
     * @request POST:/v1/billing_portal/sessions
     * @secure
     * @response `200` `BillingPortalSession` Successful response.
     * @response `default` `Error` Error response.
     */
    postBillingPortalSessions: (
      data: {
        configuration?: string;
        customer: string;
        expand?: string[];
        locale?:
          | "auto"
          | "bg"
          | "cs"
          | "da"
          | "de"
          | "el"
          | "en"
          | "en-AU"
          | "en-CA"
          | "en-GB"
          | "en-IE"
          | "en-IN"
          | "en-NZ"
          | "en-SG"
          | "es"
          | "es-419"
          | "et"
          | "fi"
          | "fil"
          | "fr"
          | "fr-CA"
          | "hr"
          | "hu"
          | "id"
          | "it"
          | "ja"
          | "ko"
          | "lt"
          | "lv"
          | "ms"
          | "mt"
          | "nb"
          | "nl"
          | "pl"
          | "pt"
          | "pt-BR"
          | "ro"
          | "ru"
          | "sk"
          | "sl"
          | "sv"
          | "th"
          | "tr"
          | "vi"
          | "zh"
          | "zh-HK"
          | "zh-TW";
        on_behalf_of?: string;
        return_url?: string;
      },
      params: RequestParams = {},
    ) =>
      this.request<BillingPortalSession, Error>({
        path: `/v1/billing_portal/sessions`,
        method: "POST",
        body: data,
        secure: true,
        type: ContentType.UrlEncoded,
        format: "json",
        ...params,
      }),

    /**
     * @description <p>Returns a list of your receivers. Receivers are returned sorted by creation date, with the most recently created receivers appearing first.</p>
     *
     * @name GetBitcoinReceivers
     * @request GET:/v1/bitcoin/receivers
     * @deprecated
     * @secure
     * @response `200` `{ data: (BitcoinReceiver)[], has_more: boolean, object: "list", url: string }` Successful response.
     * @response `default` `Error` Error response.
     */
    getBitcoinReceivers: (
      query?: {
        active?: boolean;
        ending_before?: string;
        expand?: string[];
        filled?: boolean;
        limit?: number;
        starting_after?: string;
        uncaptured_funds?: boolean;
      },
      data?: CardMandatePaymentMethodDetails,
      params: RequestParams = {},
    ) =>
      this.request<{ data: BitcoinReceiver[]; has_more: boolean; object: "list"; url: string }, Error>({
        path: `/v1/bitcoin/receivers`,
        method: "GET",
        query: query,
        body: data,
        secure: true,
        type: ContentType.UrlEncoded,
        format: "json",
        ...params,
      }),

    /**
     * @description <p>Retrieves the Bitcoin receiver with the given ID.</p>
     *
     * @name GetBitcoinReceiversId
     * @request GET:/v1/bitcoin/receivers/{id}
     * @deprecated
     * @secure
     * @response `200` `BitcoinReceiver` Successful response.
     * @response `default` `Error` Error response.
     */
    getBitcoinReceiversId: (
      id: string,
      query?: { expand?: string[] },
      data?: CardMandatePaymentMethodDetails,
      params: RequestParams = {},
    ) =>
      this.request<BitcoinReceiver, Error>({
        path: `/v1/bitcoin/receivers/${id}`,
        method: "GET",
        query: query,
        body: data,
        secure: true,
        type: ContentType.UrlEncoded,
        format: "json",
        ...params,
      }),

    /**
     * @description <p>List bitcoin transacitons for a given receiver.</p>
     *
     * @name GetBitcoinReceiversReceiverTransactions
     * @request GET:/v1/bitcoin/receivers/{receiver}/transactions
     * @deprecated
     * @secure
     * @response `200` `{ data: (BitcoinTransaction)[], has_more: boolean, object: "list", url: string }` Successful response.
     * @response `default` `Error` Error response.
     */
    getBitcoinReceiversReceiverTransactions: (
      receiver: string,
      query?: { customer?: string; ending_before?: string; expand?: string[]; limit?: number; starting_after?: string },
      data?: CardMandatePaymentMethodDetails,
      params: RequestParams = {},
    ) =>
      this.request<{ data: BitcoinTransaction[]; has_more: boolean; object: "list"; url: string }, Error>({
        path: `/v1/bitcoin/receivers/${receiver}/transactions`,
        method: "GET",
        query: query,
        body: data,
        secure: true,
        type: ContentType.UrlEncoded,
        format: "json",
        ...params,
      }),

    /**
     * @description <p>List bitcoin transacitons for a given receiver.</p>
     *
     * @name GetBitcoinTransactions
     * @request GET:/v1/bitcoin/transactions
     * @deprecated
     * @secure
     * @response `200` `{ data: (BitcoinTransaction)[], has_more: boolean, object: "list", url: string }` Successful response.
     * @response `default` `Error` Error response.
     */
    getBitcoinTransactions: (
      query?: {
        customer?: string;
        ending_before?: string;
        expand?: string[];
        limit?: number;
        receiver?: string;
        starting_after?: string;
      },
      data?: CardMandatePaymentMethodDetails,
      params: RequestParams = {},
    ) =>
      this.request<{ data: BitcoinTransaction[]; has_more: boolean; object: "list"; url: string }, Error>({
        path: `/v1/bitcoin/transactions`,
        method: "GET",
        query: query,
        body: data,
        secure: true,
        type: ContentType.UrlEncoded,
        format: "json",
        ...params,
      }),

    /**
     * @description <p>Returns a list of charges you’ve previously created. The charges are returned in sorted order, with the most recent charges appearing first.</p>
     *
     * @name GetCharges
     * @request GET:/v1/charges
     * @secure
     * @response `200` `{ data: (Charge)[], has_more: boolean, object: "list", url: string }` Successful response.
     * @response `default` `Error` Error response.
     */
    getCharges: (
      query?: {
        created?: { gt?: number; gte?: number; lt?: number; lte?: number } | number;
        customer?: string;
        ending_before?: string;
        expand?: string[];
        limit?: number;
        payment_intent?: string;
        starting_after?: string;
        transfer_group?: string;
      },
      data?: CardMandatePaymentMethodDetails,
      params: RequestParams = {},
    ) =>
      this.request<{ data: Charge[]; has_more: boolean; object: "list"; url: string }, Error>({
        path: `/v1/charges`,
        method: "GET",
        query: query,
        body: data,
        secure: true,
        type: ContentType.UrlEncoded,
        format: "json",
        ...params,
      }),

    /**
     * @description <p>To charge a credit card or other payment source, you create a <code>Charge</code> object. If your API key is in test mode, the supplied payment source (e.g., card) won’t actually be charged, although everything else will occur as if in live mode. (Stripe assumes that the charge would have completed successfully).</p>
     *
     * @name PostCharges
     * @request POST:/v1/charges
     * @secure
     * @response `200` `Charge` Successful response.
     * @response `default` `Error` Error response.
     */
    postCharges: (
      data?: {
        amount?: number;
        application_fee?: number;
        application_fee_amount?: number;
        capture?: boolean;
        card?:
          | {
              address_city?: string;
              address_country?: string;
              address_line1?: string;
              address_line2?: string;
              address_state?: string;
              address_zip?: string;
              cvc?: string;
              exp_month: number;
              exp_year: number;
              metadata?: Record<string, string>;
              name?: string;
              number: string;
              object?: "card";
            }
          | string;
        currency?: string;
        customer?: string;
        description?: string;
        destination?: { account: string; amount?: number } | string;
        expand?: string[];
        metadata?: Record<string, string> | "" | (Record<string, string> & "");
        on_behalf_of?: string;
        receipt_email?: string;
        shipping?: {
          address: {
            city?: string;
            country?: string;
            line1?: string;
            line2?: string;
            postal_code?: string;
            state?: string;
          };
          carrier?: string;
          name: string;
          phone?: string;
          tracking_number?: string;
        };
        source?: string;
        statement_descriptor?: string;
        statement_descriptor_suffix?: string;
        transfer_data?: { amount?: number; destination: string };
        transfer_group?: string;
      },
      params: RequestParams = {},
    ) =>
      this.request<Charge, Error>({
        path: `/v1/charges`,
        method: "POST",
        body: data,
        secure: true,
        type: ContentType.UrlEncoded,
        format: "json",
        ...params,
      }),

    /**
     * @description <p>Retrieves the details of a charge that has previously been created. Supply the unique charge ID that was returned from your previous request, and Stripe will return the corresponding charge information. The same information is returned when creating or refunding the charge.</p>
     *
     * @name GetChargesCharge
     * @request GET:/v1/charges/{charge}
     * @secure
     * @response `200` `Charge` Successful response.
     * @response `default` `Error` Error response.
     */
    getChargesCharge: (
      charge: string,
      query?: { expand?: string[] },
      data?: CardMandatePaymentMethodDetails,
      params: RequestParams = {},
    ) =>
      this.request<Charge, Error>({
        path: `/v1/charges/${charge}`,
        method: "GET",
        query: query,
        body: data,
        secure: true,
        type: ContentType.UrlEncoded,
        format: "json",
        ...params,
      }),

    /**
     * @description <p>Updates the specified charge by setting the values of the parameters passed. Any parameters not provided will be left unchanged.</p>
     *
     * @name PostChargesCharge
     * @request POST:/v1/charges/{charge}
     * @secure
     * @response `200` `Charge` Successful response.
     * @response `default` `Error` Error response.
     */
    postChargesCharge: (
      charge: string,
      data?: {
        customer?: string;
        description?: string;
        expand?: string[];
        fraud_details?: { user_report: "" | "fraudulent" | "safe" };
        metadata?: Record<string, string> | "" | (Record<string, string> & "");
        receipt_email?: string;
        shipping?: {
          address: {
            city?: string;
            country?: string;
            line1?: string;
            line2?: string;
            postal_code?: string;
            state?: string;
          };
          carrier?: string;
          name: string;
          phone?: string;
          tracking_number?: string;
        };
        transfer_group?: string;
      },
      params: RequestParams = {},
    ) =>
      this.request<Charge, Error>({
        path: `/v1/charges/${charge}`,
        method: "POST",
        body: data,
        secure: true,
        type: ContentType.UrlEncoded,
        format: "json",
        ...params,
      }),

    /**
     * @description <p>Capture the payment of an existing, uncaptured, charge. This is the second half of the two-step payment flow, where first you <a href="#create_charge">created a charge</a> with the capture option set to false.</p> <p>Uncaptured payments expire a set number of days after they are created (<a href="/docs/charges/placing-a-hold">7 by default</a>). If they are not captured by that point in time, they will be marked as refunded and will no longer be capturable.</p>
     *
     * @name PostChargesChargeCapture
     * @request POST:/v1/charges/{charge}/capture
     * @secure
     * @response `200` `Charge` Successful response.
     * @response `default` `Error` Error response.
     */
    postChargesChargeCapture: (
      charge: string,
      data?: {
        amount?: number;
        application_fee?: number;
        application_fee_amount?: number;
        expand?: string[];
        receipt_email?: string;
        statement_descriptor?: string;
        statement_descriptor_suffix?: string;
        transfer_data?: { amount?: number };
        transfer_group?: string;
      },
      params: RequestParams = {},
    ) =>
      this.request<Charge, Error>({
        path: `/v1/charges/${charge}/capture`,
        method: "POST",
        body: data,
        secure: true,
        type: ContentType.UrlEncoded,
        format: "json",
        ...params,
      }),

    /**
     * @description <p>Retrieve a dispute for a specified charge.</p>
     *
     * @name GetChargesChargeDispute
     * @request GET:/v1/charges/{charge}/dispute
     * @secure
     * @response `200` `Dispute` Successful response.
     * @response `default` `Error` Error response.
     */
    getChargesChargeDispute: (
      charge: string,
      query?: { expand?: string[] },
      data?: CardMandatePaymentMethodDetails,
      params: RequestParams = {},
    ) =>
      this.request<Dispute, Error>({
        path: `/v1/charges/${charge}/dispute`,
        method: "GET",
        query: query,
        body: data,
        secure: true,
        type: ContentType.UrlEncoded,
        format: "json",
        ...params,
      }),

    /**
     * No description
     *
     * @name PostChargesChargeDispute
     * @request POST:/v1/charges/{charge}/dispute
     * @secure
     * @response `200` `Dispute` Successful response.
     * @response `default` `Error` Error response.
     */
    postChargesChargeDispute: (
      charge: string,
      data?: {
        evidence?: {
          access_activity_log?: string;
          billing_address?: string;
          cancellation_policy?: string;
          cancellation_policy_disclosure?: string;
          cancellation_rebuttal?: string;
          customer_communication?: string;
          customer_email_address?: string;
          customer_name?: string;
          customer_purchase_ip?: string;
          customer_signature?: string;
          duplicate_charge_documentation?: string;
          duplicate_charge_explanation?: string;
          duplicate_charge_id?: string;
          product_description?: string;
          receipt?: string;
          refund_policy?: string;
          refund_policy_disclosure?: string;
          refund_refusal_explanation?: string;
          service_date?: string;
          service_documentation?: string;
          shipping_address?: string;
          shipping_carrier?: string;
          shipping_date?: string;
          shipping_documentation?: string;
          shipping_tracking_number?: string;
          uncategorized_file?: string;
          uncategorized_text?: string;
        };
        expand?: string[];
        metadata?: Record<string, string> | "" | (Record<string, string> & "");
        submit?: boolean;
      },
      params: RequestParams = {},
    ) =>
      this.request<Dispute, Error>({
        path: `/v1/charges/${charge}/dispute`,
        method: "POST",
        body: data,
        secure: true,
        type: ContentType.UrlEncoded,
        format: "json",
        ...params,
      }),

    /**
     * No description
     *
     * @name PostChargesChargeDisputeClose
     * @request POST:/v1/charges/{charge}/dispute/close
     * @secure
     * @response `200` `Dispute` Successful response.
     * @response `default` `Error` Error response.
     */
    postChargesChargeDisputeClose: (charge: string, data?: { expand?: string[] }, params: RequestParams = {}) =>
      this.request<Dispute, Error>({
        path: `/v1/charges/${charge}/dispute/close`,
        method: "POST",
        body: data,
        secure: true,
        type: ContentType.UrlEncoded,
        format: "json",
        ...params,
      }),

    /**
     * @description <p>When you create a new refund, you must specify a Charge or a PaymentIntent object on which to create it.</p> <p>Creating a new refund will refund a charge that has previously been created but not yet refunded. Funds will be refunded to the credit or debit card that was originally charged.</p> <p>You can optionally refund only part of a charge. You can do so multiple times, until the entire charge has been refunded.</p> <p>Once entirely refunded, a charge can’t be refunded again. This method will raise an error when called on an already-refunded charge, or when trying to refund more money than is left on a charge.</p>
     *
     * @name PostChargesChargeRefund
     * @request POST:/v1/charges/{charge}/refund
     * @secure
     * @response `200` `Charge` Successful response.
     * @response `default` `Error` Error response.
     */
    postChargesChargeRefund: (
      charge: string,
      data?: {
        amount?: number;
        expand?: string[];
        metadata?: Record<string, string> | "" | (Record<string, string> & "");
        payment_intent?: string;
        reason?: "duplicate" | "fraudulent" | "requested_by_customer";
        refund_application_fee?: boolean;
        reverse_transfer?: boolean;
      },
      params: RequestParams = {},
    ) =>
      this.request<Charge, Error>({
        path: `/v1/charges/${charge}/refund`,
        method: "POST",
        body: data,
        secure: true,
        type: ContentType.UrlEncoded,
        format: "json",
        ...params,
      }),

    /**
     * @description <p>You can see a list of the refunds belonging to a specific charge. Note that the 10 most recent refunds are always available by default on the charge object. If you need more than those 10, you can use this API method and the <code>limit</code> and <code>starting_after</code> parameters to page through additional refunds.</p>
     *
     * @name GetChargesChargeRefunds
     * @request GET:/v1/charges/{charge}/refunds
     * @secure
     * @response `200` `{ data: (Refund)[], has_more: boolean, object: "list", url: string }` Successful response.
     * @response `default` `Error` Error response.
     */
    getChargesChargeRefunds: (
      charge: string,
      query?: { ending_before?: string; expand?: string[]; limit?: number; starting_after?: string },
      data?: CardMandatePaymentMethodDetails,
      params: RequestParams = {},
    ) =>
      this.request<{ data: Refund[]; has_more: boolean; object: "list"; url: string }, Error>({
        path: `/v1/charges/${charge}/refunds`,
        method: "GET",
        query: query,
        body: data,
        secure: true,
        type: ContentType.UrlEncoded,
        format: "json",
        ...params,
      }),

    /**
     * @description <p>Create a refund.</p>
     *
     * @name PostChargesChargeRefunds
     * @request POST:/v1/charges/{charge}/refunds
     * @secure
     * @response `200` `Refund` Successful response.
     * @response `default` `Error` Error response.
     */
    postChargesChargeRefunds: (
      charge: string,
      data?: {
        amount?: number;
        expand?: string[];
        metadata?: Record<string, string> | "" | (Record<string, string> & "");
        payment_intent?: string;
        reason?: "duplicate" | "fraudulent" | "requested_by_customer";
        refund_application_fee?: boolean;
        reverse_transfer?: boolean;
      },
      params: RequestParams = {},
    ) =>
      this.request<Refund, Error>({
        path: `/v1/charges/${charge}/refunds`,
        method: "POST",
        body: data,
        secure: true,
        type: ContentType.UrlEncoded,
        format: "json",
        ...params,
      }),

    /**
     * @description <p>Retrieves the details of an existing refund.</p>
     *
     * @name GetChargesChargeRefundsRefund
     * @request GET:/v1/charges/{charge}/refunds/{refund}
     * @secure
     * @response `200` `Refund` Successful response.
     * @response `default` `Error` Error response.
     */
    getChargesChargeRefundsRefund: (
      charge: string,
      refund: string,
      query?: { expand?: string[] },
      data?: CardMandatePaymentMethodDetails,
      params: RequestParams = {},
    ) =>
      this.request<Refund, Error>({
        path: `/v1/charges/${charge}/refunds/${refund}`,
        method: "GET",
        query: query,
        body: data,
        secure: true,
        type: ContentType.UrlEncoded,
        format: "json",
        ...params,
      }),

    /**
     * @description <p>Update a specified refund.</p>
     *
     * @name PostChargesChargeRefundsRefund
     * @request POST:/v1/charges/{charge}/refunds/{refund}
     * @secure
     * @response `200` `Refund` Successful response.
     * @response `default` `Error` Error response.
     */
    postChargesChargeRefundsRefund: (
      charge: string,
      refund: string,
      data?: { expand?: string[]; metadata?: Record<string, string> | "" | (Record<string, string> & "") },
      params: RequestParams = {},
    ) =>
      this.request<Refund, Error>({
        path: `/v1/charges/${charge}/refunds/${refund}`,
        method: "POST",
        body: data,
        secure: true,
        type: ContentType.UrlEncoded,
        format: "json",
        ...params,
      }),

    /**
     * @description <p>Returns a list of Checkout Sessions.</p>
     *
     * @name GetCheckoutSessions
     * @request GET:/v1/checkout/sessions
     * @secure
     * @response `200` `{ data: (CheckoutSession)[], has_more: boolean, object: "list", url: string }` Successful response.
     * @response `default` `Error` Error response.
     */
    getCheckoutSessions: (
      query?: {
        ending_before?: string;
        expand?: string[];
        limit?: number;
        payment_intent?: string;
        starting_after?: string;
        subscription?: string;
      },
      data?: CardMandatePaymentMethodDetails,
      params: RequestParams = {},
    ) =>
      this.request<{ data: CheckoutSession[]; has_more: boolean; object: "list"; url: string }, Error>({
        path: `/v1/checkout/sessions`,
        method: "GET",
        query: query,
        body: data,
        secure: true,
        type: ContentType.UrlEncoded,
        format: "json",
        ...params,
      }),

    /**
     * @description <p>Creates a Session object.</p>
     *
     * @name PostCheckoutSessions
     * @request POST:/v1/checkout/sessions
     * @secure
     * @response `200` `CheckoutSession` Successful response.
     * @response `default` `Error` Error response.
     */
    postCheckoutSessions: (
      data: {
        after_expiration?: { recovery?: { allow_promotion_codes?: boolean; enabled: boolean } };
        allow_promotion_codes?: boolean;
        automatic_tax?: { enabled: boolean };
        billing_address_collection?: "auto" | "required";
        cancel_url: string;
        client_reference_id?: string;
        consent_collection?: { promotions?: "auto" };
        customer?: string;
        customer_creation?: "always" | "if_required";
        customer_email?: string;
        customer_update?: { address?: "auto" | "never"; name?: "auto" | "never"; shipping?: "auto" | "never" };
        discounts?: { coupon?: string; promotion_code?: string }[];
        expand?: string[];
        expires_at?: number;
        line_items?: {
          adjustable_quantity?: { enabled: boolean; maximum?: number; minimum?: number };
          description?: string;
          dynamic_tax_rates?: string[];
          price?: string;
          price_data?: {
            currency: string;
            product?: string;
            product_data?: {
              description?: string;
              images?: string[];
              metadata?: Record<string, string>;
              name: string;
              tax_code?: string;
            };
            recurring?: { interval: "day" | "month" | "week" | "year"; interval_count?: number };
            tax_behavior?: "exclusive" | "inclusive" | "unspecified";
            unit_amount?: number;
            unit_amount_decimal?: string;
          };
          quantity?: number;
          tax_rates?: string[];
        }[];
        locale?:
          | "auto"
          | "bg"
          | "cs"
          | "da"
          | "de"
          | "el"
          | "en"
          | "en-GB"
          | "es"
          | "es-419"
          | "et"
          | "fi"
          | "fil"
          | "fr"
          | "fr-CA"
          | "hr"
          | "hu"
          | "id"
          | "it"
          | "ja"
          | "ko"
          | "lt"
          | "lv"
          | "ms"
          | "mt"
          | "nb"
          | "nl"
          | "pl"
          | "pt"
          | "pt-BR"
          | "ro"
          | "ru"
          | "sk"
          | "sl"
          | "sv"
          | "th"
          | "tr"
          | "vi"
          | "zh"
          | "zh-HK"
          | "zh-TW";
        metadata?: Record<string, string>;
        mode?: "payment" | "setup" | "subscription";
        payment_intent_data?: {
          application_fee_amount?: number;
          capture_method?: "automatic" | "manual";
          description?: string;
          metadata?: Record<string, string>;
          on_behalf_of?: string;
          receipt_email?: string;
          setup_future_usage?: "off_session" | "on_session";
          shipping?: {
            address: {
              city?: string;
              country?: string;
              line1: string;
              line2?: string;
              postal_code?: string;
              state?: string;
            };
            carrier?: string;
            name: string;
            phone?: string;
            tracking_number?: string;
          };
          statement_descriptor?: string;
          statement_descriptor_suffix?: string;
          transfer_data?: { amount?: number; destination: string };
          transfer_group?: string;
        };
        payment_method_options?: {
          acss_debit?: {
            currency?: "cad" | "usd";
            mandate_options?: {
              custom_mandate_url?: string | "";
              default_for?: ("invoice" | "subscription")[];
              interval_description?: string;
              payment_schedule?: "combined" | "interval" | "sporadic";
              transaction_type?: "business" | "personal";
            };
            verification_method?: "automatic" | "instant" | "microdeposits";
          };
          boleto?: { expires_after_days?: number };
          oxxo?: { expires_after_days?: number };
          wechat_pay?: { app_id?: string; client: "android" | "ios" | "web" };
        };
        payment_method_types?: (
          | "acss_debit"
          | "afterpay_clearpay"
          | "alipay"
          | "bacs_debit"
          | "bancontact"
          | "boleto"
          | "card"
          | "eps"
          | "fpx"
          | "giropay"
          | "grabpay"
          | "ideal"
          | "klarna"
          | "oxxo"
          | "p24"
          | "sepa_debit"
          | "sofort"
          | "wechat_pay"
        )[];
        phone_number_collection?: { enabled: boolean };
        setup_intent_data?: { description?: string; metadata?: Record<string, string>; on_behalf_of?: string };
        shipping_address_collection?: {
          allowed_countries: (
            | "AC"
            | "AD"
            | "AE"
            | "AF"
            | "AG"
            | "AI"
            | "AL"
            | "AM"
            | "AO"
            | "AQ"
            | "AR"
            | "AT"
            | "AU"
            | "AW"
            | "AX"
            | "AZ"
            | "BA"
            | "BB"
            | "BD"
            | "BE"
            | "BF"
            | "BG"
            | "BH"
            | "BI"
            | "BJ"
            | "BL"
            | "BM"
            | "BN"
            | "BO"
            | "BQ"
            | "BR"
            | "BS"
            | "BT"
            | "BV"
            | "BW"
            | "BY"
            | "BZ"
            | "CA"
            | "CD"
            | "CF"
            | "CG"
            | "CH"
            | "CI"
            | "CK"
            | "CL"
            | "CM"
            | "CN"
            | "CO"
            | "CR"
            | "CV"
            | "CW"
            | "CY"
            | "CZ"
            | "DE"
            | "DJ"
            | "DK"
            | "DM"
            | "DO"
            | "DZ"
            | "EC"
            | "EE"
            | "EG"
            | "EH"
            | "ER"
            | "ES"
            | "ET"
            | "FI"
            | "FJ"
            | "FK"
            | "FO"
            | "FR"
            | "GA"
            | "GB"
            | "GD"
            | "GE"
            | "GF"
            | "GG"
            | "GH"
            | "GI"
            | "GL"
            | "GM"
            | "GN"
            | "GP"
            | "GQ"
            | "GR"
            | "GS"
            | "GT"
            | "GU"
            | "GW"
            | "GY"
            | "HK"
            | "HN"
            | "HR"
            | "HT"
            | "HU"
            | "ID"
            | "IE"
            | "IL"
            | "IM"
            | "IN"
            | "IO"
            | "IQ"
            | "IS"
            | "IT"
            | "JE"
            | "JM"
            | "JO"
            | "JP"
            | "KE"
            | "KG"
            | "KH"
            | "KI"
            | "KM"
            | "KN"
            | "KR"
            | "KW"
            | "KY"
            | "KZ"
            | "LA"
            | "LB"
            | "LC"
            | "LI"
            | "LK"
            | "LR"
            | "LS"
            | "LT"
            | "LU"
            | "LV"
            | "LY"
            | "MA"
            | "MC"
            | "MD"
            | "ME"
            | "MF"
            | "MG"
            | "MK"
            | "ML"
            | "MM"
            | "MN"
            | "MO"
            | "MQ"
            | "MR"
            | "MS"
            | "MT"
            | "MU"
            | "MV"
            | "MW"
            | "MX"
            | "MY"
            | "MZ"
            | "NA"
            | "NC"
            | "NE"
            | "NG"
            | "NI"
            | "NL"
            | "NO"
            | "NP"
            | "NR"
            | "NU"
            | "NZ"
            | "OM"
            | "PA"
            | "PE"
            | "PF"
            | "PG"
            | "PH"
            | "PK"
            | "PL"
            | "PM"
            | "PN"
            | "PR"
            | "PS"
            | "PT"
            | "PY"
            | "QA"
            | "RE"
            | "RO"
            | "RS"
            | "RU"
            | "RW"
            | "SA"
            | "SB"
            | "SC"
            | "SE"
            | "SG"
            | "SH"
            | "SI"
            | "SJ"
            | "SK"
            | "SL"
            | "SM"
            | "SN"
            | "SO"
            | "SR"
            | "SS"
            | "ST"
            | "SV"
            | "SX"
            | "SZ"
            | "TA"
            | "TC"
            | "TD"
            | "TF"
            | "TG"
            | "TH"
            | "TJ"
            | "TK"
            | "TL"
            | "TM"
            | "TN"
            | "TO"
            | "TR"
            | "TT"
            | "TV"
            | "TW"
            | "TZ"
            | "UA"
            | "UG"
            | "US"
            | "UY"
            | "UZ"
            | "VA"
            | "VC"
            | "VE"
            | "VG"
            | "VN"
            | "VU"
            | "WF"
            | "WS"
            | "XK"
            | "YE"
            | "YT"
            | "ZA"
            | "ZM"
            | "ZW"
            | "ZZ"
          )[];
        };
        shipping_options?: {
          shipping_rate?: string;
          shipping_rate_data?: {
            delivery_estimate?: {
              maximum?: { unit: "business_day" | "day" | "hour" | "month" | "week"; value: number };
              minimum?: { unit: "business_day" | "day" | "hour" | "month" | "week"; value: number };
            };
            display_name: string;
            fixed_amount?: { amount: number; currency: string };
            metadata?: Record<string, string>;
            tax_behavior?: "exclusive" | "inclusive" | "unspecified";
            tax_code?: string;
            type?: "fixed_amount";
          };
        }[];
        submit_type?: "auto" | "book" | "donate" | "pay";
        subscription_data?: {
          application_fee_percent?: number;
          default_tax_rates?: string[];
          items?: { plan: string; quantity?: number; tax_rates?: string[] }[];
          metadata?: Record<string, string>;
          transfer_data?: { amount_percent?: number; destination: string };
          trial_end?: number;
          trial_period_days?: number;
        };
        success_url: string;
        tax_id_collection?: { enabled: boolean };
      },
      params: RequestParams = {},
    ) =>
      this.request<CheckoutSession, Error>({
        path: `/v1/checkout/sessions`,
        method: "POST",
        body: data,
        secure: true,
        type: ContentType.UrlEncoded,
        format: "json",
        ...params,
      }),

    /**
     * @description <p>Retrieves a Session object.</p>
     *
     * @name GetCheckoutSessionsSession
     * @request GET:/v1/checkout/sessions/{session}
     * @secure
     * @response `200` `CheckoutSession` Successful response.
     * @response `default` `Error` Error response.
     */
    getCheckoutSessionsSession: (
      session: string,
      query?: { expand?: string[] },
      data?: CardMandatePaymentMethodDetails,
      params: RequestParams = {},
    ) =>
      this.request<CheckoutSession, Error>({
        path: `/v1/checkout/sessions/${session}`,
        method: "GET",
        query: query,
        body: data,
        secure: true,
        type: ContentType.UrlEncoded,
        format: "json",
        ...params,
      }),

    /**
     * @description <p>A Session can be expired when it is in one of these statuses: <code>open</code> </p> <p>After it expires, a customer can’t complete a Session and customers loading the Session see a message saying the Session is expired.</p>
     *
     * @name PostCheckoutSessionsSessionExpire
     * @request POST:/v1/checkout/sessions/{session}/expire
     * @secure
     * @response `200` `CheckoutSession` Successful response.
     * @response `default` `Error` Error response.
     */
    postCheckoutSessionsSessionExpire: (session: string, data?: { expand?: string[] }, params: RequestParams = {}) =>
      this.request<CheckoutSession, Error>({
        path: `/v1/checkout/sessions/${session}/expire`,
        method: "POST",
        body: data,
        secure: true,
        type: ContentType.UrlEncoded,
        format: "json",
        ...params,
      }),

    /**
     * @description <p>When retrieving a Checkout Session, there is an includable <strong>line_items</strong> property containing the first handful of those items. There is also a URL where you can retrieve the full (paginated) list of line items.</p>
     *
     * @name GetCheckoutSessionsSessionLineItems
     * @request GET:/v1/checkout/sessions/{session}/line_items
     * @secure
     * @response `200` `{ data: (Item)[], has_more: boolean, object: "list", url: string }` Successful response.
     * @response `default` `Error` Error response.
     */
    getCheckoutSessionsSessionLineItems: (
      session: string,
      query?: { ending_before?: string; expand?: string[]; limit?: number; starting_after?: string },
      data?: CardMandatePaymentMethodDetails,
      params: RequestParams = {},
    ) =>
      this.request<{ data: Item[]; has_more: boolean; object: "list"; url: string }, Error>({
        path: `/v1/checkout/sessions/${session}/line_items`,
        method: "GET",
        query: query,
        body: data,
        secure: true,
        type: ContentType.UrlEncoded,
        format: "json",
        ...params,
      }),

    /**
     * @description <p>Lists all Country Spec objects available in the API.</p>
     *
     * @name GetCountrySpecs
     * @request GET:/v1/country_specs
     * @secure
     * @response `200` `{ data: (CountrySpec)[], has_more: boolean, object: "list", url: string }` Successful response.
     * @response `default` `Error` Error response.
     */
    getCountrySpecs: (
      query?: { ending_before?: string; expand?: string[]; limit?: number; starting_after?: string },
      data?: CardMandatePaymentMethodDetails,
      params: RequestParams = {},
    ) =>
      this.request<{ data: CountrySpec[]; has_more: boolean; object: "list"; url: string }, Error>({
        path: `/v1/country_specs`,
        method: "GET",
        query: query,
        body: data,
        secure: true,
        type: ContentType.UrlEncoded,
        format: "json",
        ...params,
      }),

    /**
     * @description <p>Returns a Country Spec for a given Country code.</p>
     *
     * @name GetCountrySpecsCountry
     * @request GET:/v1/country_specs/{country}
     * @secure
     * @response `200` `CountrySpec` Successful response.
     * @response `default` `Error` Error response.
     */
    getCountrySpecsCountry: (
      country: string,
      query?: { expand?: string[] },
      data?: CardMandatePaymentMethodDetails,
      params: RequestParams = {},
    ) =>
      this.request<CountrySpec, Error>({
        path: `/v1/country_specs/${country}`,
        method: "GET",
        query: query,
        body: data,
        secure: true,
        type: ContentType.UrlEncoded,
        format: "json",
        ...params,
      }),

    /**
     * @description <p>Returns a list of your coupons.</p>
     *
     * @name GetCoupons
     * @request GET:/v1/coupons
     * @secure
     * @response `200` `{ data: (Coupon)[], has_more: boolean, object: "list", url: string }` Successful response.
     * @response `default` `Error` Error response.
     */
    getCoupons: (
      query?: {
        created?: { gt?: number; gte?: number; lt?: number; lte?: number } | number;
        ending_before?: string;
        expand?: string[];
        limit?: number;
        starting_after?: string;
      },
      data?: CardMandatePaymentMethodDetails,
      params: RequestParams = {},
    ) =>
      this.request<{ data: Coupon[]; has_more: boolean; object: "list"; url: string }, Error>({
        path: `/v1/coupons`,
        method: "GET",
        query: query,
        body: data,
        secure: true,
        type: ContentType.UrlEncoded,
        format: "json",
        ...params,
      }),

    /**
     * @description <p>You can create coupons easily via the <a href="https://dashboard.stripe.com/coupons">coupon management</a> page of the Stripe dashboard. Coupon creation is also accessible via the API if you need to create coupons on the fly.</p> <p>A coupon has either a <code>percent_off</code> or an <code>amount_off</code> and <code>currency</code>. If you set an <code>amount_off</code>, that amount will be subtracted from any invoice’s subtotal. For example, an invoice with a subtotal of <currency>100</currency> will have a final total of <currency>0</currency> if a coupon with an <code>amount_off</code> of <amount>200</amount> is applied to it and an invoice with a subtotal of <currency>300</currency> will have a final total of <currency>100</currency> if a coupon with an <code>amount_off</code> of <amount>200</amount> is applied to it.</p>
     *
     * @name PostCoupons
     * @request POST:/v1/coupons
     * @secure
     * @response `200` `Coupon` Successful response.
     * @response `default` `Error` Error response.
     */
    postCoupons: (
      data?: {
        amount_off?: number;
        applies_to?: { products?: string[] };
        currency?: string;
        duration?: "forever" | "once" | "repeating";
        duration_in_months?: number;
        expand?: string[];
        id?: string;
        max_redemptions?: number;
        metadata?: Record<string, string> | "" | (Record<string, string> & "");
        name?: string;
        percent_off?: number;
        redeem_by?: number;
      },
      params: RequestParams = {},
    ) =>
      this.request<Coupon, Error>({
        path: `/v1/coupons`,
        method: "POST",
        body: data,
        secure: true,
        type: ContentType.UrlEncoded,
        format: "json",
        ...params,
      }),

    /**
     * @description <p>You can delete coupons via the <a href="https://dashboard.stripe.com/coupons">coupon management</a> page of the Stripe dashboard. However, deleting a coupon does not affect any customers who have already applied the coupon; it means that new customers can’t redeem the coupon. You can also delete coupons via the API.</p>
     *
     * @name DeleteCouponsCoupon
     * @request DELETE:/v1/coupons/{coupon}
     * @secure
     * @response `200` `DeletedCoupon` Successful response.
     * @response `default` `Error` Error response.
     */
    deleteCouponsCoupon: (coupon: string, data?: CardMandatePaymentMethodDetails, params: RequestParams = {}) =>
      this.request<DeletedCoupon, Error>({
        path: `/v1/coupons/${coupon}`,
        method: "DELETE",
        body: data,
        secure: true,
        type: ContentType.UrlEncoded,
        format: "json",
        ...params,
      }),

    /**
     * @description <p>Retrieves the coupon with the given ID.</p>
     *
     * @name GetCouponsCoupon
     * @request GET:/v1/coupons/{coupon}
     * @secure
     * @response `200` `Coupon` Successful response.
     * @response `default` `Error` Error response.
     */
    getCouponsCoupon: (
      coupon: string,
      query?: { expand?: string[] },
      data?: CardMandatePaymentMethodDetails,
      params: RequestParams = {},
    ) =>
      this.request<Coupon, Error>({
        path: `/v1/coupons/${coupon}`,
        method: "GET",
        query: query,
        body: data,
        secure: true,
        type: ContentType.UrlEncoded,
        format: "json",
        ...params,
      }),

    /**
     * @description <p>Updates the metadata of a coupon. Other coupon details (currency, duration, amount_off) are, by design, not editable.</p>
     *
     * @name PostCouponsCoupon
     * @request POST:/v1/coupons/{coupon}
     * @secure
     * @response `200` `Coupon` Successful response.
     * @response `default` `Error` Error response.
     */
    postCouponsCoupon: (
      coupon: string,
      data?: {
        expand?: string[];
        metadata?: Record<string, string> | "" | (Record<string, string> & "");
        name?: string;
      },
      params: RequestParams = {},
    ) =>
      this.request<Coupon, Error>({
        path: `/v1/coupons/${coupon}`,
        method: "POST",
        body: data,
        secure: true,
        type: ContentType.UrlEncoded,
        format: "json",
        ...params,
      }),

    /**
     * @description <p>Returns a list of credit notes.</p>
     *
     * @name GetCreditNotes
     * @request GET:/v1/credit_notes
     * @secure
     * @response `200` `{ data: (CreditNote)[], has_more: boolean, object: "list", url: string }` Successful response.
     * @response `default` `Error` Error response.
     */
    getCreditNotes: (
      query?: {
        customer?: string;
        ending_before?: string;
        expand?: string[];
        invoice?: string;
        limit?: number;
        starting_after?: string;
      },
      data?: CardMandatePaymentMethodDetails,
      params: RequestParams = {},
    ) =>
      this.request<{ data: CreditNote[]; has_more: boolean; object: "list"; url: string }, Error>({
        path: `/v1/credit_notes`,
        method: "GET",
        query: query,
        body: data,
        secure: true,
        type: ContentType.UrlEncoded,
        format: "json",
        ...params,
      }),

    /**
     * @description <p>Issue a credit note to adjust the amount of a finalized invoice. For a <code>status=open</code> invoice, a credit note reduces its <code>amount_due</code>. For a <code>status=paid</code> invoice, a credit note does not affect its <code>amount_due</code>. Instead, it can result in any combination of the following:</p> <ul> <li>Refund: create a new refund (using <code>refund_amount</code>) or link an existing refund (using <code>refund</code>).</li> <li>Customer balance credit: credit the customer’s balance (using <code>credit_amount</code>) which will be automatically applied to their next invoice when it’s finalized.</li> <li>Outside of Stripe credit: record the amount that is or will be credited outside of Stripe (using <code>out_of_band_amount</code>).</li> </ul> <p>For post-payment credit notes the sum of the refund, credit and outside of Stripe amounts must equal the credit note total.</p> <p>You may issue multiple credit notes for an invoice. Each credit note will increment the invoice’s <code>pre_payment_credit_notes_amount</code> or <code>post_payment_credit_notes_amount</code> depending on its <code>status</code> at the time of credit note creation.</p>
     *
     * @name PostCreditNotes
     * @request POST:/v1/credit_notes
     * @secure
     * @response `200` `CreditNote` Successful response.
     * @response `default` `Error` Error response.
     */
    postCreditNotes: (
      data: {
        amount?: number;
        credit_amount?: number;
        expand?: string[];
        invoice: string;
        lines?: {
          amount?: number;
          description?: string;
          invoice_line_item?: string;
          quantity?: number;
          tax_rates?: string[] | "" | (string[] & "");
          type: "custom_line_item" | "invoice_line_item";
          unit_amount?: number;
          unit_amount_decimal?: string;
        }[];
        memo?: string;
        metadata?: Record<string, string>;
        out_of_band_amount?: number;
        reason?: "duplicate" | "fraudulent" | "order_change" | "product_unsatisfactory";
        refund?: string;
        refund_amount?: number;
      },
      params: RequestParams = {},
    ) =>
      this.request<CreditNote, Error>({
        path: `/v1/credit_notes`,
        method: "POST",
        body: data,
        secure: true,
        type: ContentType.UrlEncoded,
        format: "json",
        ...params,
      }),

    /**
     * @description <p>Get a preview of a credit note without creating it.</p>
     *
     * @name GetCreditNotesPreview
     * @request GET:/v1/credit_notes/preview
     * @secure
     * @response `200` `CreditNote` Successful response.
     * @response `default` `Error` Error response.
     */
    getCreditNotesPreview: (
      query: {
        amount?: number;
        credit_amount?: number;
        expand?: string[];
        invoice: string;
        lines?: {
          amount?: number;
          description?: string;
          invoice_line_item?: string;
          quantity?: number;
          tax_rates?: string[] | "" | (string[] & "");
          type: "custom_line_item" | "invoice_line_item";
          unit_amount?: number;
          unit_amount_decimal?: string;
        }[];
        memo?: string;
        metadata?: Record<string, string>;
        out_of_band_amount?: number;
        reason?: "duplicate" | "fraudulent" | "order_change" | "product_unsatisfactory";
        refund?: string;
        refund_amount?: number;
      },
      data?: CardMandatePaymentMethodDetails,
      params: RequestParams = {},
    ) =>
      this.request<CreditNote, Error>({
        path: `/v1/credit_notes/preview`,
        method: "GET",
        query: query,
        body: data,
        secure: true,
        type: ContentType.UrlEncoded,
        format: "json",
        ...params,
      }),

    /**
     * @description <p>When retrieving a credit note preview, you’ll get a <strong>lines</strong> property containing the first handful of those items. This URL you can retrieve the full (paginated) list of line items.</p>
     *
     * @name GetCreditNotesPreviewLines
     * @request GET:/v1/credit_notes/preview/lines
     * @secure
     * @response `200` `{ data: (CreditNoteLineItem)[], has_more: boolean, object: "list", url: string }` Successful response.
     * @response `default` `Error` Error response.
     */
    getCreditNotesPreviewLines: (
      query: {
        amount?: number;
        credit_amount?: number;
        ending_before?: string;
        expand?: string[];
        invoice: string;
        limit?: number;
        lines?: {
          amount?: number;
          description?: string;
          invoice_line_item?: string;
          quantity?: number;
          tax_rates?: string[] | "" | (string[] & "");
          type: "custom_line_item" | "invoice_line_item";
          unit_amount?: number;
          unit_amount_decimal?: string;
        }[];
        memo?: string;
        metadata?: Record<string, string>;
        out_of_band_amount?: number;
        reason?: "duplicate" | "fraudulent" | "order_change" | "product_unsatisfactory";
        refund?: string;
        refund_amount?: number;
        starting_after?: string;
      },
      data?: CardMandatePaymentMethodDetails,
      params: RequestParams = {},
    ) =>
      this.request<{ data: CreditNoteLineItem[]; has_more: boolean; object: "list"; url: string }, Error>({
        path: `/v1/credit_notes/preview/lines`,
        method: "GET",
        query: query,
        body: data,
        secure: true,
        type: ContentType.UrlEncoded,
        format: "json",
        ...params,
      }),

    /**
     * @description <p>When retrieving a credit note, you’ll get a <strong>lines</strong> property containing the the first handful of those items. There is also a URL where you can retrieve the full (paginated) list of line items.</p>
     *
     * @name GetCreditNotesCreditNoteLines
     * @request GET:/v1/credit_notes/{credit_note}/lines
     * @secure
     * @response `200` `{ data: (CreditNoteLineItem)[], has_more: boolean, object: "list", url: string }` Successful response.
     * @response `default` `Error` Error response.
     */
    getCreditNotesCreditNoteLines: (
      creditNote: string,
      query?: { ending_before?: string; expand?: string[]; limit?: number; starting_after?: string },
      data?: CardMandatePaymentMethodDetails,
      params: RequestParams = {},
    ) =>
      this.request<{ data: CreditNoteLineItem[]; has_more: boolean; object: "list"; url: string }, Error>({
        path: `/v1/credit_notes/${creditNote}/lines`,
        method: "GET",
        query: query,
        body: data,
        secure: true,
        type: ContentType.UrlEncoded,
        format: "json",
        ...params,
      }),

    /**
     * @description <p>Retrieves the credit note object with the given identifier.</p>
     *
     * @name GetCreditNotesId
     * @request GET:/v1/credit_notes/{id}
     * @secure
     * @response `200` `CreditNote` Successful response.
     * @response `default` `Error` Error response.
     */
    getCreditNotesId: (
      id: string,
      query?: { expand?: string[] },
      data?: CardMandatePaymentMethodDetails,
      params: RequestParams = {},
    ) =>
      this.request<CreditNote, Error>({
        path: `/v1/credit_notes/${id}`,
        method: "GET",
        query: query,
        body: data,
        secure: true,
        type: ContentType.UrlEncoded,
        format: "json",
        ...params,
      }),

    /**
     * @description <p>Updates an existing credit note.</p>
     *
     * @name PostCreditNotesId
     * @request POST:/v1/credit_notes/{id}
     * @secure
     * @response `200` `CreditNote` Successful response.
     * @response `default` `Error` Error response.
     */
    postCreditNotesId: (
      id: string,
      data?: { expand?: string[]; memo?: string; metadata?: Record<string, string> },
      params: RequestParams = {},
    ) =>
      this.request<CreditNote, Error>({
        path: `/v1/credit_notes/${id}`,
        method: "POST",
        body: data,
        secure: true,
        type: ContentType.UrlEncoded,
        format: "json",
        ...params,
      }),

    /**
     * @description <p>Marks a credit note as void. Learn more about <a href="/docs/billing/invoices/credit-notes#voiding">voiding credit notes</a>.</p>
     *
     * @name PostCreditNotesIdVoid
     * @request POST:/v1/credit_notes/{id}/void
     * @secure
     * @response `200` `CreditNote` Successful response.
     * @response `default` `Error` Error response.
     */
    postCreditNotesIdVoid: (id: string, data?: { expand?: string[] }, params: RequestParams = {}) =>
      this.request<CreditNote, Error>({
        path: `/v1/credit_notes/${id}/void`,
        method: "POST",
        body: data,
        secure: true,
        type: ContentType.UrlEncoded,
        format: "json",
        ...params,
      }),

    /**
     * @description <p>Returns a list of your customers. The customers are returned sorted by creation date, with the most recent customers appearing first.</p>
     *
     * @name GetCustomers
     * @request GET:/v1/customers
     * @secure
     * @response `200` `{ data: (Customer)[], has_more: boolean, object: "list", url: string }` Successful response.
     * @response `default` `Error` Error response.
     */
    getCustomers: (
      query?: {
        created?: { gt?: number; gte?: number; lt?: number; lte?: number } | number;
        email?: string;
        ending_before?: string;
        expand?: string[];
        limit?: number;
        starting_after?: string;
      },
      data?: CardMandatePaymentMethodDetails,
      params: RequestParams = {},
    ) =>
      this.request<{ data: Customer[]; has_more: boolean; object: "list"; url: string }, Error>({
        path: `/v1/customers`,
        method: "GET",
        query: query,
        body: data,
        secure: true,
        type: ContentType.UrlEncoded,
        format: "json",
        ...params,
      }),

    /**
     * @description <p>Creates a new customer object.</p>
     *
     * @name PostCustomers
     * @request POST:/v1/customers
     * @secure
     * @response `200` `Customer` Successful response.
     * @response `default` `Error` Error response.
     */
    postCustomers: (
      data?: {
        address?:
          | { city?: string; country?: string; line1?: string; line2?: string; postal_code?: string; state?: string }
          | ""
          | ({
              city?: string;
              country?: string;
              line1?: string;
              line2?: string;
              postal_code?: string;
              state?: string;
            } & "");
        balance?: number;
        coupon?: string;
        description?: string;
        email?: string;
        expand?: string[];
        invoice_prefix?: string;
        invoice_settings?: {
          custom_fields?: { name: string; value: string }[] | "" | ({ name: string; value: string }[] & "");
          default_payment_method?: string;
          footer?: string;
        };
        metadata?: Record<string, string> | "" | (Record<string, string> & "");
        name?: string;
        next_invoice_sequence?: number;
        payment_method?: string;
        phone?: string;
        preferred_locales?: string[];
        promotion_code?: string;
        shipping?:
          | {
              address: {
                city?: string;
                country?: string;
                line1?: string;
                line2?: string;
                postal_code?: string;
                state?: string;
              };
              name: string;
              phone?: string;
            }
          | ""
          | ({
              address: {
                city?: string;
                country?: string;
                line1?: string;
                line2?: string;
                postal_code?: string;
                state?: string;
              };
              name: string;
              phone?: string;
            } & "");
        source?: string;
        tax?: { ip_address?: string | "" };
        tax_exempt?: "" | "exempt" | "none" | "reverse";
        tax_id_data?: {
          type:
            | "ae_trn"
            | "au_abn"
            | "au_arn"
            | "br_cnpj"
            | "br_cpf"
            | "ca_bn"
            | "ca_gst_hst"
            | "ca_pst_bc"
            | "ca_pst_mb"
            | "ca_pst_sk"
            | "ca_qst"
            | "ch_vat"
            | "cl_tin"
            | "es_cif"
            | "eu_vat"
            | "gb_vat"
            | "ge_vat"
            | "hk_br"
            | "id_npwp"
            | "il_vat"
            | "in_gst"
            | "jp_cn"
            | "jp_rn"
            | "kr_brn"
            | "li_uid"
            | "mx_rfc"
            | "my_frp"
            | "my_itn"
            | "my_sst"
            | "no_vat"
            | "nz_gst"
            | "ru_inn"
            | "ru_kpp"
            | "sa_vat"
            | "sg_gst"
            | "sg_uen"
            | "th_vat"
            | "tw_vat"
            | "ua_vat"
            | "us_ein"
            | "za_vat";
          value: string;
        }[];
      },
      params: RequestParams = {},
    ) =>
      this.request<Customer, Error>({
        path: `/v1/customers`,
        method: "POST",
        body: data,
        secure: true,
        type: ContentType.UrlEncoded,
        format: "json",
        ...params,
      }),

    /**
     * @description <p>Permanently deletes a customer. It cannot be undone. Also immediately cancels any active subscriptions on the customer.</p>
     *
     * @name DeleteCustomersCustomer
     * @request DELETE:/v1/customers/{customer}
     * @secure
     * @response `200` `DeletedCustomer` Successful response.
     * @response `default` `Error` Error response.
     */
    deleteCustomersCustomer: (customer: string, data?: CardMandatePaymentMethodDetails, params: RequestParams = {}) =>
      this.request<DeletedCustomer, Error>({
        path: `/v1/customers/${customer}`,
        method: "DELETE",
        body: data,
        secure: true,
        type: ContentType.UrlEncoded,
        format: "json",
        ...params,
      }),

    /**
     * @description <p>Retrieves a Customer object.</p>
     *
     * @name GetCustomersCustomer
     * @request GET:/v1/customers/{customer}
     * @secure
     * @response `200` `(Customer | DeletedCustomer | (Customer & DeletedCustomer))` Successful response.
     * @response `default` `Error` Error response.
     */
    getCustomersCustomer: (
      customer: string,
      query?: { expand?: string[] },
      data?: CardMandatePaymentMethodDetails,
      params: RequestParams = {},
    ) =>
      this.request<Customer | DeletedCustomer | (Customer & DeletedCustomer), Error>({
        path: `/v1/customers/${customer}`,
        method: "GET",
        query: query,
        body: data,
        secure: true,
        type: ContentType.UrlEncoded,
        format: "json",
        ...params,
      }),

    /**
     * @description <p>Updates the specified customer by setting the values of the parameters passed. Any parameters not provided will be left unchanged. For example, if you pass the <strong>source</strong> parameter, that becomes the customer’s active source (e.g., a card) to be used for all charges in the future. When you update a customer to a new valid card source by passing the <strong>source</strong> parameter: for each of the customer’s current subscriptions, if the subscription bills automatically and is in the <code>past_due</code> state, then the latest open invoice for the subscription with automatic collection enabled will be retried. This retry will not count as an automatic retry, and will not affect the next regularly scheduled payment for the invoice. Changing the <strong>default_source</strong> for a customer will not trigger this behavior.</p> <p>This request accepts mostly the same arguments as the customer creation call.</p>
     *
     * @name PostCustomersCustomer
     * @request POST:/v1/customers/{customer}
     * @secure
     * @response `200` `Customer` Successful response.
     * @response `default` `Error` Error response.
     */
    postCustomersCustomer: (
      customer: string,
      data?: {
        address?:
          | { city?: string; country?: string; line1?: string; line2?: string; postal_code?: string; state?: string }
          | ""
          | ({
              city?: string;
              country?: string;
              line1?: string;
              line2?: string;
              postal_code?: string;
              state?: string;
            } & "");
        balance?: number;
        bank_account?:
          | {
              account_holder_name?: string;
              account_holder_type?: "company" | "individual";
              account_number: string;
              country: string;
              currency?: string;
              object?: "bank_account";
              routing_number?: string;
            }
          | string;
        card?:
          | {
              address_city?: string;
              address_country?: string;
              address_line1?: string;
              address_line2?: string;
              address_state?: string;
              address_zip?: string;
              cvc?: string;
              exp_month: number;
              exp_year: number;
              metadata?: Record<string, string>;
              name?: string;
              number: string;
              object?: "card";
            }
          | string;
        coupon?: string;
        default_alipay_account?: string;
        default_bank_account?: string;
        default_card?: string;
        default_source?: string;
        description?: string;
        email?: string;
        expand?: string[];
        invoice_prefix?: string;
        invoice_settings?: {
          custom_fields?: { name: string; value: string }[] | "" | ({ name: string; value: string }[] & "");
          default_payment_method?: string;
          footer?: string;
        };
        metadata?: Record<string, string> | "" | (Record<string, string> & "");
        name?: string;
        next_invoice_sequence?: number;
        phone?: string;
        preferred_locales?: string[];
        promotion_code?: string;
        shipping?:
          | {
              address: {
                city?: string;
                country?: string;
                line1?: string;
                line2?: string;
                postal_code?: string;
                state?: string;
              };
              name: string;
              phone?: string;
            }
          | ""
          | ({
              address: {
                city?: string;
                country?: string;
                line1?: string;
                line2?: string;
                postal_code?: string;
                state?: string;
              };
              name: string;
              phone?: string;
            } & "");
        source?: string;
        tax?: { ip_address?: string | "" };
        tax_exempt?: "" | "exempt" | "none" | "reverse";
        trial_end?: "now" | number;
      },
      params: RequestParams = {},
    ) =>
      this.request<Customer, Error>({
        path: `/v1/customers/${customer}`,
        method: "POST",
        body: data,
        secure: true,
        type: ContentType.UrlEncoded,
        format: "json",
        ...params,
      }),

    /**
     * @description <p>Returns a list of transactions that updated the customer’s <a href="/docs/billing/customer/balance">balances</a>.</p>
     *
     * @name GetCustomersCustomerBalanceTransactions
     * @request GET:/v1/customers/{customer}/balance_transactions
     * @secure
     * @response `200` `{ data: (CustomerBalanceTransaction)[], has_more: boolean, object: "list", url: string }` Successful response.
     * @response `default` `Error` Error response.
     */
    getCustomersCustomerBalanceTransactions: (
      customer: string,
      query?: { ending_before?: string; expand?: string[]; limit?: number; starting_after?: string },
      data?: CardMandatePaymentMethodDetails,
      params: RequestParams = {},
    ) =>
      this.request<{ data: CustomerBalanceTransaction[]; has_more: boolean; object: "list"; url: string }, Error>({
        path: `/v1/customers/${customer}/balance_transactions`,
        method: "GET",
        query: query,
        body: data,
        secure: true,
        type: ContentType.UrlEncoded,
        format: "json",
        ...params,
      }),

    /**
     * @description <p>Creates an immutable transaction that updates the customer’s credit <a href="/docs/billing/customer/balance">balance</a>.</p>
     *
     * @name PostCustomersCustomerBalanceTransactions
     * @request POST:/v1/customers/{customer}/balance_transactions
     * @secure
     * @response `200` `CustomerBalanceTransaction` Successful response.
     * @response `default` `Error` Error response.
     */
    postCustomersCustomerBalanceTransactions: (
      customer: string,
      data: {
        amount: number;
        currency: string;
        description?: string;
        expand?: string[];
        metadata?: Record<string, string> | "" | (Record<string, string> & "");
      },
      params: RequestParams = {},
    ) =>
      this.request<CustomerBalanceTransaction, Error>({
        path: `/v1/customers/${customer}/balance_transactions`,
        method: "POST",
        body: data,
        secure: true,
        type: ContentType.UrlEncoded,
        format: "json",
        ...params,
      }),

    /**
     * @description <p>Retrieves a specific customer balance transaction that updated the customer’s <a href="/docs/billing/customer/balance">balances</a>.</p>
     *
     * @name GetCustomersCustomerBalanceTransactionsTransaction
     * @request GET:/v1/customers/{customer}/balance_transactions/{transaction}
     * @secure
     * @response `200` `CustomerBalanceTransaction` Successful response.
     * @response `default` `Error` Error response.
     */
    getCustomersCustomerBalanceTransactionsTransaction: (
      customer: string,
      transaction: string,
      query?: { expand?: string[] },
      data?: CardMandatePaymentMethodDetails,
      params: RequestParams = {},
    ) =>
      this.request<CustomerBalanceTransaction, Error>({
        path: `/v1/customers/${customer}/balance_transactions/${transaction}`,
        method: "GET",
        query: query,
        body: data,
        secure: true,
        type: ContentType.UrlEncoded,
        format: "json",
        ...params,
      }),

    /**
     * @description <p>Most credit balance transaction fields are immutable, but you may update its <code>description</code> and <code>metadata</code>.</p>
     *
     * @name PostCustomersCustomerBalanceTransactionsTransaction
     * @request POST:/v1/customers/{customer}/balance_transactions/{transaction}
     * @secure
     * @response `200` `CustomerBalanceTransaction` Successful response.
     * @response `default` `Error` Error response.
     */
    postCustomersCustomerBalanceTransactionsTransaction: (
      customer: string,
      transaction: string,
      data?: {
        description?: string;
        expand?: string[];
        metadata?: Record<string, string> | "" | (Record<string, string> & "");
      },
      params: RequestParams = {},
    ) =>
      this.request<CustomerBalanceTransaction, Error>({
        path: `/v1/customers/${customer}/balance_transactions/${transaction}`,
        method: "POST",
        body: data,
        secure: true,
        type: ContentType.UrlEncoded,
        format: "json",
        ...params,
      }),

    /**
     * @description <p>You can see a list of the bank accounts belonging to a Customer. Note that the 10 most recent sources are always available by default on the Customer. If you need more than those 10, you can use this API method and the <code>limit</code> and <code>starting_after</code> parameters to page through additional bank accounts.</p>
     *
     * @name GetCustomersCustomerBankAccounts
     * @request GET:/v1/customers/{customer}/bank_accounts
     * @deprecated
     * @secure
     * @response `200` `{ data: (BankAccount)[], has_more: boolean, object: "list", url: string }` Successful response.
     * @response `default` `Error` Error response.
     */
    getCustomersCustomerBankAccounts: (
      customer: string,
      query?: { ending_before?: string; expand?: string[]; limit?: number; starting_after?: string },
      data?: CardMandatePaymentMethodDetails,
      params: RequestParams = {},
    ) =>
      this.request<{ data: BankAccount[]; has_more: boolean; object: "list"; url: string }, Error>({
        path: `/v1/customers/${customer}/bank_accounts`,
        method: "GET",
        query: query,
        body: data,
        secure: true,
        type: ContentType.UrlEncoded,
        format: "json",
        ...params,
      }),

    /**
     * @description <p>When you create a new credit card, you must specify a customer or recipient on which to create it.</p> <p>If the card’s owner has no default card, then the new card will become the default. However, if the owner already has a default, then it will not change. To change the default, you should <a href="/docs/api#update_customer">update the customer</a> to have a new <code>default_source</code>.</p>
     *
     * @name PostCustomersCustomerBankAccounts
     * @request POST:/v1/customers/{customer}/bank_accounts
     * @secure
     * @response `200` `PaymentSource` Successful response.
     * @response `default` `Error` Error response.
     */
    postCustomersCustomerBankAccounts: (
      customer: string,
      data?: {
        alipay_account?: string;
        bank_account?:
          | {
              account_holder_name?: string;
              account_holder_type?: "company" | "individual";
              account_number: string;
              country: string;
              currency?: string;
              object?: "bank_account";
              routing_number?: string;
            }
          | string;
        card?:
          | {
              address_city?: string;
              address_country?: string;
              address_line1?: string;
              address_line2?: string;
              address_state?: string;
              address_zip?: string;
              cvc?: string;
              exp_month: number;
              exp_year: number;
              metadata?: Record<string, string>;
              name?: string;
              number: string;
              object?: "card";
            }
          | string;
        expand?: string[];
        metadata?: Record<string, string>;
        source?: string;
      },
      params: RequestParams = {},
    ) =>
      this.request<PaymentSource, Error>({
        path: `/v1/customers/${customer}/bank_accounts`,
        method: "POST",
        body: data,
        secure: true,
        type: ContentType.UrlEncoded,
        format: "json",
        ...params,
      }),

    /**
     * @description <p>Delete a specified source for a given customer.</p>
     *
     * @name DeleteCustomersCustomerBankAccountsId
     * @request DELETE:/v1/customers/{customer}/bank_accounts/{id}
     * @secure
     * @response `200` `(PaymentSource | DeletedPaymentSource | (PaymentSource & DeletedPaymentSource))` Successful response.
     * @response `default` `Error` Error response.
     */
    deleteCustomersCustomerBankAccountsId: (
      customer: string,
      id: string,
      data?: { expand?: string[] },
      params: RequestParams = {},
    ) =>
      this.request<PaymentSource | DeletedPaymentSource | (PaymentSource & DeletedPaymentSource), Error>({
        path: `/v1/customers/${customer}/bank_accounts/${id}`,
        method: "DELETE",
        body: data,
        secure: true,
        type: ContentType.UrlEncoded,
        format: "json",
        ...params,
      }),

    /**
     * @description <p>By default, you can see the 10 most recent sources stored on a Customer directly on the object, but you can also retrieve details about a specific bank account stored on the Stripe account.</p>
     *
     * @name GetCustomersCustomerBankAccountsId
     * @request GET:/v1/customers/{customer}/bank_accounts/{id}
     * @deprecated
     * @secure
     * @response `200` `BankAccount` Successful response.
     * @response `default` `Error` Error response.
     */
    getCustomersCustomerBankAccountsId: (
      customer: string,
      id: string,
      query?: { expand?: string[] },
      data?: CardMandatePaymentMethodDetails,
      params: RequestParams = {},
    ) =>
      this.request<BankAccount, Error>({
        path: `/v1/customers/${customer}/bank_accounts/${id}`,
        method: "GET",
        query: query,
        body: data,
        secure: true,
        type: ContentType.UrlEncoded,
        format: "json",
        ...params,
      }),

    /**
     * @description <p>Update a specified source for a given customer.</p>
     *
     * @name PostCustomersCustomerBankAccountsId
     * @request POST:/v1/customers/{customer}/bank_accounts/{id}
     * @secure
     * @response `200` `(Card | BankAccount | Source | (Card & BankAccount & Source))` Successful response.
     * @response `default` `Error` Error response.
     */
    postCustomersCustomerBankAccountsId: (
      customer: string,
      id: string,
      data?: {
        account_holder_name?: string;
        account_holder_type?: "company" | "individual";
        address_city?: string;
        address_country?: string;
        address_line1?: string;
        address_line2?: string;
        address_state?: string;
        address_zip?: string;
        exp_month?: string;
        exp_year?: string;
        expand?: string[];
        metadata?: Record<string, string> | "" | (Record<string, string> & "");
        name?: string;
        owner?: {
          address?: {
            city?: string;
            country?: string;
            line1?: string;
            line2?: string;
            postal_code?: string;
            state?: string;
          };
          email?: string;
          name?: string;
          phone?: string;
        };
      },
      params: RequestParams = {},
    ) =>
      this.request<Card | BankAccount | Source | (Card & BankAccount & Source), Error>({
        path: `/v1/customers/${customer}/bank_accounts/${id}`,
        method: "POST",
        body: data,
        secure: true,
        type: ContentType.UrlEncoded,
        format: "json",
        ...params,
      }),

    /**
     * @description <p>Verify a specified bank account for a given customer.</p>
     *
     * @name PostCustomersCustomerBankAccountsIdVerify
     * @request POST:/v1/customers/{customer}/bank_accounts/{id}/verify
     * @secure
     * @response `200` `BankAccount` Successful response.
     * @response `default` `Error` Error response.
     */
    postCustomersCustomerBankAccountsIdVerify: (
      customer: string,
      id: string,
      data?: { amounts?: number[]; expand?: string[] },
      params: RequestParams = {},
    ) =>
      this.request<BankAccount, Error>({
        path: `/v1/customers/${customer}/bank_accounts/${id}/verify`,
        method: "POST",
        body: data,
        secure: true,
        type: ContentType.UrlEncoded,
        format: "json",
        ...params,
      }),

    /**
     * @description <p>You can see a list of the cards belonging to a customer. Note that the 10 most recent sources are always available on the <code>Customer</code> object. If you need more than those 10, you can use this API method and the <code>limit</code> and <code>starting_after</code> parameters to page through additional cards.</p>
     *
     * @name GetCustomersCustomerCards
     * @request GET:/v1/customers/{customer}/cards
     * @deprecated
     * @secure
     * @response `200` `{ data: (Card)[], has_more: boolean, object: "list", url: string }` Successful response.
     * @response `default` `Error` Error response.
     */
    getCustomersCustomerCards: (
      customer: string,
      query?: { ending_before?: string; expand?: string[]; limit?: number; starting_after?: string },
      data?: CardMandatePaymentMethodDetails,
      params: RequestParams = {},
    ) =>
      this.request<{ data: Card[]; has_more: boolean; object: "list"; url: string }, Error>({
        path: `/v1/customers/${customer}/cards`,
        method: "GET",
        query: query,
        body: data,
        secure: true,
        type: ContentType.UrlEncoded,
        format: "json",
        ...params,
      }),

    /**
     * @description <p>When you create a new credit card, you must specify a customer or recipient on which to create it.</p> <p>If the card’s owner has no default card, then the new card will become the default. However, if the owner already has a default, then it will not change. To change the default, you should <a href="/docs/api#update_customer">update the customer</a> to have a new <code>default_source</code>.</p>
     *
     * @name PostCustomersCustomerCards
     * @request POST:/v1/customers/{customer}/cards
     * @secure
     * @response `200` `PaymentSource` Successful response.
     * @response `default` `Error` Error response.
     */
    postCustomersCustomerCards: (
      customer: string,
      data?: {
        alipay_account?: string;
        bank_account?:
          | {
              account_holder_name?: string;
              account_holder_type?: "company" | "individual";
              account_number: string;
              country: string;
              currency?: string;
              object?: "bank_account";
              routing_number?: string;
            }
          | string;
        card?:
          | {
              address_city?: string;
              address_country?: string;
              address_line1?: string;
              address_line2?: string;
              address_state?: string;
              address_zip?: string;
              cvc?: string;
              exp_month: number;
              exp_year: number;
              metadata?: Record<string, string>;
              name?: string;
              number: string;
              object?: "card";
            }
          | string;
        expand?: string[];
        metadata?: Record<string, string>;
        source?: string;
      },
      params: RequestParams = {},
    ) =>
      this.request<PaymentSource, Error>({
        path: `/v1/customers/${customer}/cards`,
        method: "POST",
        body: data,
        secure: true,
        type: ContentType.UrlEncoded,
        format: "json",
        ...params,
      }),

    /**
     * @description <p>Delete a specified source for a given customer.</p>
     *
     * @name DeleteCustomersCustomerCardsId
     * @request DELETE:/v1/customers/{customer}/cards/{id}
     * @secure
     * @response `200` `(PaymentSource | DeletedPaymentSource | (PaymentSource & DeletedPaymentSource))` Successful response.
     * @response `default` `Error` Error response.
     */
    deleteCustomersCustomerCardsId: (
      customer: string,
      id: string,
      data?: { expand?: string[] },
      params: RequestParams = {},
    ) =>
      this.request<PaymentSource | DeletedPaymentSource | (PaymentSource & DeletedPaymentSource), Error>({
        path: `/v1/customers/${customer}/cards/${id}`,
        method: "DELETE",
        body: data,
        secure: true,
        type: ContentType.UrlEncoded,
        format: "json",
        ...params,
      }),

    /**
     * @description <p>You can always see the 10 most recent cards directly on a customer; this method lets you retrieve details about a specific card stored on the customer.</p>
     *
     * @name GetCustomersCustomerCardsId
     * @request GET:/v1/customers/{customer}/cards/{id}
     * @deprecated
     * @secure
     * @response `200` `Card` Successful response.
     * @response `default` `Error` Error response.
     */
    getCustomersCustomerCardsId: (
      customer: string,
      id: string,
      query?: { expand?: string[] },
      data?: CardMandatePaymentMethodDetails,
      params: RequestParams = {},
    ) =>
      this.request<Card, Error>({
        path: `/v1/customers/${customer}/cards/${id}`,
        method: "GET",
        query: query,
        body: data,
        secure: true,
        type: ContentType.UrlEncoded,
        format: "json",
        ...params,
      }),

    /**
     * @description <p>Update a specified source for a given customer.</p>
     *
     * @name PostCustomersCustomerCardsId
     * @request POST:/v1/customers/{customer}/cards/{id}
     * @secure
     * @response `200` `(Card | BankAccount | Source | (Card & BankAccount & Source))` Successful response.
     * @response `default` `Error` Error response.
     */
    postCustomersCustomerCardsId: (
      customer: string,
      id: string,
      data?: {
        account_holder_name?: string;
        account_holder_type?: "company" | "individual";
        address_city?: string;
        address_country?: string;
        address_line1?: string;
        address_line2?: string;
        address_state?: string;
        address_zip?: string;
        exp_month?: string;
        exp_year?: string;
        expand?: string[];
        metadata?: Record<string, string> | "" | (Record<string, string> & "");
        name?: string;
        owner?: {
          address?: {
            city?: string;
            country?: string;
            line1?: string;
            line2?: string;
            postal_code?: string;
            state?: string;
          };
          email?: string;
          name?: string;
          phone?: string;
        };
      },
      params: RequestParams = {},
    ) =>
      this.request<Card | BankAccount | Source | (Card & BankAccount & Source), Error>({
        path: `/v1/customers/${customer}/cards/${id}`,
        method: "POST",
        body: data,
        secure: true,
        type: ContentType.UrlEncoded,
        format: "json",
        ...params,
      }),

    /**
     * @description <p>Removes the currently applied discount on a customer.</p>
     *
     * @name DeleteCustomersCustomerDiscount
     * @request DELETE:/v1/customers/{customer}/discount
     * @secure
     * @response `200` `DeletedDiscount` Successful response.
     * @response `default` `Error` Error response.
     */
    deleteCustomersCustomerDiscount: (
      customer: string,
      data?: CardMandatePaymentMethodDetails,
      params: RequestParams = {},
    ) =>
      this.request<DeletedDiscount, Error>({
        path: `/v1/customers/${customer}/discount`,
        method: "DELETE",
        body: data,
        secure: true,
        type: ContentType.UrlEncoded,
        format: "json",
        ...params,
      }),

    /**
     * No description
     *
     * @name GetCustomersCustomerDiscount
     * @request GET:/v1/customers/{customer}/discount
     * @secure
     * @response `200` `Discount` Successful response.
     * @response `default` `Error` Error response.
     */
    getCustomersCustomerDiscount: (
      customer: string,
      query?: { expand?: string[] },
      data?: CardMandatePaymentMethodDetails,
      params: RequestParams = {},
    ) =>
      this.request<Discount, Error>({
        path: `/v1/customers/${customer}/discount`,
        method: "GET",
        query: query,
        body: data,
        secure: true,
        type: ContentType.UrlEncoded,
        format: "json",
        ...params,
      }),

    /**
     * @description <p>Returns a list of PaymentMethods for a given Customer</p>
     *
     * @name GetCustomersCustomerPaymentMethods
     * @request GET:/v1/customers/{customer}/payment_methods
     * @secure
     * @response `200` `{ data: (PaymentMethod)[], has_more: boolean, object: "list", url: string }` Successful response.
     * @response `default` `Error` Error response.
     */
    getCustomersCustomerPaymentMethods: (
      customer: string,
      query: {
        ending_before?: string;
        expand?: string[];
        limit?: number;
        starting_after?: string;
        type:
          | "acss_debit"
          | "afterpay_clearpay"
          | "alipay"
          | "au_becs_debit"
          | "bacs_debit"
          | "bancontact"
          | "boleto"
          | "card"
          | "eps"
          | "fpx"
          | "giropay"
          | "grabpay"
          | "ideal"
          | "klarna"
          | "oxxo"
          | "p24"
          | "sepa_debit"
          | "sofort"
          | "wechat_pay";
      },
      data?: CardMandatePaymentMethodDetails,
      params: RequestParams = {},
    ) =>
      this.request<{ data: PaymentMethod[]; has_more: boolean; object: "list"; url: string }, Error>({
        path: `/v1/customers/${customer}/payment_methods`,
        method: "GET",
        query: query,
        body: data,
        secure: true,
        type: ContentType.UrlEncoded,
        format: "json",
        ...params,
      }),

    /**
     * @description <p>List sources for a specified customer.</p>
     *
     * @name GetCustomersCustomerSources
     * @request GET:/v1/customers/{customer}/sources
     * @secure
     * @response `200` `{ data: ((AlipayAccount | BankAccount | BitcoinReceiver | Card | Source | (AlipayAccount & BankAccount & BitcoinReceiver & Card & Source)))[], has_more: boolean, object: "list", url: string }` Successful response.
     * @response `default` `Error` Error response.
     */
    getCustomersCustomerSources: (
      customer: string,
      query?: { ending_before?: string; expand?: string[]; limit?: number; object?: string; starting_after?: string },
      data?: CardMandatePaymentMethodDetails,
      params: RequestParams = {},
    ) =>
      this.request<
        {
          data: (
            | AlipayAccount
            | BankAccount
            | BitcoinReceiver
            | Card
            | Source
            | (AlipayAccount & BankAccount & BitcoinReceiver & Card & Source)
          )[];
          has_more: boolean;
          object: "list";
          url: string;
        },
        Error
      >({
        path: `/v1/customers/${customer}/sources`,
        method: "GET",
        query: query,
        body: data,
        secure: true,
        type: ContentType.UrlEncoded,
        format: "json",
        ...params,
      }),

    /**
     * @description <p>When you create a new credit card, you must specify a customer or recipient on which to create it.</p> <p>If the card’s owner has no default card, then the new card will become the default. However, if the owner already has a default, then it will not change. To change the default, you should <a href="/docs/api#update_customer">update the customer</a> to have a new <code>default_source</code>.</p>
     *
     * @name PostCustomersCustomerSources
     * @request POST:/v1/customers/{customer}/sources
     * @secure
     * @response `200` `PaymentSource` Successful response.
     * @response `default` `Error` Error response.
     */
    postCustomersCustomerSources: (
      customer: string,
      data?: {
        alipay_account?: string;
        bank_account?:
          | {
              account_holder_name?: string;
              account_holder_type?: "company" | "individual";
              account_number: string;
              country: string;
              currency?: string;
              object?: "bank_account";
              routing_number?: string;
            }
          | string;
        card?:
          | {
              address_city?: string;
              address_country?: string;
              address_line1?: string;
              address_line2?: string;
              address_state?: string;
              address_zip?: string;
              cvc?: string;
              exp_month: number;
              exp_year: number;
              metadata?: Record<string, string>;
              name?: string;
              number: string;
              object?: "card";
            }
          | string;
        expand?: string[];
        metadata?: Record<string, string>;
        source?: string;
      },
      params: RequestParams = {},
    ) =>
      this.request<PaymentSource, Error>({
        path: `/v1/customers/${customer}/sources`,
        method: "POST",
        body: data,
        secure: true,
        type: ContentType.UrlEncoded,
        format: "json",
        ...params,
      }),

    /**
     * @description <p>Delete a specified source for a given customer.</p>
     *
     * @name DeleteCustomersCustomerSourcesId
     * @request DELETE:/v1/customers/{customer}/sources/{id}
     * @secure
     * @response `200` `(PaymentSource | DeletedPaymentSource | (PaymentSource & DeletedPaymentSource))` Successful response.
     * @response `default` `Error` Error response.
     */
    deleteCustomersCustomerSourcesId: (
      customer: string,
      id: string,
      data?: { expand?: string[] },
      params: RequestParams = {},
    ) =>
      this.request<PaymentSource | DeletedPaymentSource | (PaymentSource & DeletedPaymentSource), Error>({
        path: `/v1/customers/${customer}/sources/${id}`,
        method: "DELETE",
        body: data,
        secure: true,
        type: ContentType.UrlEncoded,
        format: "json",
        ...params,
      }),

    /**
     * @description <p>Retrieve a specified source for a given customer.</p>
     *
     * @name GetCustomersCustomerSourcesId
     * @request GET:/v1/customers/{customer}/sources/{id}
     * @secure
     * @response `200` `PaymentSource` Successful response.
     * @response `default` `Error` Error response.
     */
    getCustomersCustomerSourcesId: (
      customer: string,
      id: string,
      query?: { expand?: string[] },
      data?: CardMandatePaymentMethodDetails,
      params: RequestParams = {},
    ) =>
      this.request<PaymentSource, Error>({
        path: `/v1/customers/${customer}/sources/${id}`,
        method: "GET",
        query: query,
        body: data,
        secure: true,
        type: ContentType.UrlEncoded,
        format: "json",
        ...params,
      }),

    /**
     * @description <p>Update a specified source for a given customer.</p>
     *
     * @name PostCustomersCustomerSourcesId
     * @request POST:/v1/customers/{customer}/sources/{id}
     * @secure
     * @response `200` `(Card | BankAccount | Source | (Card & BankAccount & Source))` Successful response.
     * @response `default` `Error` Error response.
     */
    postCustomersCustomerSourcesId: (
      customer: string,
      id: string,
      data?: {
        account_holder_name?: string;
        account_holder_type?: "company" | "individual";
        address_city?: string;
        address_country?: string;
        address_line1?: string;
        address_line2?: string;
        address_state?: string;
        address_zip?: string;
        exp_month?: string;
        exp_year?: string;
        expand?: string[];
        metadata?: Record<string, string> | "" | (Record<string, string> & "");
        name?: string;
        owner?: {
          address?: {
            city?: string;
            country?: string;
            line1?: string;
            line2?: string;
            postal_code?: string;
            state?: string;
          };
          email?: string;
          name?: string;
          phone?: string;
        };
      },
      params: RequestParams = {},
    ) =>
      this.request<Card | BankAccount | Source | (Card & BankAccount & Source), Error>({
        path: `/v1/customers/${customer}/sources/${id}`,
        method: "POST",
        body: data,
        secure: true,
        type: ContentType.UrlEncoded,
        format: "json",
        ...params,
      }),

    /**
     * @description <p>Verify a specified bank account for a given customer.</p>
     *
     * @name PostCustomersCustomerSourcesIdVerify
     * @request POST:/v1/customers/{customer}/sources/{id}/verify
     * @secure
     * @response `200` `BankAccount` Successful response.
     * @response `default` `Error` Error response.
     */
    postCustomersCustomerSourcesIdVerify: (
      customer: string,
      id: string,
      data?: { amounts?: number[]; expand?: string[] },
      params: RequestParams = {},
    ) =>
      this.request<BankAccount, Error>({
        path: `/v1/customers/${customer}/sources/${id}/verify`,
        method: "POST",
        body: data,
        secure: true,
        type: ContentType.UrlEncoded,
        format: "json",
        ...params,
      }),

    /**
     * @description <p>You can see a list of the customer’s active subscriptions. Note that the 10 most recent active subscriptions are always available by default on the customer object. If you need more than those 10, you can use the limit and starting_after parameters to page through additional subscriptions.</p>
     *
     * @name GetCustomersCustomerSubscriptions
     * @request GET:/v1/customers/{customer}/subscriptions
     * @secure
     * @response `200` `{ data: (Subscription)[], has_more: boolean, object: "list", url: string }` Successful response.
     * @response `default` `Error` Error response.
     */
    getCustomersCustomerSubscriptions: (
      customer: string,
      query?: { ending_before?: string; expand?: string[]; limit?: number; starting_after?: string },
      data?: CardMandatePaymentMethodDetails,
      params: RequestParams = {},
    ) =>
      this.request<{ data: Subscription[]; has_more: boolean; object: "list"; url: string }, Error>({
        path: `/v1/customers/${customer}/subscriptions`,
        method: "GET",
        query: query,
        body: data,
        secure: true,
        type: ContentType.UrlEncoded,
        format: "json",
        ...params,
      }),

    /**
     * @description <p>Creates a new subscription on an existing customer.</p>
     *
     * @name PostCustomersCustomerSubscriptions
     * @request POST:/v1/customers/{customer}/subscriptions
     * @secure
     * @response `200` `Subscription` Successful response.
     * @response `default` `Error` Error response.
     */
    postCustomersCustomerSubscriptions: (
      customer: string,
      data?: {
        add_invoice_items?: {
          price?: string;
          price_data?: {
            currency: string;
            product: string;
            tax_behavior?: "exclusive" | "inclusive" | "unspecified";
            unit_amount?: number;
            unit_amount_decimal?: string;
          };
          quantity?: number;
          tax_rates?: string[] | "" | (string[] & "");
        }[];
        application_fee_percent?: number;
        automatic_tax?: { enabled: boolean };
        backdate_start_date?: number;
        billing_cycle_anchor?: number;
        billing_thresholds?:
          | { amount_gte?: number; reset_billing_cycle_anchor?: boolean }
          | ""
          | ({ amount_gte?: number; reset_billing_cycle_anchor?: boolean } & "");
        cancel_at?: number;
        cancel_at_period_end?: boolean;
        collection_method?: "charge_automatically" | "send_invoice";
        coupon?: string;
        days_until_due?: number;
        default_payment_method?: string;
        default_source?: string;
        default_tax_rates?: string[] | "" | (string[] & "");
        expand?: string[];
        items?: {
          billing_thresholds?: { usage_gte: number } | "" | ({ usage_gte: number } & "");
          metadata?: Record<string, string>;
          price?: string;
          price_data?: {
            currency: string;
            product: string;
            recurring: { interval: "day" | "month" | "week" | "year"; interval_count?: number };
            tax_behavior?: "exclusive" | "inclusive" | "unspecified";
            unit_amount?: number;
            unit_amount_decimal?: string;
          };
          quantity?: number;
          tax_rates?: string[] | "" | (string[] & "");
        }[];
        metadata?: Record<string, string> | "" | (Record<string, string> & "");
        off_session?: boolean;
        payment_behavior?: "allow_incomplete" | "default_incomplete" | "error_if_incomplete" | "pending_if_incomplete";
        payment_settings?: {
          payment_method_options?: {
            acss_debit?:
              | {
                  mandate_options?: { transaction_type?: "business" | "personal" };
                  verification_method?: "automatic" | "instant" | "microdeposits";
                }
              | ""
              | ({
                  mandate_options?: { transaction_type?: "business" | "personal" };
                  verification_method?: "automatic" | "instant" | "microdeposits";
                } & "");
            bancontact?:
              | { preferred_language?: "de" | "en" | "fr" | "nl" }
              | ""
              | ({ preferred_language?: "de" | "en" | "fr" | "nl" } & "");
            card?:
              | {
                  mandate_options?: { amount?: number; amount_type?: "fixed" | "maximum"; description?: string };
                  request_three_d_secure?: "any" | "automatic";
                }
              | ""
              | ({
                  mandate_options?: { amount?: number; amount_type?: "fixed" | "maximum"; description?: string };
                  request_three_d_secure?: "any" | "automatic";
                } & "");
          };
          payment_method_types?:
            | (
                | "ach_credit_transfer"
                | "ach_debit"
                | "acss_debit"
                | "au_becs_debit"
                | "bacs_debit"
                | "bancontact"
                | "boleto"
                | "card"
                | "fpx"
                | "giropay"
                | "ideal"
                | "sepa_debit"
                | "sofort"
                | "wechat_pay"
              )[]
            | ""
            | ((
                | "ach_credit_transfer"
                | "ach_debit"
                | "acss_debit"
                | "au_becs_debit"
                | "bacs_debit"
                | "bancontact"
                | "boleto"
                | "card"
                | "fpx"
                | "giropay"
                | "ideal"
                | "sepa_debit"
                | "sofort"
                | "wechat_pay"
              )[] &
                "");
        };
        pending_invoice_item_interval?:
          | { interval: "day" | "month" | "week" | "year"; interval_count?: number }
          | ""
          | ({ interval: "day" | "month" | "week" | "year"; interval_count?: number } & "");
        promotion_code?: string;
        proration_behavior?: "always_invoice" | "create_prorations" | "none";
        transfer_data?: { amount_percent?: number; destination: string };
        trial_end?: "now" | number;
        trial_from_plan?: boolean;
        trial_period_days?: number;
      },
      params: RequestParams = {},
    ) =>
      this.request<Subscription, Error>({
        path: `/v1/customers/${customer}/subscriptions`,
        method: "POST",
        body: data,
        secure: true,
        type: ContentType.UrlEncoded,
        format: "json",
        ...params,
      }),

    /**
     * @description <p>Cancels a customer’s subscription. If you set the <code>at_period_end</code> parameter to <code>true</code>, the subscription will remain active until the end of the period, at which point it will be canceled and not renewed. Otherwise, with the default <code>false</code> value, the subscription is terminated immediately. In either case, the customer will not be charged again for the subscription.</p> <p>Note, however, that any pending invoice items that you’ve created will still be charged for at the end of the period, unless manually <a href="#delete_invoiceitem">deleted</a>. If you’ve set the subscription to cancel at the end of the period, any pending prorations will also be left in place and collected at the end of the period. But if the subscription is set to cancel immediately, pending prorations will be removed.</p> <p>By default, upon subscription cancellation, Stripe will stop automatic collection of all finalized invoices for the customer. This is intended to prevent unexpected payment attempts after the customer has canceled a subscription. However, you can resume automatic collection of the invoices manually after subscription cancellation to have us proceed. Or, you could check for unpaid invoices before allowing the customer to cancel the subscription at all.</p>
     *
     * @name DeleteCustomersCustomerSubscriptionsSubscriptionExposedId
     * @request DELETE:/v1/customers/{customer}/subscriptions/{subscription_exposed_id}
     * @secure
     * @response `200` `Subscription` Successful response.
     * @response `default` `Error` Error response.
     */
    deleteCustomersCustomerSubscriptionsSubscriptionExposedId: (
      customer: string,
      subscriptionExposedId: string,
      data?: { expand?: string[]; invoice_now?: boolean; prorate?: boolean },
      params: RequestParams = {},
    ) =>
      this.request<Subscription, Error>({
        path: `/v1/customers/${customer}/subscriptions/${subscriptionExposedId}`,
        method: "DELETE",
        body: data,
        secure: true,
        type: ContentType.UrlEncoded,
        format: "json",
        ...params,
      }),

    /**
     * @description <p>Retrieves the subscription with the given ID.</p>
     *
     * @name GetCustomersCustomerSubscriptionsSubscriptionExposedId
     * @request GET:/v1/customers/{customer}/subscriptions/{subscription_exposed_id}
     * @secure
     * @response `200` `Subscription` Successful response.
     * @response `default` `Error` Error response.
     */
    getCustomersCustomerSubscriptionsSubscriptionExposedId: (
      customer: string,
      subscriptionExposedId: string,
      query?: { expand?: string[] },
      data?: CardMandatePaymentMethodDetails,
      params: RequestParams = {},
    ) =>
      this.request<Subscription, Error>({
        path: `/v1/customers/${customer}/subscriptions/${subscriptionExposedId}`,
        method: "GET",
        query: query,
        body: data,
        secure: true,
        type: ContentType.UrlEncoded,
        format: "json",
        ...params,
      }),

    /**
     * @description <p>Updates an existing subscription on a customer to match the specified parameters. When changing plans or quantities, we will optionally prorate the price we charge next month to make up for any price changes. To preview how the proration will be calculated, use the <a href="#upcoming_invoice">upcoming invoice</a> endpoint.</p>
     *
     * @name PostCustomersCustomerSubscriptionsSubscriptionExposedId
     * @request POST:/v1/customers/{customer}/subscriptions/{subscription_exposed_id}
     * @secure
     * @response `200` `Subscription` Successful response.
     * @response `default` `Error` Error response.
     */
    postCustomersCustomerSubscriptionsSubscriptionExposedId: (
      customer: string,
      subscriptionExposedId: string,
      data?: {
        add_invoice_items?: {
          price?: string;
          price_data?: {
            currency: string;
            product: string;
            tax_behavior?: "exclusive" | "inclusive" | "unspecified";
            unit_amount?: number;
            unit_amount_decimal?: string;
          };
          quantity?: number;
          tax_rates?: string[] | "" | (string[] & "");
        }[];
        application_fee_percent?: number;
        automatic_tax?: { enabled: boolean };
        billing_cycle_anchor?: "now" | "unchanged";
        billing_thresholds?:
          | { amount_gte?: number; reset_billing_cycle_anchor?: boolean }
          | ""
          | ({ amount_gte?: number; reset_billing_cycle_anchor?: boolean } & "");
        cancel_at?: number | "";
        cancel_at_period_end?: boolean;
        collection_method?: "charge_automatically" | "send_invoice";
        coupon?: string;
        days_until_due?: number;
        default_payment_method?: string;
        default_source?: string;
        default_tax_rates?: string[] | "" | (string[] & "");
        expand?: string[];
        items?: {
          billing_thresholds?: { usage_gte: number } | "" | ({ usage_gte: number } & "");
          clear_usage?: boolean;
          deleted?: boolean;
          id?: string;
          metadata?: Record<string, string> | "" | (Record<string, string> & "");
          price?: string;
          price_data?: {
            currency: string;
            product: string;
            recurring: { interval: "day" | "month" | "week" | "year"; interval_count?: number };
            tax_behavior?: "exclusive" | "inclusive" | "unspecified";
            unit_amount?: number;
            unit_amount_decimal?: string;
          };
          quantity?: number;
          tax_rates?: string[] | "" | (string[] & "");
        }[];
        metadata?: Record<string, string> | "" | (Record<string, string> & "");
        off_session?: boolean;
        pause_collection?:
          | { behavior: "keep_as_draft" | "mark_uncollectible" | "void"; resumes_at?: number }
          | ""
          | ({ behavior: "keep_as_draft" | "mark_uncollectible" | "void"; resumes_at?: number } & "");
        payment_behavior?: "allow_incomplete" | "default_incomplete" | "error_if_incomplete" | "pending_if_incomplete";
        payment_settings?: {
          payment_method_options?: {
            acss_debit?:
              | {
                  mandate_options?: { transaction_type?: "business" | "personal" };
                  verification_method?: "automatic" | "instant" | "microdeposits";
                }
              | ""
              | ({
                  mandate_options?: { transaction_type?: "business" | "personal" };
                  verification_method?: "automatic" | "instant" | "microdeposits";
                } & "");
            bancontact?:
              | { preferred_language?: "de" | "en" | "fr" | "nl" }
              | ""
              | ({ preferred_language?: "de" | "en" | "fr" | "nl" } & "");
            card?:
              | {
                  mandate_options?: { amount?: number; amount_type?: "fixed" | "maximum"; description?: string };
                  request_three_d_secure?: "any" | "automatic";
                }
              | ""
              | ({
                  mandate_options?: { amount?: number; amount_type?: "fixed" | "maximum"; description?: string };
                  request_three_d_secure?: "any" | "automatic";
                } & "");
          };
          payment_method_types?:
            | (
                | "ach_credit_transfer"
                | "ach_debit"
                | "acss_debit"
                | "au_becs_debit"
                | "bacs_debit"
                | "bancontact"
                | "boleto"
                | "card"
                | "fpx"
                | "giropay"
                | "ideal"
                | "sepa_debit"
                | "sofort"
                | "wechat_pay"
              )[]
            | ""
            | ((
                | "ach_credit_transfer"
                | "ach_debit"
                | "acss_debit"
                | "au_becs_debit"
                | "bacs_debit"
                | "bancontact"
                | "boleto"
                | "card"
                | "fpx"
                | "giropay"
                | "ideal"
                | "sepa_debit"
                | "sofort"
                | "wechat_pay"
              )[] &
                "");
        };
        pending_invoice_item_interval?:
          | { interval: "day" | "month" | "week" | "year"; interval_count?: number }
          | ""
          | ({ interval: "day" | "month" | "week" | "year"; interval_count?: number } & "");
        promotion_code?: string;
        proration_behavior?: "always_invoice" | "create_prorations" | "none";
        proration_date?: number;
        transfer_data?:
          | { amount_percent?: number; destination: string }
          | ""
          | ({ amount_percent?: number; destination: string } & "");
        trial_end?: "now" | number;
        trial_from_plan?: boolean;
      },
      params: RequestParams = {},
    ) =>
      this.request<Subscription, Error>({
        path: `/v1/customers/${customer}/subscriptions/${subscriptionExposedId}`,
        method: "POST",
        body: data,
        secure: true,
        type: ContentType.UrlEncoded,
        format: "json",
        ...params,
      }),

    /**
     * @description <p>Removes the currently applied discount on a customer.</p>
     *
     * @name DeleteCustomersCustomerSubscriptionsSubscriptionExposedIdDiscount
     * @request DELETE:/v1/customers/{customer}/subscriptions/{subscription_exposed_id}/discount
     * @secure
     * @response `200` `DeletedDiscount` Successful response.
     * @response `default` `Error` Error response.
     */
    deleteCustomersCustomerSubscriptionsSubscriptionExposedIdDiscount: (
      customer: string,
      subscriptionExposedId: string,
      data?: CardMandatePaymentMethodDetails,
      params: RequestParams = {},
    ) =>
      this.request<DeletedDiscount, Error>({
        path: `/v1/customers/${customer}/subscriptions/${subscriptionExposedId}/discount`,
        method: "DELETE",
        body: data,
        secure: true,
        type: ContentType.UrlEncoded,
        format: "json",
        ...params,
      }),

    /**
     * No description
     *
     * @name GetCustomersCustomerSubscriptionsSubscriptionExposedIdDiscount
     * @request GET:/v1/customers/{customer}/subscriptions/{subscription_exposed_id}/discount
     * @secure
     * @response `200` `Discount` Successful response.
     * @response `default` `Error` Error response.
     */
    getCustomersCustomerSubscriptionsSubscriptionExposedIdDiscount: (
      customer: string,
      subscriptionExposedId: string,
      query?: { expand?: string[] },
      data?: CardMandatePaymentMethodDetails,
      params: RequestParams = {},
    ) =>
      this.request<Discount, Error>({
        path: `/v1/customers/${customer}/subscriptions/${subscriptionExposedId}/discount`,
        method: "GET",
        query: query,
        body: data,
        secure: true,
        type: ContentType.UrlEncoded,
        format: "json",
        ...params,
      }),

    /**
     * @description <p>Returns a list of tax IDs for a customer.</p>
     *
     * @name GetCustomersCustomerTaxIds
     * @request GET:/v1/customers/{customer}/tax_ids
     * @secure
     * @response `200` `{ data: (TaxId)[], has_more: boolean, object: "list", url: string }` Successful response.
     * @response `default` `Error` Error response.
     */
    getCustomersCustomerTaxIds: (
      customer: string,
      query?: { ending_before?: string; expand?: string[]; limit?: number; starting_after?: string },
      data?: CardMandatePaymentMethodDetails,
      params: RequestParams = {},
    ) =>
      this.request<{ data: TaxId[]; has_more: boolean; object: "list"; url: string }, Error>({
        path: `/v1/customers/${customer}/tax_ids`,
        method: "GET",
        query: query,
        body: data,
        secure: true,
        type: ContentType.UrlEncoded,
        format: "json",
        ...params,
      }),

    /**
     * @description <p>Creates a new <code>TaxID</code> object for a customer.</p>
     *
     * @name PostCustomersCustomerTaxIds
     * @request POST:/v1/customers/{customer}/tax_ids
     * @secure
     * @response `200` `TaxId` Successful response.
     * @response `default` `Error` Error response.
     */
    postCustomersCustomerTaxIds: (
      customer: string,
      data: {
        expand?: string[];
        type:
          | "ae_trn"
          | "au_abn"
          | "au_arn"
          | "br_cnpj"
          | "br_cpf"
          | "ca_bn"
          | "ca_gst_hst"
          | "ca_pst_bc"
          | "ca_pst_mb"
          | "ca_pst_sk"
          | "ca_qst"
          | "ch_vat"
          | "cl_tin"
          | "es_cif"
          | "eu_vat"
          | "gb_vat"
          | "ge_vat"
          | "hk_br"
          | "id_npwp"
          | "il_vat"
          | "in_gst"
          | "jp_cn"
          | "jp_rn"
          | "kr_brn"
          | "li_uid"
          | "mx_rfc"
          | "my_frp"
          | "my_itn"
          | "my_sst"
          | "no_vat"
          | "nz_gst"
          | "ru_inn"
          | "ru_kpp"
          | "sa_vat"
          | "sg_gst"
          | "sg_uen"
          | "th_vat"
          | "tw_vat"
          | "ua_vat"
          | "us_ein"
          | "za_vat";
        value: string;
      },
      params: RequestParams = {},
    ) =>
      this.request<TaxId, Error>({
        path: `/v1/customers/${customer}/tax_ids`,
        method: "POST",
        body: data,
        secure: true,
        type: ContentType.UrlEncoded,
        format: "json",
        ...params,
      }),

    /**
     * @description <p>Deletes an existing <code>TaxID</code> object.</p>
     *
     * @name DeleteCustomersCustomerTaxIdsId
     * @request DELETE:/v1/customers/{customer}/tax_ids/{id}
     * @secure
     * @response `200` `DeletedTaxId` Successful response.
     * @response `default` `Error` Error response.
     */
    deleteCustomersCustomerTaxIdsId: (
      customer: string,
      id: string,
      data?: CardMandatePaymentMethodDetails,
      params: RequestParams = {},
    ) =>
      this.request<DeletedTaxId, Error>({
        path: `/v1/customers/${customer}/tax_ids/${id}`,
        method: "DELETE",
        body: data,
        secure: true,
        type: ContentType.UrlEncoded,
        format: "json",
        ...params,
      }),

    /**
     * @description <p>Retrieves the <code>TaxID</code> object with the given identifier.</p>
     *
     * @name GetCustomersCustomerTaxIdsId
     * @request GET:/v1/customers/{customer}/tax_ids/{id}
     * @secure
     * @response `200` `TaxId` Successful response.
     * @response `default` `Error` Error response.
     */
    getCustomersCustomerTaxIdsId: (
      customer: string,
      id: string,
      query?: { expand?: string[] },
      data?: CardMandatePaymentMethodDetails,
      params: RequestParams = {},
    ) =>
      this.request<TaxId, Error>({
        path: `/v1/customers/${customer}/tax_ids/${id}`,
        method: "GET",
        query: query,
        body: data,
        secure: true,
        type: ContentType.UrlEncoded,
        format: "json",
        ...params,
      }),

    /**
     * @description <p>Returns a list of your disputes.</p>
     *
     * @name GetDisputes
     * @request GET:/v1/disputes
     * @secure
     * @response `200` `{ data: (Dispute)[], has_more: boolean, object: "list", url: string }` Successful response.
     * @response `default` `Error` Error response.
     */
    getDisputes: (
      query?: {
        charge?: string;
        created?: { gt?: number; gte?: number; lt?: number; lte?: number } | number;
        ending_before?: string;
        expand?: string[];
        limit?: number;
        payment_intent?: string;
        starting_after?: string;
      },
      data?: CardMandatePaymentMethodDetails,
      params: RequestParams = {},
    ) =>
      this.request<{ data: Dispute[]; has_more: boolean; object: "list"; url: string }, Error>({
        path: `/v1/disputes`,
        method: "GET",
        query: query,
        body: data,
        secure: true,
        type: ContentType.UrlEncoded,
        format: "json",
        ...params,
      }),

    /**
     * @description <p>Retrieves the dispute with the given ID.</p>
     *
     * @name GetDisputesDispute
     * @request GET:/v1/disputes/{dispute}
     * @secure
     * @response `200` `Dispute` Successful response.
     * @response `default` `Error` Error response.
     */
    getDisputesDispute: (
      dispute: string,
      query?: { expand?: string[] },
      data?: CardMandatePaymentMethodDetails,
      params: RequestParams = {},
    ) =>
      this.request<Dispute, Error>({
        path: `/v1/disputes/${dispute}`,
        method: "GET",
        query: query,
        body: data,
        secure: true,
        type: ContentType.UrlEncoded,
        format: "json",
        ...params,
      }),

    /**
     * @description <p>When you get a dispute, contacting your customer is always the best first step. If that doesn’t work, you can submit evidence to help us resolve the dispute in your favor. You can do this in your <a href="https://dashboard.stripe.com/disputes">dashboard</a>, but if you prefer, you can use the API to submit evidence programmatically.</p> <p>Depending on your dispute type, different evidence fields will give you a better chance of winning your dispute. To figure out which evidence fields to provide, see our <a href="/docs/disputes/categories">guide to dispute types</a>.</p>
     *
     * @name PostDisputesDispute
     * @request POST:/v1/disputes/{dispute}
     * @secure
     * @response `200` `Dispute` Successful response.
     * @response `default` `Error` Error response.
     */
    postDisputesDispute: (
      dispute: string,
      data?: {
        evidence?: {
          access_activity_log?: string;
          billing_address?: string;
          cancellation_policy?: string;
          cancellation_policy_disclosure?: string;
          cancellation_rebuttal?: string;
          customer_communication?: string;
          customer_email_address?: string;
          customer_name?: string;
          customer_purchase_ip?: string;
          customer_signature?: string;
          duplicate_charge_documentation?: string;
          duplicate_charge_explanation?: string;
          duplicate_charge_id?: string;
          product_description?: string;
          receipt?: string;
          refund_policy?: string;
          refund_policy_disclosure?: string;
          refund_refusal_explanation?: string;
          service_date?: string;
          service_documentation?: string;
          shipping_address?: string;
          shipping_carrier?: string;
          shipping_date?: string;
          shipping_documentation?: string;
          shipping_tracking_number?: string;
          uncategorized_file?: string;
          uncategorized_text?: string;
        };
        expand?: string[];
        metadata?: Record<string, string> | "" | (Record<string, string> & "");
        submit?: boolean;
      },
      params: RequestParams = {},
    ) =>
      this.request<Dispute, Error>({
        path: `/v1/disputes/${dispute}`,
        method: "POST",
        body: data,
        secure: true,
        type: ContentType.UrlEncoded,
        format: "json",
        ...params,
      }),

    /**
     * @description <p>Closing the dispute for a charge indicates that you do not have any evidence to submit and are essentially dismissing the dispute, acknowledging it as lost.</p> <p>The status of the dispute will change from <code>needs_response</code> to <code>lost</code>. <em>Closing a dispute is irreversible</em>.</p>
     *
     * @name PostDisputesDisputeClose
     * @request POST:/v1/disputes/{dispute}/close
     * @secure
     * @response `200` `Dispute` Successful response.
     * @response `default` `Error` Error response.
     */
    postDisputesDisputeClose: (dispute: string, data?: { expand?: string[] }, params: RequestParams = {}) =>
      this.request<Dispute, Error>({
        path: `/v1/disputes/${dispute}/close`,
        method: "POST",
        body: data,
        secure: true,
        type: ContentType.UrlEncoded,
        format: "json",
        ...params,
      }),

    /**
     * @description <p>Creates a short-lived API key for a given resource.</p>
     *
     * @name PostEphemeralKeys
     * @request POST:/v1/ephemeral_keys
     * @secure
     * @response `200` `EphemeralKey` Successful response.
     * @response `default` `Error` Error response.
     */
    postEphemeralKeys: (
      data?: { customer?: string; expand?: string[]; issuing_card?: string },
      params: RequestParams = {},
    ) =>
      this.request<EphemeralKey, Error>({
        path: `/v1/ephemeral_keys`,
        method: "POST",
        body: data,
        secure: true,
        type: ContentType.UrlEncoded,
        format: "json",
        ...params,
      }),

    /**
     * @description <p>Invalidates a short-lived API key for a given resource.</p>
     *
     * @name DeleteEphemeralKeysKey
     * @request DELETE:/v1/ephemeral_keys/{key}
     * @secure
     * @response `200` `EphemeralKey` Successful response.
     * @response `default` `Error` Error response.
     */
    deleteEphemeralKeysKey: (key: string, data?: { expand?: string[] }, params: RequestParams = {}) =>
      this.request<EphemeralKey, Error>({
        path: `/v1/ephemeral_keys/${key}`,
        method: "DELETE",
        body: data,
        secure: true,
        type: ContentType.UrlEncoded,
        format: "json",
        ...params,
      }),

    /**
     * @description <p>List events, going back up to 30 days. Each event data is rendered according to Stripe API version at its creation time, specified in <a href="/docs/api/events/object">event object</a> <code>api_version</code> attribute (not according to your current Stripe API version or <code>Stripe-Version</code> header).</p>
     *
     * @name GetEvents
     * @request GET:/v1/events
     * @secure
     * @response `200` `{ data: (Event)[], has_more: boolean, object: "list", url: string }` Successful response.
     * @response `default` `Error` Error response.
     */
    getEvents: (
      query?: {
        created?: { gt?: number; gte?: number; lt?: number; lte?: number } | number;
        delivery_success?: boolean;
        ending_before?: string;
        expand?: string[];
        limit?: number;
        starting_after?: string;
        type?: string;
        types?: string[];
      },
      data?: CardMandatePaymentMethodDetails,
      params: RequestParams = {},
    ) =>
      this.request<{ data: Event[]; has_more: boolean; object: "list"; url: string }, Error>({
        path: `/v1/events`,
        method: "GET",
        query: query,
        body: data,
        secure: true,
        type: ContentType.UrlEncoded,
        format: "json",
        ...params,
      }),

    /**
     * @description <p>Retrieves the details of an event. Supply the unique identifier of the event, which you might have received in a webhook.</p>
     *
     * @name GetEventsId
     * @request GET:/v1/events/{id}
     * @secure
     * @response `200` `Event` Successful response.
     * @response `default` `Error` Error response.
     */
    getEventsId: (
      id: string,
      query?: { expand?: string[] },
      data?: CardMandatePaymentMethodDetails,
      params: RequestParams = {},
    ) =>
      this.request<Event, Error>({
        path: `/v1/events/${id}`,
        method: "GET",
        query: query,
        body: data,
        secure: true,
        type: ContentType.UrlEncoded,
        format: "json",
        ...params,
      }),

    /**
     * @description <p>Returns a list of objects that contain the rates at which foreign currencies are converted to one another. Only shows the currencies for which Stripe supports.</p>
     *
     * @name GetExchangeRates
     * @request GET:/v1/exchange_rates
     * @secure
     * @response `200` `{ data: (ExchangeRate)[], has_more: boolean, object: "list", url: string }` Successful response.
     * @response `default` `Error` Error response.
     */
    getExchangeRates: (
      query?: { ending_before?: string; expand?: string[]; limit?: number; starting_after?: string },
      data?: CardMandatePaymentMethodDetails,
      params: RequestParams = {},
    ) =>
      this.request<{ data: ExchangeRate[]; has_more: boolean; object: "list"; url: string }, Error>({
        path: `/v1/exchange_rates`,
        method: "GET",
        query: query,
        body: data,
        secure: true,
        type: ContentType.UrlEncoded,
        format: "json",
        ...params,
      }),

    /**
     * @description <p>Retrieves the exchange rates from the given currency to every supported currency.</p>
     *
     * @name GetExchangeRatesRateId
     * @request GET:/v1/exchange_rates/{rate_id}
     * @secure
     * @response `200` `ExchangeRate` Successful response.
     * @response `default` `Error` Error response.
     */
    getExchangeRatesRateId: (
      rateId: string,
      query?: { expand?: string[] },
      data?: CardMandatePaymentMethodDetails,
      params: RequestParams = {},
    ) =>
      this.request<ExchangeRate, Error>({
        path: `/v1/exchange_rates/${rateId}`,
        method: "GET",
        query: query,
        body: data,
        secure: true,
        type: ContentType.UrlEncoded,
        format: "json",
        ...params,
      }),

    /**
     * @description <p>Returns a list of file links.</p>
     *
     * @name GetFileLinks
     * @request GET:/v1/file_links
     * @secure
     * @response `200` `{ data: (FileLink)[], has_more: boolean, object: "list", url: string }` Successful response.
     * @response `default` `Error` Error response.
     */
    getFileLinks: (
      query?: {
        created?: { gt?: number; gte?: number; lt?: number; lte?: number } | number;
        ending_before?: string;
        expand?: string[];
        expired?: boolean;
        file?: string;
        limit?: number;
        starting_after?: string;
      },
      data?: CardMandatePaymentMethodDetails,
      params: RequestParams = {},
    ) =>
      this.request<{ data: FileLink[]; has_more: boolean; object: "list"; url: string }, Error>({
        path: `/v1/file_links`,
        method: "GET",
        query: query,
        body: data,
        secure: true,
        type: ContentType.UrlEncoded,
        format: "json",
        ...params,
      }),

    /**
     * @description <p>Creates a new file link object.</p>
     *
     * @name PostFileLinks
     * @request POST:/v1/file_links
     * @secure
     * @response `200` `FileLink` Successful response.
     * @response `default` `Error` Error response.
     */
    postFileLinks: (
      data: {
        expand?: string[];
        expires_at?: number;
        file: string;
        metadata?: Record<string, string> | "" | (Record<string, string> & "");
      },
      params: RequestParams = {},
    ) =>
      this.request<FileLink, Error>({
        path: `/v1/file_links`,
        method: "POST",
        body: data,
        secure: true,
        type: ContentType.UrlEncoded,
        format: "json",
        ...params,
      }),

    /**
     * @description <p>Retrieves the file link with the given ID.</p>
     *
     * @name GetFileLinksLink
     * @request GET:/v1/file_links/{link}
     * @secure
     * @response `200` `FileLink` Successful response.
     * @response `default` `Error` Error response.
     */
    getFileLinksLink: (
      link: string,
      query?: { expand?: string[] },
      data?: CardMandatePaymentMethodDetails,
      params: RequestParams = {},
    ) =>
      this.request<FileLink, Error>({
        path: `/v1/file_links/${link}`,
        method: "GET",
        query: query,
        body: data,
        secure: true,
        type: ContentType.UrlEncoded,
        format: "json",
        ...params,
      }),

    /**
     * @description <p>Updates an existing file link object. Expired links can no longer be updated.</p>
     *
     * @name PostFileLinksLink
     * @request POST:/v1/file_links/{link}
     * @secure
     * @response `200` `FileLink` Successful response.
     * @response `default` `Error` Error response.
     */
    postFileLinksLink: (
      link: string,
      data?: {
        expand?: string[];
        expires_at?: "now" | number | "" | ("now" & "");
        metadata?: Record<string, string> | "" | (Record<string, string> & "");
      },
      params: RequestParams = {},
    ) =>
      this.request<FileLink, Error>({
        path: `/v1/file_links/${link}`,
        method: "POST",
        body: data,
        secure: true,
        type: ContentType.UrlEncoded,
        format: "json",
        ...params,
      }),

    /**
     * @description <p>Returns a list of the files that your account has access to. The files are returned sorted by creation date, with the most recently created files appearing first.</p>
     *
     * @name GetFiles
     * @request GET:/v1/files
     * @secure
     * @response `200` `{ data: (File)[], has_more: boolean, object: "list", url: string }` Successful response.
     * @response `default` `Error` Error response.
     */
    getFiles: (
      query?: {
        created?: { gt?: number; gte?: number; lt?: number; lte?: number } | number;
        ending_before?: string;
        expand?: string[];
        limit?: number;
        purpose?:
          | "account_requirement"
          | "additional_verification"
          | "business_icon"
          | "business_logo"
          | "customer_signature"
          | "dispute_evidence"
          | "document_provider_identity_document"
          | "finance_report_run"
          | "identity_document"
          | "identity_document_downloadable"
          | "pci_document"
          | "selfie"
          | "sigma_scheduled_query"
          | "tax_document_user_upload";
        starting_after?: string;
      },
      data?: CardMandatePaymentMethodDetails,
      params: RequestParams = {},
    ) =>
      this.request<{ data: File[]; has_more: boolean; object: "list"; url: string }, Error>({
        path: `/v1/files`,
        method: "GET",
        query: query,
        body: data,
        secure: true,
        type: ContentType.UrlEncoded,
        format: "json",
        ...params,
      }),

    /**
     * @description <p>To upload a file to Stripe, you’ll need to send a request of type <code>multipart/form-data</code>. The request should contain the file you would like to upload, as well as the parameters for creating a file.</p> <p>All of Stripe’s officially supported Client libraries should have support for sending <code>multipart/form-data</code>.</p>
     *
     * @name PostFiles
     * @request POST:/v1/files
     * @secure
     * @response `200` `File` Successful response.
     * @response `default` `Error` Error response.
     */
    postFiles: (
      data: {
        expand?: string[];
        file: string;
        file_link_data?: {
          create: boolean;
          expires_at?: number;
          metadata?: Record<string, string> | "" | (Record<string, string> & "");
        };
        purpose:
          | "account_requirement"
          | "additional_verification"
          | "business_icon"
          | "business_logo"
          | "customer_signature"
          | "dispute_evidence"
          | "identity_document"
          | "pci_document"
          | "tax_document_user_upload";
      },
      params: RequestParams = {},
    ) =>
      this.request<File, Error>({
        path: `/v1/files`,
        method: "POST",
        body: data,
        secure: true,
        type: ContentType.FormData,
        format: "json",
        ...params,
      }),

    /**
     * @description <p>Retrieves the details of an existing file object. Supply the unique file ID from a file, and Stripe will return the corresponding file object. To access file contents, see the <a href="/docs/file-upload#download-file-contents">File Upload Guide</a>.</p>
     *
     * @name GetFilesFile
     * @request GET:/v1/files/{file}
     * @secure
     * @response `200` `File` Successful response.
     * @response `default` `Error` Error response.
     */
    getFilesFile: (
      file: string,
      query?: { expand?: string[] },
      data?: CardMandatePaymentMethodDetails,
      params: RequestParams = {},
    ) =>
      this.request<File, Error>({
        path: `/v1/files/${file}`,
        method: "GET",
        query: query,
        body: data,
        secure: true,
        type: ContentType.UrlEncoded,
        format: "json",
        ...params,
      }),

    /**
     * @description <p>List all verification reports.</p>
     *
     * @name GetIdentityVerificationReports
     * @request GET:/v1/identity/verification_reports
     * @secure
     * @response `200` `{ data: (IdentityVerificationReport)[], has_more: boolean, object: "list", url: string }` Successful response.
     * @response `default` `Error` Error response.
     */
    getIdentityVerificationReports: (
      query?: {
        created?: { gt?: number; gte?: number; lt?: number; lte?: number } | number;
        ending_before?: string;
        expand?: string[];
        limit?: number;
        starting_after?: string;
        type?: "document" | "id_number";
        verification_session?: string;
      },
      data?: CardMandatePaymentMethodDetails,
      params: RequestParams = {},
    ) =>
      this.request<{ data: IdentityVerificationReport[]; has_more: boolean; object: "list"; url: string }, Error>({
        path: `/v1/identity/verification_reports`,
        method: "GET",
        query: query,
        body: data,
        secure: true,
        type: ContentType.UrlEncoded,
        format: "json",
        ...params,
      }),

    /**
     * @description <p>Retrieves an existing VerificationReport</p>
     *
     * @name GetIdentityVerificationReportsReport
     * @request GET:/v1/identity/verification_reports/{report}
     * @secure
     * @response `200` `IdentityVerificationReport` Successful response.
     * @response `default` `Error` Error response.
     */
    getIdentityVerificationReportsReport: (
      report: string,
      query?: { expand?: string[] },
      data?: CardMandatePaymentMethodDetails,
      params: RequestParams = {},
    ) =>
      this.request<IdentityVerificationReport, Error>({
        path: `/v1/identity/verification_reports/${report}`,
        method: "GET",
        query: query,
        body: data,
        secure: true,
        type: ContentType.UrlEncoded,
        format: "json",
        ...params,
      }),

    /**
     * @description <p>Returns a list of VerificationSessions</p>
     *
     * @name GetIdentityVerificationSessions
     * @request GET:/v1/identity/verification_sessions
     * @secure
     * @response `200` `{ data: (IdentityVerificationSession)[], has_more: boolean, object: "list", url: string }` Successful response.
     * @response `default` `Error` Error response.
     */
    getIdentityVerificationSessions: (
      query?: {
        created?: { gt?: number; gte?: number; lt?: number; lte?: number } | number;
        ending_before?: string;
        expand?: string[];
        limit?: number;
        starting_after?: string;
        status?: "canceled" | "processing" | "requires_input" | "verified";
      },
      data?: CardMandatePaymentMethodDetails,
      params: RequestParams = {},
    ) =>
      this.request<{ data: IdentityVerificationSession[]; has_more: boolean; object: "list"; url: string }, Error>({
        path: `/v1/identity/verification_sessions`,
        method: "GET",
        query: query,
        body: data,
        secure: true,
        type: ContentType.UrlEncoded,
        format: "json",
        ...params,
      }),

    /**
     * @description <p>Creates a VerificationSession object.</p> <p>After the VerificationSession is created, display a verification modal using the session <code>client_secret</code> or send your users to the session’s <code>url</code>.</p> <p>If your API key is in test mode, verification checks won’t actually process, though everything else will occur as if in live mode.</p> <p>Related guide: <a href="/docs/identity/verify-identity-documents">Verify your users’ identity documents</a>.</p>
     *
     * @name PostIdentityVerificationSessions
     * @request POST:/v1/identity/verification_sessions
     * @secure
     * @response `200` `IdentityVerificationSession` Successful response.
     * @response `default` `Error` Error response.
     */
    postIdentityVerificationSessions: (
      data: {
        expand?: string[];
        metadata?: Record<string, string>;
        options?: {
          document?:
            | {
                allowed_types?: ("driving_license" | "id_card" | "passport")[];
                require_id_number?: boolean;
                require_live_capture?: boolean;
                require_matching_selfie?: boolean;
              }
            | ""
            | ({
                allowed_types?: ("driving_license" | "id_card" | "passport")[];
                require_id_number?: boolean;
                require_live_capture?: boolean;
                require_matching_selfie?: boolean;
              } & "");
        };
        return_url?: string;
        type: "document" | "id_number";
      },
      params: RequestParams = {},
    ) =>
      this.request<IdentityVerificationSession, Error>({
        path: `/v1/identity/verification_sessions`,
        method: "POST",
        body: data,
        secure: true,
        type: ContentType.UrlEncoded,
        format: "json",
        ...params,
      }),

    /**
     * @description <p>Retrieves the details of a VerificationSession that was previously created.</p> <p>When the session status is <code>requires_input</code>, you can use this method to retrieve a valid <code>client_secret</code> or <code>url</code> to allow re-submission.</p>
     *
     * @name GetIdentityVerificationSessionsSession
     * @request GET:/v1/identity/verification_sessions/{session}
     * @secure
     * @response `200` `IdentityVerificationSession` Successful response.
     * @response `default` `Error` Error response.
     */
    getIdentityVerificationSessionsSession: (
      session: string,
      query?: { expand?: string[] },
      data?: CardMandatePaymentMethodDetails,
      params: RequestParams = {},
    ) =>
      this.request<IdentityVerificationSession, Error>({
        path: `/v1/identity/verification_sessions/${session}`,
        method: "GET",
        query: query,
        body: data,
        secure: true,
        type: ContentType.UrlEncoded,
        format: "json",
        ...params,
      }),

    /**
     * @description <p>Updates a VerificationSession object.</p> <p>When the session status is <code>requires_input</code>, you can use this method to update the verification check and options.</p>
     *
     * @name PostIdentityVerificationSessionsSession
     * @request POST:/v1/identity/verification_sessions/{session}
     * @secure
     * @response `200` `IdentityVerificationSession` Successful response.
     * @response `default` `Error` Error response.
     */
    postIdentityVerificationSessionsSession: (
      session: string,
      data?: {
        expand?: string[];
        metadata?: Record<string, string>;
        options?: {
          document?:
            | {
                allowed_types?: ("driving_license" | "id_card" | "passport")[];
                require_id_number?: boolean;
                require_live_capture?: boolean;
                require_matching_selfie?: boolean;
              }
            | ""
            | ({
                allowed_types?: ("driving_license" | "id_card" | "passport")[];
                require_id_number?: boolean;
                require_live_capture?: boolean;
                require_matching_selfie?: boolean;
              } & "");
        };
        type?: "document" | "id_number";
      },
      params: RequestParams = {},
    ) =>
      this.request<IdentityVerificationSession, Error>({
        path: `/v1/identity/verification_sessions/${session}`,
        method: "POST",
        body: data,
        secure: true,
        type: ContentType.UrlEncoded,
        format: "json",
        ...params,
      }),

    /**
     * @description <p>A VerificationSession object can be canceled when it is in <code>requires_input</code> <a href="/docs/identity/how-sessions-work">status</a>.</p> <p>Once canceled, future submission attempts are disabled. This cannot be undone. <a href="/docs/identity/verification-sessions#cancel">Learn more</a>.</p>
     *
     * @name PostIdentityVerificationSessionsSessionCancel
     * @request POST:/v1/identity/verification_sessions/{session}/cancel
     * @secure
     * @response `200` `IdentityVerificationSession` Successful response.
     * @response `default` `Error` Error response.
     */
    postIdentityVerificationSessionsSessionCancel: (
      session: string,
      data?: { expand?: string[] },
      params: RequestParams = {},
    ) =>
      this.request<IdentityVerificationSession, Error>({
        path: `/v1/identity/verification_sessions/${session}/cancel`,
        method: "POST",
        body: data,
        secure: true,
        type: ContentType.UrlEncoded,
        format: "json",
        ...params,
      }),

    /**
     * @description <p>Redact a VerificationSession to remove all collected information from Stripe. This will redact the VerificationSession and all objects related to it, including VerificationReports, Events, request logs, etc.</p> <p>A VerificationSession object can be redacted when it is in <code>requires_input</code> or <code>verified</code> <a href="/docs/identity/how-sessions-work">status</a>. Redacting a VerificationSession in <code>requires_action</code> state will automatically cancel it.</p> <p>The redaction process may take up to four days. When the redaction process is in progress, the VerificationSession’s <code>redaction.status</code> field will be set to <code>processing</code>; when the process is finished, it will change to <code>redacted</code> and an <code>identity.verification_session.redacted</code> event will be emitted.</p> <p>Redaction is irreversible. Redacted objects are still accessible in the Stripe API, but all the fields that contain personal data will be replaced by the string <code>[redacted]</code> or a similar placeholder. The <code>metadata</code> field will also be erased. Redacted objects cannot be updated or used for any purpose.</p> <p><a href="/docs/identity/verification-sessions#redact">Learn more</a>.</p>
     *
     * @name PostIdentityVerificationSessionsSessionRedact
     * @request POST:/v1/identity/verification_sessions/{session}/redact
     * @secure
     * @response `200` `IdentityVerificationSession` Successful response.
     * @response `default` `Error` Error response.
     */
    postIdentityVerificationSessionsSessionRedact: (
      session: string,
      data?: { expand?: string[] },
      params: RequestParams = {},
    ) =>
      this.request<IdentityVerificationSession, Error>({
        path: `/v1/identity/verification_sessions/${session}/redact`,
        method: "POST",
        body: data,
        secure: true,
        type: ContentType.UrlEncoded,
        format: "json",
        ...params,
      }),

    /**
     * @description <p>Returns a list of your invoice items. Invoice items are returned sorted by creation date, with the most recently created invoice items appearing first.</p>
     *
     * @name GetInvoiceitems
     * @request GET:/v1/invoiceitems
     * @secure
     * @response `200` `{ data: (Invoiceitem)[], has_more: boolean, object: "list", url: string }` Successful response.
     * @response `default` `Error` Error response.
     */
    getInvoiceitems: (
      query?: {
        created?: { gt?: number; gte?: number; lt?: number; lte?: number } | number;
        customer?: string;
        ending_before?: string;
        expand?: string[];
        invoice?: string;
        limit?: number;
        pending?: boolean;
        starting_after?: string;
      },
      data?: CardMandatePaymentMethodDetails,
      params: RequestParams = {},
    ) =>
      this.request<{ data: Invoiceitem[]; has_more: boolean; object: "list"; url: string }, Error>({
        path: `/v1/invoiceitems`,
        method: "GET",
        query: query,
        body: data,
        secure: true,
        type: ContentType.UrlEncoded,
        format: "json",
        ...params,
      }),

    /**
     * @description <p>Creates an item to be added to a draft invoice (up to 250 items per invoice). If no invoice is specified, the item will be on the next invoice created for the customer specified.</p>
     *
     * @name PostInvoiceitems
     * @request POST:/v1/invoiceitems
     * @secure
     * @response `200` `Invoiceitem` Successful response.
     * @response `default` `Error` Error response.
     */
    postInvoiceitems: (
      data: {
        amount?: number;
        currency?: string;
        customer: string;
        description?: string;
        discountable?: boolean;
        discounts?: { coupon?: string; discount?: string }[] | "" | ({ coupon?: string; discount?: string }[] & "");
        expand?: string[];
        invoice?: string;
        metadata?: Record<string, string> | "" | (Record<string, string> & "");
        period?: { end: number; start: number };
        price?: string;
        price_data?: {
          currency: string;
          product: string;
          tax_behavior?: "exclusive" | "inclusive" | "unspecified";
          unit_amount?: number;
          unit_amount_decimal?: string;
        };
        quantity?: number;
        subscription?: string;
        tax_rates?: string[];
        unit_amount?: number;
        unit_amount_decimal?: string;
      },
      params: RequestParams = {},
    ) =>
      this.request<Invoiceitem, Error>({
        path: `/v1/invoiceitems`,
        method: "POST",
        body: data,
        secure: true,
        type: ContentType.UrlEncoded,
        format: "json",
        ...params,
      }),

    /**
     * @description <p>Deletes an invoice item, removing it from an invoice. Deleting invoice items is only possible when they’re not attached to invoices, or if it’s attached to a draft invoice.</p>
     *
     * @name DeleteInvoiceitemsInvoiceitem
     * @request DELETE:/v1/invoiceitems/{invoiceitem}
     * @secure
     * @response `200` `DeletedInvoiceitem` Successful response.
     * @response `default` `Error` Error response.
     */
    deleteInvoiceitemsInvoiceitem: (
      invoiceitem: string,
      data?: CardMandatePaymentMethodDetails,
      params: RequestParams = {},
    ) =>
      this.request<DeletedInvoiceitem, Error>({
        path: `/v1/invoiceitems/${invoiceitem}`,
        method: "DELETE",
        body: data,
        secure: true,
        type: ContentType.UrlEncoded,
        format: "json",
        ...params,
      }),

    /**
     * @description <p>Retrieves the invoice item with the given ID.</p>
     *
     * @name GetInvoiceitemsInvoiceitem
     * @request GET:/v1/invoiceitems/{invoiceitem}
     * @secure
     * @response `200` `Invoiceitem` Successful response.
     * @response `default` `Error` Error response.
     */
    getInvoiceitemsInvoiceitem: (
      invoiceitem: string,
      query?: { expand?: string[] },
      data?: CardMandatePaymentMethodDetails,
      params: RequestParams = {},
    ) =>
      this.request<Invoiceitem, Error>({
        path: `/v1/invoiceitems/${invoiceitem}`,
        method: "GET",
        query: query,
        body: data,
        secure: true,
        type: ContentType.UrlEncoded,
        format: "json",
        ...params,
      }),

    /**
     * @description <p>Updates the amount or description of an invoice item on an upcoming invoice. Updating an invoice item is only possible before the invoice it’s attached to is closed.</p>
     *
     * @name PostInvoiceitemsInvoiceitem
     * @request POST:/v1/invoiceitems/{invoiceitem}
     * @secure
     * @response `200` `Invoiceitem` Successful response.
     * @response `default` `Error` Error response.
     */
    postInvoiceitemsInvoiceitem: (
      invoiceitem: string,
      data?: {
        amount?: number;
        description?: string;
        discountable?: boolean;
        discounts?: { coupon?: string; discount?: string }[] | "" | ({ coupon?: string; discount?: string }[] & "");
        expand?: string[];
        metadata?: Record<string, string> | "" | (Record<string, string> & "");
        period?: { end: number; start: number };
        price?: string;
        price_data?: {
          currency: string;
          product: string;
          tax_behavior?: "exclusive" | "inclusive" | "unspecified";
          unit_amount?: number;
          unit_amount_decimal?: string;
        };
        quantity?: number;
        tax_rates?: string[] | "" | (string[] & "");
        unit_amount?: number;
        unit_amount_decimal?: string;
      },
      params: RequestParams = {},
    ) =>
      this.request<Invoiceitem, Error>({
        path: `/v1/invoiceitems/${invoiceitem}`,
        method: "POST",
        body: data,
        secure: true,
        type: ContentType.UrlEncoded,
        format: "json",
        ...params,
      }),

    /**
     * @description <p>You can list all invoices, or list the invoices for a specific customer. The invoices are returned sorted by creation date, with the most recently created invoices appearing first.</p>
     *
     * @name GetInvoices
     * @request GET:/v1/invoices
     * @secure
     * @response `200` `{ data: (Invoice)[], has_more: boolean, object: "list", url: string }` Successful response.
     * @response `default` `Error` Error response.
     */
    getInvoices: (
      query?: {
        collection_method?: "charge_automatically" | "send_invoice";
        created?: { gt?: number; gte?: number; lt?: number; lte?: number } | number;
        customer?: string;
        due_date?: { gt?: number; gte?: number; lt?: number; lte?: number } | number;
        ending_before?: string;
        expand?: string[];
        limit?: number;
        starting_after?: string;
        status?: "draft" | "open" | "paid" | "uncollectible" | "void";
        subscription?: string;
      },
      data?: CardMandatePaymentMethodDetails,
      params: RequestParams = {},
    ) =>
      this.request<{ data: Invoice[]; has_more: boolean; object: "list"; url: string }, Error>({
        path: `/v1/invoices`,
        method: "GET",
        query: query,
        body: data,
        secure: true,
        type: ContentType.UrlEncoded,
        format: "json",
        ...params,
      }),

    /**
     * @description <p>This endpoint creates a draft invoice for a given customer. The draft invoice created pulls in all pending invoice items on that customer, including prorations. The invoice remains a draft until you <a href="#finalize_invoice">finalize</a> the invoice, which allows you to <a href="#pay_invoice">pay</a> or <a href="#send_invoice">send</a> the invoice to your customers.</p>
     *
     * @name PostInvoices
     * @request POST:/v1/invoices
     * @secure
     * @response `200` `Invoice` Successful response.
     * @response `default` `Error` Error response.
     */
    postInvoices: (
      data: {
        account_tax_ids?: string[] | "" | (string[] & "");
        application_fee_amount?: number;
        auto_advance?: boolean;
        automatic_tax?: { enabled: boolean };
        collection_method?: "charge_automatically" | "send_invoice";
        custom_fields?: { name: string; value: string }[] | "" | ({ name: string; value: string }[] & "");
        customer: string;
        days_until_due?: number;
        default_payment_method?: string;
        default_source?: string;
        default_tax_rates?: string[];
        description?: string;
        discounts?: { coupon?: string; discount?: string }[] | "" | ({ coupon?: string; discount?: string }[] & "");
        due_date?: number;
        expand?: string[];
        footer?: string;
        metadata?: Record<string, string> | "" | (Record<string, string> & "");
        on_behalf_of?: string;
        payment_settings?: {
          payment_method_options?: {
            acss_debit?:
              | {
                  mandate_options?: { transaction_type?: "business" | "personal" };
                  verification_method?: "automatic" | "instant" | "microdeposits";
                }
              | ""
              | ({
                  mandate_options?: { transaction_type?: "business" | "personal" };
                  verification_method?: "automatic" | "instant" | "microdeposits";
                } & "");
            bancontact?:
              | { preferred_language?: "de" | "en" | "fr" | "nl" }
              | ""
              | ({ preferred_language?: "de" | "en" | "fr" | "nl" } & "");
            card?:
              | { request_three_d_secure?: "any" | "automatic" }
              | ""
              | ({ request_three_d_secure?: "any" | "automatic" } & "");
          };
          payment_method_types?:
            | (
                | "ach_credit_transfer"
                | "ach_debit"
                | "acss_debit"
                | "au_becs_debit"
                | "bacs_debit"
                | "bancontact"
                | "boleto"
                | "card"
                | "fpx"
                | "giropay"
                | "ideal"
                | "sepa_debit"
                | "sofort"
                | "wechat_pay"
              )[]
            | ""
            | ((
                | "ach_credit_transfer"
                | "ach_debit"
                | "acss_debit"
                | "au_becs_debit"
                | "bacs_debit"
                | "bancontact"
                | "boleto"
                | "card"
                | "fpx"
                | "giropay"
                | "ideal"
                | "sepa_debit"
                | "sofort"
                | "wechat_pay"
              )[] &
                "");
        };
        statement_descriptor?: string;
        subscription?: string;
        transfer_data?: { amount?: number; destination: string };
      },
      params: RequestParams = {},
    ) =>
      this.request<Invoice, Error>({
        path: `/v1/invoices`,
        method: "POST",
        body: data,
        secure: true,
        type: ContentType.UrlEncoded,
        format: "json",
        ...params,
      }),

    /**
     * @description <p>At any time, you can preview the upcoming invoice for a customer. This will show you all the charges that are pending, including subscription renewal charges, invoice item charges, etc. It will also show you any discounts that are applicable to the invoice.</p> <p>Note that when you are viewing an upcoming invoice, you are simply viewing a preview – the invoice has not yet been created. As such, the upcoming invoice will not show up in invoice listing calls, and you cannot use the API to pay or edit the invoice. If you want to change the amount that your customer will be billed, you can add, remove, or update pending invoice items, or update the customer’s discount.</p> <p>You can preview the effects of updating a subscription, including a preview of what proration will take place. To ensure that the actual proration is calculated exactly the same as the previewed proration, you should pass a <code>proration_date</code> parameter when doing the actual subscription update. The value passed in should be the same as the <code>subscription_proration_date</code> returned on the upcoming invoice resource. The recommended way to get only the prorations being previewed is to consider only proration line items where <code>period[start]</code> is equal to the <code>subscription_proration_date</code> on the upcoming invoice resource.</p>
     *
     * @name GetInvoicesUpcoming
     * @request GET:/v1/invoices/upcoming
     * @secure
     * @response `200` `Invoice` Successful response.
     * @response `default` `Error` Error response.
     */
    getInvoicesUpcoming: (
      query?: {
        automatic_tax?: { enabled: boolean };
        coupon?: string;
        customer?: string;
        customer_details?: {
          address?:
            | { city?: string; country?: string; line1?: string; line2?: string; postal_code?: string; state?: string }
            | ""
            | ({
                city?: string;
                country?: string;
                line1?: string;
                line2?: string;
                postal_code?: string;
                state?: string;
              } & "");
          shipping?:
            | {
                address: {
                  city?: string;
                  country?: string;
                  line1?: string;
                  line2?: string;
                  postal_code?: string;
                  state?: string;
                };
                name: string;
                phone?: string;
              }
            | ""
            | ({
                address: {
                  city?: string;
                  country?: string;
                  line1?: string;
                  line2?: string;
                  postal_code?: string;
                  state?: string;
                };
                name: string;
                phone?: string;
              } & "");
          tax?: { ip_address?: string | "" };
          tax_exempt?: "" | "exempt" | "none" | "reverse";
          tax_ids?: {
            type:
              | "ae_trn"
              | "au_abn"
              | "au_arn"
              | "br_cnpj"
              | "br_cpf"
              | "ca_bn"
              | "ca_gst_hst"
              | "ca_pst_bc"
              | "ca_pst_mb"
              | "ca_pst_sk"
              | "ca_qst"
              | "ch_vat"
              | "cl_tin"
              | "es_cif"
              | "eu_vat"
              | "gb_vat"
              | "ge_vat"
              | "hk_br"
              | "id_npwp"
              | "il_vat"
              | "in_gst"
              | "jp_cn"
              | "jp_rn"
              | "kr_brn"
              | "li_uid"
              | "mx_rfc"
              | "my_frp"
              | "my_itn"
              | "my_sst"
              | "no_vat"
              | "nz_gst"
              | "ru_inn"
              | "ru_kpp"
              | "sa_vat"
              | "sg_gst"
              | "sg_uen"
              | "th_vat"
              | "tw_vat"
              | "ua_vat"
              | "us_ein"
              | "za_vat";
            value: string;
          }[];
        };
        discounts?: { coupon?: string; discount?: string }[] | "" | ({ coupon?: string; discount?: string }[] & "");
        expand?: string[];
        invoice_items?: {
          amount?: number;
          currency?: string;
          description?: string;
          discountable?: boolean;
          discounts?: { coupon?: string; discount?: string }[] | "" | ({ coupon?: string; discount?: string }[] & "");
          invoiceitem?: string;
          metadata?: Record<string, string> | "" | (Record<string, string> & "");
          period?: { end: number; start: number };
          price?: string;
          price_data?: {
            currency: string;
            product: string;
            tax_behavior?: "exclusive" | "inclusive" | "unspecified";
            unit_amount?: number;
            unit_amount_decimal?: string;
          };
          quantity?: number;
          tax_rates?: string[] | "" | (string[] & "");
          unit_amount?: number;
          unit_amount_decimal?: string;
        }[];
        schedule?: string;
        subscription?: string;
        subscription_billing_cycle_anchor?: "now" | "unchanged" | number;
        subscription_cancel_at?: number | "";
        subscription_cancel_at_period_end?: boolean;
        subscription_cancel_now?: boolean;
        subscription_default_tax_rates?: string[] | "" | (string[] & "");
        subscription_items?: {
          billing_thresholds?: { usage_gte: number } | "" | ({ usage_gte: number } & "");
          clear_usage?: boolean;
          deleted?: boolean;
          id?: string;
          metadata?: Record<string, string> | "" | (Record<string, string> & "");
          price?: string;
          price_data?: {
            currency: string;
            product: string;
            recurring: { interval: "day" | "month" | "week" | "year"; interval_count?: number };
            tax_behavior?: "exclusive" | "inclusive" | "unspecified";
            unit_amount?: number;
            unit_amount_decimal?: string;
          };
          quantity?: number;
          tax_rates?: string[] | "" | (string[] & "");
        }[];
        subscription_proration_behavior?: "always_invoice" | "create_prorations" | "none";
        subscription_proration_date?: number;
        subscription_start_date?: number;
        subscription_trial_end?: "now" | number;
        subscription_trial_from_plan?: boolean;
      },
      data?: CardMandatePaymentMethodDetails,
      params: RequestParams = {},
    ) =>
      this.request<Invoice, Error>({
        path: `/v1/invoices/upcoming`,
        method: "GET",
        query: query,
        body: data,
        secure: true,
        type: ContentType.UrlEncoded,
        format: "json",
        ...params,
      }),

    /**
     * @description <p>When retrieving an upcoming invoice, you’ll get a <strong>lines</strong> property containing the total count of line items and the first handful of those items. There is also a URL where you can retrieve the full (paginated) list of line items.</p>
     *
     * @name GetInvoicesUpcomingLines
     * @request GET:/v1/invoices/upcoming/lines
     * @secure
     * @response `200` `{ data: (LineItem)[], has_more: boolean, object: "list", url: string }` Successful response.
     * @response `default` `Error` Error response.
     */
    getInvoicesUpcomingLines: (
      query?: {
        automatic_tax?: { enabled: boolean };
        coupon?: string;
        customer?: string;
        customer_details?: {
          address?:
            | { city?: string; country?: string; line1?: string; line2?: string; postal_code?: string; state?: string }
            | ""
            | ({
                city?: string;
                country?: string;
                line1?: string;
                line2?: string;
                postal_code?: string;
                state?: string;
              } & "");
          shipping?:
            | {
                address: {
                  city?: string;
                  country?: string;
                  line1?: string;
                  line2?: string;
                  postal_code?: string;
                  state?: string;
                };
                name: string;
                phone?: string;
              }
            | ""
            | ({
                address: {
                  city?: string;
                  country?: string;
                  line1?: string;
                  line2?: string;
                  postal_code?: string;
                  state?: string;
                };
                name: string;
                phone?: string;
              } & "");
          tax?: { ip_address?: string | "" };
          tax_exempt?: "" | "exempt" | "none" | "reverse";
          tax_ids?: {
            type:
              | "ae_trn"
              | "au_abn"
              | "au_arn"
              | "br_cnpj"
              | "br_cpf"
              | "ca_bn"
              | "ca_gst_hst"
              | "ca_pst_bc"
              | "ca_pst_mb"
              | "ca_pst_sk"
              | "ca_qst"
              | "ch_vat"
              | "cl_tin"
              | "es_cif"
              | "eu_vat"
              | "gb_vat"
              | "ge_vat"
              | "hk_br"
              | "id_npwp"
              | "il_vat"
              | "in_gst"
              | "jp_cn"
              | "jp_rn"
              | "kr_brn"
              | "li_uid"
              | "mx_rfc"
              | "my_frp"
              | "my_itn"
              | "my_sst"
              | "no_vat"
              | "nz_gst"
              | "ru_inn"
              | "ru_kpp"
              | "sa_vat"
              | "sg_gst"
              | "sg_uen"
              | "th_vat"
              | "tw_vat"
              | "ua_vat"
              | "us_ein"
              | "za_vat";
            value: string;
          }[];
        };
        discounts?: { coupon?: string; discount?: string }[] | "" | ({ coupon?: string; discount?: string }[] & "");
        ending_before?: string;
        expand?: string[];
        invoice_items?: {
          amount?: number;
          currency?: string;
          description?: string;
          discountable?: boolean;
          discounts?: { coupon?: string; discount?: string }[] | "" | ({ coupon?: string; discount?: string }[] & "");
          invoiceitem?: string;
          metadata?: Record<string, string> | "" | (Record<string, string> & "");
          period?: { end: number; start: number };
          price?: string;
          price_data?: {
            currency: string;
            product: string;
            tax_behavior?: "exclusive" | "inclusive" | "unspecified";
            unit_amount?: number;
            unit_amount_decimal?: string;
          };
          quantity?: number;
          tax_rates?: string[] | "" | (string[] & "");
          unit_amount?: number;
          unit_amount_decimal?: string;
        }[];
        limit?: number;
        schedule?: string;
        starting_after?: string;
        subscription?: string;
        subscription_billing_cycle_anchor?: "now" | "unchanged" | number;
        subscription_cancel_at?: number | "";
        subscription_cancel_at_period_end?: boolean;
        subscription_cancel_now?: boolean;
        subscription_default_tax_rates?: string[] | "" | (string[] & "");
        subscription_items?: {
          billing_thresholds?: { usage_gte: number } | "" | ({ usage_gte: number } & "");
          clear_usage?: boolean;
          deleted?: boolean;
          id?: string;
          metadata?: Record<string, string> | "" | (Record<string, string> & "");
          price?: string;
          price_data?: {
            currency: string;
            product: string;
            recurring: { interval: "day" | "month" | "week" | "year"; interval_count?: number };
            tax_behavior?: "exclusive" | "inclusive" | "unspecified";
            unit_amount?: number;
            unit_amount_decimal?: string;
          };
          quantity?: number;
          tax_rates?: string[] | "" | (string[] & "");
        }[];
        subscription_proration_behavior?: "always_invoice" | "create_prorations" | "none";
        subscription_proration_date?: number;
        subscription_start_date?: number;
        subscription_trial_end?: "now" | number;
        subscription_trial_from_plan?: boolean;
      },
      data?: CardMandatePaymentMethodDetails,
      params: RequestParams = {},
    ) =>
      this.request<{ data: LineItem[]; has_more: boolean; object: "list"; url: string }, Error>({
        path: `/v1/invoices/upcoming/lines`,
        method: "GET",
        query: query,
        body: data,
        secure: true,
        type: ContentType.UrlEncoded,
        format: "json",
        ...params,
      }),

    /**
     * @description <p>Permanently deletes a one-off invoice draft. This cannot be undone. Attempts to delete invoices that are no longer in a draft state will fail; once an invoice has been finalized or if an invoice is for a subscription, it must be <a href="#void_invoice">voided</a>.</p>
     *
     * @name DeleteInvoicesInvoice
     * @request DELETE:/v1/invoices/{invoice}
     * @secure
     * @response `200` `DeletedInvoice` Successful response.
     * @response `default` `Error` Error response.
     */
    deleteInvoicesInvoice: (invoice: string, data?: CardMandatePaymentMethodDetails, params: RequestParams = {}) =>
      this.request<DeletedInvoice, Error>({
        path: `/v1/invoices/${invoice}`,
        method: "DELETE",
        body: data,
        secure: true,
        type: ContentType.UrlEncoded,
        format: "json",
        ...params,
      }),

    /**
     * @description <p>Retrieves the invoice with the given ID.</p>
     *
     * @name GetInvoicesInvoice
     * @request GET:/v1/invoices/{invoice}
     * @secure
     * @response `200` `Invoice` Successful response.
     * @response `default` `Error` Error response.
     */
    getInvoicesInvoice: (
      invoice: string,
      query?: { expand?: string[] },
      data?: CardMandatePaymentMethodDetails,
      params: RequestParams = {},
    ) =>
      this.request<Invoice, Error>({
        path: `/v1/invoices/${invoice}`,
        method: "GET",
        query: query,
        body: data,
        secure: true,
        type: ContentType.UrlEncoded,
        format: "json",
        ...params,
      }),

    /**
     * @description <p>Draft invoices are fully editable. Once an invoice is <a href="/docs/billing/invoices/workflow#finalized">finalized</a>, monetary values, as well as <code>collection_method</code>, become uneditable.</p> <p>If you would like to stop the Stripe Billing engine from automatically finalizing, reattempting payments on, sending reminders for, or <a href="/docs/billing/invoices/reconciliation">automatically reconciling</a> invoices, pass <code>auto_advance=false</code>.</p>
     *
     * @name PostInvoicesInvoice
     * @request POST:/v1/invoices/{invoice}
     * @secure
     * @response `200` `Invoice` Successful response.
     * @response `default` `Error` Error response.
     */
    postInvoicesInvoice: (
      invoice: string,
      data?: {
        account_tax_ids?: string[] | "" | (string[] & "");
        application_fee_amount?: number;
        auto_advance?: boolean;
        automatic_tax?: { enabled: boolean };
        collection_method?: "charge_automatically" | "send_invoice";
        custom_fields?: { name: string; value: string }[] | "" | ({ name: string; value: string }[] & "");
        days_until_due?: number;
        default_payment_method?: string;
        default_source?: string;
        default_tax_rates?: string[] | "" | (string[] & "");
        description?: string;
        discounts?: { coupon?: string; discount?: string }[] | "" | ({ coupon?: string; discount?: string }[] & "");
        due_date?: number;
        expand?: string[];
        footer?: string;
        metadata?: Record<string, string> | "" | (Record<string, string> & "");
        on_behalf_of?: string | "";
        payment_settings?: {
          payment_method_options?: {
            acss_debit?:
              | {
                  mandate_options?: { transaction_type?: "business" | "personal" };
                  verification_method?: "automatic" | "instant" | "microdeposits";
                }
              | ""
              | ({
                  mandate_options?: { transaction_type?: "business" | "personal" };
                  verification_method?: "automatic" | "instant" | "microdeposits";
                } & "");
            bancontact?:
              | { preferred_language?: "de" | "en" | "fr" | "nl" }
              | ""
              | ({ preferred_language?: "de" | "en" | "fr" | "nl" } & "");
            card?:
              | { request_three_d_secure?: "any" | "automatic" }
              | ""
              | ({ request_three_d_secure?: "any" | "automatic" } & "");
          };
          payment_method_types?:
            | (
                | "ach_credit_transfer"
                | "ach_debit"
                | "acss_debit"
                | "au_becs_debit"
                | "bacs_debit"
                | "bancontact"
                | "boleto"
                | "card"
                | "fpx"
                | "giropay"
                | "ideal"
                | "sepa_debit"
                | "sofort"
                | "wechat_pay"
              )[]
            | ""
            | ((
                | "ach_credit_transfer"
                | "ach_debit"
                | "acss_debit"
                | "au_becs_debit"
                | "bacs_debit"
                | "bancontact"
                | "boleto"
                | "card"
                | "fpx"
                | "giropay"
                | "ideal"
                | "sepa_debit"
                | "sofort"
                | "wechat_pay"
              )[] &
                "");
        };
        statement_descriptor?: string;
        transfer_data?: { amount?: number; destination: string } | "" | ({ amount?: number; destination: string } & "");
      },
      params: RequestParams = {},
    ) =>
      this.request<Invoice, Error>({
        path: `/v1/invoices/${invoice}`,
        method: "POST",
        body: data,
        secure: true,
        type: ContentType.UrlEncoded,
        format: "json",
        ...params,
      }),

    /**
     * @description <p>Stripe automatically finalizes drafts before sending and attempting payment on invoices. However, if you’d like to finalize a draft invoice manually, you can do so using this method.</p>
     *
     * @name PostInvoicesInvoiceFinalize
     * @request POST:/v1/invoices/{invoice}/finalize
     * @secure
     * @response `200` `Invoice` Successful response.
     * @response `default` `Error` Error response.
     */
    postInvoicesInvoiceFinalize: (
      invoice: string,
      data?: { auto_advance?: boolean; expand?: string[] },
      params: RequestParams = {},
    ) =>
      this.request<Invoice, Error>({
        path: `/v1/invoices/${invoice}/finalize`,
        method: "POST",
        body: data,
        secure: true,
        type: ContentType.UrlEncoded,
        format: "json",
        ...params,
      }),

    /**
     * @description <p>When retrieving an invoice, you’ll get a <strong>lines</strong> property containing the total count of line items and the first handful of those items. There is also a URL where you can retrieve the full (paginated) list of line items.</p>
     *
     * @name GetInvoicesInvoiceLines
     * @request GET:/v1/invoices/{invoice}/lines
     * @secure
     * @response `200` `{ data: (LineItem)[], has_more: boolean, object: "list", url: string }` Successful response.
     * @response `default` `Error` Error response.
     */
    getInvoicesInvoiceLines: (
      invoice: string,
      query?: { ending_before?: string; expand?: string[]; limit?: number; starting_after?: string },
      data?: CardMandatePaymentMethodDetails,
      params: RequestParams = {},
    ) =>
      this.request<{ data: LineItem[]; has_more: boolean; object: "list"; url: string }, Error>({
        path: `/v1/invoices/${invoice}/lines`,
        method: "GET",
        query: query,
        body: data,
        secure: true,
        type: ContentType.UrlEncoded,
        format: "json",
        ...params,
      }),

    /**
     * @description <p>Marking an invoice as uncollectible is useful for keeping track of bad debts that can be written off for accounting purposes.</p>
     *
     * @name PostInvoicesInvoiceMarkUncollectible
     * @request POST:/v1/invoices/{invoice}/mark_uncollectible
     * @secure
     * @response `200` `Invoice` Successful response.
     * @response `default` `Error` Error response.
     */
    postInvoicesInvoiceMarkUncollectible: (invoice: string, data?: { expand?: string[] }, params: RequestParams = {}) =>
      this.request<Invoice, Error>({
        path: `/v1/invoices/${invoice}/mark_uncollectible`,
        method: "POST",
        body: data,
        secure: true,
        type: ContentType.UrlEncoded,
        format: "json",
        ...params,
      }),

    /**
     * @description <p>Stripe automatically creates and then attempts to collect payment on invoices for customers on subscriptions according to your <a href="https://dashboard.stripe.com/account/billing/automatic">subscriptions settings</a>. However, if you’d like to attempt payment on an invoice out of the normal collection schedule or for some other reason, you can do so.</p>
     *
     * @name PostInvoicesInvoicePay
     * @request POST:/v1/invoices/{invoice}/pay
     * @secure
     * @response `200` `Invoice` Successful response.
     * @response `default` `Error` Error response.
     */
    postInvoicesInvoicePay: (
      invoice: string,
      data?: {
        expand?: string[];
        forgive?: boolean;
        off_session?: boolean;
        paid_out_of_band?: boolean;
        payment_method?: string;
        source?: string;
      },
      params: RequestParams = {},
    ) =>
      this.request<Invoice, Error>({
        path: `/v1/invoices/${invoice}/pay`,
        method: "POST",
        body: data,
        secure: true,
        type: ContentType.UrlEncoded,
        format: "json",
        ...params,
      }),

    /**
     * @description <p>Stripe will automatically send invoices to customers according to your <a href="https://dashboard.stripe.com/account/billing/automatic">subscriptions settings</a>. However, if you’d like to manually send an invoice to your customer out of the normal schedule, you can do so. When sending invoices that have already been paid, there will be no reference to the payment in the email.</p> <p>Requests made in test-mode result in no emails being sent, despite sending an <code>invoice.sent</code> event.</p>
     *
     * @name PostInvoicesInvoiceSend
     * @request POST:/v1/invoices/{invoice}/send
     * @secure
     * @response `200` `Invoice` Successful response.
     * @response `default` `Error` Error response.
     */
    postInvoicesInvoiceSend: (invoice: string, data?: { expand?: string[] }, params: RequestParams = {}) =>
      this.request<Invoice, Error>({
        path: `/v1/invoices/${invoice}/send`,
        method: "POST",
        body: data,
        secure: true,
        type: ContentType.UrlEncoded,
        format: "json",
        ...params,
      }),

    /**
     * @description <p>Mark a finalized invoice as void. This cannot be undone. Voiding an invoice is similar to <a href="#delete_invoice">deletion</a>, however it only applies to finalized invoices and maintains a papertrail where the invoice can still be found.</p>
     *
     * @name PostInvoicesInvoiceVoid
     * @request POST:/v1/invoices/{invoice}/void
     * @secure
     * @response `200` `Invoice` Successful response.
     * @response `default` `Error` Error response.
     */
    postInvoicesInvoiceVoid: (invoice: string, data?: { expand?: string[] }, params: RequestParams = {}) =>
      this.request<Invoice, Error>({
        path: `/v1/invoices/${invoice}/void`,
        method: "POST",
        body: data,
        secure: true,
        type: ContentType.UrlEncoded,
        format: "json",
        ...params,
      }),

    /**
     * @description <p>Returns a list of issuer fraud records.</p>
     *
     * @name GetIssuerFraudRecords
     * @request GET:/v1/issuer_fraud_records
     * @deprecated
     * @secure
     * @response `200` `{ data: (IssuerFraudRecord)[], has_more: boolean, object: "list", url: string }` Successful response.
     * @response `default` `Error` Error response.
     */
    getIssuerFraudRecords: (
      query?: { charge?: string; ending_before?: string; expand?: string[]; limit?: number; starting_after?: string },
      data?: CardMandatePaymentMethodDetails,
      params: RequestParams = {},
    ) =>
      this.request<{ data: IssuerFraudRecord[]; has_more: boolean; object: "list"; url: string }, Error>({
        path: `/v1/issuer_fraud_records`,
        method: "GET",
        query: query,
        body: data,
        secure: true,
        type: ContentType.UrlEncoded,
        format: "json",
        ...params,
      }),

    /**
     * @description <p>Retrieves the details of an issuer fraud record that has previously been created. </p> <p>Please refer to the <a href="#issuer_fraud_record_object">issuer fraud record</a> object reference for more details.</p>
     *
     * @name GetIssuerFraudRecordsIssuerFraudRecord
     * @request GET:/v1/issuer_fraud_records/{issuer_fraud_record}
     * @deprecated
     * @secure
     * @response `200` `IssuerFraudRecord` Successful response.
     * @response `default` `Error` Error response.
     */
    getIssuerFraudRecordsIssuerFraudRecord: (
      issuerFraudRecord: string,
      query?: { expand?: string[] },
      data?: CardMandatePaymentMethodDetails,
      params: RequestParams = {},
    ) =>
      this.request<IssuerFraudRecord, Error>({
        path: `/v1/issuer_fraud_records/${issuerFraudRecord}`,
        method: "GET",
        query: query,
        body: data,
        secure: true,
        type: ContentType.UrlEncoded,
        format: "json",
        ...params,
      }),

    /**
     * @description <p>Returns a list of Issuing <code>Authorization</code> objects. The objects are sorted in descending order by creation date, with the most recently created object appearing first.</p>
     *
     * @name GetIssuingAuthorizations
     * @request GET:/v1/issuing/authorizations
     * @secure
     * @response `200` `{ data: (IssuingAuthorization)[], has_more: boolean, object: "list", url: string }` Successful response.
     * @response `default` `Error` Error response.
     */
    getIssuingAuthorizations: (
      query?: {
        card?: string;
        cardholder?: string;
        created?: { gt?: number; gte?: number; lt?: number; lte?: number } | number;
        ending_before?: string;
        expand?: string[];
        limit?: number;
        starting_after?: string;
        status?: "closed" | "pending" | "reversed";
      },
      data?: CardMandatePaymentMethodDetails,
      params: RequestParams = {},
    ) =>
      this.request<{ data: IssuingAuthorization[]; has_more: boolean; object: "list"; url: string }, Error>({
        path: `/v1/issuing/authorizations`,
        method: "GET",
        query: query,
        body: data,
        secure: true,
        type: ContentType.UrlEncoded,
        format: "json",
        ...params,
      }),

    /**
     * @description <p>Retrieves an Issuing <code>Authorization</code> object.</p>
     *
     * @name GetIssuingAuthorizationsAuthorization
     * @request GET:/v1/issuing/authorizations/{authorization}
     * @secure
     * @response `200` `IssuingAuthorization` Successful response.
     * @response `default` `Error` Error response.
     */
    getIssuingAuthorizationsAuthorization: (
      authorization: string,
      query?: { expand?: string[] },
      data?: CardMandatePaymentMethodDetails,
      params: RequestParams = {},
    ) =>
      this.request<IssuingAuthorization, Error>({
        path: `/v1/issuing/authorizations/${authorization}`,
        method: "GET",
        query: query,
        body: data,
        secure: true,
        type: ContentType.UrlEncoded,
        format: "json",
        ...params,
      }),

    /**
     * @description <p>Updates the specified Issuing <code>Authorization</code> object by setting the values of the parameters passed. Any parameters not provided will be left unchanged.</p>
     *
     * @name PostIssuingAuthorizationsAuthorization
     * @request POST:/v1/issuing/authorizations/{authorization}
     * @secure
     * @response `200` `IssuingAuthorization` Successful response.
     * @response `default` `Error` Error response.
     */
    postIssuingAuthorizationsAuthorization: (
      authorization: string,
      data?: { expand?: string[]; metadata?: Record<string, string> | "" | (Record<string, string> & "") },
      params: RequestParams = {},
    ) =>
      this.request<IssuingAuthorization, Error>({
        path: `/v1/issuing/authorizations/${authorization}`,
        method: "POST",
        body: data,
        secure: true,
        type: ContentType.UrlEncoded,
        format: "json",
        ...params,
      }),

    /**
     * @description <p>Approves a pending Issuing <code>Authorization</code> object. This request should be made within the timeout window of the <a href="/docs/issuing/controls/real-time-authorizations">real-time authorization</a> flow.</p>
     *
     * @name PostIssuingAuthorizationsAuthorizationApprove
     * @request POST:/v1/issuing/authorizations/{authorization}/approve
     * @secure
     * @response `200` `IssuingAuthorization` Successful response.
     * @response `default` `Error` Error response.
     */
    postIssuingAuthorizationsAuthorizationApprove: (
      authorization: string,
      data?: {
        amount?: number;
        expand?: string[];
        metadata?: Record<string, string> | "" | (Record<string, string> & "");
      },
      params: RequestParams = {},
    ) =>
      this.request<IssuingAuthorization, Error>({
        path: `/v1/issuing/authorizations/${authorization}/approve`,
        method: "POST",
        body: data,
        secure: true,
        type: ContentType.UrlEncoded,
        format: "json",
        ...params,
      }),

    /**
     * @description <p>Declines a pending Issuing <code>Authorization</code> object. This request should be made within the timeout window of the <a href="/docs/issuing/controls/real-time-authorizations">real time authorization</a> flow.</p>
     *
     * @name PostIssuingAuthorizationsAuthorizationDecline
     * @request POST:/v1/issuing/authorizations/{authorization}/decline
     * @secure
     * @response `200` `IssuingAuthorization` Successful response.
     * @response `default` `Error` Error response.
     */
    postIssuingAuthorizationsAuthorizationDecline: (
      authorization: string,
      data?: { expand?: string[]; metadata?: Record<string, string> | "" | (Record<string, string> & "") },
      params: RequestParams = {},
    ) =>
      this.request<IssuingAuthorization, Error>({
        path: `/v1/issuing/authorizations/${authorization}/decline`,
        method: "POST",
        body: data,
        secure: true,
        type: ContentType.UrlEncoded,
        format: "json",
        ...params,
      }),

    /**
     * @description <p>Returns a list of Issuing <code>Cardholder</code> objects. The objects are sorted in descending order by creation date, with the most recently created object appearing first.</p>
     *
     * @name GetIssuingCardholders
     * @request GET:/v1/issuing/cardholders
     * @secure
     * @response `200` `{ data: (IssuingCardholder)[], has_more: boolean, object: "list", url: string }` Successful response.
     * @response `default` `Error` Error response.
     */
    getIssuingCardholders: (
      query?: {
        created?: { gt?: number; gte?: number; lt?: number; lte?: number } | number;
        email?: string;
        ending_before?: string;
        expand?: string[];
        limit?: number;
        phone_number?: string;
        starting_after?: string;
        status?: "active" | "blocked" | "inactive";
        type?: "company" | "individual";
      },
      data?: CardMandatePaymentMethodDetails,
      params: RequestParams = {},
    ) =>
      this.request<{ data: IssuingCardholder[]; has_more: boolean; object: "list"; url: string }, Error>({
        path: `/v1/issuing/cardholders`,
        method: "GET",
        query: query,
        body: data,
        secure: true,
        type: ContentType.UrlEncoded,
        format: "json",
        ...params,
      }),

    /**
     * @description <p>Creates a new Issuing <code>Cardholder</code> object that can be issued cards.</p>
     *
     * @name PostIssuingCardholders
     * @request POST:/v1/issuing/cardholders
     * @secure
     * @response `200` `IssuingCardholder` Successful response.
     * @response `default` `Error` Error response.
     */
    postIssuingCardholders: (
      data: {
        billing: {
          address: {
            city: string;
            country: string;
            line1: string;
            line2?: string;
            postal_code: string;
            state?: string;
          };
        };
        company?: { tax_id?: string };
        email?: string;
        expand?: string[];
        individual?: {
          dob?: { day: number; month: number; year: number };
          first_name: string;
          last_name: string;
          verification?: { document?: { back?: string; front?: string } };
        };
        metadata?: Record<string, string>;
        name: string;
        phone_number?: string;
        spending_controls?: {
          allowed_categories?: (
            | "ac_refrigeration_repair"
            | "accounting_bookkeeping_services"
            | "advertising_services"
            | "agricultural_cooperative"
            | "airlines_air_carriers"
            | "airports_flying_fields"
            | "ambulance_services"
            | "amusement_parks_carnivals"
            | "antique_reproductions"
            | "antique_shops"
            | "aquariums"
            | "architectural_surveying_services"
            | "art_dealers_and_galleries"
            | "artists_supply_and_craft_shops"
            | "auto_and_home_supply_stores"
            | "auto_body_repair_shops"
            | "auto_paint_shops"
            | "auto_service_shops"
            | "automated_cash_disburse"
            | "automated_fuel_dispensers"
            | "automobile_associations"
            | "automotive_parts_and_accessories_stores"
            | "automotive_tire_stores"
            | "bail_and_bond_payments"
            | "bakeries"
            | "bands_orchestras"
            | "barber_and_beauty_shops"
            | "betting_casino_gambling"
            | "bicycle_shops"
            | "billiard_pool_establishments"
            | "boat_dealers"
            | "boat_rentals_and_leases"
            | "book_stores"
            | "books_periodicals_and_newspapers"
            | "bowling_alleys"
            | "bus_lines"
            | "business_secretarial_schools"
            | "buying_shopping_services"
            | "cable_satellite_and_other_pay_television_and_radio"
            | "camera_and_photographic_supply_stores"
            | "candy_nut_and_confectionery_stores"
            | "car_and_truck_dealers_new_used"
            | "car_and_truck_dealers_used_only"
            | "car_rental_agencies"
            | "car_washes"
            | "carpentry_services"
            | "carpet_upholstery_cleaning"
            | "caterers"
            | "charitable_and_social_service_organizations_fundraising"
            | "chemicals_and_allied_products"
            | "child_care_services"
            | "childrens_and_infants_wear_stores"
            | "chiropodists_podiatrists"
            | "chiropractors"
            | "cigar_stores_and_stands"
            | "civic_social_fraternal_associations"
            | "cleaning_and_maintenance"
            | "clothing_rental"
            | "colleges_universities"
            | "commercial_equipment"
            | "commercial_footwear"
            | "commercial_photography_art_and_graphics"
            | "commuter_transport_and_ferries"
            | "computer_network_services"
            | "computer_programming"
            | "computer_repair"
            | "computer_software_stores"
            | "computers_peripherals_and_software"
            | "concrete_work_services"
            | "construction_materials"
            | "consulting_public_relations"
            | "correspondence_schools"
            | "cosmetic_stores"
            | "counseling_services"
            | "country_clubs"
            | "courier_services"
            | "court_costs"
            | "credit_reporting_agencies"
            | "cruise_lines"
            | "dairy_products_stores"
            | "dance_hall_studios_schools"
            | "dating_escort_services"
            | "dentists_orthodontists"
            | "department_stores"
            | "detective_agencies"
            | "digital_goods_applications"
            | "digital_goods_games"
            | "digital_goods_large_volume"
            | "digital_goods_media"
            | "direct_marketing_catalog_merchant"
            | "direct_marketing_combination_catalog_and_retail_merchant"
            | "direct_marketing_inbound_telemarketing"
            | "direct_marketing_insurance_services"
            | "direct_marketing_other"
            | "direct_marketing_outbound_telemarketing"
            | "direct_marketing_subscription"
            | "direct_marketing_travel"
            | "discount_stores"
            | "doctors"
            | "door_to_door_sales"
            | "drapery_window_covering_and_upholstery_stores"
            | "drinking_places"
            | "drug_stores_and_pharmacies"
            | "drugs_drug_proprietaries_and_druggist_sundries"
            | "dry_cleaners"
            | "durable_goods"
            | "duty_free_stores"
            | "eating_places_restaurants"
            | "educational_services"
            | "electric_razor_stores"
            | "electrical_parts_and_equipment"
            | "electrical_services"
            | "electronics_repair_shops"
            | "electronics_stores"
            | "elementary_secondary_schools"
            | "employment_temp_agencies"
            | "equipment_rental"
            | "exterminating_services"
            | "family_clothing_stores"
            | "fast_food_restaurants"
            | "financial_institutions"
            | "fines_government_administrative_entities"
            | "fireplace_fireplace_screens_and_accessories_stores"
            | "floor_covering_stores"
            | "florists"
            | "florists_supplies_nursery_stock_and_flowers"
            | "freezer_and_locker_meat_provisioners"
            | "fuel_dealers_non_automotive"
            | "funeral_services_crematories"
            | "furniture_home_furnishings_and_equipment_stores_except_appliances"
            | "furniture_repair_refinishing"
            | "furriers_and_fur_shops"
            | "general_services"
            | "gift_card_novelty_and_souvenir_shops"
            | "glass_paint_and_wallpaper_stores"
            | "glassware_crystal_stores"
            | "golf_courses_public"
            | "government_services"
            | "grocery_stores_supermarkets"
            | "hardware_equipment_and_supplies"
            | "hardware_stores"
            | "health_and_beauty_spas"
            | "hearing_aids_sales_and_supplies"
            | "heating_plumbing_a_c"
            | "hobby_toy_and_game_shops"
            | "home_supply_warehouse_stores"
            | "hospitals"
            | "hotels_motels_and_resorts"
            | "household_appliance_stores"
            | "industrial_supplies"
            | "information_retrieval_services"
            | "insurance_default"
            | "insurance_underwriting_premiums"
            | "intra_company_purchases"
            | "jewelry_stores_watches_clocks_and_silverware_stores"
            | "landscaping_services"
            | "laundries"
            | "laundry_cleaning_services"
            | "legal_services_attorneys"
            | "luggage_and_leather_goods_stores"
            | "lumber_building_materials_stores"
            | "manual_cash_disburse"
            | "marinas_service_and_supplies"
            | "masonry_stonework_and_plaster"
            | "massage_parlors"
            | "medical_and_dental_labs"
            | "medical_dental_ophthalmic_and_hospital_equipment_and_supplies"
            | "medical_services"
            | "membership_organizations"
            | "mens_and_boys_clothing_and_accessories_stores"
            | "mens_womens_clothing_stores"
            | "metal_service_centers"
            | "miscellaneous"
            | "miscellaneous_apparel_and_accessory_shops"
            | "miscellaneous_auto_dealers"
            | "miscellaneous_business_services"
            | "miscellaneous_food_stores"
            | "miscellaneous_general_merchandise"
            | "miscellaneous_general_services"
            | "miscellaneous_home_furnishing_specialty_stores"
            | "miscellaneous_publishing_and_printing"
            | "miscellaneous_recreation_services"
            | "miscellaneous_repair_shops"
            | "miscellaneous_specialty_retail"
            | "mobile_home_dealers"
            | "motion_picture_theaters"
            | "motor_freight_carriers_and_trucking"
            | "motor_homes_dealers"
            | "motor_vehicle_supplies_and_new_parts"
            | "motorcycle_shops_and_dealers"
            | "motorcycle_shops_dealers"
            | "music_stores_musical_instruments_pianos_and_sheet_music"
            | "news_dealers_and_newsstands"
            | "non_fi_money_orders"
            | "non_fi_stored_value_card_purchase_load"
            | "nondurable_goods"
            | "nurseries_lawn_and_garden_supply_stores"
            | "nursing_personal_care"
            | "office_and_commercial_furniture"
            | "opticians_eyeglasses"
            | "optometrists_ophthalmologist"
            | "orthopedic_goods_prosthetic_devices"
            | "osteopaths"
            | "package_stores_beer_wine_and_liquor"
            | "paints_varnishes_and_supplies"
            | "parking_lots_garages"
            | "passenger_railways"
            | "pawn_shops"
            | "pet_shops_pet_food_and_supplies"
            | "petroleum_and_petroleum_products"
            | "photo_developing"
            | "photographic_photocopy_microfilm_equipment_and_supplies"
            | "photographic_studios"
            | "picture_video_production"
            | "piece_goods_notions_and_other_dry_goods"
            | "plumbing_heating_equipment_and_supplies"
            | "political_organizations"
            | "postal_services_government_only"
            | "precious_stones_and_metals_watches_and_jewelry"
            | "professional_services"
            | "public_warehousing_and_storage"
            | "quick_copy_repro_and_blueprint"
            | "railroads"
            | "real_estate_agents_and_managers_rentals"
            | "record_stores"
            | "recreational_vehicle_rentals"
            | "religious_goods_stores"
            | "religious_organizations"
            | "roofing_siding_sheet_metal"
            | "secretarial_support_services"
            | "security_brokers_dealers"
            | "service_stations"
            | "sewing_needlework_fabric_and_piece_goods_stores"
            | "shoe_repair_hat_cleaning"
            | "shoe_stores"
            | "small_appliance_repair"
            | "snowmobile_dealers"
            | "special_trade_services"
            | "specialty_cleaning"
            | "sporting_goods_stores"
            | "sporting_recreation_camps"
            | "sports_and_riding_apparel_stores"
            | "sports_clubs_fields"
            | "stamp_and_coin_stores"
            | "stationary_office_supplies_printing_and_writing_paper"
            | "stationery_stores_office_and_school_supply_stores"
            | "swimming_pools_sales"
            | "t_ui_travel_germany"
            | "tailors_alterations"
            | "tax_payments_government_agencies"
            | "tax_preparation_services"
            | "taxicabs_limousines"
            | "telecommunication_equipment_and_telephone_sales"
            | "telecommunication_services"
            | "telegraph_services"
            | "tent_and_awning_shops"
            | "testing_laboratories"
            | "theatrical_ticket_agencies"
            | "timeshares"
            | "tire_retreading_and_repair"
            | "tolls_bridge_fees"
            | "tourist_attractions_and_exhibits"
            | "towing_services"
            | "trailer_parks_campgrounds"
            | "transportation_services"
            | "travel_agencies_tour_operators"
            | "truck_stop_iteration"
            | "truck_utility_trailer_rentals"
            | "typesetting_plate_making_and_related_services"
            | "typewriter_stores"
            | "u_s_federal_government_agencies_or_departments"
            | "uniforms_commercial_clothing"
            | "used_merchandise_and_secondhand_stores"
            | "utilities"
            | "variety_stores"
            | "veterinary_services"
            | "video_amusement_game_supplies"
            | "video_game_arcades"
            | "video_tape_rental_stores"
            | "vocational_trade_schools"
            | "watch_jewelry_repair"
            | "welding_repair"
            | "wholesale_clubs"
            | "wig_and_toupee_stores"
            | "wires_money_orders"
            | "womens_accessory_and_specialty_shops"
            | "womens_ready_to_wear_stores"
            | "wrecking_and_salvage_yards"
          )[];
          blocked_categories?: (
            | "ac_refrigeration_repair"
            | "accounting_bookkeeping_services"
            | "advertising_services"
            | "agricultural_cooperative"
            | "airlines_air_carriers"
            | "airports_flying_fields"
            | "ambulance_services"
            | "amusement_parks_carnivals"
            | "antique_reproductions"
            | "antique_shops"
            | "aquariums"
            | "architectural_surveying_services"
            | "art_dealers_and_galleries"
            | "artists_supply_and_craft_shops"
            | "auto_and_home_supply_stores"
            | "auto_body_repair_shops"
            | "auto_paint_shops"
            | "auto_service_shops"
            | "automated_cash_disburse"
            | "automated_fuel_dispensers"
            | "automobile_associations"
            | "automotive_parts_and_accessories_stores"
            | "automotive_tire_stores"
            | "bail_and_bond_payments"
            | "bakeries"
            | "bands_orchestras"
            | "barber_and_beauty_shops"
            | "betting_casino_gambling"
            | "bicycle_shops"
            | "billiard_pool_establishments"
            | "boat_dealers"
            | "boat_rentals_and_leases"
            | "book_stores"
            | "books_periodicals_and_newspapers"
            | "bowling_alleys"
            | "bus_lines"
            | "business_secretarial_schools"
            | "buying_shopping_services"
            | "cable_satellite_and_other_pay_television_and_radio"
            | "camera_and_photographic_supply_stores"
            | "candy_nut_and_confectionery_stores"
            | "car_and_truck_dealers_new_used"
            | "car_and_truck_dealers_used_only"
            | "car_rental_agencies"
            | "car_washes"
            | "carpentry_services"
            | "carpet_upholstery_cleaning"
            | "caterers"
            | "charitable_and_social_service_organizations_fundraising"
            | "chemicals_and_allied_products"
            | "child_care_services"
            | "childrens_and_infants_wear_stores"
            | "chiropodists_podiatrists"
            | "chiropractors"
            | "cigar_stores_and_stands"
            | "civic_social_fraternal_associations"
            | "cleaning_and_maintenance"
            | "clothing_rental"
            | "colleges_universities"
            | "commercial_equipment"
            | "commercial_footwear"
            | "commercial_photography_art_and_graphics"
            | "commuter_transport_and_ferries"
            | "computer_network_services"
            | "computer_programming"
            | "computer_repair"
            | "computer_software_stores"
            | "computers_peripherals_and_software"
            | "concrete_work_services"
            | "construction_materials"
            | "consulting_public_relations"
            | "correspondence_schools"
            | "cosmetic_stores"
            | "counseling_services"
            | "country_clubs"
            | "courier_services"
            | "court_costs"
            | "credit_reporting_agencies"
            | "cruise_lines"
            | "dairy_products_stores"
            | "dance_hall_studios_schools"
            | "dating_escort_services"
            | "dentists_orthodontists"
            | "department_stores"
            | "detective_agencies"
            | "digital_goods_applications"
            | "digital_goods_games"
            | "digital_goods_large_volume"
            | "digital_goods_media"
            | "direct_marketing_catalog_merchant"
            | "direct_marketing_combination_catalog_and_retail_merchant"
            | "direct_marketing_inbound_telemarketing"
            | "direct_marketing_insurance_services"
            | "direct_marketing_other"
            | "direct_marketing_outbound_telemarketing"
            | "direct_marketing_subscription"
            | "direct_marketing_travel"
            | "discount_stores"
            | "doctors"
            | "door_to_door_sales"
            | "drapery_window_covering_and_upholstery_stores"
            | "drinking_places"
            | "drug_stores_and_pharmacies"
            | "drugs_drug_proprietaries_and_druggist_sundries"
            | "dry_cleaners"
            | "durable_goods"
            | "duty_free_stores"
            | "eating_places_restaurants"
            | "educational_services"
            | "electric_razor_stores"
            | "electrical_parts_and_equipment"
            | "electrical_services"
            | "electronics_repair_shops"
            | "electronics_stores"
            | "elementary_secondary_schools"
            | "employment_temp_agencies"
            | "equipment_rental"
            | "exterminating_services"
            | "family_clothing_stores"
            | "fast_food_restaurants"
            | "financial_institutions"
            | "fines_government_administrative_entities"
            | "fireplace_fireplace_screens_and_accessories_stores"
            | "floor_covering_stores"
            | "florists"
            | "florists_supplies_nursery_stock_and_flowers"
            | "freezer_and_locker_meat_provisioners"
            | "fuel_dealers_non_automotive"
            | "funeral_services_crematories"
            | "furniture_home_furnishings_and_equipment_stores_except_appliances"
            | "furniture_repair_refinishing"
            | "furriers_and_fur_shops"
            | "general_services"
            | "gift_card_novelty_and_souvenir_shops"
            | "glass_paint_and_wallpaper_stores"
            | "glassware_crystal_stores"
            | "golf_courses_public"
            | "government_services"
            | "grocery_stores_supermarkets"
            | "hardware_equipment_and_supplies"
            | "hardware_stores"
            | "health_and_beauty_spas"
            | "hearing_aids_sales_and_supplies"
            | "heating_plumbing_a_c"
            | "hobby_toy_and_game_shops"
            | "home_supply_warehouse_stores"
            | "hospitals"
            | "hotels_motels_and_resorts"
            | "household_appliance_stores"
            | "industrial_supplies"
            | "information_retrieval_services"
            | "insurance_default"
            | "insurance_underwriting_premiums"
            | "intra_company_purchases"
            | "jewelry_stores_watches_clocks_and_silverware_stores"
            | "landscaping_services"
            | "laundries"
            | "laundry_cleaning_services"
            | "legal_services_attorneys"
            | "luggage_and_leather_goods_stores"
            | "lumber_building_materials_stores"
            | "manual_cash_disburse"
            | "marinas_service_and_supplies"
            | "masonry_stonework_and_plaster"
            | "massage_parlors"
            | "medical_and_dental_labs"
            | "medical_dental_ophthalmic_and_hospital_equipment_and_supplies"
            | "medical_services"
            | "membership_organizations"
            | "mens_and_boys_clothing_and_accessories_stores"
            | "mens_womens_clothing_stores"
            | "metal_service_centers"
            | "miscellaneous"
            | "miscellaneous_apparel_and_accessory_shops"
            | "miscellaneous_auto_dealers"
            | "miscellaneous_business_services"
            | "miscellaneous_food_stores"
            | "miscellaneous_general_merchandise"
            | "miscellaneous_general_services"
            | "miscellaneous_home_furnishing_specialty_stores"
            | "miscellaneous_publishing_and_printing"
            | "miscellaneous_recreation_services"
            | "miscellaneous_repair_shops"
            | "miscellaneous_specialty_retail"
            | "mobile_home_dealers"
            | "motion_picture_theaters"
            | "motor_freight_carriers_and_trucking"
            | "motor_homes_dealers"
            | "motor_vehicle_supplies_and_new_parts"
            | "motorcycle_shops_and_dealers"
            | "motorcycle_shops_dealers"
            | "music_stores_musical_instruments_pianos_and_sheet_music"
            | "news_dealers_and_newsstands"
            | "non_fi_money_orders"
            | "non_fi_stored_value_card_purchase_load"
            | "nondurable_goods"
            | "nurseries_lawn_and_garden_supply_stores"
            | "nursing_personal_care"
            | "office_and_commercial_furniture"
            | "opticians_eyeglasses"
            | "optometrists_ophthalmologist"
            | "orthopedic_goods_prosthetic_devices"
            | "osteopaths"
            | "package_stores_beer_wine_and_liquor"
            | "paints_varnishes_and_supplies"
            | "parking_lots_garages"
            | "passenger_railways"
            | "pawn_shops"
            | "pet_shops_pet_food_and_supplies"
            | "petroleum_and_petroleum_products"
            | "photo_developing"
            | "photographic_photocopy_microfilm_equipment_and_supplies"
            | "photographic_studios"
            | "picture_video_production"
            | "piece_goods_notions_and_other_dry_goods"
            | "plumbing_heating_equipment_and_supplies"
            | "political_organizations"
            | "postal_services_government_only"
            | "precious_stones_and_metals_watches_and_jewelry"
            | "professional_services"
            | "public_warehousing_and_storage"
            | "quick_copy_repro_and_blueprint"
            | "railroads"
            | "real_estate_agents_and_managers_rentals"
            | "record_stores"
            | "recreational_vehicle_rentals"
            | "religious_goods_stores"
            | "religious_organizations"
            | "roofing_siding_sheet_metal"
            | "secretarial_support_services"
            | "security_brokers_dealers"
            | "service_stations"
            | "sewing_needlework_fabric_and_piece_goods_stores"
            | "shoe_repair_hat_cleaning"
            | "shoe_stores"
            | "small_appliance_repair"
            | "snowmobile_dealers"
            | "special_trade_services"
            | "specialty_cleaning"
            | "sporting_goods_stores"
            | "sporting_recreation_camps"
            | "sports_and_riding_apparel_stores"
            | "sports_clubs_fields"
            | "stamp_and_coin_stores"
            | "stationary_office_supplies_printing_and_writing_paper"
            | "stationery_stores_office_and_school_supply_stores"
            | "swimming_pools_sales"
            | "t_ui_travel_germany"
            | "tailors_alterations"
            | "tax_payments_government_agencies"
            | "tax_preparation_services"
            | "taxicabs_limousines"
            | "telecommunication_equipment_and_telephone_sales"
            | "telecommunication_services"
            | "telegraph_services"
            | "tent_and_awning_shops"
            | "testing_laboratories"
            | "theatrical_ticket_agencies"
            | "timeshares"
            | "tire_retreading_and_repair"
            | "tolls_bridge_fees"
            | "tourist_attractions_and_exhibits"
            | "towing_services"
            | "trailer_parks_campgrounds"
            | "transportation_services"
            | "travel_agencies_tour_operators"
            | "truck_stop_iteration"
            | "truck_utility_trailer_rentals"
            | "typesetting_plate_making_and_related_services"
            | "typewriter_stores"
            | "u_s_federal_government_agencies_or_departments"
            | "uniforms_commercial_clothing"
            | "used_merchandise_and_secondhand_stores"
            | "utilities"
            | "variety_stores"
            | "veterinary_services"
            | "video_amusement_game_supplies"
            | "video_game_arcades"
            | "video_tape_rental_stores"
            | "vocational_trade_schools"
            | "watch_jewelry_repair"
            | "welding_repair"
            | "wholesale_clubs"
            | "wig_and_toupee_stores"
            | "wires_money_orders"
            | "womens_accessory_and_specialty_shops"
            | "womens_ready_to_wear_stores"
            | "wrecking_and_salvage_yards"
          )[];
          spending_limits?: {
            amount: number;
            categories?: (
              | "ac_refrigeration_repair"
              | "accounting_bookkeeping_services"
              | "advertising_services"
              | "agricultural_cooperative"
              | "airlines_air_carriers"
              | "airports_flying_fields"
              | "ambulance_services"
              | "amusement_parks_carnivals"
              | "antique_reproductions"
              | "antique_shops"
              | "aquariums"
              | "architectural_surveying_services"
              | "art_dealers_and_galleries"
              | "artists_supply_and_craft_shops"
              | "auto_and_home_supply_stores"
              | "auto_body_repair_shops"
              | "auto_paint_shops"
              | "auto_service_shops"
              | "automated_cash_disburse"
              | "automated_fuel_dispensers"
              | "automobile_associations"
              | "automotive_parts_and_accessories_stores"
              | "automotive_tire_stores"
              | "bail_and_bond_payments"
              | "bakeries"
              | "bands_orchestras"
              | "barber_and_beauty_shops"
              | "betting_casino_gambling"
              | "bicycle_shops"
              | "billiard_pool_establishments"
              | "boat_dealers"
              | "boat_rentals_and_leases"
              | "book_stores"
              | "books_periodicals_and_newspapers"
              | "bowling_alleys"
              | "bus_lines"
              | "business_secretarial_schools"
              | "buying_shopping_services"
              | "cable_satellite_and_other_pay_television_and_radio"
              | "camera_and_photographic_supply_stores"
              | "candy_nut_and_confectionery_stores"
              | "car_and_truck_dealers_new_used"
              | "car_and_truck_dealers_used_only"
              | "car_rental_agencies"
              | "car_washes"
              | "carpentry_services"
              | "carpet_upholstery_cleaning"
              | "caterers"
              | "charitable_and_social_service_organizations_fundraising"
              | "chemicals_and_allied_products"
              | "child_care_services"
              | "childrens_and_infants_wear_stores"
              | "chiropodists_podiatrists"
              | "chiropractors"
              | "cigar_stores_and_stands"
              | "civic_social_fraternal_associations"
              | "cleaning_and_maintenance"
              | "clothing_rental"
              | "colleges_universities"
              | "commercial_equipment"
              | "commercial_footwear"
              | "commercial_photography_art_and_graphics"
              | "commuter_transport_and_ferries"
              | "computer_network_services"
              | "computer_programming"
              | "computer_repair"
              | "computer_software_stores"
              | "computers_peripherals_and_software"
              | "concrete_work_services"
              | "construction_materials"
              | "consulting_public_relations"
              | "correspondence_schools"
              | "cosmetic_stores"
              | "counseling_services"
              | "country_clubs"
              | "courier_services"
              | "court_costs"
              | "credit_reporting_agencies"
              | "cruise_lines"
              | "dairy_products_stores"
              | "dance_hall_studios_schools"
              | "dating_escort_services"
              | "dentists_orthodontists"
              | "department_stores"
              | "detective_agencies"
              | "digital_goods_applications"
              | "digital_goods_games"
              | "digital_goods_large_volume"
              | "digital_goods_media"
              | "direct_marketing_catalog_merchant"
              | "direct_marketing_combination_catalog_and_retail_merchant"
              | "direct_marketing_inbound_telemarketing"
              | "direct_marketing_insurance_services"
              | "direct_marketing_other"
              | "direct_marketing_outbound_telemarketing"
              | "direct_marketing_subscription"
              | "direct_marketing_travel"
              | "discount_stores"
              | "doctors"
              | "door_to_door_sales"
              | "drapery_window_covering_and_upholstery_stores"
              | "drinking_places"
              | "drug_stores_and_pharmacies"
              | "drugs_drug_proprietaries_and_druggist_sundries"
              | "dry_cleaners"
              | "durable_goods"
              | "duty_free_stores"
              | "eating_places_restaurants"
              | "educational_services"
              | "electric_razor_stores"
              | "electrical_parts_and_equipment"
              | "electrical_services"
              | "electronics_repair_shops"
              | "electronics_stores"
              | "elementary_secondary_schools"
              | "employment_temp_agencies"
              | "equipment_rental"
              | "exterminating_services"
              | "family_clothing_stores"
              | "fast_food_restaurants"
              | "financial_institutions"
              | "fines_government_administrative_entities"
              | "fireplace_fireplace_screens_and_accessories_stores"
              | "floor_covering_stores"
              | "florists"
              | "florists_supplies_nursery_stock_and_flowers"
              | "freezer_and_locker_meat_provisioners"
              | "fuel_dealers_non_automotive"
              | "funeral_services_crematories"
              | "furniture_home_furnishings_and_equipment_stores_except_appliances"
              | "furniture_repair_refinishing"
              | "furriers_and_fur_shops"
              | "general_services"
              | "gift_card_novelty_and_souvenir_shops"
              | "glass_paint_and_wallpaper_stores"
              | "glassware_crystal_stores"
              | "golf_courses_public"
              | "government_services"
              | "grocery_stores_supermarkets"
              | "hardware_equipment_and_supplies"
              | "hardware_stores"
              | "health_and_beauty_spas"
              | "hearing_aids_sales_and_supplies"
              | "heating_plumbing_a_c"
              | "hobby_toy_and_game_shops"
              | "home_supply_warehouse_stores"
              | "hospitals"
              | "hotels_motels_and_resorts"
              | "household_appliance_stores"
              | "industrial_supplies"
              | "information_retrieval_services"
              | "insurance_default"
              | "insurance_underwriting_premiums"
              | "intra_company_purchases"
              | "jewelry_stores_watches_clocks_and_silverware_stores"
              | "landscaping_services"
              | "laundries"
              | "laundry_cleaning_services"
              | "legal_services_attorneys"
              | "luggage_and_leather_goods_stores"
              | "lumber_building_materials_stores"
              | "manual_cash_disburse"
              | "marinas_service_and_supplies"
              | "masonry_stonework_and_plaster"
              | "massage_parlors"
              | "medical_and_dental_labs"
              | "medical_dental_ophthalmic_and_hospital_equipment_and_supplies"
              | "medical_services"
              | "membership_organizations"
              | "mens_and_boys_clothing_and_accessories_stores"
              | "mens_womens_clothing_stores"
              | "metal_service_centers"
              | "miscellaneous"
              | "miscellaneous_apparel_and_accessory_shops"
              | "miscellaneous_auto_dealers"
              | "miscellaneous_business_services"
              | "miscellaneous_food_stores"
              | "miscellaneous_general_merchandise"
              | "miscellaneous_general_services"
              | "miscellaneous_home_furnishing_specialty_stores"
              | "miscellaneous_publishing_and_printing"
              | "miscellaneous_recreation_services"
              | "miscellaneous_repair_shops"
              | "miscellaneous_specialty_retail"
              | "mobile_home_dealers"
              | "motion_picture_theaters"
              | "motor_freight_carriers_and_trucking"
              | "motor_homes_dealers"
              | "motor_vehicle_supplies_and_new_parts"
              | "motorcycle_shops_and_dealers"
              | "motorcycle_shops_dealers"
              | "music_stores_musical_instruments_pianos_and_sheet_music"
              | "news_dealers_and_newsstands"
              | "non_fi_money_orders"
              | "non_fi_stored_value_card_purchase_load"
              | "nondurable_goods"
              | "nurseries_lawn_and_garden_supply_stores"
              | "nursing_personal_care"
              | "office_and_commercial_furniture"
              | "opticians_eyeglasses"
              | "optometrists_ophthalmologist"
              | "orthopedic_goods_prosthetic_devices"
              | "osteopaths"
              | "package_stores_beer_wine_and_liquor"
              | "paints_varnishes_and_supplies"
              | "parking_lots_garages"
              | "passenger_railways"
              | "pawn_shops"
              | "pet_shops_pet_food_and_supplies"
              | "petroleum_and_petroleum_products"
              | "photo_developing"
              | "photographic_photocopy_microfilm_equipment_and_supplies"
              | "photographic_studios"
              | "picture_video_production"
              | "piece_goods_notions_and_other_dry_goods"
              | "plumbing_heating_equipment_and_supplies"
              | "political_organizations"
              | "postal_services_government_only"
              | "precious_stones_and_metals_watches_and_jewelry"
              | "professional_services"
              | "public_warehousing_and_storage"
              | "quick_copy_repro_and_blueprint"
              | "railroads"
              | "real_estate_agents_and_managers_rentals"
              | "record_stores"
              | "recreational_vehicle_rentals"
              | "religious_goods_stores"
              | "religious_organizations"
              | "roofing_siding_sheet_metal"
              | "secretarial_support_services"
              | "security_brokers_dealers"
              | "service_stations"
              | "sewing_needlework_fabric_and_piece_goods_stores"
              | "shoe_repair_hat_cleaning"
              | "shoe_stores"
              | "small_appliance_repair"
              | "snowmobile_dealers"
              | "special_trade_services"
              | "specialty_cleaning"
              | "sporting_goods_stores"
              | "sporting_recreation_camps"
              | "sports_and_riding_apparel_stores"
              | "sports_clubs_fields"
              | "stamp_and_coin_stores"
              | "stationary_office_supplies_printing_and_writing_paper"
              | "stationery_stores_office_and_school_supply_stores"
              | "swimming_pools_sales"
              | "t_ui_travel_germany"
              | "tailors_alterations"
              | "tax_payments_government_agencies"
              | "tax_preparation_services"
              | "taxicabs_limousines"
              | "telecommunication_equipment_and_telephone_sales"
              | "telecommunication_services"
              | "telegraph_services"
              | "tent_and_awning_shops"
              | "testing_laboratories"
              | "theatrical_ticket_agencies"
              | "timeshares"
              | "tire_retreading_and_repair"
              | "tolls_bridge_fees"
              | "tourist_attractions_and_exhibits"
              | "towing_services"
              | "trailer_parks_campgrounds"
              | "transportation_services"
              | "travel_agencies_tour_operators"
              | "truck_stop_iteration"
              | "truck_utility_trailer_rentals"
              | "typesetting_plate_making_and_related_services"
              | "typewriter_stores"
              | "u_s_federal_government_agencies_or_departments"
              | "uniforms_commercial_clothing"
              | "used_merchandise_and_secondhand_stores"
              | "utilities"
              | "variety_stores"
              | "veterinary_services"
              | "video_amusement_game_supplies"
              | "video_game_arcades"
              | "video_tape_rental_stores"
              | "vocational_trade_schools"
              | "watch_jewelry_repair"
              | "welding_repair"
              | "wholesale_clubs"
              | "wig_and_toupee_stores"
              | "wires_money_orders"
              | "womens_accessory_and_specialty_shops"
              | "womens_ready_to_wear_stores"
              | "wrecking_and_salvage_yards"
            )[];
            interval: "all_time" | "daily" | "monthly" | "per_authorization" | "weekly" | "yearly";
          }[];
          spending_limits_currency?: string;
        };
        status?: "active" | "inactive";
        type: "company" | "individual";
      },
      params: RequestParams = {},
    ) =>
      this.request<IssuingCardholder, Error>({
        path: `/v1/issuing/cardholders`,
        method: "POST",
        body: data,
        secure: true,
        type: ContentType.UrlEncoded,
        format: "json",
        ...params,
      }),

    /**
     * @description <p>Retrieves an Issuing <code>Cardholder</code> object.</p>
     *
     * @name GetIssuingCardholdersCardholder
     * @request GET:/v1/issuing/cardholders/{cardholder}
     * @secure
     * @response `200` `IssuingCardholder` Successful response.
     * @response `default` `Error` Error response.
     */
    getIssuingCardholdersCardholder: (
      cardholder: string,
      query?: { expand?: string[] },
      data?: CardMandatePaymentMethodDetails,
      params: RequestParams = {},
    ) =>
      this.request<IssuingCardholder, Error>({
        path: `/v1/issuing/cardholders/${cardholder}`,
        method: "GET",
        query: query,
        body: data,
        secure: true,
        type: ContentType.UrlEncoded,
        format: "json",
        ...params,
      }),

    /**
     * @description <p>Updates the specified Issuing <code>Cardholder</code> object by setting the values of the parameters passed. Any parameters not provided will be left unchanged.</p>
     *
     * @name PostIssuingCardholdersCardholder
     * @request POST:/v1/issuing/cardholders/{cardholder}
     * @secure
     * @response `200` `IssuingCardholder` Successful response.
     * @response `default` `Error` Error response.
     */
    postIssuingCardholdersCardholder: (
      cardholder: string,
      data?: {
        billing?: {
          address: {
            city: string;
            country: string;
            line1: string;
            line2?: string;
            postal_code: string;
            state?: string;
          };
        };
        company?: { tax_id?: string };
        email?: string;
        expand?: string[];
        individual?: {
          dob?: { day: number; month: number; year: number };
          first_name: string;
          last_name: string;
          verification?: { document?: { back?: string; front?: string } };
        };
        metadata?: Record<string, string>;
        phone_number?: string;
        spending_controls?: {
          allowed_categories?: (
            | "ac_refrigeration_repair"
            | "accounting_bookkeeping_services"
            | "advertising_services"
            | "agricultural_cooperative"
            | "airlines_air_carriers"
            | "airports_flying_fields"
            | "ambulance_services"
            | "amusement_parks_carnivals"
            | "antique_reproductions"
            | "antique_shops"
            | "aquariums"
            | "architectural_surveying_services"
            | "art_dealers_and_galleries"
            | "artists_supply_and_craft_shops"
            | "auto_and_home_supply_stores"
            | "auto_body_repair_shops"
            | "auto_paint_shops"
            | "auto_service_shops"
            | "automated_cash_disburse"
            | "automated_fuel_dispensers"
            | "automobile_associations"
            | "automotive_parts_and_accessories_stores"
            | "automotive_tire_stores"
            | "bail_and_bond_payments"
            | "bakeries"
            | "bands_orchestras"
            | "barber_and_beauty_shops"
            | "betting_casino_gambling"
            | "bicycle_shops"
            | "billiard_pool_establishments"
            | "boat_dealers"
            | "boat_rentals_and_leases"
            | "book_stores"
            | "books_periodicals_and_newspapers"
            | "bowling_alleys"
            | "bus_lines"
            | "business_secretarial_schools"
            | "buying_shopping_services"
            | "cable_satellite_and_other_pay_television_and_radio"
            | "camera_and_photographic_supply_stores"
            | "candy_nut_and_confectionery_stores"
            | "car_and_truck_dealers_new_used"
            | "car_and_truck_dealers_used_only"
            | "car_rental_agencies"
            | "car_washes"
            | "carpentry_services"
            | "carpet_upholstery_cleaning"
            | "caterers"
            | "charitable_and_social_service_organizations_fundraising"
            | "chemicals_and_allied_products"
            | "child_care_services"
            | "childrens_and_infants_wear_stores"
            | "chiropodists_podiatrists"
            | "chiropractors"
            | "cigar_stores_and_stands"
            | "civic_social_fraternal_associations"
            | "cleaning_and_maintenance"
            | "clothing_rental"
            | "colleges_universities"
            | "commercial_equipment"
            | "commercial_footwear"
            | "commercial_photography_art_and_graphics"
            | "commuter_transport_and_ferries"
            | "computer_network_services"
            | "computer_programming"
            | "computer_repair"
            | "computer_software_stores"
            | "computers_peripherals_and_software"
            | "concrete_work_services"
            | "construction_materials"
            | "consulting_public_relations"
            | "correspondence_schools"
            | "cosmetic_stores"
            | "counseling_services"
            | "country_clubs"
            | "courier_services"
            | "court_costs"
            | "credit_reporting_agencies"
            | "cruise_lines"
            | "dairy_products_stores"
            | "dance_hall_studios_schools"
            | "dating_escort_services"
            | "dentists_orthodontists"
            | "department_stores"
            | "detective_agencies"
            | "digital_goods_applications"
            | "digital_goods_games"
            | "digital_goods_large_volume"
            | "digital_goods_media"
            | "direct_marketing_catalog_merchant"
            | "direct_marketing_combination_catalog_and_retail_merchant"
            | "direct_marketing_inbound_telemarketing"
            | "direct_marketing_insurance_services"
            | "direct_marketing_other"
            | "direct_marketing_outbound_telemarketing"
            | "direct_marketing_subscription"
            | "direct_marketing_travel"
            | "discount_stores"
            | "doctors"
            | "door_to_door_sales"
            | "drapery_window_covering_and_upholstery_stores"
            | "drinking_places"
            | "drug_stores_and_pharmacies"
            | "drugs_drug_proprietaries_and_druggist_sundries"
            | "dry_cleaners"
            | "durable_goods"
            | "duty_free_stores"
            | "eating_places_restaurants"
            | "educational_services"
            | "electric_razor_stores"
            | "electrical_parts_and_equipment"
            | "electrical_services"
            | "electronics_repair_shops"
            | "electronics_stores"
            | "elementary_secondary_schools"
            | "employment_temp_agencies"
            | "equipment_rental"
            | "exterminating_services"
            | "family_clothing_stores"
            | "fast_food_restaurants"
            | "financial_institutions"
            | "fines_government_administrative_entities"
            | "fireplace_fireplace_screens_and_accessories_stores"
            | "floor_covering_stores"
            | "florists"
            | "florists_supplies_nursery_stock_and_flowers"
            | "freezer_and_locker_meat_provisioners"
            | "fuel_dealers_non_automotive"
            | "funeral_services_crematories"
            | "furniture_home_furnishings_and_equipment_stores_except_appliances"
            | "furniture_repair_refinishing"
            | "furriers_and_fur_shops"
            | "general_services"
            | "gift_card_novelty_and_souvenir_shops"
            | "glass_paint_and_wallpaper_stores"
            | "glassware_crystal_stores"
            | "golf_courses_public"
            | "government_services"
            | "grocery_stores_supermarkets"
            | "hardware_equipment_and_supplies"
            | "hardware_stores"
            | "health_and_beauty_spas"
            | "hearing_aids_sales_and_supplies"
            | "heating_plumbing_a_c"
            | "hobby_toy_and_game_shops"
            | "home_supply_warehouse_stores"
            | "hospitals"
            | "hotels_motels_and_resorts"
            | "household_appliance_stores"
            | "industrial_supplies"
            | "information_retrieval_services"
            | "insurance_default"
            | "insurance_underwriting_premiums"
            | "intra_company_purchases"
            | "jewelry_stores_watches_clocks_and_silverware_stores"
            | "landscaping_services"
            | "laundries"
            | "laundry_cleaning_services"
            | "legal_services_attorneys"
            | "luggage_and_leather_goods_stores"
            | "lumber_building_materials_stores"
            | "manual_cash_disburse"
            | "marinas_service_and_supplies"
            | "masonry_stonework_and_plaster"
            | "massage_parlors"
            | "medical_and_dental_labs"
            | "medical_dental_ophthalmic_and_hospital_equipment_and_supplies"
            | "medical_services"
            | "membership_organizations"
            | "mens_and_boys_clothing_and_accessories_stores"
            | "mens_womens_clothing_stores"
            | "metal_service_centers"
            | "miscellaneous"
            | "miscellaneous_apparel_and_accessory_shops"
            | "miscellaneous_auto_dealers"
            | "miscellaneous_business_services"
            | "miscellaneous_food_stores"
            | "miscellaneous_general_merchandise"
            | "miscellaneous_general_services"
            | "miscellaneous_home_furnishing_specialty_stores"
            | "miscellaneous_publishing_and_printing"
            | "miscellaneous_recreation_services"
            | "miscellaneous_repair_shops"
            | "miscellaneous_specialty_retail"
            | "mobile_home_dealers"
            | "motion_picture_theaters"
            | "motor_freight_carriers_and_trucking"
            | "motor_homes_dealers"
            | "motor_vehicle_supplies_and_new_parts"
            | "motorcycle_shops_and_dealers"
            | "motorcycle_shops_dealers"
            | "music_stores_musical_instruments_pianos_and_sheet_music"
            | "news_dealers_and_newsstands"
            | "non_fi_money_orders"
            | "non_fi_stored_value_card_purchase_load"
            | "nondurable_goods"
            | "nurseries_lawn_and_garden_supply_stores"
            | "nursing_personal_care"
            | "office_and_commercial_furniture"
            | "opticians_eyeglasses"
            | "optometrists_ophthalmologist"
            | "orthopedic_goods_prosthetic_devices"
            | "osteopaths"
            | "package_stores_beer_wine_and_liquor"
            | "paints_varnishes_and_supplies"
            | "parking_lots_garages"
            | "passenger_railways"
            | "pawn_shops"
            | "pet_shops_pet_food_and_supplies"
            | "petroleum_and_petroleum_products"
            | "photo_developing"
            | "photographic_photocopy_microfilm_equipment_and_supplies"
            | "photographic_studios"
            | "picture_video_production"
            | "piece_goods_notions_and_other_dry_goods"
            | "plumbing_heating_equipment_and_supplies"
            | "political_organizations"
            | "postal_services_government_only"
            | "precious_stones_and_metals_watches_and_jewelry"
            | "professional_services"
            | "public_warehousing_and_storage"
            | "quick_copy_repro_and_blueprint"
            | "railroads"
            | "real_estate_agents_and_managers_rentals"
            | "record_stores"
            | "recreational_vehicle_rentals"
            | "religious_goods_stores"
            | "religious_organizations"
            | "roofing_siding_sheet_metal"
            | "secretarial_support_services"
            | "security_brokers_dealers"
            | "service_stations"
            | "sewing_needlework_fabric_and_piece_goods_stores"
            | "shoe_repair_hat_cleaning"
            | "shoe_stores"
            | "small_appliance_repair"
            | "snowmobile_dealers"
            | "special_trade_services"
            | "specialty_cleaning"
            | "sporting_goods_stores"
            | "sporting_recreation_camps"
            | "sports_and_riding_apparel_stores"
            | "sports_clubs_fields"
            | "stamp_and_coin_stores"
            | "stationary_office_supplies_printing_and_writing_paper"
            | "stationery_stores_office_and_school_supply_stores"
            | "swimming_pools_sales"
            | "t_ui_travel_germany"
            | "tailors_alterations"
            | "tax_payments_government_agencies"
            | "tax_preparation_services"
            | "taxicabs_limousines"
            | "telecommunication_equipment_and_telephone_sales"
            | "telecommunication_services"
            | "telegraph_services"
            | "tent_and_awning_shops"
            | "testing_laboratories"
            | "theatrical_ticket_agencies"
            | "timeshares"
            | "tire_retreading_and_repair"
            | "tolls_bridge_fees"
            | "tourist_attractions_and_exhibits"
            | "towing_services"
            | "trailer_parks_campgrounds"
            | "transportation_services"
            | "travel_agencies_tour_operators"
            | "truck_stop_iteration"
            | "truck_utility_trailer_rentals"
            | "typesetting_plate_making_and_related_services"
            | "typewriter_stores"
            | "u_s_federal_government_agencies_or_departments"
            | "uniforms_commercial_clothing"
            | "used_merchandise_and_secondhand_stores"
            | "utilities"
            | "variety_stores"
            | "veterinary_services"
            | "video_amusement_game_supplies"
            | "video_game_arcades"
            | "video_tape_rental_stores"
            | "vocational_trade_schools"
            | "watch_jewelry_repair"
            | "welding_repair"
            | "wholesale_clubs"
            | "wig_and_toupee_stores"
            | "wires_money_orders"
            | "womens_accessory_and_specialty_shops"
            | "womens_ready_to_wear_stores"
            | "wrecking_and_salvage_yards"
          )[];
          blocked_categories?: (
            | "ac_refrigeration_repair"
            | "accounting_bookkeeping_services"
            | "advertising_services"
            | "agricultural_cooperative"
            | "airlines_air_carriers"
            | "airports_flying_fields"
            | "ambulance_services"
            | "amusement_parks_carnivals"
            | "antique_reproductions"
            | "antique_shops"
            | "aquariums"
            | "architectural_surveying_services"
            | "art_dealers_and_galleries"
            | "artists_supply_and_craft_shops"
            | "auto_and_home_supply_stores"
            | "auto_body_repair_shops"
            | "auto_paint_shops"
            | "auto_service_shops"
            | "automated_cash_disburse"
            | "automated_fuel_dispensers"
            | "automobile_associations"
            | "automotive_parts_and_accessories_stores"
            | "automotive_tire_stores"
            | "bail_and_bond_payments"
            | "bakeries"
            | "bands_orchestras"
            | "barber_and_beauty_shops"
            | "betting_casino_gambling"
            | "bicycle_shops"
            | "billiard_pool_establishments"
            | "boat_dealers"
            | "boat_rentals_and_leases"
            | "book_stores"
            | "books_periodicals_and_newspapers"
            | "bowling_alleys"
            | "bus_lines"
            | "business_secretarial_schools"
            | "buying_shopping_services"
            | "cable_satellite_and_other_pay_television_and_radio"
            | "camera_and_photographic_supply_stores"
            | "candy_nut_and_confectionery_stores"
            | "car_and_truck_dealers_new_used"
            | "car_and_truck_dealers_used_only"
            | "car_rental_agencies"
            | "car_washes"
            | "carpentry_services"
            | "carpet_upholstery_cleaning"
            | "caterers"
            | "charitable_and_social_service_organizations_fundraising"
            | "chemicals_and_allied_products"
            | "child_care_services"
            | "childrens_and_infants_wear_stores"
            | "chiropodists_podiatrists"
            | "chiropractors"
            | "cigar_stores_and_stands"
            | "civic_social_fraternal_associations"
            | "cleaning_and_maintenance"
            | "clothing_rental"
            | "colleges_universities"
            | "commercial_equipment"
            | "commercial_footwear"
            | "commercial_photography_art_and_graphics"
            | "commuter_transport_and_ferries"
            | "computer_network_services"
            | "computer_programming"
            | "computer_repair"
            | "computer_software_stores"
            | "computers_peripherals_and_software"
            | "concrete_work_services"
            | "construction_materials"
            | "consulting_public_relations"
            | "correspondence_schools"
            | "cosmetic_stores"
            | "counseling_services"
            | "country_clubs"
            | "courier_services"
            | "court_costs"
            | "credit_reporting_agencies"
            | "cruise_lines"
            | "dairy_products_stores"
            | "dance_hall_studios_schools"
            | "dating_escort_services"
            | "dentists_orthodontists"
            | "department_stores"
            | "detective_agencies"
            | "digital_goods_applications"
            | "digital_goods_games"
            | "digital_goods_large_volume"
            | "digital_goods_media"
            | "direct_marketing_catalog_merchant"
            | "direct_marketing_combination_catalog_and_retail_merchant"
            | "direct_marketing_inbound_telemarketing"
            | "direct_marketing_insurance_services"
            | "direct_marketing_other"
            | "direct_marketing_outbound_telemarketing"
            | "direct_marketing_subscription"
            | "direct_marketing_travel"
            | "discount_stores"
            | "doctors"
            | "door_to_door_sales"
            | "drapery_window_covering_and_upholstery_stores"
            | "drinking_places"
            | "drug_stores_and_pharmacies"
            | "drugs_drug_proprietaries_and_druggist_sundries"
            | "dry_cleaners"
            | "durable_goods"
            | "duty_free_stores"
            | "eating_places_restaurants"
            | "educational_services"
            | "electric_razor_stores"
            | "electrical_parts_and_equipment"
            | "electrical_services"
            | "electronics_repair_shops"
            | "electronics_stores"
            | "elementary_secondary_schools"
            | "employment_temp_agencies"
            | "equipment_rental"
            | "exterminating_services"
            | "family_clothing_stores"
            | "fast_food_restaurants"
            | "financial_institutions"
            | "fines_government_administrative_entities"
            | "fireplace_fireplace_screens_and_accessories_stores"
            | "floor_covering_stores"
            | "florists"
            | "florists_supplies_nursery_stock_and_flowers"
            | "freezer_and_locker_meat_provisioners"
            | "fuel_dealers_non_automotive"
            | "funeral_services_crematories"
            | "furniture_home_furnishings_and_equipment_stores_except_appliances"
            | "furniture_repair_refinishing"
            | "furriers_and_fur_shops"
            | "general_services"
            | "gift_card_novelty_and_souvenir_shops"
            | "glass_paint_and_wallpaper_stores"
            | "glassware_crystal_stores"
            | "golf_courses_public"
            | "government_services"
            | "grocery_stores_supermarkets"
            | "hardware_equipment_and_supplies"
            | "hardware_stores"
            | "health_and_beauty_spas"
            | "hearing_aids_sales_and_supplies"
            | "heating_plumbing_a_c"
            | "hobby_toy_and_game_shops"
            | "home_supply_warehouse_stores"
            | "hospitals"
            | "hotels_motels_and_resorts"
            | "household_appliance_stores"
            | "industrial_supplies"
            | "information_retrieval_services"
            | "insurance_default"
            | "insurance_underwriting_premiums"
            | "intra_company_purchases"
            | "jewelry_stores_watches_clocks_and_silverware_stores"
            | "landscaping_services"
            | "laundries"
            | "laundry_cleaning_services"
            | "legal_services_attorneys"
            | "luggage_and_leather_goods_stores"
            | "lumber_building_materials_stores"
            | "manual_cash_disburse"
            | "marinas_service_and_supplies"
            | "masonry_stonework_and_plaster"
            | "massage_parlors"
            | "medical_and_dental_labs"
            | "medical_dental_ophthalmic_and_hospital_equipment_and_supplies"
            | "medical_services"
            | "membership_organizations"
            | "mens_and_boys_clothing_and_accessories_stores"
            | "mens_womens_clothing_stores"
            | "metal_service_centers"
            | "miscellaneous"
            | "miscellaneous_apparel_and_accessory_shops"
            | "miscellaneous_auto_dealers"
            | "miscellaneous_business_services"
            | "miscellaneous_food_stores"
            | "miscellaneous_general_merchandise"
            | "miscellaneous_general_services"
            | "miscellaneous_home_furnishing_specialty_stores"
            | "miscellaneous_publishing_and_printing"
            | "miscellaneous_recreation_services"
            | "miscellaneous_repair_shops"
            | "miscellaneous_specialty_retail"
            | "mobile_home_dealers"
            | "motion_picture_theaters"
            | "motor_freight_carriers_and_trucking"
            | "motor_homes_dealers"
            | "motor_vehicle_supplies_and_new_parts"
            | "motorcycle_shops_and_dealers"
            | "motorcycle_shops_dealers"
            | "music_stores_musical_instruments_pianos_and_sheet_music"
            | "news_dealers_and_newsstands"
            | "non_fi_money_orders"
            | "non_fi_stored_value_card_purchase_load"
            | "nondurable_goods"
            | "nurseries_lawn_and_garden_supply_stores"
            | "nursing_personal_care"
            | "office_and_commercial_furniture"
            | "opticians_eyeglasses"
            | "optometrists_ophthalmologist"
            | "orthopedic_goods_prosthetic_devices"
            | "osteopaths"
            | "package_stores_beer_wine_and_liquor"
            | "paints_varnishes_and_supplies"
            | "parking_lots_garages"
            | "passenger_railways"
            | "pawn_shops"
            | "pet_shops_pet_food_and_supplies"
            | "petroleum_and_petroleum_products"
            | "photo_developing"
            | "photographic_photocopy_microfilm_equipment_and_supplies"
            | "photographic_studios"
            | "picture_video_production"
            | "piece_goods_notions_and_other_dry_goods"
            | "plumbing_heating_equipment_and_supplies"
            | "political_organizations"
            | "postal_services_government_only"
            | "precious_stones_and_metals_watches_and_jewelry"
            | "professional_services"
            | "public_warehousing_and_storage"
            | "quick_copy_repro_and_blueprint"
            | "railroads"
            | "real_estate_agents_and_managers_rentals"
            | "record_stores"
            | "recreational_vehicle_rentals"
            | "religious_goods_stores"
            | "religious_organizations"
            | "roofing_siding_sheet_metal"
            | "secretarial_support_services"
            | "security_brokers_dealers"
            | "service_stations"
            | "sewing_needlework_fabric_and_piece_goods_stores"
            | "shoe_repair_hat_cleaning"
            | "shoe_stores"
            | "small_appliance_repair"
            | "snowmobile_dealers"
            | "special_trade_services"
            | "specialty_cleaning"
            | "sporting_goods_stores"
            | "sporting_recreation_camps"
            | "sports_and_riding_apparel_stores"
            | "sports_clubs_fields"
            | "stamp_and_coin_stores"
            | "stationary_office_supplies_printing_and_writing_paper"
            | "stationery_stores_office_and_school_supply_stores"
            | "swimming_pools_sales"
            | "t_ui_travel_germany"
            | "tailors_alterations"
            | "tax_payments_government_agencies"
            | "tax_preparation_services"
            | "taxicabs_limousines"
            | "telecommunication_equipment_and_telephone_sales"
            | "telecommunication_services"
            | "telegraph_services"
            | "tent_and_awning_shops"
            | "testing_laboratories"
            | "theatrical_ticket_agencies"
            | "timeshares"
            | "tire_retreading_and_repair"
            | "tolls_bridge_fees"
            | "tourist_attractions_and_exhibits"
            | "towing_services"
            | "trailer_parks_campgrounds"
            | "transportation_services"
            | "travel_agencies_tour_operators"
            | "truck_stop_iteration"
            | "truck_utility_trailer_rentals"
            | "typesetting_plate_making_and_related_services"
            | "typewriter_stores"
            | "u_s_federal_government_agencies_or_departments"
            | "uniforms_commercial_clothing"
            | "used_merchandise_and_secondhand_stores"
            | "utilities"
            | "variety_stores"
            | "veterinary_services"
            | "video_amusement_game_supplies"
            | "video_game_arcades"
            | "video_tape_rental_stores"
            | "vocational_trade_schools"
            | "watch_jewelry_repair"
            | "welding_repair"
            | "wholesale_clubs"
            | "wig_and_toupee_stores"
            | "wires_money_orders"
            | "womens_accessory_and_specialty_shops"
            | "womens_ready_to_wear_stores"
            | "wrecking_and_salvage_yards"
          )[];
          spending_limits?: {
            amount: number;
            categories?: (
              | "ac_refrigeration_repair"
              | "accounting_bookkeeping_services"
              | "advertising_services"
              | "agricultural_cooperative"
              | "airlines_air_carriers"
              | "airports_flying_fields"
              | "ambulance_services"
              | "amusement_parks_carnivals"
              | "antique_reproductions"
              | "antique_shops"
              | "aquariums"
              | "architectural_surveying_services"
              | "art_dealers_and_galleries"
              | "artists_supply_and_craft_shops"
              | "auto_and_home_supply_stores"
              | "auto_body_repair_shops"
              | "auto_paint_shops"
              | "auto_service_shops"
              | "automated_cash_disburse"
              | "automated_fuel_dispensers"
              | "automobile_associations"
              | "automotive_parts_and_accessories_stores"
              | "automotive_tire_stores"
              | "bail_and_bond_payments"
              | "bakeries"
              | "bands_orchestras"
              | "barber_and_beauty_shops"
              | "betting_casino_gambling"
              | "bicycle_shops"
              | "billiard_pool_establishments"
              | "boat_dealers"
              | "boat_rentals_and_leases"
              | "book_stores"
              | "books_periodicals_and_newspapers"
              | "bowling_alleys"
              | "bus_lines"
              | "business_secretarial_schools"
              | "buying_shopping_services"
              | "cable_satellite_and_other_pay_television_and_radio"
              | "camera_and_photographic_supply_stores"
              | "candy_nut_and_confectionery_stores"
              | "car_and_truck_dealers_new_used"
              | "car_and_truck_dealers_used_only"
              | "car_rental_agencies"
              | "car_washes"
              | "carpentry_services"
              | "carpet_upholstery_cleaning"
              | "caterers"
              | "charitable_and_social_service_organizations_fundraising"
              | "chemicals_and_allied_products"
              | "child_care_services"
              | "childrens_and_infants_wear_stores"
              | "chiropodists_podiatrists"
              | "chiropractors"
              | "cigar_stores_and_stands"
              | "civic_social_fraternal_associations"
              | "cleaning_and_maintenance"
              | "clothing_rental"
              | "colleges_universities"
              | "commercial_equipment"
              | "commercial_footwear"
              | "commercial_photography_art_and_graphics"
              | "commuter_transport_and_ferries"
              | "computer_network_services"
              | "computer_programming"
              | "computer_repair"
              | "computer_software_stores"
              | "computers_peripherals_and_software"
              | "concrete_work_services"
              | "construction_materials"
              | "consulting_public_relations"
              | "correspondence_schools"
              | "cosmetic_stores"
              | "counseling_services"
              | "country_clubs"
              | "courier_services"
              | "court_costs"
              | "credit_reporting_agencies"
              | "cruise_lines"
              | "dairy_products_stores"
              | "dance_hall_studios_schools"
              | "dating_escort_services"
              | "dentists_orthodontists"
              | "department_stores"
              | "detective_agencies"
              | "digital_goods_applications"
              | "digital_goods_games"
              | "digital_goods_large_volume"
              | "digital_goods_media"
              | "direct_marketing_catalog_merchant"
              | "direct_marketing_combination_catalog_and_retail_merchant"
              | "direct_marketing_inbound_telemarketing"
              | "direct_marketing_insurance_services"
              | "direct_marketing_other"
              | "direct_marketing_outbound_telemarketing"
              | "direct_marketing_subscription"
              | "direct_marketing_travel"
              | "discount_stores"
              | "doctors"
              | "door_to_door_sales"
              | "drapery_window_covering_and_upholstery_stores"
              | "drinking_places"
              | "drug_stores_and_pharmacies"
              | "drugs_drug_proprietaries_and_druggist_sundries"
              | "dry_cleaners"
              | "durable_goods"
              | "duty_free_stores"
              | "eating_places_restaurants"
              | "educational_services"
              | "electric_razor_stores"
              | "electrical_parts_and_equipment"
              | "electrical_services"
              | "electronics_repair_shops"
              | "electronics_stores"
              | "elementary_secondary_schools"
              | "employment_temp_agencies"
              | "equipment_rental"
              | "exterminating_services"
              | "family_clothing_stores"
              | "fast_food_restaurants"
              | "financial_institutions"
              | "fines_government_administrative_entities"
              | "fireplace_fireplace_screens_and_accessories_stores"
              | "floor_covering_stores"
              | "florists"
              | "florists_supplies_nursery_stock_and_flowers"
              | "freezer_and_locker_meat_provisioners"
              | "fuel_dealers_non_automotive"
              | "funeral_services_crematories"
              | "furniture_home_furnishings_and_equipment_stores_except_appliances"
              | "furniture_repair_refinishing"
              | "furriers_and_fur_shops"
              | "general_services"
              | "gift_card_novelty_and_souvenir_shops"
              | "glass_paint_and_wallpaper_stores"
              | "glassware_crystal_stores"
              | "golf_courses_public"
              | "government_services"
              | "grocery_stores_supermarkets"
              | "hardware_equipment_and_supplies"
              | "hardware_stores"
              | "health_and_beauty_spas"
              | "hearing_aids_sales_and_supplies"
              | "heating_plumbing_a_c"
              | "hobby_toy_and_game_shops"
              | "home_supply_warehouse_stores"
              | "hospitals"
              | "hotels_motels_and_resorts"
              | "household_appliance_stores"
              | "industrial_supplies"
              | "information_retrieval_services"
              | "insurance_default"
              | "insurance_underwriting_premiums"
              | "intra_company_purchases"
              | "jewelry_stores_watches_clocks_and_silverware_stores"
              | "landscaping_services"
              | "laundries"
              | "laundry_cleaning_services"
              | "legal_services_attorneys"
              | "luggage_and_leather_goods_stores"
              | "lumber_building_materials_stores"
              | "manual_cash_disburse"
              | "marinas_service_and_supplies"
              | "masonry_stonework_and_plaster"
              | "massage_parlors"
              | "medical_and_dental_labs"
              | "medical_dental_ophthalmic_and_hospital_equipment_and_supplies"
              | "medical_services"
              | "membership_organizations"
              | "mens_and_boys_clothing_and_accessories_stores"
              | "mens_womens_clothing_stores"
              | "metal_service_centers"
              | "miscellaneous"
              | "miscellaneous_apparel_and_accessory_shops"
              | "miscellaneous_auto_dealers"
              | "miscellaneous_business_services"
              | "miscellaneous_food_stores"
              | "miscellaneous_general_merchandise"
              | "miscellaneous_general_services"
              | "miscellaneous_home_furnishing_specialty_stores"
              | "miscellaneous_publishing_and_printing"
              | "miscellaneous_recreation_services"
              | "miscellaneous_repair_shops"
              | "miscellaneous_specialty_retail"
              | "mobile_home_dealers"
              | "motion_picture_theaters"
              | "motor_freight_carriers_and_trucking"
              | "motor_homes_dealers"
              | "motor_vehicle_supplies_and_new_parts"
              | "motorcycle_shops_and_dealers"
              | "motorcycle_shops_dealers"
              | "music_stores_musical_instruments_pianos_and_sheet_music"
              | "news_dealers_and_newsstands"
              | "non_fi_money_orders"
              | "non_fi_stored_value_card_purchase_load"
              | "nondurable_goods"
              | "nurseries_lawn_and_garden_supply_stores"
              | "nursing_personal_care"
              | "office_and_commercial_furniture"
              | "opticians_eyeglasses"
              | "optometrists_ophthalmologist"
              | "orthopedic_goods_prosthetic_devices"
              | "osteopaths"
              | "package_stores_beer_wine_and_liquor"
              | "paints_varnishes_and_supplies"
              | "parking_lots_garages"
              | "passenger_railways"
              | "pawn_shops"
              | "pet_shops_pet_food_and_supplies"
              | "petroleum_and_petroleum_products"
              | "photo_developing"
              | "photographic_photocopy_microfilm_equipment_and_supplies"
              | "photographic_studios"
              | "picture_video_production"
              | "piece_goods_notions_and_other_dry_goods"
              | "plumbing_heating_equipment_and_supplies"
              | "political_organizations"
              | "postal_services_government_only"
              | "precious_stones_and_metals_watches_and_jewelry"
              | "professional_services"
              | "public_warehousing_and_storage"
              | "quick_copy_repro_and_blueprint"
              | "railroads"
              | "real_estate_agents_and_managers_rentals"
              | "record_stores"
              | "recreational_vehicle_rentals"
              | "religious_goods_stores"
              | "religious_organizations"
              | "roofing_siding_sheet_metal"
              | "secretarial_support_services"
              | "security_brokers_dealers"
              | "service_stations"
              | "sewing_needlework_fabric_and_piece_goods_stores"
              | "shoe_repair_hat_cleaning"
              | "shoe_stores"
              | "small_appliance_repair"
              | "snowmobile_dealers"
              | "special_trade_services"
              | "specialty_cleaning"
              | "sporting_goods_stores"
              | "sporting_recreation_camps"
              | "sports_and_riding_apparel_stores"
              | "sports_clubs_fields"
              | "stamp_and_coin_stores"
              | "stationary_office_supplies_printing_and_writing_paper"
              | "stationery_stores_office_and_school_supply_stores"
              | "swimming_pools_sales"
              | "t_ui_travel_germany"
              | "tailors_alterations"
              | "tax_payments_government_agencies"
              | "tax_preparation_services"
              | "taxicabs_limousines"
              | "telecommunication_equipment_and_telephone_sales"
              | "telecommunication_services"
              | "telegraph_services"
              | "tent_and_awning_shops"
              | "testing_laboratories"
              | "theatrical_ticket_agencies"
              | "timeshares"
              | "tire_retreading_and_repair"
              | "tolls_bridge_fees"
              | "tourist_attractions_and_exhibits"
              | "towing_services"
              | "trailer_parks_campgrounds"
              | "transportation_services"
              | "travel_agencies_tour_operators"
              | "truck_stop_iteration"
              | "truck_utility_trailer_rentals"
              | "typesetting_plate_making_and_related_services"
              | "typewriter_stores"
              | "u_s_federal_government_agencies_or_departments"
              | "uniforms_commercial_clothing"
              | "used_merchandise_and_secondhand_stores"
              | "utilities"
              | "variety_stores"
              | "veterinary_services"
              | "video_amusement_game_supplies"
              | "video_game_arcades"
              | "video_tape_rental_stores"
              | "vocational_trade_schools"
              | "watch_jewelry_repair"
              | "welding_repair"
              | "wholesale_clubs"
              | "wig_and_toupee_stores"
              | "wires_money_orders"
              | "womens_accessory_and_specialty_shops"
              | "womens_ready_to_wear_stores"
              | "wrecking_and_salvage_yards"
            )[];
            interval: "all_time" | "daily" | "monthly" | "per_authorization" | "weekly" | "yearly";
          }[];
          spending_limits_currency?: string;
        };
        status?: "active" | "inactive";
      },
      params: RequestParams = {},
    ) =>
      this.request<IssuingCardholder, Error>({
        path: `/v1/issuing/cardholders/${cardholder}`,
        method: "POST",
        body: data,
        secure: true,
        type: ContentType.UrlEncoded,
        format: "json",
        ...params,
      }),

    /**
     * @description <p>Returns a list of Issuing <code>Card</code> objects. The objects are sorted in descending order by creation date, with the most recently created object appearing first.</p>
     *
     * @name GetIssuingCards
     * @request GET:/v1/issuing/cards
     * @secure
     * @response `200` `{ data: (IssuingCard)[], has_more: boolean, object: "list", url: string }` Successful response.
     * @response `default` `Error` Error response.
     */
    getIssuingCards: (
      query?: {
        cardholder?: string;
        created?: { gt?: number; gte?: number; lt?: number; lte?: number } | number;
        ending_before?: string;
        exp_month?: number;
        exp_year?: number;
        expand?: string[];
        last4?: string;
        limit?: number;
        starting_after?: string;
        status?: "active" | "canceled" | "inactive";
        type?: "physical" | "virtual";
      },
      data?: CardMandatePaymentMethodDetails,
      params: RequestParams = {},
    ) =>
      this.request<{ data: IssuingCard[]; has_more: boolean; object: "list"; url: string }, Error>({
        path: `/v1/issuing/cards`,
        method: "GET",
        query: query,
        body: data,
        secure: true,
        type: ContentType.UrlEncoded,
        format: "json",
        ...params,
      }),

    /**
     * @description <p>Creates an Issuing <code>Card</code> object.</p>
     *
     * @name PostIssuingCards
     * @request POST:/v1/issuing/cards
     * @secure
     * @response `200` `IssuingCard` Successful response.
     * @response `default` `Error` Error response.
     */
    postIssuingCards: (
      data: {
        cardholder?: string;
        currency: string;
        expand?: string[];
        metadata?: Record<string, string>;
        replacement_for?: string;
        replacement_reason?: "damaged" | "expired" | "lost" | "stolen";
        shipping?: {
          address: {
            city: string;
            country: string;
            line1: string;
            line2?: string;
            postal_code: string;
            state?: string;
          };
          name: string;
          service?: "express" | "priority" | "standard";
          type?: "bulk" | "individual";
        };
        spending_controls?: {
          allowed_categories?: (
            | "ac_refrigeration_repair"
            | "accounting_bookkeeping_services"
            | "advertising_services"
            | "agricultural_cooperative"
            | "airlines_air_carriers"
            | "airports_flying_fields"
            | "ambulance_services"
            | "amusement_parks_carnivals"
            | "antique_reproductions"
            | "antique_shops"
            | "aquariums"
            | "architectural_surveying_services"
            | "art_dealers_and_galleries"
            | "artists_supply_and_craft_shops"
            | "auto_and_home_supply_stores"
            | "auto_body_repair_shops"
            | "auto_paint_shops"
            | "auto_service_shops"
            | "automated_cash_disburse"
            | "automated_fuel_dispensers"
            | "automobile_associations"
            | "automotive_parts_and_accessories_stores"
            | "automotive_tire_stores"
            | "bail_and_bond_payments"
            | "bakeries"
            | "bands_orchestras"
            | "barber_and_beauty_shops"
            | "betting_casino_gambling"
            | "bicycle_shops"
            | "billiard_pool_establishments"
            | "boat_dealers"
            | "boat_rentals_and_leases"
            | "book_stores"
            | "books_periodicals_and_newspapers"
            | "bowling_alleys"
            | "bus_lines"
            | "business_secretarial_schools"
            | "buying_shopping_services"
            | "cable_satellite_and_other_pay_television_and_radio"
            | "camera_and_photographic_supply_stores"
            | "candy_nut_and_confectionery_stores"
            | "car_and_truck_dealers_new_used"
            | "car_and_truck_dealers_used_only"
            | "car_rental_agencies"
            | "car_washes"
            | "carpentry_services"
            | "carpet_upholstery_cleaning"
            | "caterers"
            | "charitable_and_social_service_organizations_fundraising"
            | "chemicals_and_allied_products"
            | "child_care_services"
            | "childrens_and_infants_wear_stores"
            | "chiropodists_podiatrists"
            | "chiropractors"
            | "cigar_stores_and_stands"
            | "civic_social_fraternal_associations"
            | "cleaning_and_maintenance"
            | "clothing_rental"
            | "colleges_universities"
            | "commercial_equipment"
            | "commercial_footwear"
            | "commercial_photography_art_and_graphics"
            | "commuter_transport_and_ferries"
            | "computer_network_services"
            | "computer_programming"
            | "computer_repair"
            | "computer_software_stores"
            | "computers_peripherals_and_software"
            | "concrete_work_services"
            | "construction_materials"
            | "consulting_public_relations"
            | "correspondence_schools"
            | "cosmetic_stores"
            | "counseling_services"
            | "country_clubs"
            | "courier_services"
            | "court_costs"
            | "credit_reporting_agencies"
            | "cruise_lines"
            | "dairy_products_stores"
            | "dance_hall_studios_schools"
            | "dating_escort_services"
            | "dentists_orthodontists"
            | "department_stores"
            | "detective_agencies"
            | "digital_goods_applications"
            | "digital_goods_games"
            | "digital_goods_large_volume"
            | "digital_goods_media"
            | "direct_marketing_catalog_merchant"
            | "direct_marketing_combination_catalog_and_retail_merchant"
            | "direct_marketing_inbound_telemarketing"
            | "direct_marketing_insurance_services"
            | "direct_marketing_other"
            | "direct_marketing_outbound_telemarketing"
            | "direct_marketing_subscription"
            | "direct_marketing_travel"
            | "discount_stores"
            | "doctors"
            | "door_to_door_sales"
            | "drapery_window_covering_and_upholstery_stores"
            | "drinking_places"
            | "drug_stores_and_pharmacies"
            | "drugs_drug_proprietaries_and_druggist_sundries"
            | "dry_cleaners"
            | "durable_goods"
            | "duty_free_stores"
            | "eating_places_restaurants"
            | "educational_services"
            | "electric_razor_stores"
            | "electrical_parts_and_equipment"
            | "electrical_services"
            | "electronics_repair_shops"
            | "electronics_stores"
            | "elementary_secondary_schools"
            | "employment_temp_agencies"
            | "equipment_rental"
            | "exterminating_services"
            | "family_clothing_stores"
            | "fast_food_restaurants"
            | "financial_institutions"
            | "fines_government_administrative_entities"
            | "fireplace_fireplace_screens_and_accessories_stores"
            | "floor_covering_stores"
            | "florists"
            | "florists_supplies_nursery_stock_and_flowers"
            | "freezer_and_locker_meat_provisioners"
            | "fuel_dealers_non_automotive"
            | "funeral_services_crematories"
            | "furniture_home_furnishings_and_equipment_stores_except_appliances"
            | "furniture_repair_refinishing"
            | "furriers_and_fur_shops"
            | "general_services"
            | "gift_card_novelty_and_souvenir_shops"
            | "glass_paint_and_wallpaper_stores"
            | "glassware_crystal_stores"
            | "golf_courses_public"
            | "government_services"
            | "grocery_stores_supermarkets"
            | "hardware_equipment_and_supplies"
            | "hardware_stores"
            | "health_and_beauty_spas"
            | "hearing_aids_sales_and_supplies"
            | "heating_plumbing_a_c"
            | "hobby_toy_and_game_shops"
            | "home_supply_warehouse_stores"
            | "hospitals"
            | "hotels_motels_and_resorts"
            | "household_appliance_stores"
            | "industrial_supplies"
            | "information_retrieval_services"
            | "insurance_default"
            | "insurance_underwriting_premiums"
            | "intra_company_purchases"
            | "jewelry_stores_watches_clocks_and_silverware_stores"
            | "landscaping_services"
            | "laundries"
            | "laundry_cleaning_services"
            | "legal_services_attorneys"
            | "luggage_and_leather_goods_stores"
            | "lumber_building_materials_stores"
            | "manual_cash_disburse"
            | "marinas_service_and_supplies"
            | "masonry_stonework_and_plaster"
            | "massage_parlors"
            | "medical_and_dental_labs"
            | "medical_dental_ophthalmic_and_hospital_equipment_and_supplies"
            | "medical_services"
            | "membership_organizations"
            | "mens_and_boys_clothing_and_accessories_stores"
            | "mens_womens_clothing_stores"
            | "metal_service_centers"
            | "miscellaneous"
            | "miscellaneous_apparel_and_accessory_shops"
            | "miscellaneous_auto_dealers"
            | "miscellaneous_business_services"
            | "miscellaneous_food_stores"
            | "miscellaneous_general_merchandise"
            | "miscellaneous_general_services"
            | "miscellaneous_home_furnishing_specialty_stores"
            | "miscellaneous_publishing_and_printing"
            | "miscellaneous_recreation_services"
            | "miscellaneous_repair_shops"
            | "miscellaneous_specialty_retail"
            | "mobile_home_dealers"
            | "motion_picture_theaters"
            | "motor_freight_carriers_and_trucking"
            | "motor_homes_dealers"
            | "motor_vehicle_supplies_and_new_parts"
            | "motorcycle_shops_and_dealers"
            | "motorcycle_shops_dealers"
            | "music_stores_musical_instruments_pianos_and_sheet_music"
            | "news_dealers_and_newsstands"
            | "non_fi_money_orders"
            | "non_fi_stored_value_card_purchase_load"
            | "nondurable_goods"
            | "nurseries_lawn_and_garden_supply_stores"
            | "nursing_personal_care"
            | "office_and_commercial_furniture"
            | "opticians_eyeglasses"
            | "optometrists_ophthalmologist"
            | "orthopedic_goods_prosthetic_devices"
            | "osteopaths"
            | "package_stores_beer_wine_and_liquor"
            | "paints_varnishes_and_supplies"
            | "parking_lots_garages"
            | "passenger_railways"
            | "pawn_shops"
            | "pet_shops_pet_food_and_supplies"
            | "petroleum_and_petroleum_products"
            | "photo_developing"
            | "photographic_photocopy_microfilm_equipment_and_supplies"
            | "photographic_studios"
            | "picture_video_production"
            | "piece_goods_notions_and_other_dry_goods"
            | "plumbing_heating_equipment_and_supplies"
            | "political_organizations"
            | "postal_services_government_only"
            | "precious_stones_and_metals_watches_and_jewelry"
            | "professional_services"
            | "public_warehousing_and_storage"
            | "quick_copy_repro_and_blueprint"
            | "railroads"
            | "real_estate_agents_and_managers_rentals"
            | "record_stores"
            | "recreational_vehicle_rentals"
            | "religious_goods_stores"
            | "religious_organizations"
            | "roofing_siding_sheet_metal"
            | "secretarial_support_services"
            | "security_brokers_dealers"
            | "service_stations"
            | "sewing_needlework_fabric_and_piece_goods_stores"
            | "shoe_repair_hat_cleaning"
            | "shoe_stores"
            | "small_appliance_repair"
            | "snowmobile_dealers"
            | "special_trade_services"
            | "specialty_cleaning"
            | "sporting_goods_stores"
            | "sporting_recreation_camps"
            | "sports_and_riding_apparel_stores"
            | "sports_clubs_fields"
            | "stamp_and_coin_stores"
            | "stationary_office_supplies_printing_and_writing_paper"
            | "stationery_stores_office_and_school_supply_stores"
            | "swimming_pools_sales"
            | "t_ui_travel_germany"
            | "tailors_alterations"
            | "tax_payments_government_agencies"
            | "tax_preparation_services"
            | "taxicabs_limousines"
            | "telecommunication_equipment_and_telephone_sales"
            | "telecommunication_services"
            | "telegraph_services"
            | "tent_and_awning_shops"
            | "testing_laboratories"
            | "theatrical_ticket_agencies"
            | "timeshares"
            | "tire_retreading_and_repair"
            | "tolls_bridge_fees"
            | "tourist_attractions_and_exhibits"
            | "towing_services"
            | "trailer_parks_campgrounds"
            | "transportation_services"
            | "travel_agencies_tour_operators"
            | "truck_stop_iteration"
            | "truck_utility_trailer_rentals"
            | "typesetting_plate_making_and_related_services"
            | "typewriter_stores"
            | "u_s_federal_government_agencies_or_departments"
            | "uniforms_commercial_clothing"
            | "used_merchandise_and_secondhand_stores"
            | "utilities"
            | "variety_stores"
            | "veterinary_services"
            | "video_amusement_game_supplies"
            | "video_game_arcades"
            | "video_tape_rental_stores"
            | "vocational_trade_schools"
            | "watch_jewelry_repair"
            | "welding_repair"
            | "wholesale_clubs"
            | "wig_and_toupee_stores"
            | "wires_money_orders"
            | "womens_accessory_and_specialty_shops"
            | "womens_ready_to_wear_stores"
            | "wrecking_and_salvage_yards"
          )[];
          blocked_categories?: (
            | "ac_refrigeration_repair"
            | "accounting_bookkeeping_services"
            | "advertising_services"
            | "agricultural_cooperative"
            | "airlines_air_carriers"
            | "airports_flying_fields"
            | "ambulance_services"
            | "amusement_parks_carnivals"
            | "antique_reproductions"
            | "antique_shops"
            | "aquariums"
            | "architectural_surveying_services"
            | "art_dealers_and_galleries"
            | "artists_supply_and_craft_shops"
            | "auto_and_home_supply_stores"
            | "auto_body_repair_shops"
            | "auto_paint_shops"
            | "auto_service_shops"
            | "automated_cash_disburse"
            | "automated_fuel_dispensers"
            | "automobile_associations"
            | "automotive_parts_and_accessories_stores"
            | "automotive_tire_stores"
            | "bail_and_bond_payments"
            | "bakeries"
            | "bands_orchestras"
            | "barber_and_beauty_shops"
            | "betting_casino_gambling"
            | "bicycle_shops"
            | "billiard_pool_establishments"
            | "boat_dealers"
            | "boat_rentals_and_leases"
            | "book_stores"
            | "books_periodicals_and_newspapers"
            | "bowling_alleys"
            | "bus_lines"
            | "business_secretarial_schools"
            | "buying_shopping_services"
            | "cable_satellite_and_other_pay_television_and_radio"
            | "camera_and_photographic_supply_stores"
            | "candy_nut_and_confectionery_stores"
            | "car_and_truck_dealers_new_used"
            | "car_and_truck_dealers_used_only"
            | "car_rental_agencies"
            | "car_washes"
            | "carpentry_services"
            | "carpet_upholstery_cleaning"
            | "caterers"
            | "charitable_and_social_service_organizations_fundraising"
            | "chemicals_and_allied_products"
            | "child_care_services"
            | "childrens_and_infants_wear_stores"
            | "chiropodists_podiatrists"
            | "chiropractors"
            | "cigar_stores_and_stands"
            | "civic_social_fraternal_associations"
            | "cleaning_and_maintenance"
            | "clothing_rental"
            | "colleges_universities"
            | "commercial_equipment"
            | "commercial_footwear"
            | "commercial_photography_art_and_graphics"
            | "commuter_transport_and_ferries"
            | "computer_network_services"
            | "computer_programming"
            | "computer_repair"
            | "computer_software_stores"
            | "computers_peripherals_and_software"
            | "concrete_work_services"
            | "construction_materials"
            | "consulting_public_relations"
            | "correspondence_schools"
            | "cosmetic_stores"
            | "counseling_services"
            | "country_clubs"
            | "courier_services"
            | "court_costs"
            | "credit_reporting_agencies"
            | "cruise_lines"
            | "dairy_products_stores"
            | "dance_hall_studios_schools"
            | "dating_escort_services"
            | "dentists_orthodontists"
            | "department_stores"
            | "detective_agencies"
            | "digital_goods_applications"
            | "digital_goods_games"
            | "digital_goods_large_volume"
            | "digital_goods_media"
            | "direct_marketing_catalog_merchant"
            | "direct_marketing_combination_catalog_and_retail_merchant"
            | "direct_marketing_inbound_telemarketing"
            | "direct_marketing_insurance_services"
            | "direct_marketing_other"
            | "direct_marketing_outbound_telemarketing"
            | "direct_marketing_subscription"
            | "direct_marketing_travel"
            | "discount_stores"
            | "doctors"
            | "door_to_door_sales"
            | "drapery_window_covering_and_upholstery_stores"
            | "drinking_places"
            | "drug_stores_and_pharmacies"
            | "drugs_drug_proprietaries_and_druggist_sundries"
            | "dry_cleaners"
            | "durable_goods"
            | "duty_free_stores"
            | "eating_places_restaurants"
            | "educational_services"
            | "electric_razor_stores"
            | "electrical_parts_and_equipment"
            | "electrical_services"
            | "electronics_repair_shops"
            | "electronics_stores"
            | "elementary_secondary_schools"
            | "employment_temp_agencies"
            | "equipment_rental"
            | "exterminating_services"
            | "family_clothing_stores"
            | "fast_food_restaurants"
            | "financial_institutions"
            | "fines_government_administrative_entities"
            | "fireplace_fireplace_screens_and_accessories_stores"
            | "floor_covering_stores"
            | "florists"
            | "florists_supplies_nursery_stock_and_flowers"
            | "freezer_and_locker_meat_provisioners"
            | "fuel_dealers_non_automotive"
            | "funeral_services_crematories"
            | "furniture_home_furnishings_and_equipment_stores_except_appliances"
            | "furniture_repair_refinishing"
            | "furriers_and_fur_shops"
            | "general_services"
            | "gift_card_novelty_and_souvenir_shops"
            | "glass_paint_and_wallpaper_stores"
            | "glassware_crystal_stores"
            | "golf_courses_public"
            | "government_services"
            | "grocery_stores_supermarkets"
            | "hardware_equipment_and_supplies"
            | "hardware_stores"
            | "health_and_beauty_spas"
            | "hearing_aids_sales_and_supplies"
            | "heating_plumbing_a_c"
            | "hobby_toy_and_game_shops"
            | "home_supply_warehouse_stores"
            | "hospitals"
            | "hotels_motels_and_resorts"
            | "household_appliance_stores"
            | "industrial_supplies"
            | "information_retrieval_services"
            | "insurance_default"
            | "insurance_underwriting_premiums"
            | "intra_company_purchases"
            | "jewelry_stores_watches_clocks_and_silverware_stores"
            | "landscaping_services"
            | "laundries"
            | "laundry_cleaning_services"
            | "legal_services_attorneys"
            | "luggage_and_leather_goods_stores"
            | "lumber_building_materials_stores"
            | "manual_cash_disburse"
            | "marinas_service_and_supplies"
            | "masonry_stonework_and_plaster"
            | "massage_parlors"
            | "medical_and_dental_labs"
            | "medical_dental_ophthalmic_and_hospital_equipment_and_supplies"
            | "medical_services"
            | "membership_organizations"
            | "mens_and_boys_clothing_and_accessories_stores"
            | "mens_womens_clothing_stores"
            | "metal_service_centers"
            | "miscellaneous"
            | "miscellaneous_apparel_and_accessory_shops"
            | "miscellaneous_auto_dealers"
            | "miscellaneous_business_services"
            | "miscellaneous_food_stores"
            | "miscellaneous_general_merchandise"
            | "miscellaneous_general_services"
            | "miscellaneous_home_furnishing_specialty_stores"
            | "miscellaneous_publishing_and_printing"
            | "miscellaneous_recreation_services"
            | "miscellaneous_repair_shops"
            | "miscellaneous_specialty_retail"
            | "mobile_home_dealers"
            | "motion_picture_theaters"
            | "motor_freight_carriers_and_trucking"
            | "motor_homes_dealers"
            | "motor_vehicle_supplies_and_new_parts"
            | "motorcycle_shops_and_dealers"
            | "motorcycle_shops_dealers"
            | "music_stores_musical_instruments_pianos_and_sheet_music"
            | "news_dealers_and_newsstands"
            | "non_fi_money_orders"
            | "non_fi_stored_value_card_purchase_load"
            | "nondurable_goods"
            | "nurseries_lawn_and_garden_supply_stores"
            | "nursing_personal_care"
            | "office_and_commercial_furniture"
            | "opticians_eyeglasses"
            | "optometrists_ophthalmologist"
            | "orthopedic_goods_prosthetic_devices"
            | "osteopaths"
            | "package_stores_beer_wine_and_liquor"
            | "paints_varnishes_and_supplies"
            | "parking_lots_garages"
            | "passenger_railways"
            | "pawn_shops"
            | "pet_shops_pet_food_and_supplies"
            | "petroleum_and_petroleum_products"
            | "photo_developing"
            | "photographic_photocopy_microfilm_equipment_and_supplies"
            | "photographic_studios"
            | "picture_video_production"
            | "piece_goods_notions_and_other_dry_goods"
            | "plumbing_heating_equipment_and_supplies"
            | "political_organizations"
            | "postal_services_government_only"
            | "precious_stones_and_metals_watches_and_jewelry"
            | "professional_services"
            | "public_warehousing_and_storage"
            | "quick_copy_repro_and_blueprint"
            | "railroads"
            | "real_estate_agents_and_managers_rentals"
            | "record_stores"
            | "recreational_vehicle_rentals"
            | "religious_goods_stores"
            | "religious_organizations"
            | "roofing_siding_sheet_metal"
            | "secretarial_support_services"
            | "security_brokers_dealers"
            | "service_stations"
            | "sewing_needlework_fabric_and_piece_goods_stores"
            | "shoe_repair_hat_cleaning"
            | "shoe_stores"
            | "small_appliance_repair"
            | "snowmobile_dealers"
            | "special_trade_services"
            | "specialty_cleaning"
            | "sporting_goods_stores"
            | "sporting_recreation_camps"
            | "sports_and_riding_apparel_stores"
            | "sports_clubs_fields"
            | "stamp_and_coin_stores"
            | "stationary_office_supplies_printing_and_writing_paper"
            | "stationery_stores_office_and_school_supply_stores"
            | "swimming_pools_sales"
            | "t_ui_travel_germany"
            | "tailors_alterations"
            | "tax_payments_government_agencies"
            | "tax_preparation_services"
            | "taxicabs_limousines"
            | "telecommunication_equipment_and_telephone_sales"
            | "telecommunication_services"
            | "telegraph_services"
            | "tent_and_awning_shops"
            | "testing_laboratories"
            | "theatrical_ticket_agencies"
            | "timeshares"
            | "tire_retreading_and_repair"
            | "tolls_bridge_fees"
            | "tourist_attractions_and_exhibits"
            | "towing_services"
            | "trailer_parks_campgrounds"
            | "transportation_services"
            | "travel_agencies_tour_operators"
            | "truck_stop_iteration"
            | "truck_utility_trailer_rentals"
            | "typesetting_plate_making_and_related_services"
            | "typewriter_stores"
            | "u_s_federal_government_agencies_or_departments"
            | "uniforms_commercial_clothing"
            | "used_merchandise_and_secondhand_stores"
            | "utilities"
            | "variety_stores"
            | "veterinary_services"
            | "video_amusement_game_supplies"
            | "video_game_arcades"
            | "video_tape_rental_stores"
            | "vocational_trade_schools"
            | "watch_jewelry_repair"
            | "welding_repair"
            | "wholesale_clubs"
            | "wig_and_toupee_stores"
            | "wires_money_orders"
            | "womens_accessory_and_specialty_shops"
            | "womens_ready_to_wear_stores"
            | "wrecking_and_salvage_yards"
          )[];
          spending_limits?: {
            amount: number;
            categories?: (
              | "ac_refrigeration_repair"
              | "accounting_bookkeeping_services"
              | "advertising_services"
              | "agricultural_cooperative"
              | "airlines_air_carriers"
              | "airports_flying_fields"
              | "ambulance_services"
              | "amusement_parks_carnivals"
              | "antique_reproductions"
              | "antique_shops"
              | "aquariums"
              | "architectural_surveying_services"
              | "art_dealers_and_galleries"
              | "artists_supply_and_craft_shops"
              | "auto_and_home_supply_stores"
              | "auto_body_repair_shops"
              | "auto_paint_shops"
              | "auto_service_shops"
              | "automated_cash_disburse"
              | "automated_fuel_dispensers"
              | "automobile_associations"
              | "automotive_parts_and_accessories_stores"
              | "automotive_tire_stores"
              | "bail_and_bond_payments"
              | "bakeries"
              | "bands_orchestras"
              | "barber_and_beauty_shops"
              | "betting_casino_gambling"
              | "bicycle_shops"
              | "billiard_pool_establishments"
              | "boat_dealers"
              | "boat_rentals_and_leases"
              | "book_stores"
              | "books_periodicals_and_newspapers"
              | "bowling_alleys"
              | "bus_lines"
              | "business_secretarial_schools"
              | "buying_shopping_services"
              | "cable_satellite_and_other_pay_television_and_radio"
              | "camera_and_photographic_supply_stores"
              | "candy_nut_and_confectionery_stores"
              | "car_and_truck_dealers_new_used"
              | "car_and_truck_dealers_used_only"
              | "car_rental_agencies"
              | "car_washes"
              | "carpentry_services"
              | "carpet_upholstery_cleaning"
              | "caterers"
              | "charitable_and_social_service_organizations_fundraising"
              | "chemicals_and_allied_products"
              | "child_care_services"
              | "childrens_and_infants_wear_stores"
              | "chiropodists_podiatrists"
              | "chiropractors"
              | "cigar_stores_and_stands"
              | "civic_social_fraternal_associations"
              | "cleaning_and_maintenance"
              | "clothing_rental"
              | "colleges_universities"
              | "commercial_equipment"
              | "commercial_footwear"
              | "commercial_photography_art_and_graphics"
              | "commuter_transport_and_ferries"
              | "computer_network_services"
              | "computer_programming"
              | "computer_repair"
              | "computer_software_stores"
              | "computers_peripherals_and_software"
              | "concrete_work_services"
              | "construction_materials"
              | "consulting_public_relations"
              | "correspondence_schools"
              | "cosmetic_stores"
              | "counseling_services"
              | "country_clubs"
              | "courier_services"
              | "court_costs"
              | "credit_reporting_agencies"
              | "cruise_lines"
              | "dairy_products_stores"
              | "dance_hall_studios_schools"
              | "dating_escort_services"
              | "dentists_orthodontists"
              | "department_stores"
              | "detective_agencies"
              | "digital_goods_applications"
              | "digital_goods_games"
              | "digital_goods_large_volume"
              | "digital_goods_media"
              | "direct_marketing_catalog_merchant"
              | "direct_marketing_combination_catalog_and_retail_merchant"
              | "direct_marketing_inbound_telemarketing"
              | "direct_marketing_insurance_services"
              | "direct_marketing_other"
              | "direct_marketing_outbound_telemarketing"
              | "direct_marketing_subscription"
              | "direct_marketing_travel"
              | "discount_stores"
              | "doctors"
              | "door_to_door_sales"
              | "drapery_window_covering_and_upholstery_stores"
              | "drinking_places"
              | "drug_stores_and_pharmacies"
              | "drugs_drug_proprietaries_and_druggist_sundries"
              | "dry_cleaners"
              | "durable_goods"
              | "duty_free_stores"
              | "eating_places_restaurants"
              | "educational_services"
              | "electric_razor_stores"
              | "electrical_parts_and_equipment"
              | "electrical_services"
              | "electronics_repair_shops"
              | "electronics_stores"
              | "elementary_secondary_schools"
              | "employment_temp_agencies"
              | "equipment_rental"
              | "exterminating_services"
              | "family_clothing_stores"
              | "fast_food_restaurants"
              | "financial_institutions"
              | "fines_government_administrative_entities"
              | "fireplace_fireplace_screens_and_accessories_stores"
              | "floor_covering_stores"
              | "florists"
              | "florists_supplies_nursery_stock_and_flowers"
              | "freezer_and_locker_meat_provisioners"
              | "fuel_dealers_non_automotive"
              | "funeral_services_crematories"
              | "furniture_home_furnishings_and_equipment_stores_except_appliances"
              | "furniture_repair_refinishing"
              | "furriers_and_fur_shops"
              | "general_services"
              | "gift_card_novelty_and_souvenir_shops"
              | "glass_paint_and_wallpaper_stores"
              | "glassware_crystal_stores"
              | "golf_courses_public"
              | "government_services"
              | "grocery_stores_supermarkets"
              | "hardware_equipment_and_supplies"
              | "hardware_stores"
              | "health_and_beauty_spas"
              | "hearing_aids_sales_and_supplies"
              | "heating_plumbing_a_c"
              | "hobby_toy_and_game_shops"
              | "home_supply_warehouse_stores"
              | "hospitals"
              | "hotels_motels_and_resorts"
              | "household_appliance_stores"
              | "industrial_supplies"
              | "information_retrieval_services"
              | "insurance_default"
              | "insurance_underwriting_premiums"
              | "intra_company_purchases"
              | "jewelry_stores_watches_clocks_and_silverware_stores"
              | "landscaping_services"
              | "laundries"
              | "laundry_cleaning_services"
              | "legal_services_attorneys"
              | "luggage_and_leather_goods_stores"
              | "lumber_building_materials_stores"
              | "manual_cash_disburse"
              | "marinas_service_and_supplies"
              | "masonry_stonework_and_plaster"
              | "massage_parlors"
              | "medical_and_dental_labs"
              | "medical_dental_ophthalmic_and_hospital_equipment_and_supplies"
              | "medical_services"
              | "membership_organizations"
              | "mens_and_boys_clothing_and_accessories_stores"
              | "mens_womens_clothing_stores"
              | "metal_service_centers"
              | "miscellaneous"
              | "miscellaneous_apparel_and_accessory_shops"
              | "miscellaneous_auto_dealers"
              | "miscellaneous_business_services"
              | "miscellaneous_food_stores"
              | "miscellaneous_general_merchandise"
              | "miscellaneous_general_services"
              | "miscellaneous_home_furnishing_specialty_stores"
              | "miscellaneous_publishing_and_printing"
              | "miscellaneous_recreation_services"
              | "miscellaneous_repair_shops"
              | "miscellaneous_specialty_retail"
              | "mobile_home_dealers"
              | "motion_picture_theaters"
              | "motor_freight_carriers_and_trucking"
              | "motor_homes_dealers"
              | "motor_vehicle_supplies_and_new_parts"
              | "motorcycle_shops_and_dealers"
              | "motorcycle_shops_dealers"
              | "music_stores_musical_instruments_pianos_and_sheet_music"
              | "news_dealers_and_newsstands"
              | "non_fi_money_orders"
              | "non_fi_stored_value_card_purchase_load"
              | "nondurable_goods"
              | "nurseries_lawn_and_garden_supply_stores"
              | "nursing_personal_care"
              | "office_and_commercial_furniture"
              | "opticians_eyeglasses"
              | "optometrists_ophthalmologist"
              | "orthopedic_goods_prosthetic_devices"
              | "osteopaths"
              | "package_stores_beer_wine_and_liquor"
              | "paints_varnishes_and_supplies"
              | "parking_lots_garages"
              | "passenger_railways"
              | "pawn_shops"
              | "pet_shops_pet_food_and_supplies"
              | "petroleum_and_petroleum_products"
              | "photo_developing"
              | "photographic_photocopy_microfilm_equipment_and_supplies"
              | "photographic_studios"
              | "picture_video_production"
              | "piece_goods_notions_and_other_dry_goods"
              | "plumbing_heating_equipment_and_supplies"
              | "political_organizations"
              | "postal_services_government_only"
              | "precious_stones_and_metals_watches_and_jewelry"
              | "professional_services"
              | "public_warehousing_and_storage"
              | "quick_copy_repro_and_blueprint"
              | "railroads"
              | "real_estate_agents_and_managers_rentals"
              | "record_stores"
              | "recreational_vehicle_rentals"
              | "religious_goods_stores"
              | "religious_organizations"
              | "roofing_siding_sheet_metal"
              | "secretarial_support_services"
              | "security_brokers_dealers"
              | "service_stations"
              | "sewing_needlework_fabric_and_piece_goods_stores"
              | "shoe_repair_hat_cleaning"
              | "shoe_stores"
              | "small_appliance_repair"
              | "snowmobile_dealers"
              | "special_trade_services"
              | "specialty_cleaning"
              | "sporting_goods_stores"
              | "sporting_recreation_camps"
              | "sports_and_riding_apparel_stores"
              | "sports_clubs_fields"
              | "stamp_and_coin_stores"
              | "stationary_office_supplies_printing_and_writing_paper"
              | "stationery_stores_office_and_school_supply_stores"
              | "swimming_pools_sales"
              | "t_ui_travel_germany"
              | "tailors_alterations"
              | "tax_payments_government_agencies"
              | "tax_preparation_services"
              | "taxicabs_limousines"
              | "telecommunication_equipment_and_telephone_sales"
              | "telecommunication_services"
              | "telegraph_services"
              | "tent_and_awning_shops"
              | "testing_laboratories"
              | "theatrical_ticket_agencies"
              | "timeshares"
              | "tire_retreading_and_repair"
              | "tolls_bridge_fees"
              | "tourist_attractions_and_exhibits"
              | "towing_services"
              | "trailer_parks_campgrounds"
              | "transportation_services"
              | "travel_agencies_tour_operators"
              | "truck_stop_iteration"
              | "truck_utility_trailer_rentals"
              | "typesetting_plate_making_and_related_services"
              | "typewriter_stores"
              | "u_s_federal_government_agencies_or_departments"
              | "uniforms_commercial_clothing"
              | "used_merchandise_and_secondhand_stores"
              | "utilities"
              | "variety_stores"
              | "veterinary_services"
              | "video_amusement_game_supplies"
              | "video_game_arcades"
              | "video_tape_rental_stores"
              | "vocational_trade_schools"
              | "watch_jewelry_repair"
              | "welding_repair"
              | "wholesale_clubs"
              | "wig_and_toupee_stores"
              | "wires_money_orders"
              | "womens_accessory_and_specialty_shops"
              | "womens_ready_to_wear_stores"
              | "wrecking_and_salvage_yards"
            )[];
            interval: "all_time" | "daily" | "monthly" | "per_authorization" | "weekly" | "yearly";
          }[];
        };
        status?: "active" | "inactive";
        type: "physical" | "virtual";
      },
      params: RequestParams = {},
    ) =>
      this.request<IssuingCard, Error>({
        path: `/v1/issuing/cards`,
        method: "POST",
        body: data,
        secure: true,
        type: ContentType.UrlEncoded,
        format: "json",
        ...params,
      }),

    /**
     * @description <p>Retrieves an Issuing <code>Card</code> object.</p>
     *
     * @name GetIssuingCardsCard
     * @request GET:/v1/issuing/cards/{card}
     * @secure
     * @response `200` `IssuingCard` Successful response.
     * @response `default` `Error` Error response.
     */
    getIssuingCardsCard: (
      card: string,
      query?: { expand?: string[] },
      data?: CardMandatePaymentMethodDetails,
      params: RequestParams = {},
    ) =>
      this.request<IssuingCard, Error>({
        path: `/v1/issuing/cards/${card}`,
        method: "GET",
        query: query,
        body: data,
        secure: true,
        type: ContentType.UrlEncoded,
        format: "json",
        ...params,
      }),

    /**
     * @description <p>Updates the specified Issuing <code>Card</code> object by setting the values of the parameters passed. Any parameters not provided will be left unchanged.</p>
     *
     * @name PostIssuingCardsCard
     * @request POST:/v1/issuing/cards/{card}
     * @secure
     * @response `200` `IssuingCard` Successful response.
     * @response `default` `Error` Error response.
     */
    postIssuingCardsCard: (
      card: string,
      data?: {
        cancellation_reason?: "lost" | "stolen";
        expand?: string[];
        metadata?: Record<string, string> | "" | (Record<string, string> & "");
        spending_controls?: {
          allowed_categories?: (
            | "ac_refrigeration_repair"
            | "accounting_bookkeeping_services"
            | "advertising_services"
            | "agricultural_cooperative"
            | "airlines_air_carriers"
            | "airports_flying_fields"
            | "ambulance_services"
            | "amusement_parks_carnivals"
            | "antique_reproductions"
            | "antique_shops"
            | "aquariums"
            | "architectural_surveying_services"
            | "art_dealers_and_galleries"
            | "artists_supply_and_craft_shops"
            | "auto_and_home_supply_stores"
            | "auto_body_repair_shops"
            | "auto_paint_shops"
            | "auto_service_shops"
            | "automated_cash_disburse"
            | "automated_fuel_dispensers"
            | "automobile_associations"
            | "automotive_parts_and_accessories_stores"
            | "automotive_tire_stores"
            | "bail_and_bond_payments"
            | "bakeries"
            | "bands_orchestras"
            | "barber_and_beauty_shops"
            | "betting_casino_gambling"
            | "bicycle_shops"
            | "billiard_pool_establishments"
            | "boat_dealers"
            | "boat_rentals_and_leases"
            | "book_stores"
            | "books_periodicals_and_newspapers"
            | "bowling_alleys"
            | "bus_lines"
            | "business_secretarial_schools"
            | "buying_shopping_services"
            | "cable_satellite_and_other_pay_television_and_radio"
            | "camera_and_photographic_supply_stores"
            | "candy_nut_and_confectionery_stores"
            | "car_and_truck_dealers_new_used"
            | "car_and_truck_dealers_used_only"
            | "car_rental_agencies"
            | "car_washes"
            | "carpentry_services"
            | "carpet_upholstery_cleaning"
            | "caterers"
            | "charitable_and_social_service_organizations_fundraising"
            | "chemicals_and_allied_products"
            | "child_care_services"
            | "childrens_and_infants_wear_stores"
            | "chiropodists_podiatrists"
            | "chiropractors"
            | "cigar_stores_and_stands"
            | "civic_social_fraternal_associations"
            | "cleaning_and_maintenance"
            | "clothing_rental"
            | "colleges_universities"
            | "commercial_equipment"
            | "commercial_footwear"
            | "commercial_photography_art_and_graphics"
            | "commuter_transport_and_ferries"
            | "computer_network_services"
            | "computer_programming"
            | "computer_repair"
            | "computer_software_stores"
            | "computers_peripherals_and_software"
            | "concrete_work_services"
            | "construction_materials"
            | "consulting_public_relations"
            | "correspondence_schools"
            | "cosmetic_stores"
            | "counseling_services"
            | "country_clubs"
            | "courier_services"
            | "court_costs"
            | "credit_reporting_agencies"
            | "cruise_lines"
            | "dairy_products_stores"
            | "dance_hall_studios_schools"
            | "dating_escort_services"
            | "dentists_orthodontists"
            | "department_stores"
            | "detective_agencies"
            | "digital_goods_applications"
            | "digital_goods_games"
            | "digital_goods_large_volume"
            | "digital_goods_media"
            | "direct_marketing_catalog_merchant"
            | "direct_marketing_combination_catalog_and_retail_merchant"
            | "direct_marketing_inbound_telemarketing"
            | "direct_marketing_insurance_services"
            | "direct_marketing_other"
            | "direct_marketing_outbound_telemarketing"
            | "direct_marketing_subscription"
            | "direct_marketing_travel"
            | "discount_stores"
            | "doctors"
            | "door_to_door_sales"
            | "drapery_window_covering_and_upholstery_stores"
            | "drinking_places"
            | "drug_stores_and_pharmacies"
            | "drugs_drug_proprietaries_and_druggist_sundries"
            | "dry_cleaners"
            | "durable_goods"
            | "duty_free_stores"
            | "eating_places_restaurants"
            | "educational_services"
            | "electric_razor_stores"
            | "electrical_parts_and_equipment"
            | "electrical_services"
            | "electronics_repair_shops"
            | "electronics_stores"
            | "elementary_secondary_schools"
            | "employment_temp_agencies"
            | "equipment_rental"
            | "exterminating_services"
            | "family_clothing_stores"
            | "fast_food_restaurants"
            | "financial_institutions"
            | "fines_government_administrative_entities"
            | "fireplace_fireplace_screens_and_accessories_stores"
            | "floor_covering_stores"
            | "florists"
            | "florists_supplies_nursery_stock_and_flowers"
            | "freezer_and_locker_meat_provisioners"
            | "fuel_dealers_non_automotive"
            | "funeral_services_crematories"
            | "furniture_home_furnishings_and_equipment_stores_except_appliances"
            | "furniture_repair_refinishing"
            | "furriers_and_fur_shops"
            | "general_services"
            | "gift_card_novelty_and_souvenir_shops"
            | "glass_paint_and_wallpaper_stores"
            | "glassware_crystal_stores"
            | "golf_courses_public"
            | "government_services"
            | "grocery_stores_supermarkets"
            | "hardware_equipment_and_supplies"
            | "hardware_stores"
            | "health_and_beauty_spas"
            | "hearing_aids_sales_and_supplies"
            | "heating_plumbing_a_c"
            | "hobby_toy_and_game_shops"
            | "home_supply_warehouse_stores"
            | "hospitals"
            | "hotels_motels_and_resorts"
            | "household_appliance_stores"
            | "industrial_supplies"
            | "information_retrieval_services"
            | "insurance_default"
            | "insurance_underwriting_premiums"
            | "intra_company_purchases"
            | "jewelry_stores_watches_clocks_and_silverware_stores"
            | "landscaping_services"
            | "laundries"
            | "laundry_cleaning_services"
            | "legal_services_attorneys"
            | "luggage_and_leather_goods_stores"
            | "lumber_building_materials_stores"
            | "manual_cash_disburse"
            | "marinas_service_and_supplies"
            | "masonry_stonework_and_plaster"
            | "massage_parlors"
            | "medical_and_dental_labs"
            | "medical_dental_ophthalmic_and_hospital_equipment_and_supplies"
            | "medical_services"
            | "membership_organizations"
            | "mens_and_boys_clothing_and_accessories_stores"
            | "mens_womens_clothing_stores"
            | "metal_service_centers"
            | "miscellaneous"
            | "miscellaneous_apparel_and_accessory_shops"
            | "miscellaneous_auto_dealers"
            | "miscellaneous_business_services"
            | "miscellaneous_food_stores"
            | "miscellaneous_general_merchandise"
            | "miscellaneous_general_services"
            | "miscellaneous_home_furnishing_specialty_stores"
            | "miscellaneous_publishing_and_printing"
            | "miscellaneous_recreation_services"
            | "miscellaneous_repair_shops"
            | "miscellaneous_specialty_retail"
            | "mobile_home_dealers"
            | "motion_picture_theaters"
            | "motor_freight_carriers_and_trucking"
            | "motor_homes_dealers"
            | "motor_vehicle_supplies_and_new_parts"
            | "motorcycle_shops_and_dealers"
            | "motorcycle_shops_dealers"
            | "music_stores_musical_instruments_pianos_and_sheet_music"
            | "news_dealers_and_newsstands"
            | "non_fi_money_orders"
            | "non_fi_stored_value_card_purchase_load"
            | "nondurable_goods"
            | "nurseries_lawn_and_garden_supply_stores"
            | "nursing_personal_care"
            | "office_and_commercial_furniture"
            | "opticians_eyeglasses"
            | "optometrists_ophthalmologist"
            | "orthopedic_goods_prosthetic_devices"
            | "osteopaths"
            | "package_stores_beer_wine_and_liquor"
            | "paints_varnishes_and_supplies"
            | "parking_lots_garages"
            | "passenger_railways"
            | "pawn_shops"
            | "pet_shops_pet_food_and_supplies"
            | "petroleum_and_petroleum_products"
            | "photo_developing"
            | "photographic_photocopy_microfilm_equipment_and_supplies"
            | "photographic_studios"
            | "picture_video_production"
            | "piece_goods_notions_and_other_dry_goods"
            | "plumbing_heating_equipment_and_supplies"
            | "political_organizations"
            | "postal_services_government_only"
            | "precious_stones_and_metals_watches_and_jewelry"
            | "professional_services"
            | "public_warehousing_and_storage"
            | "quick_copy_repro_and_blueprint"
            | "railroads"
            | "real_estate_agents_and_managers_rentals"
            | "record_stores"
            | "recreational_vehicle_rentals"
            | "religious_goods_stores"
            | "religious_organizations"
            | "roofing_siding_sheet_metal"
            | "secretarial_support_services"
            | "security_brokers_dealers"
            | "service_stations"
            | "sewing_needlework_fabric_and_piece_goods_stores"
            | "shoe_repair_hat_cleaning"
            | "shoe_stores"
            | "small_appliance_repair"
            | "snowmobile_dealers"
            | "special_trade_services"
            | "specialty_cleaning"
            | "sporting_goods_stores"
            | "sporting_recreation_camps"
            | "sports_and_riding_apparel_stores"
            | "sports_clubs_fields"
            | "stamp_and_coin_stores"
            | "stationary_office_supplies_printing_and_writing_paper"
            | "stationery_stores_office_and_school_supply_stores"
            | "swimming_pools_sales"
            | "t_ui_travel_germany"
            | "tailors_alterations"
            | "tax_payments_government_agencies"
            | "tax_preparation_services"
            | "taxicabs_limousines"
            | "telecommunication_equipment_and_telephone_sales"
            | "telecommunication_services"
            | "telegraph_services"
            | "tent_and_awning_shops"
            | "testing_laboratories"
            | "theatrical_ticket_agencies"
            | "timeshares"
            | "tire_retreading_and_repair"
            | "tolls_bridge_fees"
            | "tourist_attractions_and_exhibits"
            | "towing_services"
            | "trailer_parks_campgrounds"
            | "transportation_services"
            | "travel_agencies_tour_operators"
            | "truck_stop_iteration"
            | "truck_utility_trailer_rentals"
            | "typesetting_plate_making_and_related_services"
            | "typewriter_stores"
            | "u_s_federal_government_agencies_or_departments"
            | "uniforms_commercial_clothing"
            | "used_merchandise_and_secondhand_stores"
            | "utilities"
            | "variety_stores"
            | "veterinary_services"
            | "video_amusement_game_supplies"
            | "video_game_arcades"
            | "video_tape_rental_stores"
            | "vocational_trade_schools"
            | "watch_jewelry_repair"
            | "welding_repair"
            | "wholesale_clubs"
            | "wig_and_toupee_stores"
            | "wires_money_orders"
            | "womens_accessory_and_specialty_shops"
            | "womens_ready_to_wear_stores"
            | "wrecking_and_salvage_yards"
          )[];
          blocked_categories?: (
            | "ac_refrigeration_repair"
            | "accounting_bookkeeping_services"
            | "advertising_services"
            | "agricultural_cooperative"
            | "airlines_air_carriers"
            | "airports_flying_fields"
            | "ambulance_services"
            | "amusement_parks_carnivals"
            | "antique_reproductions"
            | "antique_shops"
            | "aquariums"
            | "architectural_surveying_services"
            | "art_dealers_and_galleries"
            | "artists_supply_and_craft_shops"
            | "auto_and_home_supply_stores"
            | "auto_body_repair_shops"
            | "auto_paint_shops"
            | "auto_service_shops"
            | "automated_cash_disburse"
            | "automated_fuel_dispensers"
            | "automobile_associations"
            | "automotive_parts_and_accessories_stores"
            | "automotive_tire_stores"
            | "bail_and_bond_payments"
            | "bakeries"
            | "bands_orchestras"
            | "barber_and_beauty_shops"
            | "betting_casino_gambling"
            | "bicycle_shops"
            | "billiard_pool_establishments"
            | "boat_dealers"
            | "boat_rentals_and_leases"
            | "book_stores"
            | "books_periodicals_and_newspapers"
            | "bowling_alleys"
            | "bus_lines"
            | "business_secretarial_schools"
            | "buying_shopping_services"
            | "cable_satellite_and_other_pay_television_and_radio"
            | "camera_and_photographic_supply_stores"
            | "candy_nut_and_confectionery_stores"
            | "car_and_truck_dealers_new_used"
            | "car_and_truck_dealers_used_only"
            | "car_rental_agencies"
            | "car_washes"
            | "carpentry_services"
            | "carpet_upholstery_cleaning"
            | "caterers"
            | "charitable_and_social_service_organizations_fundraising"
            | "chemicals_and_allied_products"
            | "child_care_services"
            | "childrens_and_infants_wear_stores"
            | "chiropodists_podiatrists"
            | "chiropractors"
            | "cigar_stores_and_stands"
            | "civic_social_fraternal_associations"
            | "cleaning_and_maintenance"
            | "clothing_rental"
            | "colleges_universities"
            | "commercial_equipment"
            | "commercial_footwear"
            | "commercial_photography_art_and_graphics"
            | "commuter_transport_and_ferries"
            | "computer_network_services"
            | "computer_programming"
            | "computer_repair"
            | "computer_software_stores"
            | "computers_peripherals_and_software"
            | "concrete_work_services"
            | "construction_materials"
            | "consulting_public_relations"
            | "correspondence_schools"
            | "cosmetic_stores"
            | "counseling_services"
            | "country_clubs"
            | "courier_services"
            | "court_costs"
            | "credit_reporting_agencies"
            | "cruise_lines"
            | "dairy_products_stores"
            | "dance_hall_studios_schools"
            | "dating_escort_services"
            | "dentists_orthodontists"
            | "department_stores"
            | "detective_agencies"
            | "digital_goods_applications"
            | "digital_goods_games"
            | "digital_goods_large_volume"
            | "digital_goods_media"
            | "direct_marketing_catalog_merchant"
            | "direct_marketing_combination_catalog_and_retail_merchant"
            | "direct_marketing_inbound_telemarketing"
            | "direct_marketing_insurance_services"
            | "direct_marketing_other"
            | "direct_marketing_outbound_telemarketing"
            | "direct_marketing_subscription"
            | "direct_marketing_travel"
            | "discount_stores"
            | "doctors"
            | "door_to_door_sales"
            | "drapery_window_covering_and_upholstery_stores"
            | "drinking_places"
            | "drug_stores_and_pharmacies"
            | "drugs_drug_proprietaries_and_druggist_sundries"
            | "dry_cleaners"
            | "durable_goods"
            | "duty_free_stores"
            | "eating_places_restaurants"
            | "educational_services"
            | "electric_razor_stores"
            | "electrical_parts_and_equipment"
            | "electrical_services"
            | "electronics_repair_shops"
            | "electronics_stores"
            | "elementary_secondary_schools"
            | "employment_temp_agencies"
            | "equipment_rental"
            | "exterminating_services"
            | "family_clothing_stores"
            | "fast_food_restaurants"
            | "financial_institutions"
            | "fines_government_administrative_entities"
            | "fireplace_fireplace_screens_and_accessories_stores"
            | "floor_covering_stores"
            | "florists"
            | "florists_supplies_nursery_stock_and_flowers"
            | "freezer_and_locker_meat_provisioners"
            | "fuel_dealers_non_automotive"
            | "funeral_services_crematories"
            | "furniture_home_furnishings_and_equipment_stores_except_appliances"
            | "furniture_repair_refinishing"
            | "furriers_and_fur_shops"
            | "general_services"
            | "gift_card_novelty_and_souvenir_shops"
            | "glass_paint_and_wallpaper_stores"
            | "glassware_crystal_stores"
            | "golf_courses_public"
            | "government_services"
            | "grocery_stores_supermarkets"
            | "hardware_equipment_and_supplies"
            | "hardware_stores"
            | "health_and_beauty_spas"
            | "hearing_aids_sales_and_supplies"
            | "heating_plumbing_a_c"
            | "hobby_toy_and_game_shops"
            | "home_supply_warehouse_stores"
            | "hospitals"
            | "hotels_motels_and_resorts"
            | "household_appliance_stores"
            | "industrial_supplies"
            | "information_retrieval_services"
            | "insurance_default"
            | "insurance_underwriting_premiums"
            | "intra_company_purchases"
            | "jewelry_stores_watches_clocks_and_silverware_stores"
            | "landscaping_services"
            | "laundries"
            | "laundry_cleaning_services"
            | "legal_services_attorneys"
            | "luggage_and_leather_goods_stores"
            | "lumber_building_materials_stores"
            | "manual_cash_disburse"
            | "marinas_service_and_supplies"
            | "masonry_stonework_and_plaster"
            | "massage_parlors"
            | "medical_and_dental_labs"
            | "medical_dental_ophthalmic_and_hospital_equipment_and_supplies"
            | "medical_services"
            | "membership_organizations"
            | "mens_and_boys_clothing_and_accessories_stores"
            | "mens_womens_clothing_stores"
            | "metal_service_centers"
            | "miscellaneous"
            | "miscellaneous_apparel_and_accessory_shops"
            | "miscellaneous_auto_dealers"
            | "miscellaneous_business_services"
            | "miscellaneous_food_stores"
            | "miscellaneous_general_merchandise"
            | "miscellaneous_general_services"
            | "miscellaneous_home_furnishing_specialty_stores"
            | "miscellaneous_publishing_and_printing"
            | "miscellaneous_recreation_services"
            | "miscellaneous_repair_shops"
            | "miscellaneous_specialty_retail"
            | "mobile_home_dealers"
            | "motion_picture_theaters"
            | "motor_freight_carriers_and_trucking"
            | "motor_homes_dealers"
            | "motor_vehicle_supplies_and_new_parts"
            | "motorcycle_shops_and_dealers"
            | "motorcycle_shops_dealers"
            | "music_stores_musical_instruments_pianos_and_sheet_music"
            | "news_dealers_and_newsstands"
            | "non_fi_money_orders"
            | "non_fi_stored_value_card_purchase_load"
            | "nondurable_goods"
            | "nurseries_lawn_and_garden_supply_stores"
            | "nursing_personal_care"
            | "office_and_commercial_furniture"
            | "opticians_eyeglasses"
            | "optometrists_ophthalmologist"
            | "orthopedic_goods_prosthetic_devices"
            | "osteopaths"
            | "package_stores_beer_wine_and_liquor"
            | "paints_varnishes_and_supplies"
            | "parking_lots_garages"
            | "passenger_railways"
            | "pawn_shops"
            | "pet_shops_pet_food_and_supplies"
            | "petroleum_and_petroleum_products"
            | "photo_developing"
            | "photographic_photocopy_microfilm_equipment_and_supplies"
            | "photographic_studios"
            | "picture_video_production"
            | "piece_goods_notions_and_other_dry_goods"
            | "plumbing_heating_equipment_and_supplies"
            | "political_organizations"
            | "postal_services_government_only"
            | "precious_stones_and_metals_watches_and_jewelry"
            | "professional_services"
            | "public_warehousing_and_storage"
            | "quick_copy_repro_and_blueprint"
            | "railroads"
            | "real_estate_agents_and_managers_rentals"
            | "record_stores"
            | "recreational_vehicle_rentals"
            | "religious_goods_stores"
            | "religious_organizations"
            | "roofing_siding_sheet_metal"
            | "secretarial_support_services"
            | "security_brokers_dealers"
            | "service_stations"
            | "sewing_needlework_fabric_and_piece_goods_stores"
            | "shoe_repair_hat_cleaning"
            | "shoe_stores"
            | "small_appliance_repair"
            | "snowmobile_dealers"
            | "special_trade_services"
            | "specialty_cleaning"
            | "sporting_goods_stores"
            | "sporting_recreation_camps"
            | "sports_and_riding_apparel_stores"
            | "sports_clubs_fields"
            | "stamp_and_coin_stores"
            | "stationary_office_supplies_printing_and_writing_paper"
            | "stationery_stores_office_and_school_supply_stores"
            | "swimming_pools_sales"
            | "t_ui_travel_germany"
            | "tailors_alterations"
            | "tax_payments_government_agencies"
            | "tax_preparation_services"
            | "taxicabs_limousines"
            | "telecommunication_equipment_and_telephone_sales"
            | "telecommunication_services"
            | "telegraph_services"
            | "tent_and_awning_shops"
            | "testing_laboratories"
            | "theatrical_ticket_agencies"
            | "timeshares"
            | "tire_retreading_and_repair"
            | "tolls_bridge_fees"
            | "tourist_attractions_and_exhibits"
            | "towing_services"
            | "trailer_parks_campgrounds"
            | "transportation_services"
            | "travel_agencies_tour_operators"
            | "truck_stop_iteration"
            | "truck_utility_trailer_rentals"
            | "typesetting_plate_making_and_related_services"
            | "typewriter_stores"
            | "u_s_federal_government_agencies_or_departments"
            | "uniforms_commercial_clothing"
            | "used_merchandise_and_secondhand_stores"
            | "utilities"
            | "variety_stores"
            | "veterinary_services"
            | "video_amusement_game_supplies"
            | "video_game_arcades"
            | "video_tape_rental_stores"
            | "vocational_trade_schools"
            | "watch_jewelry_repair"
            | "welding_repair"
            | "wholesale_clubs"
            | "wig_and_toupee_stores"
            | "wires_money_orders"
            | "womens_accessory_and_specialty_shops"
            | "womens_ready_to_wear_stores"
            | "wrecking_and_salvage_yards"
          )[];
          spending_limits?: {
            amount: number;
            categories?: (
              | "ac_refrigeration_repair"
              | "accounting_bookkeeping_services"
              | "advertising_services"
              | "agricultural_cooperative"
              | "airlines_air_carriers"
              | "airports_flying_fields"
              | "ambulance_services"
              | "amusement_parks_carnivals"
              | "antique_reproductions"
              | "antique_shops"
              | "aquariums"
              | "architectural_surveying_services"
              | "art_dealers_and_galleries"
              | "artists_supply_and_craft_shops"
              | "auto_and_home_supply_stores"
              | "auto_body_repair_shops"
              | "auto_paint_shops"
              | "auto_service_shops"
              | "automated_cash_disburse"
              | "automated_fuel_dispensers"
              | "automobile_associations"
              | "automotive_parts_and_accessories_stores"
              | "automotive_tire_stores"
              | "bail_and_bond_payments"
              | "bakeries"
              | "bands_orchestras"
              | "barber_and_beauty_shops"
              | "betting_casino_gambling"
              | "bicycle_shops"
              | "billiard_pool_establishments"
              | "boat_dealers"
              | "boat_rentals_and_leases"
              | "book_stores"
              | "books_periodicals_and_newspapers"
              | "bowling_alleys"
              | "bus_lines"
              | "business_secretarial_schools"
              | "buying_shopping_services"
              | "cable_satellite_and_other_pay_television_and_radio"
              | "camera_and_photographic_supply_stores"
              | "candy_nut_and_confectionery_stores"
              | "car_and_truck_dealers_new_used"
              | "car_and_truck_dealers_used_only"
              | "car_rental_agencies"
              | "car_washes"
              | "carpentry_services"
              | "carpet_upholstery_cleaning"
              | "caterers"
              | "charitable_and_social_service_organizations_fundraising"
              | "chemicals_and_allied_products"
              | "child_care_services"
              | "childrens_and_infants_wear_stores"
              | "chiropodists_podiatrists"
              | "chiropractors"
              | "cigar_stores_and_stands"
              | "civic_social_fraternal_associations"
              | "cleaning_and_maintenance"
              | "clothing_rental"
              | "colleges_universities"
              | "commercial_equipment"
              | "commercial_footwear"
              | "commercial_photography_art_and_graphics"
              | "commuter_transport_and_ferries"
              | "computer_network_services"
              | "computer_programming"
              | "computer_repair"
              | "computer_software_stores"
              | "computers_peripherals_and_software"
              | "concrete_work_services"
              | "construction_materials"
              | "consulting_public_relations"
              | "correspondence_schools"
              | "cosmetic_stores"
              | "counseling_services"
              | "country_clubs"
              | "courier_services"
              | "court_costs"
              | "credit_reporting_agencies"
              | "cruise_lines"
              | "dairy_products_stores"
              | "dance_hall_studios_schools"
              | "dating_escort_services"
              | "dentists_orthodontists"
              | "department_stores"
              | "detective_agencies"
              | "digital_goods_applications"
              | "digital_goods_games"
              | "digital_goods_large_volume"
              | "digital_goods_media"
              | "direct_marketing_catalog_merchant"
              | "direct_marketing_combination_catalog_and_retail_merchant"
              | "direct_marketing_inbound_telemarketing"
              | "direct_marketing_insurance_services"
              | "direct_marketing_other"
              | "direct_marketing_outbound_telemarketing"
              | "direct_marketing_subscription"
              | "direct_marketing_travel"
              | "discount_stores"
              | "doctors"
              | "door_to_door_sales"
              | "drapery_window_covering_and_upholstery_stores"
              | "drinking_places"
              | "drug_stores_and_pharmacies"
              | "drugs_drug_proprietaries_and_druggist_sundries"
              | "dry_cleaners"
              | "durable_goods"
              | "duty_free_stores"
              | "eating_places_restaurants"
              | "educational_services"
              | "electric_razor_stores"
              | "electrical_parts_and_equipment"
              | "electrical_services"
              | "electronics_repair_shops"
              | "electronics_stores"
              | "elementary_secondary_schools"
              | "employment_temp_agencies"
              | "equipment_rental"
              | "exterminating_services"
              | "family_clothing_stores"
              | "fast_food_restaurants"
              | "financial_institutions"
              | "fines_government_administrative_entities"
              | "fireplace_fireplace_screens_and_accessories_stores"
              | "floor_covering_stores"
              | "florists"
              | "florists_supplies_nursery_stock_and_flowers"
              | "freezer_and_locker_meat_provisioners"
              | "fuel_dealers_non_automotive"
              | "funeral_services_crematories"
              | "furniture_home_furnishings_and_equipment_stores_except_appliances"
              | "furniture_repair_refinishing"
              | "furriers_and_fur_shops"
              | "general_services"
              | "gift_card_novelty_and_souvenir_shops"
              | "glass_paint_and_wallpaper_stores"
              | "glassware_crystal_stores"
              | "golf_courses_public"
              | "government_services"
              | "grocery_stores_supermarkets"
              | "hardware_equipment_and_supplies"
              | "hardware_stores"
              | "health_and_beauty_spas"
              | "hearing_aids_sales_and_supplies"
              | "heating_plumbing_a_c"
              | "hobby_toy_and_game_shops"
              | "home_supply_warehouse_stores"
              | "hospitals"
              | "hotels_motels_and_resorts"
              | "household_appliance_stores"
              | "industrial_supplies"
              | "information_retrieval_services"
              | "insurance_default"
              | "insurance_underwriting_premiums"
              | "intra_company_purchases"
              | "jewelry_stores_watches_clocks_and_silverware_stores"
              | "landscaping_services"
              | "laundries"
              | "laundry_cleaning_services"
              | "legal_services_attorneys"
              | "luggage_and_leather_goods_stores"
              | "lumber_building_materials_stores"
              | "manual_cash_disburse"
              | "marinas_service_and_supplies"
              | "masonry_stonework_and_plaster"
              | "massage_parlors"
              | "medical_and_dental_labs"
              | "medical_dental_ophthalmic_and_hospital_equipment_and_supplies"
              | "medical_services"
              | "membership_organizations"
              | "mens_and_boys_clothing_and_accessories_stores"
              | "mens_womens_clothing_stores"
              | "metal_service_centers"
              | "miscellaneous"
              | "miscellaneous_apparel_and_accessory_shops"
              | "miscellaneous_auto_dealers"
              | "miscellaneous_business_services"
              | "miscellaneous_food_stores"
              | "miscellaneous_general_merchandise"
              | "miscellaneous_general_services"
              | "miscellaneous_home_furnishing_specialty_stores"
              | "miscellaneous_publishing_and_printing"
              | "miscellaneous_recreation_services"
              | "miscellaneous_repair_shops"
              | "miscellaneous_specialty_retail"
              | "mobile_home_dealers"
              | "motion_picture_theaters"
              | "motor_freight_carriers_and_trucking"
              | "motor_homes_dealers"
              | "motor_vehicle_supplies_and_new_parts"
              | "motorcycle_shops_and_dealers"
              | "motorcycle_shops_dealers"
              | "music_stores_musical_instruments_pianos_and_sheet_music"
              | "news_dealers_and_newsstands"
              | "non_fi_money_orders"
              | "non_fi_stored_value_card_purchase_load"
              | "nondurable_goods"
              | "nurseries_lawn_and_garden_supply_stores"
              | "nursing_personal_care"
              | "office_and_commercial_furniture"
              | "opticians_eyeglasses"
              | "optometrists_ophthalmologist"
              | "orthopedic_goods_prosthetic_devices"
              | "osteopaths"
              | "package_stores_beer_wine_and_liquor"
              | "paints_varnishes_and_supplies"
              | "parking_lots_garages"
              | "passenger_railways"
              | "pawn_shops"
              | "pet_shops_pet_food_and_supplies"
              | "petroleum_and_petroleum_products"
              | "photo_developing"
              | "photographic_photocopy_microfilm_equipment_and_supplies"
              | "photographic_studios"
              | "picture_video_production"
              | "piece_goods_notions_and_other_dry_goods"
              | "plumbing_heating_equipment_and_supplies"
              | "political_organizations"
              | "postal_services_government_only"
              | "precious_stones_and_metals_watches_and_jewelry"
              | "professional_services"
              | "public_warehousing_and_storage"
              | "quick_copy_repro_and_blueprint"
              | "railroads"
              | "real_estate_agents_and_managers_rentals"
              | "record_stores"
              | "recreational_vehicle_rentals"
              | "religious_goods_stores"
              | "religious_organizations"
              | "roofing_siding_sheet_metal"
              | "secretarial_support_services"
              | "security_brokers_dealers"
              | "service_stations"
              | "sewing_needlework_fabric_and_piece_goods_stores"
              | "shoe_repair_hat_cleaning"
              | "shoe_stores"
              | "small_appliance_repair"
              | "snowmobile_dealers"
              | "special_trade_services"
              | "specialty_cleaning"
              | "sporting_goods_stores"
              | "sporting_recreation_camps"
              | "sports_and_riding_apparel_stores"
              | "sports_clubs_fields"
              | "stamp_and_coin_stores"
              | "stationary_office_supplies_printing_and_writing_paper"
              | "stationery_stores_office_and_school_supply_stores"
              | "swimming_pools_sales"
              | "t_ui_travel_germany"
              | "tailors_alterations"
              | "tax_payments_government_agencies"
              | "tax_preparation_services"
              | "taxicabs_limousines"
              | "telecommunication_equipment_and_telephone_sales"
              | "telecommunication_services"
              | "telegraph_services"
              | "tent_and_awning_shops"
              | "testing_laboratories"
              | "theatrical_ticket_agencies"
              | "timeshares"
              | "tire_retreading_and_repair"
              | "tolls_bridge_fees"
              | "tourist_attractions_and_exhibits"
              | "towing_services"
              | "trailer_parks_campgrounds"
              | "transportation_services"
              | "travel_agencies_tour_operators"
              | "truck_stop_iteration"
              | "truck_utility_trailer_rentals"
              | "typesetting_plate_making_and_related_services"
              | "typewriter_stores"
              | "u_s_federal_government_agencies_or_departments"
              | "uniforms_commercial_clothing"
              | "used_merchandise_and_secondhand_stores"
              | "utilities"
              | "variety_stores"
              | "veterinary_services"
              | "video_amusement_game_supplies"
              | "video_game_arcades"
              | "video_tape_rental_stores"
              | "vocational_trade_schools"
              | "watch_jewelry_repair"
              | "welding_repair"
              | "wholesale_clubs"
              | "wig_and_toupee_stores"
              | "wires_money_orders"
              | "womens_accessory_and_specialty_shops"
              | "womens_ready_to_wear_stores"
              | "wrecking_and_salvage_yards"
            )[];
            interval: "all_time" | "daily" | "monthly" | "per_authorization" | "weekly" | "yearly";
          }[];
        };
        status?: "active" | "canceled" | "inactive";
      },
      params: RequestParams = {},
    ) =>
      this.request<IssuingCard, Error>({
        path: `/v1/issuing/cards/${card}`,
        method: "POST",
        body: data,
        secure: true,
        type: ContentType.UrlEncoded,
        format: "json",
        ...params,
      }),

    /**
     * @description <p>Returns a list of Issuing <code>Dispute</code> objects. The objects are sorted in descending order by creation date, with the most recently created object appearing first.</p>
     *
     * @name GetIssuingDisputes
     * @request GET:/v1/issuing/disputes
     * @secure
     * @response `200` `{ data: (IssuingDispute)[], has_more: boolean, object: "list", url: string }` Successful response.
     * @response `default` `Error` Error response.
     */
    getIssuingDisputes: (
      query?: {
        created?: { gt?: number; gte?: number; lt?: number; lte?: number } | number;
        ending_before?: string;
        expand?: string[];
        limit?: number;
        starting_after?: string;
        status?: "expired" | "lost" | "submitted" | "unsubmitted" | "won";
        transaction?: string;
      },
      data?: CardMandatePaymentMethodDetails,
      params: RequestParams = {},
    ) =>
      this.request<{ data: IssuingDispute[]; has_more: boolean; object: "list"; url: string }, Error>({
        path: `/v1/issuing/disputes`,
        method: "GET",
        query: query,
        body: data,
        secure: true,
        type: ContentType.UrlEncoded,
        format: "json",
        ...params,
      }),

    /**
     * @description <p>Creates an Issuing <code>Dispute</code> object. Individual pieces of evidence within the <code>evidence</code> object are optional at this point. Stripe only validates that required evidence is present during submission. Refer to <a href="/docs/issuing/purchases/disputes#dispute-reasons-and-evidence">Dispute reasons and evidence</a> for more details about evidence requirements.</p>
     *
     * @name PostIssuingDisputes
     * @request POST:/v1/issuing/disputes
     * @secure
     * @response `200` `IssuingDispute` Successful response.
     * @response `default` `Error` Error response.
     */
    postIssuingDisputes: (
      data: {
        evidence?: {
          canceled?:
            | {
                additional_documentation?: string | "";
                canceled_at?: number | "";
                cancellation_policy_provided?: boolean | "";
                cancellation_reason?: string;
                expected_at?: number | "";
                explanation?: string;
                product_description?: string;
                product_type?: "" | "merchandise" | "service";
                return_status?: "" | "merchant_rejected" | "successful";
                returned_at?: number | "";
              }
            | ""
            | ({
                additional_documentation?: string | "";
                canceled_at?: number | "";
                cancellation_policy_provided?: boolean | "";
                cancellation_reason?: string;
                expected_at?: number | "";
                explanation?: string;
                product_description?: string;
                product_type?: "" | "merchandise" | "service";
                return_status?: "" | "merchant_rejected" | "successful";
                returned_at?: number | "";
              } & "");
          duplicate?:
            | {
                additional_documentation?: string | "";
                card_statement?: string | "";
                cash_receipt?: string | "";
                check_image?: string | "";
                explanation?: string;
                original_transaction?: string;
              }
            | ""
            | ({
                additional_documentation?: string | "";
                card_statement?: string | "";
                cash_receipt?: string | "";
                check_image?: string | "";
                explanation?: string;
                original_transaction?: string;
              } & "");
          fraudulent?:
            | { additional_documentation?: string | ""; explanation?: string }
            | ""
            | ({ additional_documentation?: string | ""; explanation?: string } & "");
          merchandise_not_as_described?:
            | {
                additional_documentation?: string | "";
                explanation?: string;
                received_at?: number | "";
                return_description?: string;
                return_status?: "" | "merchant_rejected" | "successful";
                returned_at?: number | "";
              }
            | ""
            | ({
                additional_documentation?: string | "";
                explanation?: string;
                received_at?: number | "";
                return_description?: string;
                return_status?: "" | "merchant_rejected" | "successful";
                returned_at?: number | "";
              } & "");
          not_received?:
            | {
                additional_documentation?: string | "";
                expected_at?: number | "";
                explanation?: string;
                product_description?: string;
                product_type?: "" | "merchandise" | "service";
              }
            | ""
            | ({
                additional_documentation?: string | "";
                expected_at?: number | "";
                explanation?: string;
                product_description?: string;
                product_type?: "" | "merchandise" | "service";
              } & "");
          other?:
            | {
                additional_documentation?: string | "";
                explanation?: string;
                product_description?: string;
                product_type?: "" | "merchandise" | "service";
              }
            | ""
            | ({
                additional_documentation?: string | "";
                explanation?: string;
                product_description?: string;
                product_type?: "" | "merchandise" | "service";
              } & "");
          reason?:
            | "canceled"
            | "duplicate"
            | "fraudulent"
            | "merchandise_not_as_described"
            | "not_received"
            | "other"
            | "service_not_as_described";
          service_not_as_described?:
            | {
                additional_documentation?: string | "";
                canceled_at?: number | "";
                cancellation_reason?: string;
                explanation?: string;
                received_at?: number | "";
              }
            | ""
            | ({
                additional_documentation?: string | "";
                canceled_at?: number | "";
                cancellation_reason?: string;
                explanation?: string;
                received_at?: number | "";
              } & "");
        };
        expand?: string[];
        metadata?: Record<string, string>;
        transaction: string;
      },
      params: RequestParams = {},
    ) =>
      this.request<IssuingDispute, Error>({
        path: `/v1/issuing/disputes`,
        method: "POST",
        body: data,
        secure: true,
        type: ContentType.UrlEncoded,
        format: "json",
        ...params,
      }),

    /**
     * @description <p>Retrieves an Issuing <code>Dispute</code> object.</p>
     *
     * @name GetIssuingDisputesDispute
     * @request GET:/v1/issuing/disputes/{dispute}
     * @secure
     * @response `200` `IssuingDispute` Successful response.
     * @response `default` `Error` Error response.
     */
    getIssuingDisputesDispute: (
      dispute: string,
      query?: { expand?: string[] },
      data?: CardMandatePaymentMethodDetails,
      params: RequestParams = {},
    ) =>
      this.request<IssuingDispute, Error>({
        path: `/v1/issuing/disputes/${dispute}`,
        method: "GET",
        query: query,
        body: data,
        secure: true,
        type: ContentType.UrlEncoded,
        format: "json",
        ...params,
      }),

    /**
     * @description <p>Updates the specified Issuing <code>Dispute</code> object by setting the values of the parameters passed. Any parameters not provided will be left unchanged. Properties on the <code>evidence</code> object can be unset by passing in an empty string.</p>
     *
     * @name PostIssuingDisputesDispute
     * @request POST:/v1/issuing/disputes/{dispute}
     * @secure
     * @response `200` `IssuingDispute` Successful response.
     * @response `default` `Error` Error response.
     */
    postIssuingDisputesDispute: (
      dispute: string,
      data?: {
        evidence?: {
          canceled?:
            | {
                additional_documentation?: string | "";
                canceled_at?: number | "";
                cancellation_policy_provided?: boolean | "";
                cancellation_reason?: string;
                expected_at?: number | "";
                explanation?: string;
                product_description?: string;
                product_type?: "" | "merchandise" | "service";
                return_status?: "" | "merchant_rejected" | "successful";
                returned_at?: number | "";
              }
            | ""
            | ({
                additional_documentation?: string | "";
                canceled_at?: number | "";
                cancellation_policy_provided?: boolean | "";
                cancellation_reason?: string;
                expected_at?: number | "";
                explanation?: string;
                product_description?: string;
                product_type?: "" | "merchandise" | "service";
                return_status?: "" | "merchant_rejected" | "successful";
                returned_at?: number | "";
              } & "");
          duplicate?:
            | {
                additional_documentation?: string | "";
                card_statement?: string | "";
                cash_receipt?: string | "";
                check_image?: string | "";
                explanation?: string;
                original_transaction?: string;
              }
            | ""
            | ({
                additional_documentation?: string | "";
                card_statement?: string | "";
                cash_receipt?: string | "";
                check_image?: string | "";
                explanation?: string;
                original_transaction?: string;
              } & "");
          fraudulent?:
            | { additional_documentation?: string | ""; explanation?: string }
            | ""
            | ({ additional_documentation?: string | ""; explanation?: string } & "");
          merchandise_not_as_described?:
            | {
                additional_documentation?: string | "";
                explanation?: string;
                received_at?: number | "";
                return_description?: string;
                return_status?: "" | "merchant_rejected" | "successful";
                returned_at?: number | "";
              }
            | ""
            | ({
                additional_documentation?: string | "";
                explanation?: string;
                received_at?: number | "";
                return_description?: string;
                return_status?: "" | "merchant_rejected" | "successful";
                returned_at?: number | "";
              } & "");
          not_received?:
            | {
                additional_documentation?: string | "";
                expected_at?: number | "";
                explanation?: string;
                product_description?: string;
                product_type?: "" | "merchandise" | "service";
              }
            | ""
            | ({
                additional_documentation?: string | "";
                expected_at?: number | "";
                explanation?: string;
                product_description?: string;
                product_type?: "" | "merchandise" | "service";
              } & "");
          other?:
            | {
                additional_documentation?: string | "";
                explanation?: string;
                product_description?: string;
                product_type?: "" | "merchandise" | "service";
              }
            | ""
            | ({
                additional_documentation?: string | "";
                explanation?: string;
                product_description?: string;
                product_type?: "" | "merchandise" | "service";
              } & "");
          reason?:
            | "canceled"
            | "duplicate"
            | "fraudulent"
            | "merchandise_not_as_described"
            | "not_received"
            | "other"
            | "service_not_as_described";
          service_not_as_described?:
            | {
                additional_documentation?: string | "";
                canceled_at?: number | "";
                cancellation_reason?: string;
                explanation?: string;
                received_at?: number | "";
              }
            | ""
            | ({
                additional_documentation?: string | "";
                canceled_at?: number | "";
                cancellation_reason?: string;
                explanation?: string;
                received_at?: number | "";
              } & "");
        };
        expand?: string[];
        metadata?: Record<string, string> | "" | (Record<string, string> & "");
      },
      params: RequestParams = {},
    ) =>
      this.request<IssuingDispute, Error>({
        path: `/v1/issuing/disputes/${dispute}`,
        method: "POST",
        body: data,
        secure: true,
        type: ContentType.UrlEncoded,
        format: "json",
        ...params,
      }),

    /**
     * @description <p>Submits an Issuing <code>Dispute</code> to the card network. Stripe validates that all evidence fields required for the dispute’s reason are present. For more details, see <a href="/docs/issuing/purchases/disputes#dispute-reasons-and-evidence">Dispute reasons and evidence</a>.</p>
     *
     * @name PostIssuingDisputesDisputeSubmit
     * @request POST:/v1/issuing/disputes/{dispute}/submit
     * @secure
     * @response `200` `IssuingDispute` Successful response.
     * @response `default` `Error` Error response.
     */
    postIssuingDisputesDisputeSubmit: (
      dispute: string,
      data?: { expand?: string[]; metadata?: Record<string, string> | "" | (Record<string, string> & "") },
      params: RequestParams = {},
    ) =>
      this.request<IssuingDispute, Error>({
        path: `/v1/issuing/disputes/${dispute}/submit`,
        method: "POST",
        body: data,
        secure: true,
        type: ContentType.UrlEncoded,
        format: "json",
        ...params,
      }),

    /**
     * @description <p>Returns a list of Issuing <code>Settlement</code> objects. The objects are sorted in descending order by creation date, with the most recently created object appearing first.</p>
     *
     * @name GetIssuingSettlements
     * @request GET:/v1/issuing/settlements
     * @secure
     * @response `200` `{ data: (IssuingSettlement)[], has_more: boolean, object: "list", url: string }` Successful response.
     * @response `default` `Error` Error response.
     */
    getIssuingSettlements: (
      query?: {
        created?: { gt?: number; gte?: number; lt?: number; lte?: number } | number;
        ending_before?: string;
        expand?: string[];
        limit?: number;
        starting_after?: string;
      },
      data?: CardMandatePaymentMethodDetails,
      params: RequestParams = {},
    ) =>
      this.request<{ data: IssuingSettlement[]; has_more: boolean; object: "list"; url: string }, Error>({
        path: `/v1/issuing/settlements`,
        method: "GET",
        query: query,
        body: data,
        secure: true,
        type: ContentType.UrlEncoded,
        format: "json",
        ...params,
      }),

    /**
     * @description <p>Retrieves an Issuing <code>Settlement</code> object.</p>
     *
     * @name GetIssuingSettlementsSettlement
     * @request GET:/v1/issuing/settlements/{settlement}
     * @secure
     * @response `200` `IssuingSettlement` Successful response.
     * @response `default` `Error` Error response.
     */
    getIssuingSettlementsSettlement: (
      settlement: string,
      query?: { expand?: string[] },
      data?: CardMandatePaymentMethodDetails,
      params: RequestParams = {},
    ) =>
      this.request<IssuingSettlement, Error>({
        path: `/v1/issuing/settlements/${settlement}`,
        method: "GET",
        query: query,
        body: data,
        secure: true,
        type: ContentType.UrlEncoded,
        format: "json",
        ...params,
      }),

    /**
     * @description <p>Updates the specified Issuing <code>Settlement</code> object by setting the values of the parameters passed. Any parameters not provided will be left unchanged.</p>
     *
     * @name PostIssuingSettlementsSettlement
     * @request POST:/v1/issuing/settlements/{settlement}
     * @secure
     * @response `200` `IssuingSettlement` Successful response.
     * @response `default` `Error` Error response.
     */
    postIssuingSettlementsSettlement: (
      settlement: string,
      data?: { expand?: string[]; metadata?: Record<string, string> },
      params: RequestParams = {},
    ) =>
      this.request<IssuingSettlement, Error>({
        path: `/v1/issuing/settlements/${settlement}`,
        method: "POST",
        body: data,
        secure: true,
        type: ContentType.UrlEncoded,
        format: "json",
        ...params,
      }),

    /**
     * @description <p>Returns a list of Issuing <code>Transaction</code> objects. The objects are sorted in descending order by creation date, with the most recently created object appearing first.</p>
     *
     * @name GetIssuingTransactions
     * @request GET:/v1/issuing/transactions
     * @secure
     * @response `200` `{ data: (IssuingTransaction)[], has_more: boolean, object: "list", url: string }` Successful response.
     * @response `default` `Error` Error response.
     */
    getIssuingTransactions: (
      query?: {
        card?: string;
        cardholder?: string;
        created?: { gt?: number; gte?: number; lt?: number; lte?: number } | number;
        ending_before?: string;
        expand?: string[];
        limit?: number;
        starting_after?: string;
        type?: "capture" | "refund";
      },
      data?: CardMandatePaymentMethodDetails,
      params: RequestParams = {},
    ) =>
      this.request<{ data: IssuingTransaction[]; has_more: boolean; object: "list"; url: string }, Error>({
        path: `/v1/issuing/transactions`,
        method: "GET",
        query: query,
        body: data,
        secure: true,
        type: ContentType.UrlEncoded,
        format: "json",
        ...params,
      }),

    /**
     * @description <p>Retrieves an Issuing <code>Transaction</code> object.</p>
     *
     * @name GetIssuingTransactionsTransaction
     * @request GET:/v1/issuing/transactions/{transaction}
     * @secure
     * @response `200` `IssuingTransaction` Successful response.
     * @response `default` `Error` Error response.
     */
    getIssuingTransactionsTransaction: (
      transaction: string,
      query?: { expand?: string[] },
      data?: CardMandatePaymentMethodDetails,
      params: RequestParams = {},
    ) =>
      this.request<IssuingTransaction, Error>({
        path: `/v1/issuing/transactions/${transaction}`,
        method: "GET",
        query: query,
        body: data,
        secure: true,
        type: ContentType.UrlEncoded,
        format: "json",
        ...params,
      }),

    /**
     * @description <p>Updates the specified Issuing <code>Transaction</code> object by setting the values of the parameters passed. Any parameters not provided will be left unchanged.</p>
     *
     * @name PostIssuingTransactionsTransaction
     * @request POST:/v1/issuing/transactions/{transaction}
     * @secure
     * @response `200` `IssuingTransaction` Successful response.
     * @response `default` `Error` Error response.
     */
    postIssuingTransactionsTransaction: (
      transaction: string,
      data?: { expand?: string[]; metadata?: Record<string, string> | "" | (Record<string, string> & "") },
      params: RequestParams = {},
    ) =>
      this.request<IssuingTransaction, Error>({
        path: `/v1/issuing/transactions/${transaction}`,
        method: "POST",
        body: data,
        secure: true,
        type: ContentType.UrlEncoded,
        format: "json",
        ...params,
      }),

    /**
     * @description <p>Retrieves a Mandate object.</p>
     *
     * @name GetMandatesMandate
     * @request GET:/v1/mandates/{mandate}
     * @secure
     * @response `200` `Mandate` Successful response.
     * @response `default` `Error` Error response.
     */
    getMandatesMandate: (
      mandate: string,
      query?: { expand?: string[] },
      data?: CardMandatePaymentMethodDetails,
      params: RequestParams = {},
    ) =>
      this.request<Mandate, Error>({
        path: `/v1/mandates/${mandate}`,
        method: "GET",
        query: query,
        body: data,
        secure: true,
        type: ContentType.UrlEncoded,
        format: "json",
        ...params,
      }),

    /**
     * @description <p>Returns a list of your order returns. The returns are returned sorted by creation date, with the most recently created return appearing first.</p>
     *
     * @name GetOrderReturns
     * @request GET:/v1/order_returns
     * @secure
     * @response `200` `{ data: (OrderReturn)[], has_more: boolean, object: "list", url: string }` Successful response.
     * @response `default` `Error` Error response.
     */
    getOrderReturns: (
      query?: {
        created?: { gt?: number; gte?: number; lt?: number; lte?: number } | number;
        ending_before?: string;
        expand?: string[];
        limit?: number;
        order?: string;
        starting_after?: string;
      },
      data?: CardMandatePaymentMethodDetails,
      params: RequestParams = {},
    ) =>
      this.request<{ data: OrderReturn[]; has_more: boolean; object: "list"; url: string }, Error>({
        path: `/v1/order_returns`,
        method: "GET",
        query: query,
        body: data,
        secure: true,
        type: ContentType.UrlEncoded,
        format: "json",
        ...params,
      }),

    /**
     * @description <p>Retrieves the details of an existing order return. Supply the unique order ID from either an order return creation request or the order return list, and Stripe will return the corresponding order information.</p>
     *
     * @name GetOrderReturnsId
     * @request GET:/v1/order_returns/{id}
     * @secure
     * @response `200` `OrderReturn` Successful response.
     * @response `default` `Error` Error response.
     */
    getOrderReturnsId: (
      id: string,
      query?: { expand?: string[] },
      data?: CardMandatePaymentMethodDetails,
      params: RequestParams = {},
    ) =>
      this.request<OrderReturn, Error>({
        path: `/v1/order_returns/${id}`,
        method: "GET",
        query: query,
        body: data,
        secure: true,
        type: ContentType.UrlEncoded,
        format: "json",
        ...params,
      }),

    /**
     * @description <p>Returns a list of your orders. The orders are returned sorted by creation date, with the most recently created orders appearing first.</p>
     *
     * @name GetOrders
     * @request GET:/v1/orders
     * @secure
     * @response `200` `{ data: (Order)[], has_more: boolean, object: "list", url: string }` Successful response.
     * @response `default` `Error` Error response.
     */
    getOrders: (
      query?: {
        created?: { gt?: number; gte?: number; lt?: number; lte?: number } | number;
        customer?: string;
        ending_before?: string;
        expand?: string[];
        ids?: string[];
        limit?: number;
        starting_after?: string;
        status?: string;
        status_transitions?: {
          canceled?: { gt?: number; gte?: number; lt?: number; lte?: number } | number;
          fulfilled?: { gt?: number; gte?: number; lt?: number; lte?: number } | number;
          paid?: { gt?: number; gte?: number; lt?: number; lte?: number } | number;
          returned?: { gt?: number; gte?: number; lt?: number; lte?: number } | number;
        };
        upstream_ids?: string[];
      },
      data?: CardMandatePaymentMethodDetails,
      params: RequestParams = {},
    ) =>
      this.request<{ data: Order[]; has_more: boolean; object: "list"; url: string }, Error>({
        path: `/v1/orders`,
        method: "GET",
        query: query,
        body: data,
        secure: true,
        type: ContentType.UrlEncoded,
        format: "json",
        ...params,
      }),

    /**
     * @description <p>Creates a new order object.</p>
     *
     * @name PostOrders
     * @request POST:/v1/orders
     * @secure
     * @response `200` `Order` Successful response.
     * @response `default` `Error` Error response.
     */
    postOrders: (
      data: {
        coupon?: string;
        currency: string;
        customer?: string;
        email?: string;
        expand?: string[];
        items?: {
          amount?: number;
          currency?: string;
          description?: string;
          parent?: string;
          quantity?: number;
          type?: "discount" | "shipping" | "sku" | "tax";
        }[];
        metadata?: Record<string, string>;
        shipping?: {
          address: {
            city?: string;
            country?: string;
            line1?: string;
            line2?: string;
            postal_code?: string;
            state?: string;
          };
          name: string;
          phone?: string;
        };
      },
      params: RequestParams = {},
    ) =>
      this.request<Order, Error>({
        path: `/v1/orders`,
        method: "POST",
        body: data,
        secure: true,
        type: ContentType.UrlEncoded,
        format: "json",
        ...params,
      }),

    /**
     * @description <p>Retrieves the details of an existing order. Supply the unique order ID from either an order creation request or the order list, and Stripe will return the corresponding order information.</p>
     *
     * @name GetOrdersId
     * @request GET:/v1/orders/{id}
     * @secure
     * @response `200` `Order` Successful response.
     * @response `default` `Error` Error response.
     */
    getOrdersId: (
      id: string,
      query?: { expand?: string[] },
      data?: CardMandatePaymentMethodDetails,
      params: RequestParams = {},
    ) =>
      this.request<Order, Error>({
        path: `/v1/orders/${id}`,
        method: "GET",
        query: query,
        body: data,
        secure: true,
        type: ContentType.UrlEncoded,
        format: "json",
        ...params,
      }),

    /**
     * @description <p>Updates the specific order by setting the values of the parameters passed. Any parameters not provided will be left unchanged.</p>
     *
     * @name PostOrdersId
     * @request POST:/v1/orders/{id}
     * @secure
     * @response `200` `Order` Successful response.
     * @response `default` `Error` Error response.
     */
    postOrdersId: (
      id: string,
      data?: {
        coupon?: string;
        expand?: string[];
        metadata?: Record<string, string> | "" | (Record<string, string> & "");
        selected_shipping_method?: string;
        shipping?: { carrier: string; tracking_number: string };
        status?: "canceled" | "created" | "fulfilled" | "paid" | "returned";
      },
      params: RequestParams = {},
    ) =>
      this.request<Order, Error>({
        path: `/v1/orders/${id}`,
        method: "POST",
        body: data,
        secure: true,
        type: ContentType.UrlEncoded,
        format: "json",
        ...params,
      }),

    /**
     * @description <p>Pay an order by providing a <code>source</code> to create a payment.</p>
     *
     * @name PostOrdersIdPay
     * @request POST:/v1/orders/{id}/pay
     * @secure
     * @response `200` `Order` Successful response.
     * @response `default` `Error` Error response.
     */
    postOrdersIdPay: (
      id: string,
      data?: {
        application_fee?: number;
        customer?: string;
        email?: string;
        expand?: string[];
        metadata?: Record<string, string>;
        source?: string;
      },
      params: RequestParams = {},
    ) =>
      this.request<Order, Error>({
        path: `/v1/orders/${id}/pay`,
        method: "POST",
        body: data,
        secure: true,
        type: ContentType.UrlEncoded,
        format: "json",
        ...params,
      }),

    /**
     * @description <p>Return all or part of an order. The order must have a status of <code>paid</code> or <code>fulfilled</code> before it can be returned. Once all items have been returned, the order will become <code>canceled</code> or <code>returned</code> depending on which status the order started in.</p>
     *
     * @name PostOrdersIdReturns
     * @request POST:/v1/orders/{id}/returns
     * @secure
     * @response `200` `OrderReturn` Successful response.
     * @response `default` `Error` Error response.
     */
    postOrdersIdReturns: (
      id: string,
      data?: {
        expand?: string[];
        items?:
          | {
              amount?: number;
              description?: string;
              parent?: string;
              quantity?: number;
              type?: "discount" | "shipping" | "sku" | "tax";
            }[]
          | ""
          | ({
              amount?: number;
              description?: string;
              parent?: string;
              quantity?: number;
              type?: "discount" | "shipping" | "sku" | "tax";
            }[] &
              "");
      },
      params: RequestParams = {},
    ) =>
      this.request<OrderReturn, Error>({
        path: `/v1/orders/${id}/returns`,
        method: "POST",
        body: data,
        secure: true,
        type: ContentType.UrlEncoded,
        format: "json",
        ...params,
      }),

    /**
     * @description <p>Returns a list of PaymentIntents.</p>
     *
     * @name GetPaymentIntents
     * @request GET:/v1/payment_intents
     * @secure
     * @response `200` `{ data: (PaymentIntent)[], has_more: boolean, object: "list", url: string }` Successful response.
     * @response `default` `Error` Error response.
     */
    getPaymentIntents: (
      query?: {
        created?: { gt?: number; gte?: number; lt?: number; lte?: number } | number;
        customer?: string;
        ending_before?: string;
        expand?: string[];
        limit?: number;
        starting_after?: string;
      },
      data?: CardMandatePaymentMethodDetails,
      params: RequestParams = {},
    ) =>
      this.request<{ data: PaymentIntent[]; has_more: boolean; object: "list"; url: string }, Error>({
        path: `/v1/payment_intents`,
        method: "GET",
        query: query,
        body: data,
        secure: true,
        type: ContentType.UrlEncoded,
        format: "json",
        ...params,
      }),

    /**
     * @description <p>Creates a PaymentIntent object.</p> <p>After the PaymentIntent is created, attach a payment method and <a href="/docs/api/payment_intents/confirm">confirm</a> to continue the payment. You can read more about the different payment flows available via the Payment Intents API <a href="/docs/payments/payment-intents">here</a>.</p> <p>When <code>confirm=true</code> is used during creation, it is equivalent to creating and confirming the PaymentIntent in the same call. You may use any parameters available in the <a href="/docs/api/payment_intents/confirm">confirm API</a> when <code>confirm=true</code> is supplied.</p>
     *
     * @name PostPaymentIntents
     * @request POST:/v1/payment_intents
     * @secure
     * @response `200` `PaymentIntent` Successful response.
     * @response `default` `Error` Error response.
     */
    postPaymentIntents: (
      data: {
        amount: number;
        application_fee_amount?: number;
        automatic_payment_methods?: { enabled: boolean };
        capture_method?: "automatic" | "manual";
        confirm?: boolean;
        confirmation_method?: "automatic" | "manual";
        currency: string;
        customer?: string;
        description?: string;
        error_on_requires_action?: boolean;
        expand?: string[];
        mandate?: string;
        mandate_data?: {
          customer_acceptance: {
            accepted_at?: number;
            offline?: object;
            online?: { ip_address: string; user_agent: string };
            type: "offline" | "online";
          };
        };
        metadata?: Record<string, string>;
        off_session?: boolean | "one_off" | "recurring";
        on_behalf_of?: string;
        payment_method?: string;
        payment_method_data?: {
          acss_debit?: { account_number: string; institution_number: string; transit_number: string };
          afterpay_clearpay?: object;
          alipay?: object;
          au_becs_debit?: { account_number: string; bsb_number: string };
          bacs_debit?: { account_number?: string; sort_code?: string };
          bancontact?: object;
          billing_details?: {
            address?:
              | {
                  city?: string;
                  country?: string;
                  line1?: string;
                  line2?: string;
                  postal_code?: string;
                  state?: string;
                }
              | ""
              | ({
                  city?: string;
                  country?: string;
                  line1?: string;
                  line2?: string;
                  postal_code?: string;
                  state?: string;
                } & "");
            email?: string | "";
            name?: string;
            phone?: string;
          };
          boleto?: { tax_id: string };
          eps?: {
            bank?:
              | "arzte_und_apotheker_bank"
              | "austrian_anadi_bank_ag"
              | "bank_austria"
              | "bankhaus_carl_spangler"
              | "bankhaus_schelhammer_und_schattera_ag"
              | "bawag_psk_ag"
              | "bks_bank_ag"
              | "brull_kallmus_bank_ag"
              | "btv_vier_lander_bank"
              | "capital_bank_grawe_gruppe_ag"
              | "dolomitenbank"
              | "easybank_ag"
              | "erste_bank_und_sparkassen"
              | "hypo_alpeadriabank_international_ag"
              | "hypo_bank_burgenland_aktiengesellschaft"
              | "hypo_noe_lb_fur_niederosterreich_u_wien"
              | "hypo_oberosterreich_salzburg_steiermark"
              | "hypo_tirol_bank_ag"
              | "hypo_vorarlberg_bank_ag"
              | "marchfelder_bank"
              | "oberbank_ag"
              | "raiffeisen_bankengruppe_osterreich"
              | "schoellerbank_ag"
              | "sparda_bank_wien"
              | "volksbank_gruppe"
              | "volkskreditbank_ag"
              | "vr_bank_braunau";
          };
          fpx?: {
            bank:
              | "affin_bank"
              | "agrobank"
              | "alliance_bank"
              | "ambank"
              | "bank_islam"
              | "bank_muamalat"
              | "bank_rakyat"
              | "bsn"
              | "cimb"
              | "deutsche_bank"
              | "hong_leong_bank"
              | "hsbc"
              | "kfh"
              | "maybank2e"
              | "maybank2u"
              | "ocbc"
              | "pb_enterprise"
              | "public_bank"
              | "rhb"
              | "standard_chartered"
              | "uob";
          };
          giropay?: object;
          grabpay?: object;
          ideal?: {
            bank?:
              | "abn_amro"
              | "asn_bank"
              | "bunq"
              | "handelsbanken"
              | "ing"
              | "knab"
              | "moneyou"
              | "rabobank"
              | "regiobank"
              | "revolut"
              | "sns_bank"
              | "triodos_bank"
              | "van_lanschot";
          };
          interac_present?: object;
          klarna?: { dob?: { day: number; month: number; year: number } };
          metadata?: Record<string, string>;
          oxxo?: object;
          p24?: {
            bank?:
              | "alior_bank"
              | "bank_millennium"
              | "bank_nowy_bfg_sa"
              | "bank_pekao_sa"
              | "banki_spbdzielcze"
              | "blik"
              | "bnp_paribas"
              | "boz"
              | "citi_handlowy"
              | "credit_agricole"
              | "envelobank"
              | "etransfer_pocztowy24"
              | "getin_bank"
              | "ideabank"
              | "ing"
              | "inteligo"
              | "mbank_mtransfer"
              | "nest_przelew"
              | "noble_pay"
              | "pbac_z_ipko"
              | "plus_bank"
              | "santander_przelew24"
              | "tmobile_usbugi_bankowe"
              | "toyota_bank"
              | "volkswagen_bank";
          };
          sepa_debit?: { iban: string };
          sofort?: { country: "AT" | "BE" | "DE" | "ES" | "IT" | "NL" };
          type:
            | "acss_debit"
            | "afterpay_clearpay"
            | "alipay"
            | "au_becs_debit"
            | "bacs_debit"
            | "bancontact"
            | "boleto"
            | "eps"
            | "fpx"
            | "giropay"
            | "grabpay"
            | "ideal"
            | "klarna"
            | "oxxo"
            | "p24"
            | "sepa_debit"
            | "sofort"
            | "wechat_pay";
          wechat_pay?: object;
        };
        payment_method_options?: {
          acss_debit?:
            | {
                mandate_options?: {
                  custom_mandate_url?: string | "";
                  interval_description?: string;
                  payment_schedule?: "combined" | "interval" | "sporadic";
                  transaction_type?: "business" | "personal";
                };
                verification_method?: "automatic" | "instant" | "microdeposits";
              }
            | ""
            | ({
                mandate_options?: {
                  custom_mandate_url?: string | "";
                  interval_description?: string;
                  payment_schedule?: "combined" | "interval" | "sporadic";
                  transaction_type?: "business" | "personal";
                };
                verification_method?: "automatic" | "instant" | "microdeposits";
              } & "");
          afterpay_clearpay?: { reference?: string } | "" | ({ reference?: string } & "");
          alipay?: object | "" | (object & "");
          au_becs_debit?: object | "" | (object & "");
          bacs_debit?: object | "" | (object & "");
          bancontact?:
            | { preferred_language?: "de" | "en" | "fr" | "nl" }
            | ""
            | ({ preferred_language?: "de" | "en" | "fr" | "nl" } & "");
          boleto?: { expires_after_days?: number } | "" | ({ expires_after_days?: number } & "");
          card?:
            | {
                cvc_token?: string;
                installments?: {
                  enabled?: boolean;
                  plan?:
                    | { count: number; interval: "month"; type: "fixed_count" }
                    | ""
                    | ({ count: number; interval: "month"; type: "fixed_count" } & "");
                };
                network?:
                  | "amex"
                  | "cartes_bancaires"
                  | "diners"
                  | "discover"
                  | "interac"
                  | "jcb"
                  | "mastercard"
                  | "unionpay"
                  | "unknown"
                  | "visa";
                request_three_d_secure?: "any" | "automatic";
                setup_future_usage?: "" | "none" | "off_session" | "on_session";
              }
            | ""
            | ({
                cvc_token?: string;
                installments?: {
                  enabled?: boolean;
                  plan?:
                    | { count: number; interval: "month"; type: "fixed_count" }
                    | ""
                    | ({ count: number; interval: "month"; type: "fixed_count" } & "");
                };
                network?:
                  | "amex"
                  | "cartes_bancaires"
                  | "diners"
                  | "discover"
                  | "interac"
                  | "jcb"
                  | "mastercard"
                  | "unionpay"
                  | "unknown"
                  | "visa";
                request_three_d_secure?: "any" | "automatic";
                setup_future_usage?: "" | "none" | "off_session" | "on_session";
              } & "");
          card_present?: object | "" | (object & "");
          eps?: object | "" | (object & "");
          fpx?: object | "" | (object & "");
          giropay?: object | "" | (object & "");
          grabpay?: object | "" | (object & "");
          ideal?: object | "" | (object & "");
          interac_present?: object | "" | (object & "");
          klarna?:
            | {
                preferred_locale?:
                  | "da-DK"
                  | "de-AT"
                  | "de-DE"
                  | "en-AT"
                  | "en-BE"
                  | "en-DE"
                  | "en-DK"
                  | "en-ES"
                  | "en-FI"
                  | "en-FR"
                  | "en-GB"
                  | "en-IE"
                  | "en-IT"
                  | "en-NL"
                  | "en-NO"
                  | "en-SE"
                  | "en-US"
                  | "es-ES"
                  | "es-US"
                  | "fi-FI"
                  | "fr-BE"
                  | "fr-FR"
                  | "it-IT"
                  | "nb-NO"
                  | "nl-BE"
                  | "nl-NL"
                  | "sv-FI"
                  | "sv-SE";
              }
            | ""
            | ({
                preferred_locale?:
                  | "da-DK"
                  | "de-AT"
                  | "de-DE"
                  | "en-AT"
                  | "en-BE"
                  | "en-DE"
                  | "en-DK"
                  | "en-ES"
                  | "en-FI"
                  | "en-FR"
                  | "en-GB"
                  | "en-IE"
                  | "en-IT"
                  | "en-NL"
                  | "en-NO"
                  | "en-SE"
                  | "en-US"
                  | "es-ES"
                  | "es-US"
                  | "fi-FI"
                  | "fr-BE"
                  | "fr-FR"
                  | "it-IT"
                  | "nb-NO"
                  | "nl-BE"
                  | "nl-NL"
                  | "sv-FI"
                  | "sv-SE";
              } & "");
          oxxo?: { expires_after_days?: number } | "" | ({ expires_after_days?: number } & "");
          p24?: { tos_shown_and_accepted?: boolean } | "" | ({ tos_shown_and_accepted?: boolean } & "");
          sepa_debit?: { mandate_options?: object } | "" | ({ mandate_options?: object } & "");
          sofort?:
            | { preferred_language?: "" | "de" | "en" | "es" | "fr" | "it" | "nl" | "pl" }
            | ""
            | ({ preferred_language?: "" | "de" | "en" | "es" | "fr" | "it" | "nl" | "pl" } & "");
          wechat_pay?:
            | { app_id?: string; client: "android" | "ios" | "web" }
            | ""
            | ({ app_id?: string; client: "android" | "ios" | "web" } & "");
        };
        payment_method_types?: string[];
        receipt_email?: string;
        return_url?: string;
        setup_future_usage?: "off_session" | "on_session";
        shipping?: {
          address: {
            city?: string;
            country?: string;
            line1?: string;
            line2?: string;
            postal_code?: string;
            state?: string;
          };
          carrier?: string;
          name: string;
          phone?: string;
          tracking_number?: string;
        };
        statement_descriptor?: string;
        statement_descriptor_suffix?: string;
        transfer_data?: { amount?: number; destination: string };
        transfer_group?: string;
        use_stripe_sdk?: boolean;
      },
      params: RequestParams = {},
    ) =>
      this.request<PaymentIntent, Error>({
        path: `/v1/payment_intents`,
        method: "POST",
        body: data,
        secure: true,
        type: ContentType.UrlEncoded,
        format: "json",
        ...params,
      }),

    /**
     * @description <p>Retrieves the details of a PaymentIntent that has previously been created. </p> <p>Client-side retrieval using a publishable key is allowed when the <code>client_secret</code> is provided in the query string. </p> <p>When retrieved with a publishable key, only a subset of properties will be returned. Please refer to the <a href="#payment_intent_object">payment intent</a> object reference for more details.</p>
     *
     * @name GetPaymentIntentsIntent
     * @request GET:/v1/payment_intents/{intent}
     * @secure
     * @response `200` `PaymentIntent` Successful response.
     * @response `default` `Error` Error response.
     */
    getPaymentIntentsIntent: (
      intent: string,
      query?: { client_secret?: string; expand?: string[] },
      data?: CardMandatePaymentMethodDetails,
      params: RequestParams = {},
    ) =>
      this.request<PaymentIntent, Error>({
        path: `/v1/payment_intents/${intent}`,
        method: "GET",
        query: query,
        body: data,
        secure: true,
        type: ContentType.UrlEncoded,
        format: "json",
        ...params,
      }),

    /**
     * @description <p>Updates properties on a PaymentIntent object without confirming.</p> <p>Depending on which properties you update, you may need to confirm the PaymentIntent again. For example, updating the <code>payment_method</code> will always require you to confirm the PaymentIntent again. If you prefer to update and confirm at the same time, we recommend updating properties via the <a href="/docs/api/payment_intents/confirm">confirm API</a> instead.</p>
     *
     * @name PostPaymentIntentsIntent
     * @request POST:/v1/payment_intents/{intent}
     * @secure
     * @response `200` `PaymentIntent` Successful response.
     * @response `default` `Error` Error response.
     */
    postPaymentIntentsIntent: (
      intent: string,
      data?: {
        amount?: number;
        application_fee_amount?: number | "";
        currency?: string;
        customer?: string;
        description?: string;
        expand?: string[];
        metadata?: Record<string, string> | "" | (Record<string, string> & "");
        payment_method?: string;
        payment_method_data?: {
          acss_debit?: { account_number: string; institution_number: string; transit_number: string };
          afterpay_clearpay?: object;
          alipay?: object;
          au_becs_debit?: { account_number: string; bsb_number: string };
          bacs_debit?: { account_number?: string; sort_code?: string };
          bancontact?: object;
          billing_details?: {
            address?:
              | {
                  city?: string;
                  country?: string;
                  line1?: string;
                  line2?: string;
                  postal_code?: string;
                  state?: string;
                }
              | ""
              | ({
                  city?: string;
                  country?: string;
                  line1?: string;
                  line2?: string;
                  postal_code?: string;
                  state?: string;
                } & "");
            email?: string | "";
            name?: string;
            phone?: string;
          };
          boleto?: { tax_id: string };
          eps?: {
            bank?:
              | "arzte_und_apotheker_bank"
              | "austrian_anadi_bank_ag"
              | "bank_austria"
              | "bankhaus_carl_spangler"
              | "bankhaus_schelhammer_und_schattera_ag"
              | "bawag_psk_ag"
              | "bks_bank_ag"
              | "brull_kallmus_bank_ag"
              | "btv_vier_lander_bank"
              | "capital_bank_grawe_gruppe_ag"
              | "dolomitenbank"
              | "easybank_ag"
              | "erste_bank_und_sparkassen"
              | "hypo_alpeadriabank_international_ag"
              | "hypo_bank_burgenland_aktiengesellschaft"
              | "hypo_noe_lb_fur_niederosterreich_u_wien"
              | "hypo_oberosterreich_salzburg_steiermark"
              | "hypo_tirol_bank_ag"
              | "hypo_vorarlberg_bank_ag"
              | "marchfelder_bank"
              | "oberbank_ag"
              | "raiffeisen_bankengruppe_osterreich"
              | "schoellerbank_ag"
              | "sparda_bank_wien"
              | "volksbank_gruppe"
              | "volkskreditbank_ag"
              | "vr_bank_braunau";
          };
          fpx?: {
            bank:
              | "affin_bank"
              | "agrobank"
              | "alliance_bank"
              | "ambank"
              | "bank_islam"
              | "bank_muamalat"
              | "bank_rakyat"
              | "bsn"
              | "cimb"
              | "deutsche_bank"
              | "hong_leong_bank"
              | "hsbc"
              | "kfh"
              | "maybank2e"
              | "maybank2u"
              | "ocbc"
              | "pb_enterprise"
              | "public_bank"
              | "rhb"
              | "standard_chartered"
              | "uob";
          };
          giropay?: object;
          grabpay?: object;
          ideal?: {
            bank?:
              | "abn_amro"
              | "asn_bank"
              | "bunq"
              | "handelsbanken"
              | "ing"
              | "knab"
              | "moneyou"
              | "rabobank"
              | "regiobank"
              | "revolut"
              | "sns_bank"
              | "triodos_bank"
              | "van_lanschot";
          };
          interac_present?: object;
          klarna?: { dob?: { day: number; month: number; year: number } };
          metadata?: Record<string, string>;
          oxxo?: object;
          p24?: {
            bank?:
              | "alior_bank"
              | "bank_millennium"
              | "bank_nowy_bfg_sa"
              | "bank_pekao_sa"
              | "banki_spbdzielcze"
              | "blik"
              | "bnp_paribas"
              | "boz"
              | "citi_handlowy"
              | "credit_agricole"
              | "envelobank"
              | "etransfer_pocztowy24"
              | "getin_bank"
              | "ideabank"
              | "ing"
              | "inteligo"
              | "mbank_mtransfer"
              | "nest_przelew"
              | "noble_pay"
              | "pbac_z_ipko"
              | "plus_bank"
              | "santander_przelew24"
              | "tmobile_usbugi_bankowe"
              | "toyota_bank"
              | "volkswagen_bank";
          };
          sepa_debit?: { iban: string };
          sofort?: { country: "AT" | "BE" | "DE" | "ES" | "IT" | "NL" };
          type:
            | "acss_debit"
            | "afterpay_clearpay"
            | "alipay"
            | "au_becs_debit"
            | "bacs_debit"
            | "bancontact"
            | "boleto"
            | "eps"
            | "fpx"
            | "giropay"
            | "grabpay"
            | "ideal"
            | "klarna"
            | "oxxo"
            | "p24"
            | "sepa_debit"
            | "sofort"
            | "wechat_pay";
          wechat_pay?: object;
        };
        payment_method_options?: {
          acss_debit?:
            | {
                mandate_options?: {
                  custom_mandate_url?: string | "";
                  interval_description?: string;
                  payment_schedule?: "combined" | "interval" | "sporadic";
                  transaction_type?: "business" | "personal";
                };
                verification_method?: "automatic" | "instant" | "microdeposits";
              }
            | ""
            | ({
                mandate_options?: {
                  custom_mandate_url?: string | "";
                  interval_description?: string;
                  payment_schedule?: "combined" | "interval" | "sporadic";
                  transaction_type?: "business" | "personal";
                };
                verification_method?: "automatic" | "instant" | "microdeposits";
              } & "");
          afterpay_clearpay?: { reference?: string } | "" | ({ reference?: string } & "");
          alipay?: object | "" | (object & "");
          au_becs_debit?: object | "" | (object & "");
          bacs_debit?: object | "" | (object & "");
          bancontact?:
            | { preferred_language?: "de" | "en" | "fr" | "nl" }
            | ""
            | ({ preferred_language?: "de" | "en" | "fr" | "nl" } & "");
          boleto?: { expires_after_days?: number } | "" | ({ expires_after_days?: number } & "");
          card?:
            | {
                cvc_token?: string;
                installments?: {
                  enabled?: boolean;
                  plan?:
                    | { count: number; interval: "month"; type: "fixed_count" }
                    | ""
                    | ({ count: number; interval: "month"; type: "fixed_count" } & "");
                };
                network?:
                  | "amex"
                  | "cartes_bancaires"
                  | "diners"
                  | "discover"
                  | "interac"
                  | "jcb"
                  | "mastercard"
                  | "unionpay"
                  | "unknown"
                  | "visa";
                request_three_d_secure?: "any" | "automatic";
                setup_future_usage?: "" | "none" | "off_session" | "on_session";
              }
            | ""
            | ({
                cvc_token?: string;
                installments?: {
                  enabled?: boolean;
                  plan?:
                    | { count: number; interval: "month"; type: "fixed_count" }
                    | ""
                    | ({ count: number; interval: "month"; type: "fixed_count" } & "");
                };
                network?:
                  | "amex"
                  | "cartes_bancaires"
                  | "diners"
                  | "discover"
                  | "interac"
                  | "jcb"
                  | "mastercard"
                  | "unionpay"
                  | "unknown"
                  | "visa";
                request_three_d_secure?: "any" | "automatic";
                setup_future_usage?: "" | "none" | "off_session" | "on_session";
              } & "");
          card_present?: object | "" | (object & "");
          eps?: object | "" | (object & "");
          fpx?: object | "" | (object & "");
          giropay?: object | "" | (object & "");
          grabpay?: object | "" | (object & "");
          ideal?: object | "" | (object & "");
          interac_present?: object | "" | (object & "");
          klarna?:
            | {
                preferred_locale?:
                  | "da-DK"
                  | "de-AT"
                  | "de-DE"
                  | "en-AT"
                  | "en-BE"
                  | "en-DE"
                  | "en-DK"
                  | "en-ES"
                  | "en-FI"
                  | "en-FR"
                  | "en-GB"
                  | "en-IE"
                  | "en-IT"
                  | "en-NL"
                  | "en-NO"
                  | "en-SE"
                  | "en-US"
                  | "es-ES"
                  | "es-US"
                  | "fi-FI"
                  | "fr-BE"
                  | "fr-FR"
                  | "it-IT"
                  | "nb-NO"
                  | "nl-BE"
                  | "nl-NL"
                  | "sv-FI"
                  | "sv-SE";
              }
            | ""
            | ({
                preferred_locale?:
                  | "da-DK"
                  | "de-AT"
                  | "de-DE"
                  | "en-AT"
                  | "en-BE"
                  | "en-DE"
                  | "en-DK"
                  | "en-ES"
                  | "en-FI"
                  | "en-FR"
                  | "en-GB"
                  | "en-IE"
                  | "en-IT"
                  | "en-NL"
                  | "en-NO"
                  | "en-SE"
                  | "en-US"
                  | "es-ES"
                  | "es-US"
                  | "fi-FI"
                  | "fr-BE"
                  | "fr-FR"
                  | "it-IT"
                  | "nb-NO"
                  | "nl-BE"
                  | "nl-NL"
                  | "sv-FI"
                  | "sv-SE";
              } & "");
          oxxo?: { expires_after_days?: number } | "" | ({ expires_after_days?: number } & "");
          p24?: { tos_shown_and_accepted?: boolean } | "" | ({ tos_shown_and_accepted?: boolean } & "");
          sepa_debit?: { mandate_options?: object } | "" | ({ mandate_options?: object } & "");
          sofort?:
            | { preferred_language?: "" | "de" | "en" | "es" | "fr" | "it" | "nl" | "pl" }
            | ""
            | ({ preferred_language?: "" | "de" | "en" | "es" | "fr" | "it" | "nl" | "pl" } & "");
          wechat_pay?:
            | { app_id?: string; client: "android" | "ios" | "web" }
            | ""
            | ({ app_id?: string; client: "android" | "ios" | "web" } & "");
        };
        payment_method_types?: string[];
        receipt_email?: string | "";
        setup_future_usage?: "" | "off_session" | "on_session";
        shipping?:
          | {
              address: {
                city?: string;
                country?: string;
                line1?: string;
                line2?: string;
                postal_code?: string;
                state?: string;
              };
              carrier?: string;
              name: string;
              phone?: string;
              tracking_number?: string;
            }
          | ""
          | ({
              address: {
                city?: string;
                country?: string;
                line1?: string;
                line2?: string;
                postal_code?: string;
                state?: string;
              };
              carrier?: string;
              name: string;
              phone?: string;
              tracking_number?: string;
            } & "");
        statement_descriptor?: string;
        statement_descriptor_suffix?: string;
        transfer_data?: { amount?: number };
        transfer_group?: string;
      },
      params: RequestParams = {},
    ) =>
      this.request<PaymentIntent, Error>({
        path: `/v1/payment_intents/${intent}`,
        method: "POST",
        body: data,
        secure: true,
        type: ContentType.UrlEncoded,
        format: "json",
        ...params,
      }),

    /**
     * @description <p>A PaymentIntent object can be canceled when it is in one of these statuses: <code>requires_payment_method</code>, <code>requires_capture</code>, <code>requires_confirmation</code>, <code>requires_action</code>, or <code>processing</code>. </p> <p>Once canceled, no additional charges will be made by the PaymentIntent and any operations on the PaymentIntent will fail with an error. For PaymentIntents with <code>status=’requires_capture’</code>, the remaining <code>amount_capturable</code> will automatically be refunded.</p>
     *
     * @name PostPaymentIntentsIntentCancel
     * @request POST:/v1/payment_intents/{intent}/cancel
     * @secure
     * @response `200` `PaymentIntent` Successful response.
     * @response `default` `Error` Error response.
     */
    postPaymentIntentsIntentCancel: (
      intent: string,
      data?: {
        cancellation_reason?: "abandoned" | "duplicate" | "fraudulent" | "requested_by_customer";
        expand?: string[];
      },
      params: RequestParams = {},
    ) =>
      this.request<PaymentIntent, Error>({
        path: `/v1/payment_intents/${intent}/cancel`,
        method: "POST",
        body: data,
        secure: true,
        type: ContentType.UrlEncoded,
        format: "json",
        ...params,
      }),

    /**
     * @description <p>Capture the funds of an existing uncaptured PaymentIntent when its status is <code>requires_capture</code>.</p> <p>Uncaptured PaymentIntents will be canceled a set number of days after they are created (7 by default).</p> <p>Learn more about <a href="/docs/payments/capture-later">separate authorization and capture</a>.</p>
     *
     * @name PostPaymentIntentsIntentCapture
     * @request POST:/v1/payment_intents/{intent}/capture
     * @secure
     * @response `200` `PaymentIntent` Successful response.
     * @response `default` `Error` Error response.
     */
    postPaymentIntentsIntentCapture: (
      intent: string,
      data?: {
        amount_to_capture?: number;
        application_fee_amount?: number;
        expand?: string[];
        statement_descriptor?: string;
        statement_descriptor_suffix?: string;
        transfer_data?: { amount?: number };
      },
      params: RequestParams = {},
    ) =>
      this.request<PaymentIntent, Error>({
        path: `/v1/payment_intents/${intent}/capture`,
        method: "POST",
        body: data,
        secure: true,
        type: ContentType.UrlEncoded,
        format: "json",
        ...params,
      }),

    /**
     * @description <p>Confirm that your customer intends to pay with current or provided payment method. Upon confirmation, the PaymentIntent will attempt to initiate a payment.</p> <p>If the selected payment method requires additional authentication steps, the PaymentIntent will transition to the <code>requires_action</code> status and suggest additional actions via <code>next_action</code>. If payment fails, the PaymentIntent will transition to the <code>requires_payment_method</code> status. If payment succeeds, the PaymentIntent will transition to the <code>succeeded</code> status (or <code>requires_capture</code>, if <code>capture_method</code> is set to <code>manual</code>).</p> <p>If the <code>confirmation_method</code> is <code>automatic</code>, payment may be attempted using our <a href="/docs/stripe-js/reference#stripe-handle-card-payment">client SDKs</a> and the PaymentIntent’s <a href="#payment_intent_object-client_secret">client_secret</a>. After <code>next_action</code>s are handled by the client, no additional confirmation is required to complete the payment.</p> <p>If the <code>confirmation_method</code> is <code>manual</code>, all payment attempts must be initiated using a secret key. If any actions are required for the payment, the PaymentIntent will return to the <code>requires_confirmation</code> state after those actions are completed. Your server needs to then explicitly re-confirm the PaymentIntent to initiate the next payment attempt. Read the <a href="/docs/payments/payment-intents/web-manual">expanded documentation</a> to learn more about manual confirmation.</p>
     *
     * @name PostPaymentIntentsIntentConfirm
     * @request POST:/v1/payment_intents/{intent}/confirm
     * @secure
     * @response `200` `PaymentIntent` Successful response.
     * @response `default` `Error` Error response.
     */
    postPaymentIntentsIntentConfirm: (
      intent: string,
      data?: {
        client_secret?: string;
        error_on_requires_action?: boolean;
        expand?: string[];
        mandate?: string;
        mandate_data?:
          | {
              customer_acceptance: {
                accepted_at?: number;
                offline?: object;
                online?: { ip_address: string; user_agent: string };
                type: "offline" | "online";
              };
            }
          | { customer_acceptance: { online: { ip_address?: string; user_agent?: string }; type: "online" } }
          | ({
              customer_acceptance: {
                accepted_at?: number;
                offline?: object;
                online?: { ip_address: string; user_agent: string };
                type: "offline" | "online";
              };
            } & { customer_acceptance: { online: { ip_address?: string; user_agent?: string }; type: "online" } });
        off_session?: boolean | "one_off" | "recurring";
        payment_method?: string;
        payment_method_data?: {
          acss_debit?: { account_number: string; institution_number: string; transit_number: string };
          afterpay_clearpay?: object;
          alipay?: object;
          au_becs_debit?: { account_number: string; bsb_number: string };
          bacs_debit?: { account_number?: string; sort_code?: string };
          bancontact?: object;
          billing_details?: {
            address?:
              | {
                  city?: string;
                  country?: string;
                  line1?: string;
                  line2?: string;
                  postal_code?: string;
                  state?: string;
                }
              | ""
              | ({
                  city?: string;
                  country?: string;
                  line1?: string;
                  line2?: string;
                  postal_code?: string;
                  state?: string;
                } & "");
            email?: string | "";
            name?: string;
            phone?: string;
          };
          boleto?: { tax_id: string };
          eps?: {
            bank?:
              | "arzte_und_apotheker_bank"
              | "austrian_anadi_bank_ag"
              | "bank_austria"
              | "bankhaus_carl_spangler"
              | "bankhaus_schelhammer_und_schattera_ag"
              | "bawag_psk_ag"
              | "bks_bank_ag"
              | "brull_kallmus_bank_ag"
              | "btv_vier_lander_bank"
              | "capital_bank_grawe_gruppe_ag"
              | "dolomitenbank"
              | "easybank_ag"
              | "erste_bank_und_sparkassen"
              | "hypo_alpeadriabank_international_ag"
              | "hypo_bank_burgenland_aktiengesellschaft"
              | "hypo_noe_lb_fur_niederosterreich_u_wien"
              | "hypo_oberosterreich_salzburg_steiermark"
              | "hypo_tirol_bank_ag"
              | "hypo_vorarlberg_bank_ag"
              | "marchfelder_bank"
              | "oberbank_ag"
              | "raiffeisen_bankengruppe_osterreich"
              | "schoellerbank_ag"
              | "sparda_bank_wien"
              | "volksbank_gruppe"
              | "volkskreditbank_ag"
              | "vr_bank_braunau";
          };
          fpx?: {
            bank:
              | "affin_bank"
              | "agrobank"
              | "alliance_bank"
              | "ambank"
              | "bank_islam"
              | "bank_muamalat"
              | "bank_rakyat"
              | "bsn"
              | "cimb"
              | "deutsche_bank"
              | "hong_leong_bank"
              | "hsbc"
              | "kfh"
              | "maybank2e"
              | "maybank2u"
              | "ocbc"
              | "pb_enterprise"
              | "public_bank"
              | "rhb"
              | "standard_chartered"
              | "uob";
          };
          giropay?: object;
          grabpay?: object;
          ideal?: {
            bank?:
              | "abn_amro"
              | "asn_bank"
              | "bunq"
              | "handelsbanken"
              | "ing"
              | "knab"
              | "moneyou"
              | "rabobank"
              | "regiobank"
              | "revolut"
              | "sns_bank"
              | "triodos_bank"
              | "van_lanschot";
          };
          interac_present?: object;
          klarna?: { dob?: { day: number; month: number; year: number } };
          metadata?: Record<string, string>;
          oxxo?: object;
          p24?: {
            bank?:
              | "alior_bank"
              | "bank_millennium"
              | "bank_nowy_bfg_sa"
              | "bank_pekao_sa"
              | "banki_spbdzielcze"
              | "blik"
              | "bnp_paribas"
              | "boz"
              | "citi_handlowy"
              | "credit_agricole"
              | "envelobank"
              | "etransfer_pocztowy24"
              | "getin_bank"
              | "ideabank"
              | "ing"
              | "inteligo"
              | "mbank_mtransfer"
              | "nest_przelew"
              | "noble_pay"
              | "pbac_z_ipko"
              | "plus_bank"
              | "santander_przelew24"
              | "tmobile_usbugi_bankowe"
              | "toyota_bank"
              | "volkswagen_bank";
          };
          sepa_debit?: { iban: string };
          sofort?: { country: "AT" | "BE" | "DE" | "ES" | "IT" | "NL" };
          type:
            | "acss_debit"
            | "afterpay_clearpay"
            | "alipay"
            | "au_becs_debit"
            | "bacs_debit"
            | "bancontact"
            | "boleto"
            | "eps"
            | "fpx"
            | "giropay"
            | "grabpay"
            | "ideal"
            | "klarna"
            | "oxxo"
            | "p24"
            | "sepa_debit"
            | "sofort"
            | "wechat_pay";
          wechat_pay?: object;
        };
        payment_method_options?: {
          acss_debit?:
            | {
                mandate_options?: {
                  custom_mandate_url?: string | "";
                  interval_description?: string;
                  payment_schedule?: "combined" | "interval" | "sporadic";
                  transaction_type?: "business" | "personal";
                };
                verification_method?: "automatic" | "instant" | "microdeposits";
              }
            | ""
            | ({
                mandate_options?: {
                  custom_mandate_url?: string | "";
                  interval_description?: string;
                  payment_schedule?: "combined" | "interval" | "sporadic";
                  transaction_type?: "business" | "personal";
                };
                verification_method?: "automatic" | "instant" | "microdeposits";
              } & "");
          afterpay_clearpay?: { reference?: string } | "" | ({ reference?: string } & "");
          alipay?: object | "" | (object & "");
          au_becs_debit?: object | "" | (object & "");
          bacs_debit?: object | "" | (object & "");
          bancontact?:
            | { preferred_language?: "de" | "en" | "fr" | "nl" }
            | ""
            | ({ preferred_language?: "de" | "en" | "fr" | "nl" } & "");
          boleto?: { expires_after_days?: number } | "" | ({ expires_after_days?: number } & "");
          card?:
            | {
                cvc_token?: string;
                installments?: {
                  enabled?: boolean;
                  plan?:
                    | { count: number; interval: "month"; type: "fixed_count" }
                    | ""
                    | ({ count: number; interval: "month"; type: "fixed_count" } & "");
                };
                network?:
                  | "amex"
                  | "cartes_bancaires"
                  | "diners"
                  | "discover"
                  | "interac"
                  | "jcb"
                  | "mastercard"
                  | "unionpay"
                  | "unknown"
                  | "visa";
                request_three_d_secure?: "any" | "automatic";
                setup_future_usage?: "" | "none" | "off_session" | "on_session";
              }
            | ""
            | ({
                cvc_token?: string;
                installments?: {
                  enabled?: boolean;
                  plan?:
                    | { count: number; interval: "month"; type: "fixed_count" }
                    | ""
                    | ({ count: number; interval: "month"; type: "fixed_count" } & "");
                };
                network?:
                  | "amex"
                  | "cartes_bancaires"
                  | "diners"
                  | "discover"
                  | "interac"
                  | "jcb"
                  | "mastercard"
                  | "unionpay"
                  | "unknown"
                  | "visa";
                request_three_d_secure?: "any" | "automatic";
                setup_future_usage?: "" | "none" | "off_session" | "on_session";
              } & "");
          card_present?: object | "" | (object & "");
          eps?: object | "" | (object & "");
          fpx?: object | "" | (object & "");
          giropay?: object | "" | (object & "");
          grabpay?: object | "" | (object & "");
          ideal?: object | "" | (object & "");
          interac_present?: object | "" | (object & "");
          klarna?:
            | {
                preferred_locale?:
                  | "da-DK"
                  | "de-AT"
                  | "de-DE"
                  | "en-AT"
                  | "en-BE"
                  | "en-DE"
                  | "en-DK"
                  | "en-ES"
                  | "en-FI"
                  | "en-FR"
                  | "en-GB"
                  | "en-IE"
                  | "en-IT"
                  | "en-NL"
                  | "en-NO"
                  | "en-SE"
                  | "en-US"
                  | "es-ES"
                  | "es-US"
                  | "fi-FI"
                  | "fr-BE"
                  | "fr-FR"
                  | "it-IT"
                  | "nb-NO"
                  | "nl-BE"
                  | "nl-NL"
                  | "sv-FI"
                  | "sv-SE";
              }
            | ""
            | ({
                preferred_locale?:
                  | "da-DK"
                  | "de-AT"
                  | "de-DE"
                  | "en-AT"
                  | "en-BE"
                  | "en-DE"
                  | "en-DK"
                  | "en-ES"
                  | "en-FI"
                  | "en-FR"
                  | "en-GB"
                  | "en-IE"
                  | "en-IT"
                  | "en-NL"
                  | "en-NO"
                  | "en-SE"
                  | "en-US"
                  | "es-ES"
                  | "es-US"
                  | "fi-FI"
                  | "fr-BE"
                  | "fr-FR"
                  | "it-IT"
                  | "nb-NO"
                  | "nl-BE"
                  | "nl-NL"
                  | "sv-FI"
                  | "sv-SE";
              } & "");
          oxxo?: { expires_after_days?: number } | "" | ({ expires_after_days?: number } & "");
          p24?: { tos_shown_and_accepted?: boolean } | "" | ({ tos_shown_and_accepted?: boolean } & "");
          sepa_debit?: { mandate_options?: object } | "" | ({ mandate_options?: object } & "");
          sofort?:
            | { preferred_language?: "" | "de" | "en" | "es" | "fr" | "it" | "nl" | "pl" }
            | ""
            | ({ preferred_language?: "" | "de" | "en" | "es" | "fr" | "it" | "nl" | "pl" } & "");
          wechat_pay?:
            | { app_id?: string; client: "android" | "ios" | "web" }
            | ""
            | ({ app_id?: string; client: "android" | "ios" | "web" } & "");
        };
        payment_method_types?: string[];
        receipt_email?: string | "";
        return_url?: string;
        setup_future_usage?: "" | "off_session" | "on_session";
        shipping?:
          | {
              address: {
                city?: string;
                country?: string;
                line1?: string;
                line2?: string;
                postal_code?: string;
                state?: string;
              };
              carrier?: string;
              name: string;
              phone?: string;
              tracking_number?: string;
            }
          | ""
          | ({
              address: {
                city?: string;
                country?: string;
                line1?: string;
                line2?: string;
                postal_code?: string;
                state?: string;
              };
              carrier?: string;
              name: string;
              phone?: string;
              tracking_number?: string;
            } & "");
        use_stripe_sdk?: boolean;
      },
      params: RequestParams = {},
    ) =>
      this.request<PaymentIntent, Error>({
        path: `/v1/payment_intents/${intent}/confirm`,
        method: "POST",
        body: data,
        secure: true,
        type: ContentType.UrlEncoded,
        format: "json",
        ...params,
      }),

    /**
     * @description <p>Returns a list of your payment links.</p>
     *
     * @name GetPaymentLinks
     * @request GET:/v1/payment_links
     * @secure
     * @response `200` `{ data: (PaymentLink)[], has_more: boolean, object: "list", url: string }` Successful response.
     * @response `default` `Error` Error response.
     */
    getPaymentLinks: (
      query?: { active?: boolean; ending_before?: string; expand?: string[]; limit?: number; starting_after?: string },
      data?: CardMandatePaymentMethodDetails,
      params: RequestParams = {},
    ) =>
      this.request<{ data: PaymentLink[]; has_more: boolean; object: "list"; url: string }, Error>({
        path: `/v1/payment_links`,
        method: "GET",
        query: query,
        body: data,
        secure: true,
        type: ContentType.UrlEncoded,
        format: "json",
        ...params,
      }),

    /**
     * @description <p>Creates a payment link.</p>
     *
     * @name PostPaymentLinks
     * @request POST:/v1/payment_links
     * @secure
     * @response `200` `PaymentLink` Successful response.
     * @response `default` `Error` Error response.
     */
    postPaymentLinks: (
      data?: {
        after_completion?: {
          hosted_confirmation?: { custom_message?: string };
          redirect?: { url: string };
          type: "hosted_confirmation" | "redirect";
        };
        allow_promotion_codes?: boolean;
        application_fee_amount?: number;
        application_fee_percent?: number;
        automatic_tax?: { enabled: boolean };
        billing_address_collection?: "auto" | "required";
        expand?: string[];
        line_items?: {
          adjustable_quantity?: { enabled: boolean; maximum?: number; minimum?: number };
          price: string;
          quantity: number;
        }[];
        metadata?: Record<string, string>;
        on_behalf_of?: string;
        payment_method_types?: "card"[];
        shipping_address_collection?: {
          allowed_countries: (
            | "AC"
            | "AD"
            | "AE"
            | "AF"
            | "AG"
            | "AI"
            | "AL"
            | "AM"
            | "AO"
            | "AQ"
            | "AR"
            | "AT"
            | "AU"
            | "AW"
            | "AX"
            | "AZ"
            | "BA"
            | "BB"
            | "BD"
            | "BE"
            | "BF"
            | "BG"
            | "BH"
            | "BI"
            | "BJ"
            | "BL"
            | "BM"
            | "BN"
            | "BO"
            | "BQ"
            | "BR"
            | "BS"
            | "BT"
            | "BV"
            | "BW"
            | "BY"
            | "BZ"
            | "CA"
            | "CD"
            | "CF"
            | "CG"
            | "CH"
            | "CI"
            | "CK"
            | "CL"
            | "CM"
            | "CN"
            | "CO"
            | "CR"
            | "CV"
            | "CW"
            | "CY"
            | "CZ"
            | "DE"
            | "DJ"
            | "DK"
            | "DM"
            | "DO"
            | "DZ"
            | "EC"
            | "EE"
            | "EG"
            | "EH"
            | "ER"
            | "ES"
            | "ET"
            | "FI"
            | "FJ"
            | "FK"
            | "FO"
            | "FR"
            | "GA"
            | "GB"
            | "GD"
            | "GE"
            | "GF"
            | "GG"
            | "GH"
            | "GI"
            | "GL"
            | "GM"
            | "GN"
            | "GP"
            | "GQ"
            | "GR"
            | "GS"
            | "GT"
            | "GU"
            | "GW"
            | "GY"
            | "HK"
            | "HN"
            | "HR"
            | "HT"
            | "HU"
            | "ID"
            | "IE"
            | "IL"
            | "IM"
            | "IN"
            | "IO"
            | "IQ"
            | "IS"
            | "IT"
            | "JE"
            | "JM"
            | "JO"
            | "JP"
            | "KE"
            | "KG"
            | "KH"
            | "KI"
            | "KM"
            | "KN"
            | "KR"
            | "KW"
            | "KY"
            | "KZ"
            | "LA"
            | "LB"
            | "LC"
            | "LI"
            | "LK"
            | "LR"
            | "LS"
            | "LT"
            | "LU"
            | "LV"
            | "LY"
            | "MA"
            | "MC"
            | "MD"
            | "ME"
            | "MF"
            | "MG"
            | "MK"
            | "ML"
            | "MM"
            | "MN"
            | "MO"
            | "MQ"
            | "MR"
            | "MS"
            | "MT"
            | "MU"
            | "MV"
            | "MW"
            | "MX"
            | "MY"
            | "MZ"
            | "NA"
            | "NC"
            | "NE"
            | "NG"
            | "NI"
            | "NL"
            | "NO"
            | "NP"
            | "NR"
            | "NU"
            | "NZ"
            | "OM"
            | "PA"
            | "PE"
            | "PF"
            | "PG"
            | "PH"
            | "PK"
            | "PL"
            | "PM"
            | "PN"
            | "PR"
            | "PS"
            | "PT"
            | "PY"
            | "QA"
            | "RE"
            | "RO"
            | "RS"
            | "RU"
            | "RW"
            | "SA"
            | "SB"
            | "SC"
            | "SE"
            | "SG"
            | "SH"
            | "SI"
            | "SJ"
            | "SK"
            | "SL"
            | "SM"
            | "SN"
            | "SO"
            | "SR"
            | "SS"
            | "ST"
            | "SV"
            | "SX"
            | "SZ"
            | "TA"
            | "TC"
            | "TD"
            | "TF"
            | "TG"
            | "TH"
            | "TJ"
            | "TK"
            | "TL"
            | "TM"
            | "TN"
            | "TO"
            | "TR"
            | "TT"
            | "TV"
            | "TW"
            | "TZ"
            | "UA"
            | "UG"
            | "US"
            | "UY"
            | "UZ"
            | "VA"
            | "VC"
            | "VE"
            | "VG"
            | "VN"
            | "VU"
            | "WF"
            | "WS"
            | "XK"
            | "YE"
            | "YT"
            | "ZA"
            | "ZM"
            | "ZW"
            | "ZZ"
          )[];
        };
        subscription_data?: { trial_period_days?: number };
        transfer_data?: { amount?: number; destination: string };
      },
      params: RequestParams = {},
    ) =>
      this.request<PaymentLink, Error>({
        path: `/v1/payment_links`,
        method: "POST",
        body: data,
        secure: true,
        type: ContentType.UrlEncoded,
        format: "json",
        ...params,
      }),

    /**
     * @description <p>Retrieve a payment link.</p>
     *
     * @name GetPaymentLinksPaymentLink
     * @request GET:/v1/payment_links/{payment_link}
     * @secure
     * @response `200` `PaymentLink` Successful response.
     * @response `default` `Error` Error response.
     */
    getPaymentLinksPaymentLink: (
      paymentLink: string,
      query?: { expand?: string[] },
      data?: CardMandatePaymentMethodDetails,
      params: RequestParams = {},
    ) =>
      this.request<PaymentLink, Error>({
        path: `/v1/payment_links/${paymentLink}`,
        method: "GET",
        query: query,
        body: data,
        secure: true,
        type: ContentType.UrlEncoded,
        format: "json",
        ...params,
      }),

    /**
     * @description <p>Updates a payment link.</p>
     *
     * @name PostPaymentLinksPaymentLink
     * @request POST:/v1/payment_links/{payment_link}
     * @secure
     * @response `200` `PaymentLink` Successful response.
     * @response `default` `Error` Error response.
     */
    postPaymentLinksPaymentLink: (
      paymentLink: string,
      data?: {
        active?: boolean;
        after_completion?: {
          hosted_confirmation?: { custom_message?: string };
          redirect?: { url: string };
          type: "hosted_confirmation" | "redirect";
        };
        allow_promotion_codes?: boolean;
        automatic_tax?: { enabled: boolean };
        billing_address_collection?: "auto" | "required";
        expand?: string[];
        line_items?: {
          adjustable_quantity?: { enabled: boolean; maximum?: number; minimum?: number };
          id: string;
          quantity?: number;
        }[];
        metadata?: Record<string, string>;
        payment_method_types?: "card"[] | "" | ("card"[] & "");
        shipping_address_collection?:
          | {
              allowed_countries: (
                | "AC"
                | "AD"
                | "AE"
                | "AF"
                | "AG"
                | "AI"
                | "AL"
                | "AM"
                | "AO"
                | "AQ"
                | "AR"
                | "AT"
                | "AU"
                | "AW"
                | "AX"
                | "AZ"
                | "BA"
                | "BB"
                | "BD"
                | "BE"
                | "BF"
                | "BG"
                | "BH"
                | "BI"
                | "BJ"
                | "BL"
                | "BM"
                | "BN"
                | "BO"
                | "BQ"
                | "BR"
                | "BS"
                | "BT"
                | "BV"
                | "BW"
                | "BY"
                | "BZ"
                | "CA"
                | "CD"
                | "CF"
                | "CG"
                | "CH"
                | "CI"
                | "CK"
                | "CL"
                | "CM"
                | "CN"
                | "CO"
                | "CR"
                | "CV"
                | "CW"
                | "CY"
                | "CZ"
                | "DE"
                | "DJ"
                | "DK"
                | "DM"
                | "DO"
                | "DZ"
                | "EC"
                | "EE"
                | "EG"
                | "EH"
                | "ER"
                | "ES"
                | "ET"
                | "FI"
                | "FJ"
                | "FK"
                | "FO"
                | "FR"
                | "GA"
                | "GB"
                | "GD"
                | "GE"
                | "GF"
                | "GG"
                | "GH"
                | "GI"
                | "GL"
                | "GM"
                | "GN"
                | "GP"
                | "GQ"
                | "GR"
                | "GS"
                | "GT"
                | "GU"
                | "GW"
                | "GY"
                | "HK"
                | "HN"
                | "HR"
                | "HT"
                | "HU"
                | "ID"
                | "IE"
                | "IL"
                | "IM"
                | "IN"
                | "IO"
                | "IQ"
                | "IS"
                | "IT"
                | "JE"
                | "JM"
                | "JO"
                | "JP"
                | "KE"
                | "KG"
                | "KH"
                | "KI"
                | "KM"
                | "KN"
                | "KR"
                | "KW"
                | "KY"
                | "KZ"
                | "LA"
                | "LB"
                | "LC"
                | "LI"
                | "LK"
                | "LR"
                | "LS"
                | "LT"
                | "LU"
                | "LV"
                | "LY"
                | "MA"
                | "MC"
                | "MD"
                | "ME"
                | "MF"
                | "MG"
                | "MK"
                | "ML"
                | "MM"
                | "MN"
                | "MO"
                | "MQ"
                | "MR"
                | "MS"
                | "MT"
                | "MU"
                | "MV"
                | "MW"
                | "MX"
                | "MY"
                | "MZ"
                | "NA"
                | "NC"
                | "NE"
                | "NG"
                | "NI"
                | "NL"
                | "NO"
                | "NP"
                | "NR"
                | "NU"
                | "NZ"
                | "OM"
                | "PA"
                | "PE"
                | "PF"
                | "PG"
                | "PH"
                | "PK"
                | "PL"
                | "PM"
                | "PN"
                | "PR"
                | "PS"
                | "PT"
                | "PY"
                | "QA"
                | "RE"
                | "RO"
                | "RS"
                | "RU"
                | "RW"
                | "SA"
                | "SB"
                | "SC"
                | "SE"
                | "SG"
                | "SH"
                | "SI"
                | "SJ"
                | "SK"
                | "SL"
                | "SM"
                | "SN"
                | "SO"
                | "SR"
                | "SS"
                | "ST"
                | "SV"
                | "SX"
                | "SZ"
                | "TA"
                | "TC"
                | "TD"
                | "TF"
                | "TG"
                | "TH"
                | "TJ"
                | "TK"
                | "TL"
                | "TM"
                | "TN"
                | "TO"
                | "TR"
                | "TT"
                | "TV"
                | "TW"
                | "TZ"
                | "UA"
                | "UG"
                | "US"
                | "UY"
                | "UZ"
                | "VA"
                | "VC"
                | "VE"
                | "VG"
                | "VN"
                | "VU"
                | "WF"
                | "WS"
                | "XK"
                | "YE"
                | "YT"
                | "ZA"
                | "ZM"
                | "ZW"
                | "ZZ"
              )[];
            }
          | ""
          | ({
              allowed_countries: (
                | "AC"
                | "AD"
                | "AE"
                | "AF"
                | "AG"
                | "AI"
                | "AL"
                | "AM"
                | "AO"
                | "AQ"
                | "AR"
                | "AT"
                | "AU"
                | "AW"
                | "AX"
                | "AZ"
                | "BA"
                | "BB"
                | "BD"
                | "BE"
                | "BF"
                | "BG"
                | "BH"
                | "BI"
                | "BJ"
                | "BL"
                | "BM"
                | "BN"
                | "BO"
                | "BQ"
                | "BR"
                | "BS"
                | "BT"
                | "BV"
                | "BW"
                | "BY"
                | "BZ"
                | "CA"
                | "CD"
                | "CF"
                | "CG"
                | "CH"
                | "CI"
                | "CK"
                | "CL"
                | "CM"
                | "CN"
                | "CO"
                | "CR"
                | "CV"
                | "CW"
                | "CY"
                | "CZ"
                | "DE"
                | "DJ"
                | "DK"
                | "DM"
                | "DO"
                | "DZ"
                | "EC"
                | "EE"
                | "EG"
                | "EH"
                | "ER"
                | "ES"
                | "ET"
                | "FI"
                | "FJ"
                | "FK"
                | "FO"
                | "FR"
                | "GA"
                | "GB"
                | "GD"
                | "GE"
                | "GF"
                | "GG"
                | "GH"
                | "GI"
                | "GL"
                | "GM"
                | "GN"
                | "GP"
                | "GQ"
                | "GR"
                | "GS"
                | "GT"
                | "GU"
                | "GW"
                | "GY"
                | "HK"
                | "HN"
                | "HR"
                | "HT"
                | "HU"
                | "ID"
                | "IE"
                | "IL"
                | "IM"
                | "IN"
                | "IO"
                | "IQ"
                | "IS"
                | "IT"
                | "JE"
                | "JM"
                | "JO"
                | "JP"
                | "KE"
                | "KG"
                | "KH"
                | "KI"
                | "KM"
                | "KN"
                | "KR"
                | "KW"
                | "KY"
                | "KZ"
                | "LA"
                | "LB"
                | "LC"
                | "LI"
                | "LK"
                | "LR"
                | "LS"
                | "LT"
                | "LU"
                | "LV"
                | "LY"
                | "MA"
                | "MC"
                | "MD"
                | "ME"
                | "MF"
                | "MG"
                | "MK"
                | "ML"
                | "MM"
                | "MN"
                | "MO"
                | "MQ"
                | "MR"
                | "MS"
                | "MT"
                | "MU"
                | "MV"
                | "MW"
                | "MX"
                | "MY"
                | "MZ"
                | "NA"
                | "NC"
                | "NE"
                | "NG"
                | "NI"
                | "NL"
                | "NO"
                | "NP"
                | "NR"
                | "NU"
                | "NZ"
                | "OM"
                | "PA"
                | "PE"
                | "PF"
                | "PG"
                | "PH"
                | "PK"
                | "PL"
                | "PM"
                | "PN"
                | "PR"
                | "PS"
                | "PT"
                | "PY"
                | "QA"
                | "RE"
                | "RO"
                | "RS"
                | "RU"
                | "RW"
                | "SA"
                | "SB"
                | "SC"
                | "SE"
                | "SG"
                | "SH"
                | "SI"
                | "SJ"
                | "SK"
                | "SL"
                | "SM"
                | "SN"
                | "SO"
                | "SR"
                | "SS"
                | "ST"
                | "SV"
                | "SX"
                | "SZ"
                | "TA"
                | "TC"
                | "TD"
                | "TF"
                | "TG"
                | "TH"
                | "TJ"
                | "TK"
                | "TL"
                | "TM"
                | "TN"
                | "TO"
                | "TR"
                | "TT"
                | "TV"
                | "TW"
                | "TZ"
                | "UA"
                | "UG"
                | "US"
                | "UY"
                | "UZ"
                | "VA"
                | "VC"
                | "VE"
                | "VG"
                | "VN"
                | "VU"
                | "WF"
                | "WS"
                | "XK"
                | "YE"
                | "YT"
                | "ZA"
                | "ZM"
                | "ZW"
                | "ZZ"
              )[];
            } & "");
      },
      params: RequestParams = {},
    ) =>
      this.request<PaymentLink, Error>({
        path: `/v1/payment_links/${paymentLink}`,
        method: "POST",
        body: data,
        secure: true,
        type: ContentType.UrlEncoded,
        format: "json",
        ...params,
      }),

    /**
     * @description <p>When retrieving a payment link, there is an includable <strong>line_items</strong> property containing the first handful of those items. There is also a URL where you can retrieve the full (paginated) list of line items.</p>
     *
     * @name GetPaymentLinksPaymentLinkLineItems
     * @request GET:/v1/payment_links/{payment_link}/line_items
     * @secure
     * @response `200` `{ data: (Item)[], has_more: boolean, object: "list", url: string }` Successful response.
     * @response `default` `Error` Error response.
     */
    getPaymentLinksPaymentLinkLineItems: (
      paymentLink: string,
      query?: { ending_before?: string; expand?: string[]; limit?: number; starting_after?: string },
      data?: CardMandatePaymentMethodDetails,
      params: RequestParams = {},
    ) =>
      this.request<{ data: Item[]; has_more: boolean; object: "list"; url: string }, Error>({
        path: `/v1/payment_links/${paymentLink}/line_items`,
        method: "GET",
        query: query,
        body: data,
        secure: true,
        type: ContentType.UrlEncoded,
        format: "json",
        ...params,
      }),

    /**
     * @description <p>Returns a list of PaymentMethods. For listing a customer’s payment methods, you should use <a href="/docs/api/payment_methods/customer_list">List a Customer’s PaymentMethods</a></p>
     *
     * @name GetPaymentMethods
     * @request GET:/v1/payment_methods
     * @secure
     * @response `200` `{ data: (PaymentMethod)[], has_more: boolean, object: "list", url: string }` Successful response.
     * @response `default` `Error` Error response.
     */
    getPaymentMethods: (
      query: {
        customer?: string;
        ending_before?: string;
        expand?: string[];
        limit?: number;
        starting_after?: string;
        type:
          | "acss_debit"
          | "afterpay_clearpay"
          | "alipay"
          | "au_becs_debit"
          | "bacs_debit"
          | "bancontact"
          | "boleto"
          | "card"
          | "eps"
          | "fpx"
          | "giropay"
          | "grabpay"
          | "ideal"
          | "klarna"
          | "oxxo"
          | "p24"
          | "sepa_debit"
          | "sofort"
          | "wechat_pay";
      },
      data?: CardMandatePaymentMethodDetails,
      params: RequestParams = {},
    ) =>
      this.request<{ data: PaymentMethod[]; has_more: boolean; object: "list"; url: string }, Error>({
        path: `/v1/payment_methods`,
        method: "GET",
        query: query,
        body: data,
        secure: true,
        type: ContentType.UrlEncoded,
        format: "json",
        ...params,
      }),

    /**
     * @description <p>Creates a PaymentMethod object. Read the <a href="/docs/stripe-js/reference#stripe-create-payment-method">Stripe.js reference</a> to learn how to create PaymentMethods via Stripe.js.</p> <p>Instead of creating a PaymentMethod directly, we recommend using the <a href="/docs/payments/accept-a-payment">PaymentIntents</a> API to accept a payment immediately or the <a href="/docs/payments/save-and-reuse">SetupIntent</a> API to collect payment method details ahead of a future payment.</p>
     *
     * @name PostPaymentMethods
     * @request POST:/v1/payment_methods
     * @secure
     * @response `200` `PaymentMethod` Successful response.
     * @response `default` `Error` Error response.
     */
    postPaymentMethods: (
      data?: {
        acss_debit?: { account_number: string; institution_number: string; transit_number: string };
        afterpay_clearpay?: object;
        alipay?: object;
        au_becs_debit?: { account_number: string; bsb_number: string };
        bacs_debit?: { account_number?: string; sort_code?: string };
        bancontact?: object;
        billing_details?: {
          address?:
            | { city?: string; country?: string; line1?: string; line2?: string; postal_code?: string; state?: string }
            | ""
            | ({
                city?: string;
                country?: string;
                line1?: string;
                line2?: string;
                postal_code?: string;
                state?: string;
              } & "");
          email?: string | "";
          name?: string;
          phone?: string;
        };
        boleto?: { tax_id: string };
        card?:
          | { cvc?: string; exp_month: number; exp_year: number; number: string }
          | { token: string }
          | ({ cvc?: string; exp_month: number; exp_year: number; number: string } & { token: string });
        customer?: string;
        eps?: {
          bank?:
            | "arzte_und_apotheker_bank"
            | "austrian_anadi_bank_ag"
            | "bank_austria"
            | "bankhaus_carl_spangler"
            | "bankhaus_schelhammer_und_schattera_ag"
            | "bawag_psk_ag"
            | "bks_bank_ag"
            | "brull_kallmus_bank_ag"
            | "btv_vier_lander_bank"
            | "capital_bank_grawe_gruppe_ag"
            | "dolomitenbank"
            | "easybank_ag"
            | "erste_bank_und_sparkassen"
            | "hypo_alpeadriabank_international_ag"
            | "hypo_bank_burgenland_aktiengesellschaft"
            | "hypo_noe_lb_fur_niederosterreich_u_wien"
            | "hypo_oberosterreich_salzburg_steiermark"
            | "hypo_tirol_bank_ag"
            | "hypo_vorarlberg_bank_ag"
            | "marchfelder_bank"
            | "oberbank_ag"
            | "raiffeisen_bankengruppe_osterreich"
            | "schoellerbank_ag"
            | "sparda_bank_wien"
            | "volksbank_gruppe"
            | "volkskreditbank_ag"
            | "vr_bank_braunau";
        };
        expand?: string[];
        fpx?: {
          bank:
            | "affin_bank"
            | "agrobank"
            | "alliance_bank"
            | "ambank"
            | "bank_islam"
            | "bank_muamalat"
            | "bank_rakyat"
            | "bsn"
            | "cimb"
            | "deutsche_bank"
            | "hong_leong_bank"
            | "hsbc"
            | "kfh"
            | "maybank2e"
            | "maybank2u"
            | "ocbc"
            | "pb_enterprise"
            | "public_bank"
            | "rhb"
            | "standard_chartered"
            | "uob";
        };
        giropay?: object;
        grabpay?: object;
        ideal?: {
          bank?:
            | "abn_amro"
            | "asn_bank"
            | "bunq"
            | "handelsbanken"
            | "ing"
            | "knab"
            | "moneyou"
            | "rabobank"
            | "regiobank"
            | "revolut"
            | "sns_bank"
            | "triodos_bank"
            | "van_lanschot";
        };
        interac_present?: object;
        klarna?: { dob?: { day: number; month: number; year: number } };
        metadata?: Record<string, string>;
        oxxo?: object;
        p24?: {
          bank?:
            | "alior_bank"
            | "bank_millennium"
            | "bank_nowy_bfg_sa"
            | "bank_pekao_sa"
            | "banki_spbdzielcze"
            | "blik"
            | "bnp_paribas"
            | "boz"
            | "citi_handlowy"
            | "credit_agricole"
            | "envelobank"
            | "etransfer_pocztowy24"
            | "getin_bank"
            | "ideabank"
            | "ing"
            | "inteligo"
            | "mbank_mtransfer"
            | "nest_przelew"
            | "noble_pay"
            | "pbac_z_ipko"
            | "plus_bank"
            | "santander_przelew24"
            | "tmobile_usbugi_bankowe"
            | "toyota_bank"
            | "volkswagen_bank";
        };
        payment_method?: string;
        sepa_debit?: { iban: string };
        sofort?: { country: "AT" | "BE" | "DE" | "ES" | "IT" | "NL" };
        type?:
          | "acss_debit"
          | "afterpay_clearpay"
          | "alipay"
          | "au_becs_debit"
          | "bacs_debit"
          | "bancontact"
          | "boleto"
          | "card"
          | "eps"
          | "fpx"
          | "giropay"
          | "grabpay"
          | "ideal"
          | "klarna"
          | "oxxo"
          | "p24"
          | "sepa_debit"
          | "sofort"
          | "wechat_pay";
        wechat_pay?: object;
      },
      params: RequestParams = {},
    ) =>
      this.request<PaymentMethod, Error>({
        path: `/v1/payment_methods`,
        method: "POST",
        body: data,
        secure: true,
        type: ContentType.UrlEncoded,
        format: "json",
        ...params,
      }),

    /**
     * @description <p>Retrieves a PaymentMethod object.</p>
     *
     * @name GetPaymentMethodsPaymentMethod
     * @request GET:/v1/payment_methods/{payment_method}
     * @secure
     * @response `200` `PaymentMethod` Successful response.
     * @response `default` `Error` Error response.
     */
    getPaymentMethodsPaymentMethod: (
      paymentMethod: string,
      query?: { expand?: string[] },
      data?: CardMandatePaymentMethodDetails,
      params: RequestParams = {},
    ) =>
      this.request<PaymentMethod, Error>({
        path: `/v1/payment_methods/${paymentMethod}`,
        method: "GET",
        query: query,
        body: data,
        secure: true,
        type: ContentType.UrlEncoded,
        format: "json",
        ...params,
      }),

    /**
     * @description <p>Updates a PaymentMethod object. A PaymentMethod must be attached a customer to be updated.</p>
     *
     * @name PostPaymentMethodsPaymentMethod
     * @request POST:/v1/payment_methods/{payment_method}
     * @secure
     * @response `200` `PaymentMethod` Successful response.
     * @response `default` `Error` Error response.
     */
    postPaymentMethodsPaymentMethod: (
      paymentMethod: string,
      data?: {
        billing_details?: {
          address?:
            | { city?: string; country?: string; line1?: string; line2?: string; postal_code?: string; state?: string }
            | ""
            | ({
                city?: string;
                country?: string;
                line1?: string;
                line2?: string;
                postal_code?: string;
                state?: string;
              } & "");
          email?: string | "";
          name?: string;
          phone?: string;
        };
        card?: { exp_month?: number; exp_year?: number };
        expand?: string[];
        metadata?: Record<string, string> | "" | (Record<string, string> & "");
      },
      params: RequestParams = {},
    ) =>
      this.request<PaymentMethod, Error>({
        path: `/v1/payment_methods/${paymentMethod}`,
        method: "POST",
        body: data,
        secure: true,
        type: ContentType.UrlEncoded,
        format: "json",
        ...params,
      }),

    /**
     * @description <p>Attaches a PaymentMethod object to a Customer.</p> <p>To attach a new PaymentMethod to a customer for future payments, we recommend you use a <a href="/docs/api/setup_intents">SetupIntent</a> or a PaymentIntent with <a href="/docs/api/payment_intents/create#create_payment_intent-setup_future_usage">setup_future_usage</a>. These approaches will perform any necessary steps to ensure that the PaymentMethod can be used in a future payment. Using the <code>/v1/payment_methods/:id/attach</code> endpoint does not ensure that future payments can be made with the attached PaymentMethod. See <a href="/docs/payments/payment-intents#future-usage">Optimizing cards for future payments</a> for more information about setting up future payments.</p> <p>To use this PaymentMethod as the default for invoice or subscription payments, set <a href="/docs/api/customers/update#update_customer-invoice_settings-default_payment_method"><code>invoice_settings.default_payment_method</code></a>, on the Customer to the PaymentMethod’s ID.</p>
     *
     * @name PostPaymentMethodsPaymentMethodAttach
     * @request POST:/v1/payment_methods/{payment_method}/attach
     * @secure
     * @response `200` `PaymentMethod` Successful response.
     * @response `default` `Error` Error response.
     */
    postPaymentMethodsPaymentMethodAttach: (
      paymentMethod: string,
      data: { customer: string; expand?: string[] },
      params: RequestParams = {},
    ) =>
      this.request<PaymentMethod, Error>({
        path: `/v1/payment_methods/${paymentMethod}/attach`,
        method: "POST",
        body: data,
        secure: true,
        type: ContentType.UrlEncoded,
        format: "json",
        ...params,
      }),

    /**
     * @description <p>Detaches a PaymentMethod object from a Customer.</p>
     *
     * @name PostPaymentMethodsPaymentMethodDetach
     * @request POST:/v1/payment_methods/{payment_method}/detach
     * @secure
     * @response `200` `PaymentMethod` Successful response.
     * @response `default` `Error` Error response.
     */
    postPaymentMethodsPaymentMethodDetach: (
      paymentMethod: string,
      data?: { expand?: string[] },
      params: RequestParams = {},
    ) =>
      this.request<PaymentMethod, Error>({
        path: `/v1/payment_methods/${paymentMethod}/detach`,
        method: "POST",
        body: data,
        secure: true,
        type: ContentType.UrlEncoded,
        format: "json",
        ...params,
      }),

    /**
     * @description <p>Returns a list of existing payouts sent to third-party bank accounts or that Stripe has sent you. The payouts are returned in sorted order, with the most recently created payouts appearing first.</p>
     *
     * @name GetPayouts
     * @request GET:/v1/payouts
     * @secure
     * @response `200` `{ data: (Payout)[], has_more: boolean, object: "list", url: string }` Successful response.
     * @response `default` `Error` Error response.
     */
    getPayouts: (
      query?: {
        arrival_date?: { gt?: number; gte?: number; lt?: number; lte?: number } | number;
        created?: { gt?: number; gte?: number; lt?: number; lte?: number } | number;
        destination?: string;
        ending_before?: string;
        expand?: string[];
        limit?: number;
        starting_after?: string;
        status?: string;
      },
      data?: CardMandatePaymentMethodDetails,
      params: RequestParams = {},
    ) =>
      this.request<{ data: Payout[]; has_more: boolean; object: "list"; url: string }, Error>({
        path: `/v1/payouts`,
        method: "GET",
        query: query,
        body: data,
        secure: true,
        type: ContentType.UrlEncoded,
        format: "json",
        ...params,
      }),

    /**
     * @description <p>To send funds to your own bank account, you create a new payout object. Your <a href="#balance">Stripe balance</a> must be able to cover the payout amount, or you’ll receive an “Insufficient Funds” error.</p> <p>If your API key is in test mode, money won’t actually be sent, though everything else will occur as if in live mode.</p> <p>If you are creating a manual payout on a Stripe account that uses multiple payment source types, you’ll need to specify the source type balance that the payout should draw from. The <a href="#balance_object">balance object</a> details available and pending amounts by source type.</p>
     *
     * @name PostPayouts
     * @request POST:/v1/payouts
     * @secure
     * @response `200` `Payout` Successful response.
     * @response `default` `Error` Error response.
     */
    postPayouts: (
      data: {
        amount: number;
        currency: string;
        description?: string;
        destination?: string;
        expand?: string[];
        metadata?: Record<string, string>;
        method?: "instant" | "standard";
        source_type?: "bank_account" | "card" | "fpx";
        statement_descriptor?: string;
      },
      params: RequestParams = {},
    ) =>
      this.request<Payout, Error>({
        path: `/v1/payouts`,
        method: "POST",
        body: data,
        secure: true,
        type: ContentType.UrlEncoded,
        format: "json",
        ...params,
      }),

    /**
     * @description <p>Retrieves the details of an existing payout. Supply the unique payout ID from either a payout creation request or the payout list, and Stripe will return the corresponding payout information.</p>
     *
     * @name GetPayoutsPayout
     * @request GET:/v1/payouts/{payout}
     * @secure
     * @response `200` `Payout` Successful response.
     * @response `default` `Error` Error response.
     */
    getPayoutsPayout: (
      payout: string,
      query?: { expand?: string[] },
      data?: CardMandatePaymentMethodDetails,
      params: RequestParams = {},
    ) =>
      this.request<Payout, Error>({
        path: `/v1/payouts/${payout}`,
        method: "GET",
        query: query,
        body: data,
        secure: true,
        type: ContentType.UrlEncoded,
        format: "json",
        ...params,
      }),

    /**
     * @description <p>Updates the specified payout by setting the values of the parameters passed. Any parameters not provided will be left unchanged. This request accepts only the metadata as arguments.</p>
     *
     * @name PostPayoutsPayout
     * @request POST:/v1/payouts/{payout}
     * @secure
     * @response `200` `Payout` Successful response.
     * @response `default` `Error` Error response.
     */
    postPayoutsPayout: (
      payout: string,
      data?: { expand?: string[]; metadata?: Record<string, string> | "" | (Record<string, string> & "") },
      params: RequestParams = {},
    ) =>
      this.request<Payout, Error>({
        path: `/v1/payouts/${payout}`,
        method: "POST",
        body: data,
        secure: true,
        type: ContentType.UrlEncoded,
        format: "json",
        ...params,
      }),

    /**
     * @description <p>A previously created payout can be canceled if it has not yet been paid out. Funds will be refunded to your available balance. You may not cancel automatic Stripe payouts.</p>
     *
     * @name PostPayoutsPayoutCancel
     * @request POST:/v1/payouts/{payout}/cancel
     * @secure
     * @response `200` `Payout` Successful response.
     * @response `default` `Error` Error response.
     */
    postPayoutsPayoutCancel: (payout: string, data?: { expand?: string[] }, params: RequestParams = {}) =>
      this.request<Payout, Error>({
        path: `/v1/payouts/${payout}/cancel`,
        method: "POST",
        body: data,
        secure: true,
        type: ContentType.UrlEncoded,
        format: "json",
        ...params,
      }),

    /**
     * @description <p>Reverses a payout by debiting the destination bank account. Only payouts for connected accounts to US bank accounts may be reversed at this time. If the payout is in the <code>pending</code> status, <code>/v1/payouts/:id/cancel</code> should be used instead.</p> <p>By requesting a reversal via <code>/v1/payouts/:id/reverse</code>, you confirm that the authorized signatory of the selected bank account has authorized the debit on the bank account and that no other authorization is required.</p>
     *
     * @name PostPayoutsPayoutReverse
     * @request POST:/v1/payouts/{payout}/reverse
     * @secure
     * @response `200` `Payout` Successful response.
     * @response `default` `Error` Error response.
     */
    postPayoutsPayoutReverse: (
      payout: string,
      data?: { expand?: string[]; metadata?: Record<string, string> },
      params: RequestParams = {},
    ) =>
      this.request<Payout, Error>({
        path: `/v1/payouts/${payout}/reverse`,
        method: "POST",
        body: data,
        secure: true,
        type: ContentType.UrlEncoded,
        format: "json",
        ...params,
      }),

    /**
     * @description <p>Returns a list of your plans.</p>
     *
     * @name GetPlans
     * @request GET:/v1/plans
     * @secure
     * @response `200` `{ data: (Plan)[], has_more: boolean, object: "list", url: string }` Successful response.
     * @response `default` `Error` Error response.
     */
    getPlans: (
      query?: {
        active?: boolean;
        created?: { gt?: number; gte?: number; lt?: number; lte?: number } | number;
        ending_before?: string;
        expand?: string[];
        limit?: number;
        product?: string;
        starting_after?: string;
      },
      data?: CardMandatePaymentMethodDetails,
      params: RequestParams = {},
    ) =>
      this.request<{ data: Plan[]; has_more: boolean; object: "list"; url: string }, Error>({
        path: `/v1/plans`,
        method: "GET",
        query: query,
        body: data,
        secure: true,
        type: ContentType.UrlEncoded,
        format: "json",
        ...params,
      }),

    /**
     * @description <p>You can now model subscriptions more flexibly using the <a href="#prices">Prices API</a>. It replaces the Plans API and is backwards compatible to simplify your migration.</p>
     *
     * @name PostPlans
     * @request POST:/v1/plans
     * @secure
     * @response `200` `Plan` Successful response.
     * @response `default` `Error` Error response.
     */
    postPlans: (
      data: {
        active?: boolean;
        aggregate_usage?: "last_during_period" | "last_ever" | "max" | "sum";
        amount?: number;
        amount_decimal?: string;
        billing_scheme?: "per_unit" | "tiered";
        currency: string;
        expand?: string[];
        id?: string;
        interval: "day" | "month" | "week" | "year";
        interval_count?: number;
        metadata?: Record<string, string> | "" | (Record<string, string> & "");
        nickname?: string;
        product?:
          | {
              active?: boolean;
              id?: string;
              metadata?: Record<string, string>;
              name: string;
              statement_descriptor?: string;
              tax_code?: string;
              unit_label?: string;
            }
          | string;
        tiers?: {
          flat_amount?: number;
          flat_amount_decimal?: string;
          unit_amount?: number;
          unit_amount_decimal?: string;
          up_to: "inf" | number;
        }[];
        tiers_mode?: "graduated" | "volume";
        transform_usage?: { divide_by: number; round: "down" | "up" };
        trial_period_days?: number;
        usage_type?: "licensed" | "metered";
      },
      params: RequestParams = {},
    ) =>
      this.request<Plan, Error>({
        path: `/v1/plans`,
        method: "POST",
        body: data,
        secure: true,
        type: ContentType.UrlEncoded,
        format: "json",
        ...params,
      }),

    /**
     * @description <p>Deleting plans means new subscribers can’t be added. Existing subscribers aren’t affected.</p>
     *
     * @name DeletePlansPlan
     * @request DELETE:/v1/plans/{plan}
     * @secure
     * @response `200` `DeletedPlan` Successful response.
     * @response `default` `Error` Error response.
     */
    deletePlansPlan: (plan: string, data?: CardMandatePaymentMethodDetails, params: RequestParams = {}) =>
      this.request<DeletedPlan, Error>({
        path: `/v1/plans/${plan}`,
        method: "DELETE",
        body: data,
        secure: true,
        type: ContentType.UrlEncoded,
        format: "json",
        ...params,
      }),

    /**
     * @description <p>Retrieves the plan with the given ID.</p>
     *
     * @name GetPlansPlan
     * @request GET:/v1/plans/{plan}
     * @secure
     * @response `200` `Plan` Successful response.
     * @response `default` `Error` Error response.
     */
    getPlansPlan: (
      plan: string,
      query?: { expand?: string[] },
      data?: CardMandatePaymentMethodDetails,
      params: RequestParams = {},
    ) =>
      this.request<Plan, Error>({
        path: `/v1/plans/${plan}`,
        method: "GET",
        query: query,
        body: data,
        secure: true,
        type: ContentType.UrlEncoded,
        format: "json",
        ...params,
      }),

    /**
     * @description <p>Updates the specified plan by setting the values of the parameters passed. Any parameters not provided are left unchanged. By design, you cannot change a plan’s ID, amount, currency, or billing cycle.</p>
     *
     * @name PostPlansPlan
     * @request POST:/v1/plans/{plan}
     * @secure
     * @response `200` `Plan` Successful response.
     * @response `default` `Error` Error response.
     */
    postPlansPlan: (
      plan: string,
      data?: {
        active?: boolean;
        expand?: string[];
        metadata?: Record<string, string> | "" | (Record<string, string> & "");
        nickname?: string;
        product?: string;
        trial_period_days?: number;
      },
      params: RequestParams = {},
    ) =>
      this.request<Plan, Error>({
        path: `/v1/plans/${plan}`,
        method: "POST",
        body: data,
        secure: true,
        type: ContentType.UrlEncoded,
        format: "json",
        ...params,
      }),

    /**
     * @description <p>Returns a list of your prices.</p>
     *
     * @name GetPrices
     * @request GET:/v1/prices
     * @secure
     * @response `200` `{ data: (Price)[], has_more: boolean, object: "list", url: string }` Successful response.
     * @response `default` `Error` Error response.
     */
    getPrices: (
      query?: {
        active?: boolean;
        created?: { gt?: number; gte?: number; lt?: number; lte?: number } | number;
        currency?: string;
        ending_before?: string;
        expand?: string[];
        limit?: number;
        lookup_keys?: string[];
        product?: string;
        recurring?: { interval?: "day" | "month" | "week" | "year"; usage_type?: "licensed" | "metered" };
        starting_after?: string;
        type?: "one_time" | "recurring";
      },
      data?: CardMandatePaymentMethodDetails,
      params: RequestParams = {},
    ) =>
      this.request<{ data: Price[]; has_more: boolean; object: "list"; url: string }, Error>({
        path: `/v1/prices`,
        method: "GET",
        query: query,
        body: data,
        secure: true,
        type: ContentType.UrlEncoded,
        format: "json",
        ...params,
      }),

    /**
     * @description <p>Creates a new price for an existing product. The price can be recurring or one-time.</p>
     *
     * @name PostPrices
     * @request POST:/v1/prices
     * @secure
     * @response `200` `Price` Successful response.
     * @response `default` `Error` Error response.
     */
    postPrices: (
      data: {
        active?: boolean;
        billing_scheme?: "per_unit" | "tiered";
        currency: string;
        expand?: string[];
        lookup_key?: string;
        metadata?: Record<string, string>;
        nickname?: string;
        product?: string;
        product_data?: {
          active?: boolean;
          id?: string;
          metadata?: Record<string, string>;
          name: string;
          statement_descriptor?: string;
          tax_code?: string;
          unit_label?: string;
        };
        recurring?: {
          aggregate_usage?: "last_during_period" | "last_ever" | "max" | "sum";
          interval: "day" | "month" | "week" | "year";
          interval_count?: number;
          usage_type?: "licensed" | "metered";
        };
        tax_behavior?: "exclusive" | "inclusive" | "unspecified";
        tiers?: {
          flat_amount?: number;
          flat_amount_decimal?: string;
          unit_amount?: number;
          unit_amount_decimal?: string;
          up_to: "inf" | number;
        }[];
        tiers_mode?: "graduated" | "volume";
        transfer_lookup_key?: boolean;
        transform_quantity?: { divide_by: number; round: "down" | "up" };
        unit_amount?: number;
        unit_amount_decimal?: string;
      },
      params: RequestParams = {},
    ) =>
      this.request<Price, Error>({
        path: `/v1/prices`,
        method: "POST",
        body: data,
        secure: true,
        type: ContentType.UrlEncoded,
        format: "json",
        ...params,
      }),

    /**
     * @description <p>Retrieves the price with the given ID.</p>
     *
     * @name GetPricesPrice
     * @request GET:/v1/prices/{price}
     * @secure
     * @response `200` `Price` Successful response.
     * @response `default` `Error` Error response.
     */
    getPricesPrice: (
      price: string,
      query?: { expand?: string[] },
      data?: CardMandatePaymentMethodDetails,
      params: RequestParams = {},
    ) =>
      this.request<Price, Error>({
        path: `/v1/prices/${price}`,
        method: "GET",
        query: query,
        body: data,
        secure: true,
        type: ContentType.UrlEncoded,
        format: "json",
        ...params,
      }),

    /**
     * @description <p>Updates the specified price by setting the values of the parameters passed. Any parameters not provided are left unchanged.</p>
     *
     * @name PostPricesPrice
     * @request POST:/v1/prices/{price}
     * @secure
     * @response `200` `Price` Successful response.
     * @response `default` `Error` Error response.
     */
    postPricesPrice: (
      price: string,
      data?: {
        active?: boolean;
        expand?: string[];
        lookup_key?: string;
        metadata?: Record<string, string> | "" | (Record<string, string> & "");
        nickname?: string;
        tax_behavior?: "exclusive" | "inclusive" | "unspecified";
        transfer_lookup_key?: boolean;
      },
      params: RequestParams = {},
    ) =>
      this.request<Price, Error>({
        path: `/v1/prices/${price}`,
        method: "POST",
        body: data,
        secure: true,
        type: ContentType.UrlEncoded,
        format: "json",
        ...params,
      }),

    /**
     * @description <p>Returns a list of your products. The products are returned sorted by creation date, with the most recently created products appearing first.</p>
     *
     * @name GetProducts
     * @request GET:/v1/products
     * @secure
     * @response `200` `{ data: (Product)[], has_more: boolean, object: "list", url: string }` Successful response.
     * @response `default` `Error` Error response.
     */
    getProducts: (
      query?: {
        active?: boolean;
        created?: { gt?: number; gte?: number; lt?: number; lte?: number } | number;
        ending_before?: string;
        expand?: string[];
        ids?: string[];
        limit?: number;
        shippable?: boolean;
        starting_after?: string;
        url?: string;
      },
      data?: CardMandatePaymentMethodDetails,
      params: RequestParams = {},
    ) =>
      this.request<{ data: Product[]; has_more: boolean; object: "list"; url: string }, Error>({
        path: `/v1/products`,
        method: "GET",
        query: query,
        body: data,
        secure: true,
        type: ContentType.UrlEncoded,
        format: "json",
        ...params,
      }),

    /**
     * @description <p>Creates a new product object.</p>
     *
     * @name PostProducts
     * @request POST:/v1/products
     * @secure
     * @response `200` `Product` Successful response.
     * @response `default` `Error` Error response.
     */
    postProducts: (
      data: {
        active?: boolean;
        description?: string;
        expand?: string[];
        id?: string;
        images?: string[];
        metadata?: Record<string, string>;
        name: string;
        package_dimensions?: { height: number; length: number; weight: number; width: number };
        shippable?: boolean;
        statement_descriptor?: string;
        tax_code?: string;
        unit_label?: string;
        url?: string;
      },
      params: RequestParams = {},
    ) =>
      this.request<Product, Error>({
        path: `/v1/products`,
        method: "POST",
        body: data,
        secure: true,
        type: ContentType.UrlEncoded,
        format: "json",
        ...params,
      }),

    /**
     * @description <p>Delete a product. Deleting a product is only possible if it has no prices associated with it. Additionally, deleting a product with <code>type=good</code> is only possible if it has no SKUs associated with it.</p>
     *
     * @name DeleteProductsId
     * @request DELETE:/v1/products/{id}
     * @secure
     * @response `200` `DeletedProduct` Successful response.
     * @response `default` `Error` Error response.
     */
    deleteProductsId: (id: string, data?: CardMandatePaymentMethodDetails, params: RequestParams = {}) =>
      this.request<DeletedProduct, Error>({
        path: `/v1/products/${id}`,
        method: "DELETE",
        body: data,
        secure: true,
        type: ContentType.UrlEncoded,
        format: "json",
        ...params,
      }),

    /**
     * @description <p>Retrieves the details of an existing product. Supply the unique product ID from either a product creation request or the product list, and Stripe will return the corresponding product information.</p>
     *
     * @name GetProductsId
     * @request GET:/v1/products/{id}
     * @secure
     * @response `200` `Product` Successful response.
     * @response `default` `Error` Error response.
     */
    getProductsId: (
      id: string,
      query?: { expand?: string[] },
      data?: CardMandatePaymentMethodDetails,
      params: RequestParams = {},
    ) =>
      this.request<Product, Error>({
        path: `/v1/products/${id}`,
        method: "GET",
        query: query,
        body: data,
        secure: true,
        type: ContentType.UrlEncoded,
        format: "json",
        ...params,
      }),

    /**
     * @description <p>Updates the specific product by setting the values of the parameters passed. Any parameters not provided will be left unchanged.</p>
     *
     * @name PostProductsId
     * @request POST:/v1/products/{id}
     * @secure
     * @response `200` `Product` Successful response.
     * @response `default` `Error` Error response.
     */
    postProductsId: (
      id: string,
      data?: {
        active?: boolean;
        description?: string;
        expand?: string[];
        images?: string[] | "" | (string[] & "");
        metadata?: Record<string, string> | "" | (Record<string, string> & "");
        name?: string;
        package_dimensions?:
          | { height: number; length: number; weight: number; width: number }
          | ""
          | ({ height: number; length: number; weight: number; width: number } & "");
        shippable?: boolean;
        statement_descriptor?: string;
        tax_code?: string | "";
        unit_label?: string;
        url?: string;
      },
      params: RequestParams = {},
    ) =>
      this.request<Product, Error>({
        path: `/v1/products/${id}`,
        method: "POST",
        body: data,
        secure: true,
        type: ContentType.UrlEncoded,
        format: "json",
        ...params,
      }),

    /**
     * @description <p>Returns a list of your promotion codes.</p>
     *
     * @name GetPromotionCodes
     * @request GET:/v1/promotion_codes
     * @secure
     * @response `200` `{ data: (PromotionCode)[], has_more: boolean, object: "list", url: string }` Successful response.
     * @response `default` `Error` Error response.
     */
    getPromotionCodes: (
      query?: {
        active?: boolean;
        code?: string;
        coupon?: string;
        created?: { gt?: number; gte?: number; lt?: number; lte?: number } | number;
        customer?: string;
        ending_before?: string;
        expand?: string[];
        limit?: number;
        starting_after?: string;
      },
      data?: CardMandatePaymentMethodDetails,
      params: RequestParams = {},
    ) =>
      this.request<{ data: PromotionCode[]; has_more: boolean; object: "list"; url: string }, Error>({
        path: `/v1/promotion_codes`,
        method: "GET",
        query: query,
        body: data,
        secure: true,
        type: ContentType.UrlEncoded,
        format: "json",
        ...params,
      }),

    /**
     * @description <p>A promotion code points to a coupon. You can optionally restrict the code to a specific customer, redemption limit, and expiration date.</p>
     *
     * @name PostPromotionCodes
     * @request POST:/v1/promotion_codes
     * @secure
     * @response `200` `PromotionCode` Successful response.
     * @response `default` `Error` Error response.
     */
    postPromotionCodes: (
      data: {
        active?: boolean;
        code?: string;
        coupon: string;
        customer?: string;
        expand?: string[];
        expires_at?: number;
        max_redemptions?: number;
        metadata?: Record<string, string>;
        restrictions?: { first_time_transaction?: boolean; minimum_amount?: number; minimum_amount_currency?: string };
      },
      params: RequestParams = {},
    ) =>
      this.request<PromotionCode, Error>({
        path: `/v1/promotion_codes`,
        method: "POST",
        body: data,
        secure: true,
        type: ContentType.UrlEncoded,
        format: "json",
        ...params,
      }),

    /**
     * @description <p>Retrieves the promotion code with the given ID. In order to retrieve a promotion code by the customer-facing <code>code</code> use <a href="/docs/api/promotion_codes/list">list</a> with the desired <code>code</code>.</p>
     *
     * @name GetPromotionCodesPromotionCode
     * @request GET:/v1/promotion_codes/{promotion_code}
     * @secure
     * @response `200` `PromotionCode` Successful response.
     * @response `default` `Error` Error response.
     */
    getPromotionCodesPromotionCode: (
      promotionCode: string,
      query?: { expand?: string[] },
      data?: CardMandatePaymentMethodDetails,
      params: RequestParams = {},
    ) =>
      this.request<PromotionCode, Error>({
        path: `/v1/promotion_codes/${promotionCode}`,
        method: "GET",
        query: query,
        body: data,
        secure: true,
        type: ContentType.UrlEncoded,
        format: "json",
        ...params,
      }),

    /**
     * @description <p>Updates the specified promotion code by setting the values of the parameters passed. Most fields are, by design, not editable.</p>
     *
     * @name PostPromotionCodesPromotionCode
     * @request POST:/v1/promotion_codes/{promotion_code}
     * @secure
     * @response `200` `PromotionCode` Successful response.
     * @response `default` `Error` Error response.
     */
    postPromotionCodesPromotionCode: (
      promotionCode: string,
      data?: {
        active?: boolean;
        expand?: string[];
        metadata?: Record<string, string> | "" | (Record<string, string> & "");
      },
      params: RequestParams = {},
    ) =>
      this.request<PromotionCode, Error>({
        path: `/v1/promotion_codes/${promotionCode}`,
        method: "POST",
        body: data,
        secure: true,
        type: ContentType.UrlEncoded,
        format: "json",
        ...params,
      }),

    /**
     * @description <p>Returns a list of your quotes.</p>
     *
     * @name GetQuotes
     * @request GET:/v1/quotes
     * @secure
     * @response `200` `{ data: (Quote)[], has_more: boolean, object: "list", url: string }` Successful response.
     * @response `default` `Error` Error response.
     */
    getQuotes: (
      query?: {
        customer?: string;
        ending_before?: string;
        expand?: string[];
        limit?: number;
        starting_after?: string;
        status?: "accepted" | "canceled" | "draft" | "open";
      },
      data?: CardMandatePaymentMethodDetails,
      params: RequestParams = {},
    ) =>
      this.request<{ data: Quote[]; has_more: boolean; object: "list"; url: string }, Error>({
        path: `/v1/quotes`,
        method: "GET",
        query: query,
        body: data,
        secure: true,
        type: ContentType.UrlEncoded,
        format: "json",
        ...params,
      }),

    /**
     * @description <p>A quote models prices and services for a customer. Default options for <code>header</code>, <code>description</code>, <code>footer</code>, and <code>expires_at</code> can be set in the dashboard via the <a href="https://dashboard.stripe.com/settings/billing/quote">quote template</a>.</p>
     *
     * @name PostQuotes
     * @request POST:/v1/quotes
     * @secure
     * @response `200` `Quote` Successful response.
     * @response `default` `Error` Error response.
     */
    postQuotes: (
      data?: {
        application_fee_amount?: number | "";
        application_fee_percent?: number | "";
        automatic_tax?: { enabled: boolean };
        collection_method?: "charge_automatically" | "send_invoice";
        customer?: string;
        default_tax_rates?: string[] | "" | (string[] & "");
        description?: string;
        discounts?: { coupon?: string; discount?: string }[] | "" | ({ coupon?: string; discount?: string }[] & "");
        expand?: string[];
        expires_at?: number;
        footer?: string;
        from_quote?: { is_revision?: boolean; quote: string };
        header?: string;
        invoice_settings?: { days_until_due?: number };
        line_items?: {
          price?: string;
          price_data?: {
            currency: string;
            product: string;
            recurring?: { interval: "day" | "month" | "week" | "year"; interval_count?: number };
            tax_behavior?: "exclusive" | "inclusive" | "unspecified";
            unit_amount?: number;
            unit_amount_decimal?: string;
          };
          quantity?: number;
          tax_rates?: string[] | "" | (string[] & "");
        }[];
        metadata?: Record<string, string>;
        on_behalf_of?: string | "";
        subscription_data?: {
          effective_date?: "current_period_end" | number | "" | ("current_period_end" & "");
          trial_period_days?: number | "";
        };
        transfer_data?:
          | { amount?: number; amount_percent?: number; destination: string }
          | ""
          | ({ amount?: number; amount_percent?: number; destination: string } & "");
      },
      params: RequestParams = {},
    ) =>
      this.request<Quote, Error>({
        path: `/v1/quotes`,
        method: "POST",
        body: data,
        secure: true,
        type: ContentType.UrlEncoded,
        format: "json",
        ...params,
      }),

    /**
     * @description <p>Retrieves the quote with the given ID.</p>
     *
     * @name GetQuotesQuote
     * @request GET:/v1/quotes/{quote}
     * @secure
     * @response `200` `Quote` Successful response.
     * @response `default` `Error` Error response.
     */
    getQuotesQuote: (
      quote: string,
      query?: { expand?: string[] },
      data?: CardMandatePaymentMethodDetails,
      params: RequestParams = {},
    ) =>
      this.request<Quote, Error>({
        path: `/v1/quotes/${quote}`,
        method: "GET",
        query: query,
        body: data,
        secure: true,
        type: ContentType.UrlEncoded,
        format: "json",
        ...params,
      }),

    /**
     * @description <p>A quote models prices and services for a customer.</p>
     *
     * @name PostQuotesQuote
     * @request POST:/v1/quotes/{quote}
     * @secure
     * @response `200` `Quote` Successful response.
     * @response `default` `Error` Error response.
     */
    postQuotesQuote: (
      quote: string,
      data?: {
        application_fee_amount?: number | "";
        application_fee_percent?: number | "";
        automatic_tax?: { enabled: boolean };
        collection_method?: "charge_automatically" | "send_invoice";
        customer?: string;
        default_tax_rates?: string[] | "" | (string[] & "");
        description?: string;
        discounts?: { coupon?: string; discount?: string }[] | "" | ({ coupon?: string; discount?: string }[] & "");
        expand?: string[];
        expires_at?: number;
        footer?: string;
        header?: string;
        invoice_settings?: { days_until_due?: number };
        line_items?: {
          id?: string;
          price?: string;
          price_data?: {
            currency: string;
            product: string;
            recurring?: { interval: "day" | "month" | "week" | "year"; interval_count?: number };
            tax_behavior?: "exclusive" | "inclusive" | "unspecified";
            unit_amount?: number;
            unit_amount_decimal?: string;
          };
          quantity?: number;
          tax_rates?: string[] | "" | (string[] & "");
        }[];
        metadata?: Record<string, string>;
        on_behalf_of?: string | "";
        subscription_data?: {
          effective_date?: "current_period_end" | number | "" | ("current_period_end" & "");
          trial_period_days?: number | "";
        };
        transfer_data?:
          | { amount?: number; amount_percent?: number; destination: string }
          | ""
          | ({ amount?: number; amount_percent?: number; destination: string } & "");
      },
      params: RequestParams = {},
    ) =>
      this.request<Quote, Error>({
        path: `/v1/quotes/${quote}`,
        method: "POST",
        body: data,
        secure: true,
        type: ContentType.UrlEncoded,
        format: "json",
        ...params,
      }),

    /**
     * @description <p>Accepts the specified quote.</p>
     *
     * @name PostQuotesQuoteAccept
     * @request POST:/v1/quotes/{quote}/accept
     * @secure
     * @response `200` `Quote` Successful response.
     * @response `default` `Error` Error response.
     */
    postQuotesQuoteAccept: (quote: string, data?: { expand?: string[] }, params: RequestParams = {}) =>
      this.request<Quote, Error>({
        path: `/v1/quotes/${quote}/accept`,
        method: "POST",
        body: data,
        secure: true,
        type: ContentType.UrlEncoded,
        format: "json",
        ...params,
      }),

    /**
     * @description <p>Cancels the quote.</p>
     *
     * @name PostQuotesQuoteCancel
     * @request POST:/v1/quotes/{quote}/cancel
     * @secure
     * @response `200` `Quote` Successful response.
     * @response `default` `Error` Error response.
     */
    postQuotesQuoteCancel: (quote: string, data?: { expand?: string[] }, params: RequestParams = {}) =>
      this.request<Quote, Error>({
        path: `/v1/quotes/${quote}/cancel`,
        method: "POST",
        body: data,
        secure: true,
        type: ContentType.UrlEncoded,
        format: "json",
        ...params,
      }),

    /**
     * @description <p>When retrieving a quote, there is an includable <a href="https://stripe.com/docs/api/quotes/object#quote_object-computed-upfront-line_items"><strong>computed.upfront.line_items</strong></a> property containing the first handful of those items. There is also a URL where you can retrieve the full (paginated) list of upfront line items.</p>
     *
     * @name GetQuotesQuoteComputedUpfrontLineItems
     * @request GET:/v1/quotes/{quote}/computed_upfront_line_items
     * @secure
     * @response `200` `{ data: (Item)[], has_more: boolean, object: "list", url: string }` Successful response.
     * @response `default` `Error` Error response.
     */
    getQuotesQuoteComputedUpfrontLineItems: (
      quote: string,
      query?: { ending_before?: string; expand?: string[]; limit?: number; starting_after?: string },
      data?: CardMandatePaymentMethodDetails,
      params: RequestParams = {},
    ) =>
      this.request<{ data: Item[]; has_more: boolean; object: "list"; url: string }, Error>({
        path: `/v1/quotes/${quote}/computed_upfront_line_items`,
        method: "GET",
        query: query,
        body: data,
        secure: true,
        type: ContentType.UrlEncoded,
        format: "json",
        ...params,
      }),

    /**
     * @description <p>Finalizes the quote.</p>
     *
     * @name PostQuotesQuoteFinalize
     * @request POST:/v1/quotes/{quote}/finalize
     * @secure
     * @response `200` `Quote` Successful response.
     * @response `default` `Error` Error response.
     */
    postQuotesQuoteFinalize: (
      quote: string,
      data?: { expand?: string[]; expires_at?: number },
      params: RequestParams = {},
    ) =>
      this.request<Quote, Error>({
        path: `/v1/quotes/${quote}/finalize`,
        method: "POST",
        body: data,
        secure: true,
        type: ContentType.UrlEncoded,
        format: "json",
        ...params,
      }),

    /**
     * @description <p>When retrieving a quote, there is an includable <strong>line_items</strong> property containing the first handful of those items. There is also a URL where you can retrieve the full (paginated) list of line items.</p>
     *
     * @name GetQuotesQuoteLineItems
     * @request GET:/v1/quotes/{quote}/line_items
     * @secure
     * @response `200` `{ data: (Item)[], has_more: boolean, object: "list", url: string }` Successful response.
     * @response `default` `Error` Error response.
     */
    getQuotesQuoteLineItems: (
      quote: string,
      query?: { ending_before?: string; expand?: string[]; limit?: number; starting_after?: string },
      data?: CardMandatePaymentMethodDetails,
      params: RequestParams = {},
    ) =>
      this.request<{ data: Item[]; has_more: boolean; object: "list"; url: string }, Error>({
        path: `/v1/quotes/${quote}/line_items`,
        method: "GET",
        query: query,
        body: data,
        secure: true,
        type: ContentType.UrlEncoded,
        format: "json",
        ...params,
      }),

    /**
     * @description <p>Download the PDF for a finalized quote</p>
     *
     * @name GetQuotesQuotePdf
     * @request GET:/v1/quotes/{quote}/pdf
     * @secure
     * @response `200` `File` Successful response.
     * @response `default` `Error` Error response.
     */
    getQuotesQuotePdf: (
      quote: string,
      query?: { expand?: string[] },
      data?: CardMandatePaymentMethodDetails,
      params: RequestParams = {},
    ) =>
      this.request<File, Error>({
        path: `/v1/quotes/${quote}/pdf`,
        method: "GET",
        query: query,
        body: data,
        secure: true,
        type: ContentType.UrlEncoded,
        ...params,
      }),

    /**
     * @description <p>Returns a list of early fraud warnings.</p>
     *
     * @name GetRadarEarlyFraudWarnings
     * @request GET:/v1/radar/early_fraud_warnings
     * @secure
     * @response `200` `{ data: (RadarEarlyFraudWarning)[], has_more: boolean, object: "list", url: string }` Successful response.
     * @response `default` `Error` Error response.
     */
    getRadarEarlyFraudWarnings: (
      query?: {
        charge?: string;
        ending_before?: string;
        expand?: string[];
        limit?: number;
        payment_intent?: string;
        starting_after?: string;
      },
      data?: CardMandatePaymentMethodDetails,
      params: RequestParams = {},
    ) =>
      this.request<{ data: RadarEarlyFraudWarning[]; has_more: boolean; object: "list"; url: string }, Error>({
        path: `/v1/radar/early_fraud_warnings`,
        method: "GET",
        query: query,
        body: data,
        secure: true,
        type: ContentType.UrlEncoded,
        format: "json",
        ...params,
      }),

    /**
     * @description <p>Retrieves the details of an early fraud warning that has previously been created. </p> <p>Please refer to the <a href="#early_fraud_warning_object">early fraud warning</a> object reference for more details.</p>
     *
     * @name GetRadarEarlyFraudWarningsEarlyFraudWarning
     * @request GET:/v1/radar/early_fraud_warnings/{early_fraud_warning}
     * @secure
     * @response `200` `RadarEarlyFraudWarning` Successful response.
     * @response `default` `Error` Error response.
     */
    getRadarEarlyFraudWarningsEarlyFraudWarning: (
      earlyFraudWarning: string,
      query?: { expand?: string[] },
      data?: CardMandatePaymentMethodDetails,
      params: RequestParams = {},
    ) =>
      this.request<RadarEarlyFraudWarning, Error>({
        path: `/v1/radar/early_fraud_warnings/${earlyFraudWarning}`,
        method: "GET",
        query: query,
        body: data,
        secure: true,
        type: ContentType.UrlEncoded,
        format: "json",
        ...params,
      }),

    /**
     * @description <p>Returns a list of <code>ValueListItem</code> objects. The objects are sorted in descending order by creation date, with the most recently created object appearing first.</p>
     *
     * @name GetRadarValueListItems
     * @request GET:/v1/radar/value_list_items
     * @secure
     * @response `200` `{ data: (RadarValueListItem)[], has_more: boolean, object: "list", url: string }` Successful response.
     * @response `default` `Error` Error response.
     */
    getRadarValueListItems: (
      query: {
        created?: { gt?: number; gte?: number; lt?: number; lte?: number } | number;
        ending_before?: string;
        expand?: string[];
        limit?: number;
        starting_after?: string;
        value?: string;
        value_list: string;
      },
      data?: CardMandatePaymentMethodDetails,
      params: RequestParams = {},
    ) =>
      this.request<{ data: RadarValueListItem[]; has_more: boolean; object: "list"; url: string }, Error>({
        path: `/v1/radar/value_list_items`,
        method: "GET",
        query: query,
        body: data,
        secure: true,
        type: ContentType.UrlEncoded,
        format: "json",
        ...params,
      }),

    /**
     * @description <p>Creates a new <code>ValueListItem</code> object, which is added to the specified parent value list.</p>
     *
     * @name PostRadarValueListItems
     * @request POST:/v1/radar/value_list_items
     * @secure
     * @response `200` `RadarValueListItem` Successful response.
     * @response `default` `Error` Error response.
     */
    postRadarValueListItems: (
      data: { expand?: string[]; value: string; value_list: string },
      params: RequestParams = {},
    ) =>
      this.request<RadarValueListItem, Error>({
        path: `/v1/radar/value_list_items`,
        method: "POST",
        body: data,
        secure: true,
        type: ContentType.UrlEncoded,
        format: "json",
        ...params,
      }),

    /**
     * @description <p>Deletes a <code>ValueListItem</code> object, removing it from its parent value list.</p>
     *
     * @name DeleteRadarValueListItemsItem
     * @request DELETE:/v1/radar/value_list_items/{item}
     * @secure
     * @response `200` `DeletedRadarValueListItem` Successful response.
     * @response `default` `Error` Error response.
     */
    deleteRadarValueListItemsItem: (item: string, data?: CardMandatePaymentMethodDetails, params: RequestParams = {}) =>
      this.request<DeletedRadarValueListItem, Error>({
        path: `/v1/radar/value_list_items/${item}`,
        method: "DELETE",
        body: data,
        secure: true,
        type: ContentType.UrlEncoded,
        format: "json",
        ...params,
      }),

    /**
     * @description <p>Retrieves a <code>ValueListItem</code> object.</p>
     *
     * @name GetRadarValueListItemsItem
     * @request GET:/v1/radar/value_list_items/{item}
     * @secure
     * @response `200` `RadarValueListItem` Successful response.
     * @response `default` `Error` Error response.
     */
    getRadarValueListItemsItem: (
      item: string,
      query?: { expand?: string[] },
      data?: CardMandatePaymentMethodDetails,
      params: RequestParams = {},
    ) =>
      this.request<RadarValueListItem, Error>({
        path: `/v1/radar/value_list_items/${item}`,
        method: "GET",
        query: query,
        body: data,
        secure: true,
        type: ContentType.UrlEncoded,
        format: "json",
        ...params,
      }),

    /**
     * @description <p>Returns a list of <code>ValueList</code> objects. The objects are sorted in descending order by creation date, with the most recently created object appearing first.</p>
     *
     * @name GetRadarValueLists
     * @request GET:/v1/radar/value_lists
     * @secure
     * @response `200` `{ data: (RadarValueList)[], has_more: boolean, object: "list", url: string }` Successful response.
     * @response `default` `Error` Error response.
     */
    getRadarValueLists: (
      query?: {
        alias?: string;
        contains?: string;
        created?: { gt?: number; gte?: number; lt?: number; lte?: number } | number;
        ending_before?: string;
        expand?: string[];
        limit?: number;
        starting_after?: string;
      },
      data?: CardMandatePaymentMethodDetails,
      params: RequestParams = {},
    ) =>
      this.request<{ data: RadarValueList[]; has_more: boolean; object: "list"; url: string }, Error>({
        path: `/v1/radar/value_lists`,
        method: "GET",
        query: query,
        body: data,
        secure: true,
        type: ContentType.UrlEncoded,
        format: "json",
        ...params,
      }),

    /**
     * @description <p>Creates a new <code>ValueList</code> object, which can then be referenced in rules.</p>
     *
     * @name PostRadarValueLists
     * @request POST:/v1/radar/value_lists
     * @secure
     * @response `200` `RadarValueList` Successful response.
     * @response `default` `Error` Error response.
     */
    postRadarValueLists: (
      data: {
        alias: string;
        expand?: string[];
        item_type?:
          | "card_bin"
          | "card_fingerprint"
          | "case_sensitive_string"
          | "country"
          | "customer_id"
          | "email"
          | "ip_address"
          | "string";
        metadata?: Record<string, string>;
        name: string;
      },
      params: RequestParams = {},
    ) =>
      this.request<RadarValueList, Error>({
        path: `/v1/radar/value_lists`,
        method: "POST",
        body: data,
        secure: true,
        type: ContentType.UrlEncoded,
        format: "json",
        ...params,
      }),

    /**
     * @description <p>Deletes a <code>ValueList</code> object, also deleting any items contained within the value list. To be deleted, a value list must not be referenced in any rules.</p>
     *
     * @name DeleteRadarValueListsValueList
     * @request DELETE:/v1/radar/value_lists/{value_list}
     * @secure
     * @response `200` `DeletedRadarValueList` Successful response.
     * @response `default` `Error` Error response.
     */
    deleteRadarValueListsValueList: (
      valueList: string,
      data?: CardMandatePaymentMethodDetails,
      params: RequestParams = {},
    ) =>
      this.request<DeletedRadarValueList, Error>({
        path: `/v1/radar/value_lists/${valueList}`,
        method: "DELETE",
        body: data,
        secure: true,
        type: ContentType.UrlEncoded,
        format: "json",
        ...params,
      }),

    /**
     * @description <p>Retrieves a <code>ValueList</code> object.</p>
     *
     * @name GetRadarValueListsValueList
     * @request GET:/v1/radar/value_lists/{value_list}
     * @secure
     * @response `200` `RadarValueList` Successful response.
     * @response `default` `Error` Error response.
     */
    getRadarValueListsValueList: (
      valueList: string,
      query?: { expand?: string[] },
      data?: CardMandatePaymentMethodDetails,
      params: RequestParams = {},
    ) =>
      this.request<RadarValueList, Error>({
        path: `/v1/radar/value_lists/${valueList}`,
        method: "GET",
        query: query,
        body: data,
        secure: true,
        type: ContentType.UrlEncoded,
        format: "json",
        ...params,
      }),

    /**
     * @description <p>Updates a <code>ValueList</code> object by setting the values of the parameters passed. Any parameters not provided will be left unchanged. Note that <code>item_type</code> is immutable.</p>
     *
     * @name PostRadarValueListsValueList
     * @request POST:/v1/radar/value_lists/{value_list}
     * @secure
     * @response `200` `RadarValueList` Successful response.
     * @response `default` `Error` Error response.
     */
    postRadarValueListsValueList: (
      valueList: string,
      data?: { alias?: string; expand?: string[]; metadata?: Record<string, string>; name?: string },
      params: RequestParams = {},
    ) =>
      this.request<RadarValueList, Error>({
        path: `/v1/radar/value_lists/${valueList}`,
        method: "POST",
        body: data,
        secure: true,
        type: ContentType.UrlEncoded,
        format: "json",
        ...params,
      }),

    /**
     * @description <p>Returns a list of your recipients. The recipients are returned sorted by creation date, with the most recently created recipients appearing first.</p>
     *
     * @name GetRecipients
     * @request GET:/v1/recipients
     * @deprecated
     * @secure
     * @response `200` `{ data: (Recipient)[], has_more: boolean, object: "list", url: string }` Successful response.
     * @response `default` `Error` Error response.
     */
    getRecipients: (
      query?: {
        created?: { gt?: number; gte?: number; lt?: number; lte?: number } | number;
        ending_before?: string;
        expand?: string[];
        limit?: number;
        starting_after?: string;
        type?: "corporation" | "individual";
        verified?: boolean;
      },
      data?: CardMandatePaymentMethodDetails,
      params: RequestParams = {},
    ) =>
      this.request<{ data: Recipient[]; has_more: boolean; object: "list"; url: string }, Error>({
        path: `/v1/recipients`,
        method: "GET",
        query: query,
        body: data,
        secure: true,
        type: ContentType.UrlEncoded,
        format: "json",
        ...params,
      }),

    /**
     * @description <p>Creates a new <code>Recipient</code> object and verifies the recipient’s identity. Also verifies the recipient’s bank account information or debit card, if either is provided.</p>
     *
     * @name PostRecipients
     * @request POST:/v1/recipients
     * @deprecated
     * @secure
     * @response `200` `Recipient` Successful response.
     * @response `default` `Error` Error response.
     */
    postRecipients: (
      data: {
        bank_account?: string;
        card?: string;
        description?: string;
        email?: string;
        expand?: string[];
        metadata?: Record<string, string> | "" | (Record<string, string> & "");
        name: string;
        tax_id?: string;
        type: string;
      },
      params: RequestParams = {},
    ) =>
      this.request<Recipient, Error>({
        path: `/v1/recipients`,
        method: "POST",
        body: data,
        secure: true,
        type: ContentType.UrlEncoded,
        format: "json",
        ...params,
      }),

    /**
     * @description <p>Permanently deletes a recipient. It cannot be undone.</p>
     *
     * @name DeleteRecipientsId
     * @request DELETE:/v1/recipients/{id}
     * @deprecated
     * @secure
     * @response `200` `DeletedRecipient` Successful response.
     * @response `default` `Error` Error response.
     */
    deleteRecipientsId: (id: string, data?: CardMandatePaymentMethodDetails, params: RequestParams = {}) =>
      this.request<DeletedRecipient, Error>({
        path: `/v1/recipients/${id}`,
        method: "DELETE",
        body: data,
        secure: true,
        type: ContentType.UrlEncoded,
        format: "json",
        ...params,
      }),

    /**
     * @description <p>Retrieves the details of an existing recipient. You need only supply the unique recipient identifier that was returned upon recipient creation.</p>
     *
     * @name GetRecipientsId
     * @request GET:/v1/recipients/{id}
     * @deprecated
     * @secure
     * @response `200` `(Recipient | DeletedRecipient | (Recipient & DeletedRecipient))` Successful response.
     * @response `default` `Error` Error response.
     */
    getRecipientsId: (
      id: string,
      query?: { expand?: string[] },
      data?: CardMandatePaymentMethodDetails,
      params: RequestParams = {},
    ) =>
      this.request<Recipient | DeletedRecipient | (Recipient & DeletedRecipient), Error>({
        path: `/v1/recipients/${id}`,
        method: "GET",
        query: query,
        body: data,
        secure: true,
        type: ContentType.UrlEncoded,
        format: "json",
        ...params,
      }),

    /**
     * @description <p>Updates the specified recipient by setting the values of the parameters passed. Any parameters not provided will be left unchanged.</p> <p>If you update the name or tax ID, the identity verification will automatically be rerun. If you update the bank account, the bank account validation will automatically be rerun.</p>
     *
     * @name PostRecipientsId
     * @request POST:/v1/recipients/{id}
     * @deprecated
     * @secure
     * @response `200` `Recipient` Successful response.
     * @response `default` `Error` Error response.
     */
    postRecipientsId: (
      id: string,
      data?: {
        bank_account?: string;
        card?: string;
        default_card?: string;
        description?: string;
        email?: string;
        expand?: string[];
        metadata?: Record<string, string> | "" | (Record<string, string> & "");
        name?: string;
        tax_id?: string;
      },
      params: RequestParams = {},
    ) =>
      this.request<Recipient, Error>({
        path: `/v1/recipients/${id}`,
        method: "POST",
        body: data,
        secure: true,
        type: ContentType.UrlEncoded,
        format: "json",
        ...params,
      }),

    /**
     * @description <p>Returns a list of all refunds you’ve previously created. The refunds are returned in sorted order, with the most recent refunds appearing first. For convenience, the 10 most recent refunds are always available by default on the charge object.</p>
     *
     * @name GetRefunds
     * @request GET:/v1/refunds
     * @secure
     * @response `200` `{ data: (Refund)[], has_more: boolean, object: "list", url: string }` Successful response.
     * @response `default` `Error` Error response.
     */
    getRefunds: (
      query?: {
        charge?: string;
        created?: { gt?: number; gte?: number; lt?: number; lte?: number } | number;
        ending_before?: string;
        expand?: string[];
        limit?: number;
        payment_intent?: string;
        starting_after?: string;
      },
      data?: CardMandatePaymentMethodDetails,
      params: RequestParams = {},
    ) =>
      this.request<{ data: Refund[]; has_more: boolean; object: "list"; url: string }, Error>({
        path: `/v1/refunds`,
        method: "GET",
        query: query,
        body: data,
        secure: true,
        type: ContentType.UrlEncoded,
        format: "json",
        ...params,
      }),

    /**
     * @description <p>Create a refund.</p>
     *
     * @name PostRefunds
     * @request POST:/v1/refunds
     * @secure
     * @response `200` `Refund` Successful response.
     * @response `default` `Error` Error response.
     */
    postRefunds: (
      data?: {
        amount?: number;
        charge?: string;
        expand?: string[];
        metadata?: Record<string, string> | "" | (Record<string, string> & "");
        payment_intent?: string;
        reason?: "duplicate" | "fraudulent" | "requested_by_customer";
        refund_application_fee?: boolean;
        reverse_transfer?: boolean;
      },
      params: RequestParams = {},
    ) =>
      this.request<Refund, Error>({
        path: `/v1/refunds`,
        method: "POST",
        body: data,
        secure: true,
        type: ContentType.UrlEncoded,
        format: "json",
        ...params,
      }),

    /**
     * @description <p>Retrieves the details of an existing refund.</p>
     *
     * @name GetRefundsRefund
     * @request GET:/v1/refunds/{refund}
     * @secure
     * @response `200` `Refund` Successful response.
     * @response `default` `Error` Error response.
     */
    getRefundsRefund: (
      refund: string,
      query?: { expand?: string[] },
      data?: CardMandatePaymentMethodDetails,
      params: RequestParams = {},
    ) =>
      this.request<Refund, Error>({
        path: `/v1/refunds/${refund}`,
        method: "GET",
        query: query,
        body: data,
        secure: true,
        type: ContentType.UrlEncoded,
        format: "json",
        ...params,
      }),

    /**
     * @description <p>Updates the specified refund by setting the values of the parameters passed. Any parameters not provided will be left unchanged.</p> <p>This request only accepts <code>metadata</code> as an argument.</p>
     *
     * @name PostRefundsRefund
     * @request POST:/v1/refunds/{refund}
     * @secure
     * @response `200` `Refund` Successful response.
     * @response `default` `Error` Error response.
     */
    postRefundsRefund: (
      refund: string,
      data?: { expand?: string[]; metadata?: Record<string, string> | "" | (Record<string, string> & "") },
      params: RequestParams = {},
    ) =>
      this.request<Refund, Error>({
        path: `/v1/refunds/${refund}`,
        method: "POST",
        body: data,
        secure: true,
        type: ContentType.UrlEncoded,
        format: "json",
        ...params,
      }),

    /**
     * @description <p>Returns a list of Report Runs, with the most recent appearing first.</p>
     *
     * @name GetReportingReportRuns
     * @request GET:/v1/reporting/report_runs
     * @secure
     * @response `200` `{ data: (ReportingReportRun)[], has_more: boolean, object: "list", url: string }` Successful response.
     * @response `default` `Error` Error response.
     */
    getReportingReportRuns: (
      query?: {
        created?: { gt?: number; gte?: number; lt?: number; lte?: number } | number;
        ending_before?: string;
        expand?: string[];
        limit?: number;
        starting_after?: string;
      },
      data?: CardMandatePaymentMethodDetails,
      params: RequestParams = {},
    ) =>
      this.request<{ data: ReportingReportRun[]; has_more: boolean; object: "list"; url: string }, Error>({
        path: `/v1/reporting/report_runs`,
        method: "GET",
        query: query,
        body: data,
        secure: true,
        type: ContentType.UrlEncoded,
        format: "json",
        ...params,
      }),

    /**
     * @description <p>Creates a new object and begin running the report. (Certain report types require a <a href="https://stripe.com/docs/keys#test-live-modes">live-mode API key</a>.)</p>
     *
     * @name PostReportingReportRuns
     * @request POST:/v1/reporting/report_runs
     * @secure
     * @response `200` `ReportingReportRun` Successful response.
     * @response `default` `Error` Error response.
     */
    postReportingReportRuns: (
      data: {
        expand?: string[];
        parameters?: {
          columns?: string[];
          connected_account?: string;
          currency?: string;
          interval_end?: number;
          interval_start?: number;
          payout?: string;
          reporting_category?:
            | "advance"
            | "advance_funding"
            | "anticipation_repayment"
            | "charge"
            | "charge_failure"
            | "connect_collection_transfer"
            | "connect_reserved_funds"
            | "contribution"
            | "dispute"
            | "dispute_reversal"
            | "fee"
            | "financing_paydown"
            | "financing_paydown_reversal"
            | "financing_payout"
            | "financing_payout_reversal"
            | "issuing_authorization_hold"
            | "issuing_authorization_release"
            | "issuing_dispute"
            | "issuing_transaction"
            | "network_cost"
            | "other_adjustment"
            | "partial_capture_reversal"
            | "payout"
            | "payout_reversal"
            | "platform_earning"
            | "platform_earning_refund"
            | "refund"
            | "refund_failure"
            | "risk_reserved_funds"
            | "tax"
            | "topup"
            | "topup_reversal"
            | "transfer"
            | "transfer_reversal";
          timezone?:
            | "Africa/Abidjan"
            | "Africa/Accra"
            | "Africa/Addis_Ababa"
            | "Africa/Algiers"
            | "Africa/Asmara"
            | "Africa/Asmera"
            | "Africa/Bamako"
            | "Africa/Bangui"
            | "Africa/Banjul"
            | "Africa/Bissau"
            | "Africa/Blantyre"
            | "Africa/Brazzaville"
            | "Africa/Bujumbura"
            | "Africa/Cairo"
            | "Africa/Casablanca"
            | "Africa/Ceuta"
            | "Africa/Conakry"
            | "Africa/Dakar"
            | "Africa/Dar_es_Salaam"
            | "Africa/Djibouti"
            | "Africa/Douala"
            | "Africa/El_Aaiun"
            | "Africa/Freetown"
            | "Africa/Gaborone"
            | "Africa/Harare"
            | "Africa/Johannesburg"
            | "Africa/Juba"
            | "Africa/Kampala"
            | "Africa/Khartoum"
            | "Africa/Kigali"
            | "Africa/Kinshasa"
            | "Africa/Lagos"
            | "Africa/Libreville"
            | "Africa/Lome"
            | "Africa/Luanda"
            | "Africa/Lubumbashi"
            | "Africa/Lusaka"
            | "Africa/Malabo"
            | "Africa/Maputo"
            | "Africa/Maseru"
            | "Africa/Mbabane"
            | "Africa/Mogadishu"
            | "Africa/Monrovia"
            | "Africa/Nairobi"
            | "Africa/Ndjamena"
            | "Africa/Niamey"
            | "Africa/Nouakchott"
            | "Africa/Ouagadougou"
            | "Africa/Porto-Novo"
            | "Africa/Sao_Tome"
            | "Africa/Timbuktu"
            | "Africa/Tripoli"
            | "Africa/Tunis"
            | "Africa/Windhoek"
            | "America/Adak"
            | "America/Anchorage"
            | "America/Anguilla"
            | "America/Antigua"
            | "America/Araguaina"
            | "America/Argentina/Buenos_Aires"
            | "America/Argentina/Catamarca"
            | "America/Argentina/ComodRivadavia"
            | "America/Argentina/Cordoba"
            | "America/Argentina/Jujuy"
            | "America/Argentina/La_Rioja"
            | "America/Argentina/Mendoza"
            | "America/Argentina/Rio_Gallegos"
            | "America/Argentina/Salta"
            | "America/Argentina/San_Juan"
            | "America/Argentina/San_Luis"
            | "America/Argentina/Tucuman"
            | "America/Argentina/Ushuaia"
            | "America/Aruba"
            | "America/Asuncion"
            | "America/Atikokan"
            | "America/Atka"
            | "America/Bahia"
            | "America/Bahia_Banderas"
            | "America/Barbados"
            | "America/Belem"
            | "America/Belize"
            | "America/Blanc-Sablon"
            | "America/Boa_Vista"
            | "America/Bogota"
            | "America/Boise"
            | "America/Buenos_Aires"
            | "America/Cambridge_Bay"
            | "America/Campo_Grande"
            | "America/Cancun"
            | "America/Caracas"
            | "America/Catamarca"
            | "America/Cayenne"
            | "America/Cayman"
            | "America/Chicago"
            | "America/Chihuahua"
            | "America/Coral_Harbour"
            | "America/Cordoba"
            | "America/Costa_Rica"
            | "America/Creston"
            | "America/Cuiaba"
            | "America/Curacao"
            | "America/Danmarkshavn"
            | "America/Dawson"
            | "America/Dawson_Creek"
            | "America/Denver"
            | "America/Detroit"
            | "America/Dominica"
            | "America/Edmonton"
            | "America/Eirunepe"
            | "America/El_Salvador"
            | "America/Ensenada"
            | "America/Fort_Nelson"
            | "America/Fort_Wayne"
            | "America/Fortaleza"
            | "America/Glace_Bay"
            | "America/Godthab"
            | "America/Goose_Bay"
            | "America/Grand_Turk"
            | "America/Grenada"
            | "America/Guadeloupe"
            | "America/Guatemala"
            | "America/Guayaquil"
            | "America/Guyana"
            | "America/Halifax"
            | "America/Havana"
            | "America/Hermosillo"
            | "America/Indiana/Indianapolis"
            | "America/Indiana/Knox"
            | "America/Indiana/Marengo"
            | "America/Indiana/Petersburg"
            | "America/Indiana/Tell_City"
            | "America/Indiana/Vevay"
            | "America/Indiana/Vincennes"
            | "America/Indiana/Winamac"
            | "America/Indianapolis"
            | "America/Inuvik"
            | "America/Iqaluit"
            | "America/Jamaica"
            | "America/Jujuy"
            | "America/Juneau"
            | "America/Kentucky/Louisville"
            | "America/Kentucky/Monticello"
            | "America/Knox_IN"
            | "America/Kralendijk"
            | "America/La_Paz"
            | "America/Lima"
            | "America/Los_Angeles"
            | "America/Louisville"
            | "America/Lower_Princes"
            | "America/Maceio"
            | "America/Managua"
            | "America/Manaus"
            | "America/Marigot"
            | "America/Martinique"
            | "America/Matamoros"
            | "America/Mazatlan"
            | "America/Mendoza"
            | "America/Menominee"
            | "America/Merida"
            | "America/Metlakatla"
            | "America/Mexico_City"
            | "America/Miquelon"
            | "America/Moncton"
            | "America/Monterrey"
            | "America/Montevideo"
            | "America/Montreal"
            | "America/Montserrat"
            | "America/Nassau"
            | "America/New_York"
            | "America/Nipigon"
            | "America/Nome"
            | "America/Noronha"
            | "America/North_Dakota/Beulah"
            | "America/North_Dakota/Center"
            | "America/North_Dakota/New_Salem"
            | "America/Ojinaga"
            | "America/Panama"
            | "America/Pangnirtung"
            | "America/Paramaribo"
            | "America/Phoenix"
            | "America/Port-au-Prince"
            | "America/Port_of_Spain"
            | "America/Porto_Acre"
            | "America/Porto_Velho"
            | "America/Puerto_Rico"
            | "America/Punta_Arenas"
            | "America/Rainy_River"
            | "America/Rankin_Inlet"
            | "America/Recife"
            | "America/Regina"
            | "America/Resolute"
            | "America/Rio_Branco"
            | "America/Rosario"
            | "America/Santa_Isabel"
            | "America/Santarem"
            | "America/Santiago"
            | "America/Santo_Domingo"
            | "America/Sao_Paulo"
            | "America/Scoresbysund"
            | "America/Shiprock"
            | "America/Sitka"
            | "America/St_Barthelemy"
            | "America/St_Johns"
            | "America/St_Kitts"
            | "America/St_Lucia"
            | "America/St_Thomas"
            | "America/St_Vincent"
            | "America/Swift_Current"
            | "America/Tegucigalpa"
            | "America/Thule"
            | "America/Thunder_Bay"
            | "America/Tijuana"
            | "America/Toronto"
            | "America/Tortola"
            | "America/Vancouver"
            | "America/Virgin"
            | "America/Whitehorse"
            | "America/Winnipeg"
            | "America/Yakutat"
            | "America/Yellowknife"
            | "Antarctica/Casey"
            | "Antarctica/Davis"
            | "Antarctica/DumontDUrville"
            | "Antarctica/Macquarie"
            | "Antarctica/Mawson"
            | "Antarctica/McMurdo"
            | "Antarctica/Palmer"
            | "Antarctica/Rothera"
            | "Antarctica/South_Pole"
            | "Antarctica/Syowa"
            | "Antarctica/Troll"
            | "Antarctica/Vostok"
            | "Arctic/Longyearbyen"
            | "Asia/Aden"
            | "Asia/Almaty"
            | "Asia/Amman"
            | "Asia/Anadyr"
            | "Asia/Aqtau"
            | "Asia/Aqtobe"
            | "Asia/Ashgabat"
            | "Asia/Ashkhabad"
            | "Asia/Atyrau"
            | "Asia/Baghdad"
            | "Asia/Bahrain"
            | "Asia/Baku"
            | "Asia/Bangkok"
            | "Asia/Barnaul"
            | "Asia/Beirut"
            | "Asia/Bishkek"
            | "Asia/Brunei"
            | "Asia/Calcutta"
            | "Asia/Chita"
            | "Asia/Choibalsan"
            | "Asia/Chongqing"
            | "Asia/Chungking"
            | "Asia/Colombo"
            | "Asia/Dacca"
            | "Asia/Damascus"
            | "Asia/Dhaka"
            | "Asia/Dili"
            | "Asia/Dubai"
            | "Asia/Dushanbe"
            | "Asia/Famagusta"
            | "Asia/Gaza"
            | "Asia/Harbin"
            | "Asia/Hebron"
            | "Asia/Ho_Chi_Minh"
            | "Asia/Hong_Kong"
            | "Asia/Hovd"
            | "Asia/Irkutsk"
            | "Asia/Istanbul"
            | "Asia/Jakarta"
            | "Asia/Jayapura"
            | "Asia/Jerusalem"
            | "Asia/Kabul"
            | "Asia/Kamchatka"
            | "Asia/Karachi"
            | "Asia/Kashgar"
            | "Asia/Kathmandu"
            | "Asia/Katmandu"
            | "Asia/Khandyga"
            | "Asia/Kolkata"
            | "Asia/Krasnoyarsk"
            | "Asia/Kuala_Lumpur"
            | "Asia/Kuching"
            | "Asia/Kuwait"
            | "Asia/Macao"
            | "Asia/Macau"
            | "Asia/Magadan"
            | "Asia/Makassar"
            | "Asia/Manila"
            | "Asia/Muscat"
            | "Asia/Nicosia"
            | "Asia/Novokuznetsk"
            | "Asia/Novosibirsk"
            | "Asia/Omsk"
            | "Asia/Oral"
            | "Asia/Phnom_Penh"
            | "Asia/Pontianak"
            | "Asia/Pyongyang"
            | "Asia/Qatar"
            | "Asia/Qostanay"
            | "Asia/Qyzylorda"
            | "Asia/Rangoon"
            | "Asia/Riyadh"
            | "Asia/Saigon"
            | "Asia/Sakhalin"
            | "Asia/Samarkand"
            | "Asia/Seoul"
            | "Asia/Shanghai"
            | "Asia/Singapore"
            | "Asia/Srednekolymsk"
            | "Asia/Taipei"
            | "Asia/Tashkent"
            | "Asia/Tbilisi"
            | "Asia/Tehran"
            | "Asia/Tel_Aviv"
            | "Asia/Thimbu"
            | "Asia/Thimphu"
            | "Asia/Tokyo"
            | "Asia/Tomsk"
            | "Asia/Ujung_Pandang"
            | "Asia/Ulaanbaatar"
            | "Asia/Ulan_Bator"
            | "Asia/Urumqi"
            | "Asia/Ust-Nera"
            | "Asia/Vientiane"
            | "Asia/Vladivostok"
            | "Asia/Yakutsk"
            | "Asia/Yangon"
            | "Asia/Yekaterinburg"
            | "Asia/Yerevan"
            | "Atlantic/Azores"
            | "Atlantic/Bermuda"
            | "Atlantic/Canary"
            | "Atlantic/Cape_Verde"
            | "Atlantic/Faeroe"
            | "Atlantic/Faroe"
            | "Atlantic/Jan_Mayen"
            | "Atlantic/Madeira"
            | "Atlantic/Reykjavik"
            | "Atlantic/South_Georgia"
            | "Atlantic/St_Helena"
            | "Atlantic/Stanley"
            | "Australia/ACT"
            | "Australia/Adelaide"
            | "Australia/Brisbane"
            | "Australia/Broken_Hill"
            | "Australia/Canberra"
            | "Australia/Currie"
            | "Australia/Darwin"
            | "Australia/Eucla"
            | "Australia/Hobart"
            | "Australia/LHI"
            | "Australia/Lindeman"
            | "Australia/Lord_Howe"
            | "Australia/Melbourne"
            | "Australia/NSW"
            | "Australia/North"
            | "Australia/Perth"
            | "Australia/Queensland"
            | "Australia/South"
            | "Australia/Sydney"
            | "Australia/Tasmania"
            | "Australia/Victoria"
            | "Australia/West"
            | "Australia/Yancowinna"
            | "Brazil/Acre"
            | "Brazil/DeNoronha"
            | "Brazil/East"
            | "Brazil/West"
            | "CET"
            | "CST6CDT"
            | "Canada/Atlantic"
            | "Canada/Central"
            | "Canada/Eastern"
            | "Canada/Mountain"
            | "Canada/Newfoundland"
            | "Canada/Pacific"
            | "Canada/Saskatchewan"
            | "Canada/Yukon"
            | "Chile/Continental"
            | "Chile/EasterIsland"
            | "Cuba"
            | "EET"
            | "EST"
            | "EST5EDT"
            | "Egypt"
            | "Eire"
            | "Etc/GMT"
            | "Etc/GMT+0"
            | "Etc/GMT+1"
            | "Etc/GMT+10"
            | "Etc/GMT+11"
            | "Etc/GMT+12"
            | "Etc/GMT+2"
            | "Etc/GMT+3"
            | "Etc/GMT+4"
            | "Etc/GMT+5"
            | "Etc/GMT+6"
            | "Etc/GMT+7"
            | "Etc/GMT+8"
            | "Etc/GMT+9"
            | "Etc/GMT-0"
            | "Etc/GMT-1"
            | "Etc/GMT-10"
            | "Etc/GMT-11"
            | "Etc/GMT-12"
            | "Etc/GMT-13"
            | "Etc/GMT-14"
            | "Etc/GMT-2"
            | "Etc/GMT-3"
            | "Etc/GMT-4"
            | "Etc/GMT-5"
            | "Etc/GMT-6"
            | "Etc/GMT-7"
            | "Etc/GMT-8"
            | "Etc/GMT-9"
            | "Etc/GMT0"
            | "Etc/Greenwich"
            | "Etc/UCT"
            | "Etc/UTC"
            | "Etc/Universal"
            | "Etc/Zulu"
            | "Europe/Amsterdam"
            | "Europe/Andorra"
            | "Europe/Astrakhan"
            | "Europe/Athens"
            | "Europe/Belfast"
            | "Europe/Belgrade"
            | "Europe/Berlin"
            | "Europe/Bratislava"
            | "Europe/Brussels"
            | "Europe/Bucharest"
            | "Europe/Budapest"
            | "Europe/Busingen"
            | "Europe/Chisinau"
            | "Europe/Copenhagen"
            | "Europe/Dublin"
            | "Europe/Gibraltar"
            | "Europe/Guernsey"
            | "Europe/Helsinki"
            | "Europe/Isle_of_Man"
            | "Europe/Istanbul"
            | "Europe/Jersey"
            | "Europe/Kaliningrad"
            | "Europe/Kiev"
            | "Europe/Kirov"
            | "Europe/Lisbon"
            | "Europe/Ljubljana"
            | "Europe/London"
            | "Europe/Luxembourg"
            | "Europe/Madrid"
            | "Europe/Malta"
            | "Europe/Mariehamn"
            | "Europe/Minsk"
            | "Europe/Monaco"
            | "Europe/Moscow"
            | "Europe/Nicosia"
            | "Europe/Oslo"
            | "Europe/Paris"
            | "Europe/Podgorica"
            | "Europe/Prague"
            | "Europe/Riga"
            | "Europe/Rome"
            | "Europe/Samara"
            | "Europe/San_Marino"
            | "Europe/Sarajevo"
            | "Europe/Saratov"
            | "Europe/Simferopol"
            | "Europe/Skopje"
            | "Europe/Sofia"
            | "Europe/Stockholm"
            | "Europe/Tallinn"
            | "Europe/Tirane"
            | "Europe/Tiraspol"
            | "Europe/Ulyanovsk"
            | "Europe/Uzhgorod"
            | "Europe/Vaduz"
            | "Europe/Vatican"
            | "Europe/Vienna"
            | "Europe/Vilnius"
            | "Europe/Volgograd"
            | "Europe/Warsaw"
            | "Europe/Zagreb"
            | "Europe/Zaporozhye"
            | "Europe/Zurich"
            | "Factory"
            | "GB"
            | "GB-Eire"
            | "GMT"
            | "GMT+0"
            | "GMT-0"
            | "GMT0"
            | "Greenwich"
            | "HST"
            | "Hongkong"
            | "Iceland"
            | "Indian/Antananarivo"
            | "Indian/Chagos"
            | "Indian/Christmas"
            | "Indian/Cocos"
            | "Indian/Comoro"
            | "Indian/Kerguelen"
            | "Indian/Mahe"
            | "Indian/Maldives"
            | "Indian/Mauritius"
            | "Indian/Mayotte"
            | "Indian/Reunion"
            | "Iran"
            | "Israel"
            | "Jamaica"
            | "Japan"
            | "Kwajalein"
            | "Libya"
            | "MET"
            | "MST"
            | "MST7MDT"
            | "Mexico/BajaNorte"
            | "Mexico/BajaSur"
            | "Mexico/General"
            | "NZ"
            | "NZ-CHAT"
            | "Navajo"
            | "PRC"
            | "PST8PDT"
            | "Pacific/Apia"
            | "Pacific/Auckland"
            | "Pacific/Bougainville"
            | "Pacific/Chatham"
            | "Pacific/Chuuk"
            | "Pacific/Easter"
            | "Pacific/Efate"
            | "Pacific/Enderbury"
            | "Pacific/Fakaofo"
            | "Pacific/Fiji"
            | "Pacific/Funafuti"
            | "Pacific/Galapagos"
            | "Pacific/Gambier"
            | "Pacific/Guadalcanal"
            | "Pacific/Guam"
            | "Pacific/Honolulu"
            | "Pacific/Johnston"
            | "Pacific/Kiritimati"
            | "Pacific/Kosrae"
            | "Pacific/Kwajalein"
            | "Pacific/Majuro"
            | "Pacific/Marquesas"
            | "Pacific/Midway"
            | "Pacific/Nauru"
            | "Pacific/Niue"
            | "Pacific/Norfolk"
            | "Pacific/Noumea"
            | "Pacific/Pago_Pago"
            | "Pacific/Palau"
            | "Pacific/Pitcairn"
            | "Pacific/Pohnpei"
            | "Pacific/Ponape"
            | "Pacific/Port_Moresby"
            | "Pacific/Rarotonga"
            | "Pacific/Saipan"
            | "Pacific/Samoa"
            | "Pacific/Tahiti"
            | "Pacific/Tarawa"
            | "Pacific/Tongatapu"
            | "Pacific/Truk"
            | "Pacific/Wake"
            | "Pacific/Wallis"
            | "Pacific/Yap"
            | "Poland"
            | "Portugal"
            | "ROC"
            | "ROK"
            | "Singapore"
            | "Turkey"
            | "UCT"
            | "US/Alaska"
            | "US/Aleutian"
            | "US/Arizona"
            | "US/Central"
            | "US/East-Indiana"
            | "US/Eastern"
            | "US/Hawaii"
            | "US/Indiana-Starke"
            | "US/Michigan"
            | "US/Mountain"
            | "US/Pacific"
            | "US/Pacific-New"
            | "US/Samoa"
            | "UTC"
            | "Universal"
            | "W-SU"
            | "WET"
            | "Zulu";
        };
        report_type: string;
      },
      params: RequestParams = {},
    ) =>
      this.request<ReportingReportRun, Error>({
        path: `/v1/reporting/report_runs`,
        method: "POST",
        body: data,
        secure: true,
        type: ContentType.UrlEncoded,
        format: "json",
        ...params,
      }),

    /**
     * @description <p>Retrieves the details of an existing Report Run.</p>
     *
     * @name GetReportingReportRunsReportRun
     * @request GET:/v1/reporting/report_runs/{report_run}
     * @secure
     * @response `200` `ReportingReportRun` Successful response.
     * @response `default` `Error` Error response.
     */
    getReportingReportRunsReportRun: (
      reportRun: string,
      query?: { expand?: string[] },
      data?: CardMandatePaymentMethodDetails,
      params: RequestParams = {},
    ) =>
      this.request<ReportingReportRun, Error>({
        path: `/v1/reporting/report_runs/${reportRun}`,
        method: "GET",
        query: query,
        body: data,
        secure: true,
        type: ContentType.UrlEncoded,
        format: "json",
        ...params,
      }),

    /**
     * @description <p>Returns a full list of Report Types.</p>
     *
     * @name GetReportingReportTypes
     * @request GET:/v1/reporting/report_types
     * @secure
     * @response `200` `{ data: (ReportingReportType)[], has_more: boolean, object: "list", url: string }` Successful response.
     * @response `default` `Error` Error response.
     */
    getReportingReportTypes: (
      query?: { expand?: string[] },
      data?: CardMandatePaymentMethodDetails,
      params: RequestParams = {},
    ) =>
      this.request<{ data: ReportingReportType[]; has_more: boolean; object: "list"; url: string }, Error>({
        path: `/v1/reporting/report_types`,
        method: "GET",
        query: query,
        body: data,
        secure: true,
        type: ContentType.UrlEncoded,
        format: "json",
        ...params,
      }),

    /**
     * @description <p>Retrieves the details of a Report Type. (Certain report types require a <a href="https://stripe.com/docs/keys#test-live-modes">live-mode API key</a>.)</p>
     *
     * @name GetReportingReportTypesReportType
     * @request GET:/v1/reporting/report_types/{report_type}
     * @secure
     * @response `200` `ReportingReportType` Successful response.
     * @response `default` `Error` Error response.
     */
    getReportingReportTypesReportType: (
      reportType: string,
      query?: { expand?: string[] },
      data?: CardMandatePaymentMethodDetails,
      params: RequestParams = {},
    ) =>
      this.request<ReportingReportType, Error>({
        path: `/v1/reporting/report_types/${reportType}`,
        method: "GET",
        query: query,
        body: data,
        secure: true,
        type: ContentType.UrlEncoded,
        format: "json",
        ...params,
      }),

    /**
     * @description <p>Returns a list of <code>Review</code> objects that have <code>open</code> set to <code>true</code>. The objects are sorted in descending order by creation date, with the most recently created object appearing first.</p>
     *
     * @name GetReviews
     * @request GET:/v1/reviews
     * @secure
     * @response `200` `{ data: (Review)[], has_more: boolean, object: "list", url: string }` Successful response.
     * @response `default` `Error` Error response.
     */
    getReviews: (
      query?: {
        created?: { gt?: number; gte?: number; lt?: number; lte?: number } | number;
        ending_before?: string;
        expand?: string[];
        limit?: number;
        starting_after?: string;
      },
      data?: CardMandatePaymentMethodDetails,
      params: RequestParams = {},
    ) =>
      this.request<{ data: Review[]; has_more: boolean; object: "list"; url: string }, Error>({
        path: `/v1/reviews`,
        method: "GET",
        query: query,
        body: data,
        secure: true,
        type: ContentType.UrlEncoded,
        format: "json",
        ...params,
      }),

    /**
     * @description <p>Retrieves a <code>Review</code> object.</p>
     *
     * @name GetReviewsReview
     * @request GET:/v1/reviews/{review}
     * @secure
     * @response `200` `Review` Successful response.
     * @response `default` `Error` Error response.
     */
    getReviewsReview: (
      review: string,
      query?: { expand?: string[] },
      data?: CardMandatePaymentMethodDetails,
      params: RequestParams = {},
    ) =>
      this.request<Review, Error>({
        path: `/v1/reviews/${review}`,
        method: "GET",
        query: query,
        body: data,
        secure: true,
        type: ContentType.UrlEncoded,
        format: "json",
        ...params,
      }),

    /**
     * @description <p>Approves a <code>Review</code> object, closing it and removing it from the list of reviews.</p>
     *
     * @name PostReviewsReviewApprove
     * @request POST:/v1/reviews/{review}/approve
     * @secure
     * @response `200` `Review` Successful response.
     * @response `default` `Error` Error response.
     */
    postReviewsReviewApprove: (review: string, data?: { expand?: string[] }, params: RequestParams = {}) =>
      this.request<Review, Error>({
        path: `/v1/reviews/${review}/approve`,
        method: "POST",
        body: data,
        secure: true,
        type: ContentType.UrlEncoded,
        format: "json",
        ...params,
      }),

    /**
     * @description <p>Returns a list of SetupAttempts associated with a provided SetupIntent.</p>
     *
     * @name GetSetupAttempts
     * @request GET:/v1/setup_attempts
     * @secure
     * @response `200` `{ data: (SetupAttempt)[], has_more: boolean, object: "list", url: string }` Successful response.
     * @response `default` `Error` Error response.
     */
    getSetupAttempts: (
      query: {
        created?: { gt?: number; gte?: number; lt?: number; lte?: number } | number;
        ending_before?: string;
        expand?: string[];
        limit?: number;
        setup_intent: string;
        starting_after?: string;
      },
      data?: CardMandatePaymentMethodDetails,
      params: RequestParams = {},
    ) =>
      this.request<{ data: SetupAttempt[]; has_more: boolean; object: "list"; url: string }, Error>({
        path: `/v1/setup_attempts`,
        method: "GET",
        query: query,
        body: data,
        secure: true,
        type: ContentType.UrlEncoded,
        format: "json",
        ...params,
      }),

    /**
     * @description <p>Returns a list of SetupIntents.</p>
     *
     * @name GetSetupIntents
     * @request GET:/v1/setup_intents
     * @secure
     * @response `200` `{ data: (SetupIntent)[], has_more: boolean, object: "list", url: string }` Successful response.
     * @response `default` `Error` Error response.
     */
    getSetupIntents: (
      query?: {
        created?: { gt?: number; gte?: number; lt?: number; lte?: number } | number;
        customer?: string;
        ending_before?: string;
        expand?: string[];
        limit?: number;
        payment_method?: string;
        starting_after?: string;
      },
      data?: CardMandatePaymentMethodDetails,
      params: RequestParams = {},
    ) =>
      this.request<{ data: SetupIntent[]; has_more: boolean; object: "list"; url: string }, Error>({
        path: `/v1/setup_intents`,
        method: "GET",
        query: query,
        body: data,
        secure: true,
        type: ContentType.UrlEncoded,
        format: "json",
        ...params,
      }),

    /**
     * @description <p>Creates a SetupIntent object.</p> <p>After the SetupIntent is created, attach a payment method and <a href="/docs/api/setup_intents/confirm">confirm</a> to collect any required permissions to charge the payment method later.</p>
     *
     * @name PostSetupIntents
     * @request POST:/v1/setup_intents
     * @secure
     * @response `200` `SetupIntent` Successful response.
     * @response `default` `Error` Error response.
     */
    postSetupIntents: (
      data?: {
        confirm?: boolean;
        customer?: string;
        description?: string;
        expand?: string[];
        mandate_data?: {
          customer_acceptance: {
            accepted_at?: number;
            offline?: object;
            online?: { ip_address: string; user_agent: string };
            type: "offline" | "online";
          };
        };
        metadata?: Record<string, string>;
        on_behalf_of?: string;
        payment_method?: string;
        payment_method_options?: {
          acss_debit?: {
            currency?: "cad" | "usd";
            mandate_options?: {
              custom_mandate_url?: string | "";
              default_for?: ("invoice" | "subscription")[];
              interval_description?: string;
              payment_schedule?: "combined" | "interval" | "sporadic";
              transaction_type?: "business" | "personal";
            };
            verification_method?: "automatic" | "instant" | "microdeposits";
          };
          card?: { request_three_d_secure?: "any" | "automatic" };
          sepa_debit?: { mandate_options?: object };
        };
        payment_method_types?: string[];
        return_url?: string;
        single_use?: { amount: number; currency: string };
        usage?: "off_session" | "on_session";
      },
      params: RequestParams = {},
    ) =>
      this.request<SetupIntent, Error>({
        path: `/v1/setup_intents`,
        method: "POST",
        body: data,
        secure: true,
        type: ContentType.UrlEncoded,
        format: "json",
        ...params,
      }),

    /**
     * @description <p>Retrieves the details of a SetupIntent that has previously been created. </p> <p>Client-side retrieval using a publishable key is allowed when the <code>client_secret</code> is provided in the query string. </p> <p>When retrieved with a publishable key, only a subset of properties will be returned. Please refer to the <a href="#setup_intent_object">SetupIntent</a> object reference for more details.</p>
     *
     * @name GetSetupIntentsIntent
     * @request GET:/v1/setup_intents/{intent}
     * @secure
     * @response `200` `SetupIntent` Successful response.
     * @response `default` `Error` Error response.
     */
    getSetupIntentsIntent: (
      intent: string,
      query?: { client_secret?: string; expand?: string[] },
      data?: CardMandatePaymentMethodDetails,
      params: RequestParams = {},
    ) =>
      this.request<SetupIntent, Error>({
        path: `/v1/setup_intents/${intent}`,
        method: "GET",
        query: query,
        body: data,
        secure: true,
        type: ContentType.UrlEncoded,
        format: "json",
        ...params,
      }),

    /**
     * @description <p>Updates a SetupIntent object.</p>
     *
     * @name PostSetupIntentsIntent
     * @request POST:/v1/setup_intents/{intent}
     * @secure
     * @response `200` `SetupIntent` Successful response.
     * @response `default` `Error` Error response.
     */
    postSetupIntentsIntent: (
      intent: string,
      data?: {
        customer?: string;
        description?: string;
        expand?: string[];
        metadata?: Record<string, string> | "" | (Record<string, string> & "");
        payment_method?: string;
        payment_method_options?: {
          acss_debit?: {
            currency?: "cad" | "usd";
            mandate_options?: {
              custom_mandate_url?: string | "";
              default_for?: ("invoice" | "subscription")[];
              interval_description?: string;
              payment_schedule?: "combined" | "interval" | "sporadic";
              transaction_type?: "business" | "personal";
            };
            verification_method?: "automatic" | "instant" | "microdeposits";
          };
          card?: { request_three_d_secure?: "any" | "automatic" };
          sepa_debit?: { mandate_options?: object };
        };
        payment_method_types?: string[];
      },
      params: RequestParams = {},
    ) =>
      this.request<SetupIntent, Error>({
        path: `/v1/setup_intents/${intent}`,
        method: "POST",
        body: data,
        secure: true,
        type: ContentType.UrlEncoded,
        format: "json",
        ...params,
      }),

    /**
     * @description <p>A SetupIntent object can be canceled when it is in one of these statuses: <code>requires_payment_method</code>, <code>requires_confirmation</code>, or <code>requires_action</code>. </p> <p>Once canceled, setup is abandoned and any operations on the SetupIntent will fail with an error.</p>
     *
     * @name PostSetupIntentsIntentCancel
     * @request POST:/v1/setup_intents/{intent}/cancel
     * @secure
     * @response `200` `SetupIntent` Successful response.
     * @response `default` `Error` Error response.
     */
    postSetupIntentsIntentCancel: (
      intent: string,
      data?: { cancellation_reason?: "abandoned" | "duplicate" | "requested_by_customer"; expand?: string[] },
      params: RequestParams = {},
    ) =>
      this.request<SetupIntent, Error>({
        path: `/v1/setup_intents/${intent}/cancel`,
        method: "POST",
        body: data,
        secure: true,
        type: ContentType.UrlEncoded,
        format: "json",
        ...params,
      }),

    /**
     * @description <p>Confirm that your customer intends to set up the current or provided payment method. For example, you would confirm a SetupIntent when a customer hits the “Save” button on a payment method management page on your website.</p> <p>If the selected payment method does not require any additional steps from the customer, the SetupIntent will transition to the <code>succeeded</code> status.</p> <p>Otherwise, it will transition to the <code>requires_action</code> status and suggest additional actions via <code>next_action</code>. If setup fails, the SetupIntent will transition to the <code>requires_payment_method</code> status.</p>
     *
     * @name PostSetupIntentsIntentConfirm
     * @request POST:/v1/setup_intents/{intent}/confirm
     * @secure
     * @response `200` `SetupIntent` Successful response.
     * @response `default` `Error` Error response.
     */
    postSetupIntentsIntentConfirm: (
      intent: string,
      data?: {
        client_secret?: string;
        expand?: string[];
        mandate_data?:
          | {
              customer_acceptance: {
                accepted_at?: number;
                offline?: object;
                online?: { ip_address: string; user_agent: string };
                type: "offline" | "online";
              };
            }
          | { customer_acceptance: { online: { ip_address?: string; user_agent?: string }; type: "online" } }
          | ({
              customer_acceptance: {
                accepted_at?: number;
                offline?: object;
                online?: { ip_address: string; user_agent: string };
                type: "offline" | "online";
              };
            } & { customer_acceptance: { online: { ip_address?: string; user_agent?: string }; type: "online" } });
        payment_method?: string;
        payment_method_options?: {
          acss_debit?: {
            currency?: "cad" | "usd";
            mandate_options?: {
              custom_mandate_url?: string | "";
              default_for?: ("invoice" | "subscription")[];
              interval_description?: string;
              payment_schedule?: "combined" | "interval" | "sporadic";
              transaction_type?: "business" | "personal";
            };
            verification_method?: "automatic" | "instant" | "microdeposits";
          };
          card?: { request_three_d_secure?: "any" | "automatic" };
          sepa_debit?: { mandate_options?: object };
        };
        return_url?: string;
      },
      params: RequestParams = {},
    ) =>
      this.request<SetupIntent, Error>({
        path: `/v1/setup_intents/${intent}/confirm`,
        method: "POST",
        body: data,
        secure: true,
        type: ContentType.UrlEncoded,
        format: "json",
        ...params,
      }),

    /**
     * @description <p>Returns a list of your shipping rates.</p>
     *
     * @name GetShippingRates
     * @request GET:/v1/shipping_rates
     * @secure
     * @response `200` `{ data: (ShippingRate)[], has_more: boolean, object: "list", url: string }` Successful response.
     * @response `default` `Error` Error response.
     */
    getShippingRates: (
      query?: {
        active?: boolean;
        created?: { gt?: number; gte?: number; lt?: number; lte?: number } | number;
        currency?: string;
        ending_before?: string;
        expand?: string[];
        limit?: number;
        starting_after?: string;
      },
      data?: CardMandatePaymentMethodDetails,
      params: RequestParams = {},
    ) =>
      this.request<{ data: ShippingRate[]; has_more: boolean; object: "list"; url: string }, Error>({
        path: `/v1/shipping_rates`,
        method: "GET",
        query: query,
        body: data,
        secure: true,
        type: ContentType.UrlEncoded,
        format: "json",
        ...params,
      }),

    /**
     * @description <p>Creates a new shipping rate object.</p>
     *
     * @name PostShippingRates
     * @request POST:/v1/shipping_rates
     * @secure
     * @response `200` `ShippingRate` Successful response.
     * @response `default` `Error` Error response.
     */
    postShippingRates: (
      data: {
        delivery_estimate?: {
          maximum?: { unit: "business_day" | "day" | "hour" | "month" | "week"; value: number };
          minimum?: { unit: "business_day" | "day" | "hour" | "month" | "week"; value: number };
        };
        display_name: string;
        expand?: string[];
        fixed_amount?: { amount: number; currency: string };
        metadata?: Record<string, string>;
        tax_behavior?: "exclusive" | "inclusive" | "unspecified";
        tax_code?: string;
        type?: "fixed_amount";
      },
      params: RequestParams = {},
    ) =>
      this.request<ShippingRate, Error>({
        path: `/v1/shipping_rates`,
        method: "POST",
        body: data,
        secure: true,
        type: ContentType.UrlEncoded,
        format: "json",
        ...params,
      }),

    /**
     * @description <p>Returns the shipping rate object with the given ID.</p>
     *
     * @name GetShippingRatesShippingRateToken
     * @request GET:/v1/shipping_rates/{shipping_rate_token}
     * @secure
     * @response `200` `ShippingRate` Successful response.
     * @response `default` `Error` Error response.
     */
    getShippingRatesShippingRateToken: (
      shippingRateToken: string,
      query?: { expand?: string[] },
      data?: CardMandatePaymentMethodDetails,
      params: RequestParams = {},
    ) =>
      this.request<ShippingRate, Error>({
        path: `/v1/shipping_rates/${shippingRateToken}`,
        method: "GET",
        query: query,
        body: data,
        secure: true,
        type: ContentType.UrlEncoded,
        format: "json",
        ...params,
      }),

    /**
     * @description <p>Updates an existing shipping rate object.</p>
     *
     * @name PostShippingRatesShippingRateToken
     * @request POST:/v1/shipping_rates/{shipping_rate_token}
     * @secure
     * @response `200` `ShippingRate` Successful response.
     * @response `default` `Error` Error response.
     */
    postShippingRatesShippingRateToken: (
      shippingRateToken: string,
      data?: {
        active?: boolean;
        expand?: string[];
        metadata?: Record<string, string> | "" | (Record<string, string> & "");
      },
      params: RequestParams = {},
    ) =>
      this.request<ShippingRate, Error>({
        path: `/v1/shipping_rates/${shippingRateToken}`,
        method: "POST",
        body: data,
        secure: true,
        type: ContentType.UrlEncoded,
        format: "json",
        ...params,
      }),

    /**
     * @description <p>Returns a list of scheduled query runs.</p>
     *
     * @name GetSigmaScheduledQueryRuns
     * @request GET:/v1/sigma/scheduled_query_runs
     * @secure
     * @response `200` `{ data: (ScheduledQueryRun)[], has_more: boolean, object: "list", url: string }` Successful response.
     * @response `default` `Error` Error response.
     */
    getSigmaScheduledQueryRuns: (
      query?: { ending_before?: string; expand?: string[]; limit?: number; starting_after?: string },
      data?: CardMandatePaymentMethodDetails,
      params: RequestParams = {},
    ) =>
      this.request<{ data: ScheduledQueryRun[]; has_more: boolean; object: "list"; url: string }, Error>({
        path: `/v1/sigma/scheduled_query_runs`,
        method: "GET",
        query: query,
        body: data,
        secure: true,
        type: ContentType.UrlEncoded,
        format: "json",
        ...params,
      }),

    /**
     * @description <p>Retrieves the details of an scheduled query run.</p>
     *
     * @name GetSigmaScheduledQueryRunsScheduledQueryRun
     * @request GET:/v1/sigma/scheduled_query_runs/{scheduled_query_run}
     * @secure
     * @response `200` `ScheduledQueryRun` Successful response.
     * @response `default` `Error` Error response.
     */
    getSigmaScheduledQueryRunsScheduledQueryRun: (
      scheduledQueryRun: string,
      query?: { expand?: string[] },
      data?: CardMandatePaymentMethodDetails,
      params: RequestParams = {},
    ) =>
      this.request<ScheduledQueryRun, Error>({
        path: `/v1/sigma/scheduled_query_runs/${scheduledQueryRun}`,
        method: "GET",
        query: query,
        body: data,
        secure: true,
        type: ContentType.UrlEncoded,
        format: "json",
        ...params,
      }),

    /**
     * @description <p>Returns a list of your SKUs. The SKUs are returned sorted by creation date, with the most recently created SKUs appearing first.</p>
     *
     * @name GetSkus
     * @request GET:/v1/skus
     * @secure
     * @response `200` `{ data: (Sku)[], has_more: boolean, object: "list", url: string }` Successful response.
     * @response `default` `Error` Error response.
     */
    getSkus: (
      query?: {
        active?: boolean;
        attributes?: Record<string, string>;
        ending_before?: string;
        expand?: string[];
        ids?: string[];
        in_stock?: boolean;
        limit?: number;
        product?: string;
        starting_after?: string;
      },
      data?: CardMandatePaymentMethodDetails,
      params: RequestParams = {},
    ) =>
      this.request<{ data: Sku[]; has_more: boolean; object: "list"; url: string }, Error>({
        path: `/v1/skus`,
        method: "GET",
        query: query,
        body: data,
        secure: true,
        type: ContentType.UrlEncoded,
        format: "json",
        ...params,
      }),

    /**
     * @description <p>Creates a new SKU associated with a product.</p>
     *
     * @name PostSkus
     * @request POST:/v1/skus
     * @secure
     * @response `200` `Sku` Successful response.
     * @response `default` `Error` Error response.
     */
    postSkus: (
      data: {
        active?: boolean;
        attributes?: Record<string, string>;
        currency: string;
        expand?: string[];
        id?: string;
        image?: string;
        inventory: {
          quantity?: number;
          type: "bucket" | "finite" | "infinite";
          value?: "" | "in_stock" | "limited" | "out_of_stock";
        };
        metadata?: Record<string, string>;
        package_dimensions?: { height: number; length: number; weight: number; width: number };
        price: number;
        product: string;
      },
      params: RequestParams = {},
    ) =>
      this.request<Sku, Error>({
        path: `/v1/skus`,
        method: "POST",
        body: data,
        secure: true,
        type: ContentType.UrlEncoded,
        format: "json",
        ...params,
      }),

    /**
     * @description <p>Delete a SKU. Deleting a SKU is only possible until it has been used in an order.</p>
     *
     * @name DeleteSkusId
     * @request DELETE:/v1/skus/{id}
     * @secure
     * @response `200` `DeletedSku` Successful response.
     * @response `default` `Error` Error response.
     */
    deleteSkusId: (id: string, data?: CardMandatePaymentMethodDetails, params: RequestParams = {}) =>
      this.request<DeletedSku, Error>({
        path: `/v1/skus/${id}`,
        method: "DELETE",
        body: data,
        secure: true,
        type: ContentType.UrlEncoded,
        format: "json",
        ...params,
      }),

    /**
     * @description <p>Retrieves the details of an existing SKU. Supply the unique SKU identifier from either a SKU creation request or from the product, and Stripe will return the corresponding SKU information.</p>
     *
     * @name GetSkusId
     * @request GET:/v1/skus/{id}
     * @secure
     * @response `200` `(Sku | DeletedSku | (Sku & DeletedSku))` Successful response.
     * @response `default` `Error` Error response.
     */
    getSkusId: (
      id: string,
      query?: { expand?: string[] },
      data?: CardMandatePaymentMethodDetails,
      params: RequestParams = {},
    ) =>
      this.request<Sku | DeletedSku | (Sku & DeletedSku), Error>({
        path: `/v1/skus/${id}`,
        method: "GET",
        query: query,
        body: data,
        secure: true,
        type: ContentType.UrlEncoded,
        format: "json",
        ...params,
      }),

    /**
     * @description <p>Updates the specific SKU by setting the values of the parameters passed. Any parameters not provided will be left unchanged.</p> <p>Note that a SKU’s <code>attributes</code> are not editable. Instead, you would need to deactivate the existing SKU and create a new one with the new attribute values.</p>
     *
     * @name PostSkusId
     * @request POST:/v1/skus/{id}
     * @secure
     * @response `200` `Sku` Successful response.
     * @response `default` `Error` Error response.
     */
    postSkusId: (
      id: string,
      data?: {
        active?: boolean;
        attributes?: Record<string, string>;
        currency?: string;
        expand?: string[];
        image?: string;
        inventory?: {
          quantity?: number;
          type?: "bucket" | "finite" | "infinite";
          value?: "" | "in_stock" | "limited" | "out_of_stock";
        };
        metadata?: Record<string, string> | "" | (Record<string, string> & "");
        package_dimensions?:
          | { height: number; length: number; weight: number; width: number }
          | ""
          | ({ height: number; length: number; weight: number; width: number } & "");
        price?: number;
        product?: string;
      },
      params: RequestParams = {},
    ) =>
      this.request<Sku, Error>({
        path: `/v1/skus/${id}`,
        method: "POST",
        body: data,
        secure: true,
        type: ContentType.UrlEncoded,
        format: "json",
        ...params,
      }),

    /**
     * @description <p>Creates a new source object.</p>
     *
     * @name PostSources
     * @request POST:/v1/sources
     * @secure
     * @response `200` `Source` Successful response.
     * @response `default` `Error` Error response.
     */
    postSources: (
      data?: {
        amount?: number;
        currency?: string;
        customer?: string;
        expand?: string[];
        flow?: "code_verification" | "none" | "receiver" | "redirect";
        mandate?: {
          acceptance?: {
            date?: number;
            ip?: string;
            offline?: { contact_email: string };
            online?: { date?: number; ip?: string; user_agent?: string };
            status: "accepted" | "pending" | "refused" | "revoked";
            type?: "offline" | "online";
            user_agent?: string;
          };
          amount?: number | "";
          currency?: string;
          interval?: "one_time" | "scheduled" | "variable";
          notification_method?: "deprecated_none" | "email" | "manual" | "none" | "stripe_email";
        };
        metadata?: Record<string, string>;
        original_source?: string;
        owner?: {
          address?: {
            city?: string;
            country?: string;
            line1?: string;
            line2?: string;
            postal_code?: string;
            state?: string;
          };
          email?: string;
          name?: string;
          phone?: string;
        };
        receiver?: { refund_attributes_method?: "email" | "manual" | "none" };
        redirect?: { return_url: string };
        source_order?: {
          items?: {
            amount?: number;
            currency?: string;
            description?: string;
            parent?: string;
            quantity?: number;
            type?: "discount" | "shipping" | "sku" | "tax";
          }[];
          shipping?: {
            address: {
              city?: string;
              country?: string;
              line1: string;
              line2?: string;
              postal_code?: string;
              state?: string;
            };
            carrier?: string;
            name?: string;
            phone?: string;
            tracking_number?: string;
          };
        };
        statement_descriptor?: string;
        token?: string;
        type?: string;
        usage?: "reusable" | "single_use";
      },
      params: RequestParams = {},
    ) =>
      this.request<Source, Error>({
        path: `/v1/sources`,
        method: "POST",
        body: data,
        secure: true,
        type: ContentType.UrlEncoded,
        format: "json",
        ...params,
      }),

    /**
     * @description <p>Retrieves an existing source object. Supply the unique source ID from a source creation request and Stripe will return the corresponding up-to-date source object information.</p>
     *
     * @name GetSourcesSource
     * @request GET:/v1/sources/{source}
     * @secure
     * @response `200` `Source` Successful response.
     * @response `default` `Error` Error response.
     */
    getSourcesSource: (
      source: string,
      query?: { client_secret?: string; expand?: string[] },
      data?: CardMandatePaymentMethodDetails,
      params: RequestParams = {},
    ) =>
      this.request<Source, Error>({
        path: `/v1/sources/${source}`,
        method: "GET",
        query: query,
        body: data,
        secure: true,
        type: ContentType.UrlEncoded,
        format: "json",
        ...params,
      }),

    /**
     * @description <p>Updates the specified source by setting the values of the parameters passed. Any parameters not provided will be left unchanged.</p> <p>This request accepts the <code>metadata</code> and <code>owner</code> as arguments. It is also possible to update type specific information for selected payment methods. Please refer to our <a href="/docs/sources">payment method guides</a> for more detail.</p>
     *
     * @name PostSourcesSource
     * @request POST:/v1/sources/{source}
     * @secure
     * @response `200` `Source` Successful response.
     * @response `default` `Error` Error response.
     */
    postSourcesSource: (
      source: string,
      data?: {
        amount?: number;
        expand?: string[];
        mandate?: {
          acceptance?: {
            date?: number;
            ip?: string;
            offline?: { contact_email: string };
            online?: { date?: number; ip?: string; user_agent?: string };
            status: "accepted" | "pending" | "refused" | "revoked";
            type?: "offline" | "online";
            user_agent?: string;
          };
          amount?: number | "";
          currency?: string;
          interval?: "one_time" | "scheduled" | "variable";
          notification_method?: "deprecated_none" | "email" | "manual" | "none" | "stripe_email";
        };
        metadata?: Record<string, string> | "" | (Record<string, string> & "");
        owner?: {
          address?: {
            city?: string;
            country?: string;
            line1?: string;
            line2?: string;
            postal_code?: string;
            state?: string;
          };
          email?: string;
          name?: string;
          phone?: string;
        };
        source_order?: {
          items?: {
            amount?: number;
            currency?: string;
            description?: string;
            parent?: string;
            quantity?: number;
            type?: "discount" | "shipping" | "sku" | "tax";
          }[];
          shipping?: {
            address: {
              city?: string;
              country?: string;
              line1: string;
              line2?: string;
              postal_code?: string;
              state?: string;
            };
            carrier?: string;
            name?: string;
            phone?: string;
            tracking_number?: string;
          };
        };
      },
      params: RequestParams = {},
    ) =>
      this.request<Source, Error>({
        path: `/v1/sources/${source}`,
        method: "POST",
        body: data,
        secure: true,
        type: ContentType.UrlEncoded,
        format: "json",
        ...params,
      }),

    /**
     * @description <p>Retrieves a new Source MandateNotification.</p>
     *
     * @name GetSourcesSourceMandateNotificationsMandateNotification
     * @request GET:/v1/sources/{source}/mandate_notifications/{mandate_notification}
     * @secure
     * @response `200` `SourceMandateNotification` Successful response.
     * @response `default` `Error` Error response.
     */
    getSourcesSourceMandateNotificationsMandateNotification: (
      mandateNotification: string,
      source: string,
      query?: { expand?: string[] },
      data?: CardMandatePaymentMethodDetails,
      params: RequestParams = {},
    ) =>
      this.request<SourceMandateNotification, Error>({
        path: `/v1/sources/${source}/mandate_notifications/${mandateNotification}`,
        method: "GET",
        query: query,
        body: data,
        secure: true,
        type: ContentType.UrlEncoded,
        format: "json",
        ...params,
      }),

    /**
     * @description <p>List source transactions for a given source.</p>
     *
     * @name GetSourcesSourceSourceTransactions
     * @request GET:/v1/sources/{source}/source_transactions
     * @secure
     * @response `200` `{ data: (SourceTransaction)[], has_more: boolean, object: "list", url: string }` Successful response.
     * @response `default` `Error` Error response.
     */
    getSourcesSourceSourceTransactions: (
      source: string,
      query?: { ending_before?: string; expand?: string[]; limit?: number; starting_after?: string },
      data?: CardMandatePaymentMethodDetails,
      params: RequestParams = {},
    ) =>
      this.request<{ data: SourceTransaction[]; has_more: boolean; object: "list"; url: string }, Error>({
        path: `/v1/sources/${source}/source_transactions`,
        method: "GET",
        query: query,
        body: data,
        secure: true,
        type: ContentType.UrlEncoded,
        format: "json",
        ...params,
      }),

    /**
     * @description <p>Retrieve an existing source transaction object. Supply the unique source ID from a source creation request and the source transaction ID and Stripe will return the corresponding up-to-date source object information.</p>
     *
     * @name GetSourcesSourceSourceTransactionsSourceTransaction
     * @request GET:/v1/sources/{source}/source_transactions/{source_transaction}
     * @secure
     * @response `200` `SourceTransaction` Successful response.
     * @response `default` `Error` Error response.
     */
    getSourcesSourceSourceTransactionsSourceTransaction: (
      source: string,
      sourceTransaction: string,
      query?: { expand?: string[] },
      data?: CardMandatePaymentMethodDetails,
      params: RequestParams = {},
    ) =>
      this.request<SourceTransaction, Error>({
        path: `/v1/sources/${source}/source_transactions/${sourceTransaction}`,
        method: "GET",
        query: query,
        body: data,
        secure: true,
        type: ContentType.UrlEncoded,
        format: "json",
        ...params,
      }),

    /**
     * @description <p>Verify a given source.</p>
     *
     * @name PostSourcesSourceVerify
     * @request POST:/v1/sources/{source}/verify
     * @secure
     * @response `200` `Source` Successful response.
     * @response `default` `Error` Error response.
     */
    postSourcesSourceVerify: (
      source: string,
      data: { expand?: string[]; values: string[] },
      params: RequestParams = {},
    ) =>
      this.request<Source, Error>({
        path: `/v1/sources/${source}/verify`,
        method: "POST",
        body: data,
        secure: true,
        type: ContentType.UrlEncoded,
        format: "json",
        ...params,
      }),

    /**
     * @description <p>Returns a list of your subscription items for a given subscription.</p>
     *
     * @name GetSubscriptionItems
     * @request GET:/v1/subscription_items
     * @secure
     * @response `200` `{ data: (SubscriptionItem)[], has_more: boolean, object: "list", url: string }` Successful response.
     * @response `default` `Error` Error response.
     */
    getSubscriptionItems: (
      query: {
        ending_before?: string;
        expand?: string[];
        limit?: number;
        starting_after?: string;
        subscription: string;
      },
      data?: CardMandatePaymentMethodDetails,
      params: RequestParams = {},
    ) =>
      this.request<{ data: SubscriptionItem[]; has_more: boolean; object: "list"; url: string }, Error>({
        path: `/v1/subscription_items`,
        method: "GET",
        query: query,
        body: data,
        secure: true,
        type: ContentType.UrlEncoded,
        format: "json",
        ...params,
      }),

    /**
     * @description <p>Adds a new item to an existing subscription. No existing items will be changed or replaced.</p>
     *
     * @name PostSubscriptionItems
     * @request POST:/v1/subscription_items
     * @secure
     * @response `200` `SubscriptionItem` Successful response.
     * @response `default` `Error` Error response.
     */
    postSubscriptionItems: (
      data: {
        billing_thresholds?: { usage_gte: number } | "" | ({ usage_gte: number } & "");
        expand?: string[];
        metadata?: Record<string, string>;
        payment_behavior?: "allow_incomplete" | "default_incomplete" | "error_if_incomplete" | "pending_if_incomplete";
        price?: string;
        price_data?: {
          currency: string;
          product: string;
          recurring: { interval: "day" | "month" | "week" | "year"; interval_count?: number };
          tax_behavior?: "exclusive" | "inclusive" | "unspecified";
          unit_amount?: number;
          unit_amount_decimal?: string;
        };
        proration_behavior?: "always_invoice" | "create_prorations" | "none";
        proration_date?: number;
        quantity?: number;
        subscription: string;
        tax_rates?: string[] | "" | (string[] & "");
      },
      params: RequestParams = {},
    ) =>
      this.request<SubscriptionItem, Error>({
        path: `/v1/subscription_items`,
        method: "POST",
        body: data,
        secure: true,
        type: ContentType.UrlEncoded,
        format: "json",
        ...params,
      }),

    /**
     * @description <p>Deletes an item from the subscription. Removing a subscription item from a subscription will not cancel the subscription.</p>
     *
     * @name DeleteSubscriptionItemsItem
     * @request DELETE:/v1/subscription_items/{item}
     * @secure
     * @response `200` `DeletedSubscriptionItem` Successful response.
     * @response `default` `Error` Error response.
     */
    deleteSubscriptionItemsItem: (
      item: string,
      data?: {
        clear_usage?: boolean;
        proration_behavior?: "always_invoice" | "create_prorations" | "none";
        proration_date?: number;
      },
      params: RequestParams = {},
    ) =>
      this.request<DeletedSubscriptionItem, Error>({
        path: `/v1/subscription_items/${item}`,
        method: "DELETE",
        body: data,
        secure: true,
        type: ContentType.UrlEncoded,
        format: "json",
        ...params,
      }),

    /**
     * @description <p>Retrieves the subscription item with the given ID.</p>
     *
     * @name GetSubscriptionItemsItem
     * @request GET:/v1/subscription_items/{item}
     * @secure
     * @response `200` `SubscriptionItem` Successful response.
     * @response `default` `Error` Error response.
     */
    getSubscriptionItemsItem: (
      item: string,
      query?: { expand?: string[] },
      data?: CardMandatePaymentMethodDetails,
      params: RequestParams = {},
    ) =>
      this.request<SubscriptionItem, Error>({
        path: `/v1/subscription_items/${item}`,
        method: "GET",
        query: query,
        body: data,
        secure: true,
        type: ContentType.UrlEncoded,
        format: "json",
        ...params,
      }),

    /**
     * @description <p>Updates the plan or quantity of an item on a current subscription.</p>
     *
     * @name PostSubscriptionItemsItem
     * @request POST:/v1/subscription_items/{item}
     * @secure
     * @response `200` `SubscriptionItem` Successful response.
     * @response `default` `Error` Error response.
     */
    postSubscriptionItemsItem: (
      item: string,
      data?: {
        billing_thresholds?: { usage_gte: number } | "" | ({ usage_gte: number } & "");
        expand?: string[];
        metadata?: Record<string, string> | "" | (Record<string, string> & "");
        off_session?: boolean;
        payment_behavior?: "allow_incomplete" | "default_incomplete" | "error_if_incomplete" | "pending_if_incomplete";
        price?: string;
        price_data?: {
          currency: string;
          product: string;
          recurring: { interval: "day" | "month" | "week" | "year"; interval_count?: number };
          tax_behavior?: "exclusive" | "inclusive" | "unspecified";
          unit_amount?: number;
          unit_amount_decimal?: string;
        };
        proration_behavior?: "always_invoice" | "create_prorations" | "none";
        proration_date?: number;
        quantity?: number;
        tax_rates?: string[] | "" | (string[] & "");
      },
      params: RequestParams = {},
    ) =>
      this.request<SubscriptionItem, Error>({
        path: `/v1/subscription_items/${item}`,
        method: "POST",
        body: data,
        secure: true,
        type: ContentType.UrlEncoded,
        format: "json",
        ...params,
      }),

    /**
     * @description <p>For the specified subscription item, returns a list of summary objects. Each object in the list provides usage information that’s been summarized from multiple usage records and over a subscription billing period (e.g., 15 usage records in the month of September).</p> <p>The list is sorted in reverse-chronological order (newest first). The first list item represents the most current usage period that hasn’t ended yet. Since new usage records can still be added, the returned summary information for the subscription item’s ID should be seen as unstable until the subscription billing period ends.</p>
     *
     * @name GetSubscriptionItemsSubscriptionItemUsageRecordSummaries
     * @request GET:/v1/subscription_items/{subscription_item}/usage_record_summaries
     * @secure
     * @response `200` `{ data: (UsageRecordSummary)[], has_more: boolean, object: "list", url: string }` Successful response.
     * @response `default` `Error` Error response.
     */
    getSubscriptionItemsSubscriptionItemUsageRecordSummaries: (
      subscriptionItem: string,
      query?: { ending_before?: string; expand?: string[]; limit?: number; starting_after?: string },
      data?: CardMandatePaymentMethodDetails,
      params: RequestParams = {},
    ) =>
      this.request<{ data: UsageRecordSummary[]; has_more: boolean; object: "list"; url: string }, Error>({
        path: `/v1/subscription_items/${subscriptionItem}/usage_record_summaries`,
        method: "GET",
        query: query,
        body: data,
        secure: true,
        type: ContentType.UrlEncoded,
        format: "json",
        ...params,
      }),

    /**
     * @description <p>Creates a usage record for a specified subscription item and date, and fills it with a quantity.</p> <p>Usage records provide <code>quantity</code> information that Stripe uses to track how much a customer is using your service. With usage information and the pricing model set up by the <a href="https://stripe.com/docs/billing/subscriptions/metered-billing">metered billing</a> plan, Stripe helps you send accurate invoices to your customers.</p> <p>The default calculation for usage is to add up all the <code>quantity</code> values of the usage records within a billing period. You can change this default behavior with the billing plan’s <code>aggregate_usage</code> <a href="/docs/api/plans/create#create_plan-aggregate_usage">parameter</a>. When there is more than one usage record with the same timestamp, Stripe adds the <code>quantity</code> values together. In most cases, this is the desired resolution, however, you can change this behavior with the <code>action</code> parameter.</p> <p>The default pricing model for metered billing is <a href="/docs/api/plans/object#plan_object-billing_scheme">per-unit pricing</a>. For finer granularity, you can configure metered billing to have a <a href="https://stripe.com/docs/billing/subscriptions/tiers">tiered pricing</a> model.</p>
     *
     * @name PostSubscriptionItemsSubscriptionItemUsageRecords
     * @request POST:/v1/subscription_items/{subscription_item}/usage_records
     * @secure
     * @response `200` `UsageRecord` Successful response.
     * @response `default` `Error` Error response.
     */
    postSubscriptionItemsSubscriptionItemUsageRecords: (
      subscriptionItem: string,
      data: { action?: "increment" | "set"; expand?: string[]; quantity: number; timestamp?: "now" | number },
      params: RequestParams = {},
    ) =>
      this.request<UsageRecord, Error>({
        path: `/v1/subscription_items/${subscriptionItem}/usage_records`,
        method: "POST",
        body: data,
        secure: true,
        type: ContentType.UrlEncoded,
        format: "json",
        ...params,
      }),

    /**
     * @description <p>Retrieves the list of your subscription schedules.</p>
     *
     * @name GetSubscriptionSchedules
     * @request GET:/v1/subscription_schedules
     * @secure
     * @response `200` `{ data: (SubscriptionSchedule)[], has_more: boolean, object: "list", url: string }` Successful response.
     * @response `default` `Error` Error response.
     */
    getSubscriptionSchedules: (
      query?: {
        canceled_at?: { gt?: number; gte?: number; lt?: number; lte?: number } | number;
        completed_at?: { gt?: number; gte?: number; lt?: number; lte?: number } | number;
        created?: { gt?: number; gte?: number; lt?: number; lte?: number } | number;
        customer?: string;
        ending_before?: string;
        expand?: string[];
        limit?: number;
        released_at?: { gt?: number; gte?: number; lt?: number; lte?: number } | number;
        scheduled?: boolean;
        starting_after?: string;
      },
      data?: CardMandatePaymentMethodDetails,
      params: RequestParams = {},
    ) =>
      this.request<{ data: SubscriptionSchedule[]; has_more: boolean; object: "list"; url: string }, Error>({
        path: `/v1/subscription_schedules`,
        method: "GET",
        query: query,
        body: data,
        secure: true,
        type: ContentType.UrlEncoded,
        format: "json",
        ...params,
      }),

    /**
     * @description <p>Creates a new subscription schedule object. Each customer can have up to 500 active or scheduled subscriptions.</p>
     *
     * @name PostSubscriptionSchedules
     * @request POST:/v1/subscription_schedules
     * @secure
     * @response `200` `SubscriptionSchedule` Successful response.
     * @response `default` `Error` Error response.
     */
    postSubscriptionSchedules: (
      data?: {
        customer?: string;
        default_settings?: {
          application_fee_percent?: number;
          automatic_tax?: { enabled: boolean };
          billing_cycle_anchor?: "automatic" | "phase_start";
          billing_thresholds?:
            | { amount_gte?: number; reset_billing_cycle_anchor?: boolean }
            | ""
            | ({ amount_gte?: number; reset_billing_cycle_anchor?: boolean } & "");
          collection_method?: "charge_automatically" | "send_invoice";
          default_payment_method?: string;
          invoice_settings?: { days_until_due?: number };
          transfer_data?:
            | { amount_percent?: number; destination: string }
            | ""
            | ({ amount_percent?: number; destination: string } & "");
        };
        end_behavior?: "cancel" | "none" | "release" | "renew";
        expand?: string[];
        from_subscription?: string;
        metadata?: Record<string, string> | "" | (Record<string, string> & "");
        phases?: {
          add_invoice_items?: {
            price?: string;
            price_data?: {
              currency: string;
              product: string;
              tax_behavior?: "exclusive" | "inclusive" | "unspecified";
              unit_amount?: number;
              unit_amount_decimal?: string;
            };
            quantity?: number;
            tax_rates?: string[] | "" | (string[] & "");
          }[];
          application_fee_percent?: number;
          automatic_tax?: { enabled: boolean };
          billing_cycle_anchor?: "automatic" | "phase_start";
          billing_thresholds?:
            | { amount_gte?: number; reset_billing_cycle_anchor?: boolean }
            | ""
            | ({ amount_gte?: number; reset_billing_cycle_anchor?: boolean } & "");
          collection_method?: "charge_automatically" | "send_invoice";
          coupon?: string;
          default_payment_method?: string;
          default_tax_rates?: string[] | "" | (string[] & "");
          end_date?: number;
          invoice_settings?: { days_until_due?: number };
          items: {
            billing_thresholds?: { usage_gte: number } | "" | ({ usage_gte: number } & "");
            price?: string;
            price_data?: {
              currency: string;
              product: string;
              recurring: { interval: "day" | "month" | "week" | "year"; interval_count?: number };
              tax_behavior?: "exclusive" | "inclusive" | "unspecified";
              unit_amount?: number;
              unit_amount_decimal?: string;
            };
            quantity?: number;
            tax_rates?: string[] | "" | (string[] & "");
          }[];
          iterations?: number;
          proration_behavior?: "always_invoice" | "create_prorations" | "none";
          transfer_data?: { amount_percent?: number; destination: string };
          trial?: boolean;
          trial_end?: number;
        }[];
        start_date?: number | "now";
      },
      params: RequestParams = {},
    ) =>
      this.request<SubscriptionSchedule, Error>({
        path: `/v1/subscription_schedules`,
        method: "POST",
        body: data,
        secure: true,
        type: ContentType.UrlEncoded,
        format: "json",
        ...params,
      }),

    /**
     * @description <p>Retrieves the details of an existing subscription schedule. You only need to supply the unique subscription schedule identifier that was returned upon subscription schedule creation.</p>
     *
     * @name GetSubscriptionSchedulesSchedule
     * @request GET:/v1/subscription_schedules/{schedule}
     * @secure
     * @response `200` `SubscriptionSchedule` Successful response.
     * @response `default` `Error` Error response.
     */
    getSubscriptionSchedulesSchedule: (
      schedule: string,
      query?: { expand?: string[] },
      data?: CardMandatePaymentMethodDetails,
      params: RequestParams = {},
    ) =>
      this.request<SubscriptionSchedule, Error>({
        path: `/v1/subscription_schedules/${schedule}`,
        method: "GET",
        query: query,
        body: data,
        secure: true,
        type: ContentType.UrlEncoded,
        format: "json",
        ...params,
      }),

    /**
     * @description <p>Updates an existing subscription schedule.</p>
     *
     * @name PostSubscriptionSchedulesSchedule
     * @request POST:/v1/subscription_schedules/{schedule}
     * @secure
     * @response `200` `SubscriptionSchedule` Successful response.
     * @response `default` `Error` Error response.
     */
    postSubscriptionSchedulesSchedule: (
      schedule: string,
      data?: {
        default_settings?: {
          application_fee_percent?: number;
          automatic_tax?: { enabled: boolean };
          billing_cycle_anchor?: "automatic" | "phase_start";
          billing_thresholds?:
            | { amount_gte?: number; reset_billing_cycle_anchor?: boolean }
            | ""
            | ({ amount_gte?: number; reset_billing_cycle_anchor?: boolean } & "");
          collection_method?: "charge_automatically" | "send_invoice";
          default_payment_method?: string;
          invoice_settings?: { days_until_due?: number };
          transfer_data?:
            | { amount_percent?: number; destination: string }
            | ""
            | ({ amount_percent?: number; destination: string } & "");
        };
        end_behavior?: "cancel" | "none" | "release" | "renew";
        expand?: string[];
        metadata?: Record<string, string> | "" | (Record<string, string> & "");
        phases?: {
          add_invoice_items?: {
            price?: string;
            price_data?: {
              currency: string;
              product: string;
              tax_behavior?: "exclusive" | "inclusive" | "unspecified";
              unit_amount?: number;
              unit_amount_decimal?: string;
            };
            quantity?: number;
            tax_rates?: string[] | "" | (string[] & "");
          }[];
          application_fee_percent?: number;
          automatic_tax?: { enabled: boolean };
          billing_cycle_anchor?: "automatic" | "phase_start";
          billing_thresholds?:
            | { amount_gte?: number; reset_billing_cycle_anchor?: boolean }
            | ""
            | ({ amount_gte?: number; reset_billing_cycle_anchor?: boolean } & "");
          collection_method?: "charge_automatically" | "send_invoice";
          coupon?: string;
          default_payment_method?: string;
          default_tax_rates?: string[] | "" | (string[] & "");
          end_date?: number | "now";
          invoice_settings?: { days_until_due?: number };
          items: {
            billing_thresholds?: { usage_gte: number } | "" | ({ usage_gte: number } & "");
            price?: string;
            price_data?: {
              currency: string;
              product: string;
              recurring: { interval: "day" | "month" | "week" | "year"; interval_count?: number };
              tax_behavior?: "exclusive" | "inclusive" | "unspecified";
              unit_amount?: number;
              unit_amount_decimal?: string;
            };
            quantity?: number;
            tax_rates?: string[] | "" | (string[] & "");
          }[];
          iterations?: number;
          proration_behavior?: "always_invoice" | "create_prorations" | "none";
          start_date?: number | "now";
          transfer_data?: { amount_percent?: number; destination: string };
          trial?: boolean;
          trial_end?: number | "now";
        }[];
        proration_behavior?: "always_invoice" | "create_prorations" | "none";
      },
      params: RequestParams = {},
    ) =>
      this.request<SubscriptionSchedule, Error>({
        path: `/v1/subscription_schedules/${schedule}`,
        method: "POST",
        body: data,
        secure: true,
        type: ContentType.UrlEncoded,
        format: "json",
        ...params,
      }),

    /**
     * @description <p>Cancels a subscription schedule and its associated subscription immediately (if the subscription schedule has an active subscription). A subscription schedule can only be canceled if its status is <code>not_started</code> or <code>active</code>.</p>
     *
     * @name PostSubscriptionSchedulesScheduleCancel
     * @request POST:/v1/subscription_schedules/{schedule}/cancel
     * @secure
     * @response `200` `SubscriptionSchedule` Successful response.
     * @response `default` `Error` Error response.
     */
    postSubscriptionSchedulesScheduleCancel: (
      schedule: string,
      data?: { expand?: string[]; invoice_now?: boolean; prorate?: boolean },
      params: RequestParams = {},
    ) =>
      this.request<SubscriptionSchedule, Error>({
        path: `/v1/subscription_schedules/${schedule}/cancel`,
        method: "POST",
        body: data,
        secure: true,
        type: ContentType.UrlEncoded,
        format: "json",
        ...params,
      }),

    /**
     * @description <p>Releases the subscription schedule immediately, which will stop scheduling of its phases, but leave any existing subscription in place. A schedule can only be released if its status is <code>not_started</code> or <code>active</code>. If the subscription schedule is currently associated with a subscription, releasing it will remove its <code>subscription</code> property and set the subscription’s ID to the <code>released_subscription</code> property.</p>
     *
     * @name PostSubscriptionSchedulesScheduleRelease
     * @request POST:/v1/subscription_schedules/{schedule}/release
     * @secure
     * @response `200` `SubscriptionSchedule` Successful response.
     * @response `default` `Error` Error response.
     */
    postSubscriptionSchedulesScheduleRelease: (
      schedule: string,
      data?: { expand?: string[]; preserve_cancel_date?: boolean },
      params: RequestParams = {},
    ) =>
      this.request<SubscriptionSchedule, Error>({
        path: `/v1/subscription_schedules/${schedule}/release`,
        method: "POST",
        body: data,
        secure: true,
        type: ContentType.UrlEncoded,
        format: "json",
        ...params,
      }),

    /**
     * @description <p>By default, returns a list of subscriptions that have not been canceled. In order to list canceled subscriptions, specify <code>status=canceled</code>.</p>
     *
     * @name GetSubscriptions
     * @request GET:/v1/subscriptions
     * @secure
     * @response `200` `{ data: (Subscription)[], has_more: boolean, object: "list", url: string }` Successful response.
     * @response `default` `Error` Error response.
     */
    getSubscriptions: (
      query?: {
        collection_method?: "charge_automatically" | "send_invoice";
        created?: { gt?: number; gte?: number; lt?: number; lte?: number } | number;
        current_period_end?: { gt?: number; gte?: number; lt?: number; lte?: number } | number;
        current_period_start?: { gt?: number; gte?: number; lt?: number; lte?: number } | number;
        customer?: string;
        ending_before?: string;
        expand?: string[];
        limit?: number;
        price?: string;
        starting_after?: string;
        status?:
          | "active"
          | "all"
          | "canceled"
          | "ended"
          | "incomplete"
          | "incomplete_expired"
          | "past_due"
          | "trialing"
          | "unpaid";
      },
      data?: CardMandatePaymentMethodDetails,
      params: RequestParams = {},
    ) =>
      this.request<{ data: Subscription[]; has_more: boolean; object: "list"; url: string }, Error>({
        path: `/v1/subscriptions`,
        method: "GET",
        query: query,
        body: data,
        secure: true,
        type: ContentType.UrlEncoded,
        format: "json",
        ...params,
      }),

    /**
     * @description <p>Creates a new subscription on an existing customer. Each customer can have up to 500 active or scheduled subscriptions.</p>
     *
     * @name PostSubscriptions
     * @request POST:/v1/subscriptions
     * @secure
     * @response `200` `Subscription` Successful response.
     * @response `default` `Error` Error response.
     */
    postSubscriptions: (
      data: {
        add_invoice_items?: {
          price?: string;
          price_data?: {
            currency: string;
            product: string;
            tax_behavior?: "exclusive" | "inclusive" | "unspecified";
            unit_amount?: number;
            unit_amount_decimal?: string;
          };
          quantity?: number;
          tax_rates?: string[] | "" | (string[] & "");
        }[];
        application_fee_percent?: number;
        automatic_tax?: { enabled: boolean };
        backdate_start_date?: number;
        billing_cycle_anchor?: number;
        billing_thresholds?:
          | { amount_gte?: number; reset_billing_cycle_anchor?: boolean }
          | ""
          | ({ amount_gte?: number; reset_billing_cycle_anchor?: boolean } & "");
        cancel_at?: number;
        cancel_at_period_end?: boolean;
        collection_method?: "charge_automatically" | "send_invoice";
        coupon?: string;
        customer: string;
        days_until_due?: number;
        default_payment_method?: string;
        default_source?: string;
        default_tax_rates?: string[] | "" | (string[] & "");
        expand?: string[];
        items?: {
          billing_thresholds?: { usage_gte: number } | "" | ({ usage_gte: number } & "");
          metadata?: Record<string, string>;
          price?: string;
          price_data?: {
            currency: string;
            product: string;
            recurring: { interval: "day" | "month" | "week" | "year"; interval_count?: number };
            tax_behavior?: "exclusive" | "inclusive" | "unspecified";
            unit_amount?: number;
            unit_amount_decimal?: string;
          };
          quantity?: number;
          tax_rates?: string[] | "" | (string[] & "");
        }[];
        metadata?: Record<string, string> | "" | (Record<string, string> & "");
        off_session?: boolean;
        payment_behavior?: "allow_incomplete" | "default_incomplete" | "error_if_incomplete" | "pending_if_incomplete";
        payment_settings?: {
          payment_method_options?: {
            acss_debit?:
              | {
                  mandate_options?: { transaction_type?: "business" | "personal" };
                  verification_method?: "automatic" | "instant" | "microdeposits";
                }
              | ""
              | ({
                  mandate_options?: { transaction_type?: "business" | "personal" };
                  verification_method?: "automatic" | "instant" | "microdeposits";
                } & "");
            bancontact?:
              | { preferred_language?: "de" | "en" | "fr" | "nl" }
              | ""
              | ({ preferred_language?: "de" | "en" | "fr" | "nl" } & "");
            card?:
              | {
                  mandate_options?: { amount?: number; amount_type?: "fixed" | "maximum"; description?: string };
                  request_three_d_secure?: "any" | "automatic";
                }
              | ""
              | ({
                  mandate_options?: { amount?: number; amount_type?: "fixed" | "maximum"; description?: string };
                  request_three_d_secure?: "any" | "automatic";
                } & "");
          };
          payment_method_types?:
            | (
                | "ach_credit_transfer"
                | "ach_debit"
                | "acss_debit"
                | "au_becs_debit"
                | "bacs_debit"
                | "bancontact"
                | "boleto"
                | "card"
                | "fpx"
                | "giropay"
                | "ideal"
                | "sepa_debit"
                | "sofort"
                | "wechat_pay"
              )[]
            | ""
            | ((
                | "ach_credit_transfer"
                | "ach_debit"
                | "acss_debit"
                | "au_becs_debit"
                | "bacs_debit"
                | "bancontact"
                | "boleto"
                | "card"
                | "fpx"
                | "giropay"
                | "ideal"
                | "sepa_debit"
                | "sofort"
                | "wechat_pay"
              )[] &
                "");
        };
        pending_invoice_item_interval?:
          | { interval: "day" | "month" | "week" | "year"; interval_count?: number }
          | ""
          | ({ interval: "day" | "month" | "week" | "year"; interval_count?: number } & "");
        promotion_code?: string;
        proration_behavior?: "always_invoice" | "create_prorations" | "none";
        transfer_data?: { amount_percent?: number; destination: string };
        trial_end?: "now" | number;
        trial_from_plan?: boolean;
        trial_period_days?: number;
      },
      params: RequestParams = {},
    ) =>
      this.request<Subscription, Error>({
        path: `/v1/subscriptions`,
        method: "POST",
        body: data,
        secure: true,
        type: ContentType.UrlEncoded,
        format: "json",
        ...params,
      }),

    /**
     * @description <p>Cancels a customer’s subscription immediately. The customer will not be charged again for the subscription.</p> <p>Note, however, that any pending invoice items that you’ve created will still be charged for at the end of the period, unless manually <a href="#delete_invoiceitem">deleted</a>. If you’ve set the subscription to cancel at the end of the period, any pending prorations will also be left in place and collected at the end of the period. But if the subscription is set to cancel immediately, pending prorations will be removed.</p> <p>By default, upon subscription cancellation, Stripe will stop automatic collection of all finalized invoices for the customer. This is intended to prevent unexpected payment attempts after the customer has canceled a subscription. However, you can resume automatic collection of the invoices manually after subscription cancellation to have us proceed. Or, you could check for unpaid invoices before allowing the customer to cancel the subscription at all.</p>
     *
     * @name DeleteSubscriptionsSubscriptionExposedId
     * @request DELETE:/v1/subscriptions/{subscription_exposed_id}
     * @secure
     * @response `200` `Subscription` Successful response.
     * @response `default` `Error` Error response.
     */
    deleteSubscriptionsSubscriptionExposedId: (
      subscriptionExposedId: string,
      data?: { expand?: string[]; invoice_now?: boolean; prorate?: boolean },
      params: RequestParams = {},
    ) =>
      this.request<Subscription, Error>({
        path: `/v1/subscriptions/${subscriptionExposedId}`,
        method: "DELETE",
        body: data,
        secure: true,
        type: ContentType.UrlEncoded,
        format: "json",
        ...params,
      }),

    /**
     * @description <p>Retrieves the subscription with the given ID.</p>
     *
     * @name GetSubscriptionsSubscriptionExposedId
     * @request GET:/v1/subscriptions/{subscription_exposed_id}
     * @secure
     * @response `200` `Subscription` Successful response.
     * @response `default` `Error` Error response.
     */
    getSubscriptionsSubscriptionExposedId: (
      subscriptionExposedId: string,
      query?: { expand?: string[] },
      data?: CardMandatePaymentMethodDetails,
      params: RequestParams = {},
    ) =>
      this.request<Subscription, Error>({
        path: `/v1/subscriptions/${subscriptionExposedId}`,
        method: "GET",
        query: query,
        body: data,
        secure: true,
        type: ContentType.UrlEncoded,
        format: "json",
        ...params,
      }),

    /**
     * @description <p>Updates an existing subscription on a customer to match the specified parameters. When changing plans or quantities, we will optionally prorate the price we charge next month to make up for any price changes. To preview how the proration will be calculated, use the <a href="#upcoming_invoice">upcoming invoice</a> endpoint.</p>
     *
     * @name PostSubscriptionsSubscriptionExposedId
     * @request POST:/v1/subscriptions/{subscription_exposed_id}
     * @secure
     * @response `200` `Subscription` Successful response.
     * @response `default` `Error` Error response.
     */
    postSubscriptionsSubscriptionExposedId: (
      subscriptionExposedId: string,
      data?: {
        add_invoice_items?: {
          price?: string;
          price_data?: {
            currency: string;
            product: string;
            tax_behavior?: "exclusive" | "inclusive" | "unspecified";
            unit_amount?: number;
            unit_amount_decimal?: string;
          };
          quantity?: number;
          tax_rates?: string[] | "" | (string[] & "");
        }[];
        application_fee_percent?: number;
        automatic_tax?: { enabled: boolean };
        billing_cycle_anchor?: "now" | "unchanged";
        billing_thresholds?:
          | { amount_gte?: number; reset_billing_cycle_anchor?: boolean }
          | ""
          | ({ amount_gte?: number; reset_billing_cycle_anchor?: boolean } & "");
        cancel_at?: number | "";
        cancel_at_period_end?: boolean;
        collection_method?: "charge_automatically" | "send_invoice";
        coupon?: string;
        days_until_due?: number;
        default_payment_method?: string;
        default_source?: string;
        default_tax_rates?: string[] | "" | (string[] & "");
        expand?: string[];
        items?: {
          billing_thresholds?: { usage_gte: number } | "" | ({ usage_gte: number } & "");
          clear_usage?: boolean;
          deleted?: boolean;
          id?: string;
          metadata?: Record<string, string> | "" | (Record<string, string> & "");
          price?: string;
          price_data?: {
            currency: string;
            product: string;
            recurring: { interval: "day" | "month" | "week" | "year"; interval_count?: number };
            tax_behavior?: "exclusive" | "inclusive" | "unspecified";
            unit_amount?: number;
            unit_amount_decimal?: string;
          };
          quantity?: number;
          tax_rates?: string[] | "" | (string[] & "");
        }[];
        metadata?: Record<string, string> | "" | (Record<string, string> & "");
        off_session?: boolean;
        pause_collection?:
          | { behavior: "keep_as_draft" | "mark_uncollectible" | "void"; resumes_at?: number }
          | ""
          | ({ behavior: "keep_as_draft" | "mark_uncollectible" | "void"; resumes_at?: number } & "");
        payment_behavior?: "allow_incomplete" | "default_incomplete" | "error_if_incomplete" | "pending_if_incomplete";
        payment_settings?: {
          payment_method_options?: {
            acss_debit?:
              | {
                  mandate_options?: { transaction_type?: "business" | "personal" };
                  verification_method?: "automatic" | "instant" | "microdeposits";
                }
              | ""
              | ({
                  mandate_options?: { transaction_type?: "business" | "personal" };
                  verification_method?: "automatic" | "instant" | "microdeposits";
                } & "");
            bancontact?:
              | { preferred_language?: "de" | "en" | "fr" | "nl" }
              | ""
              | ({ preferred_language?: "de" | "en" | "fr" | "nl" } & "");
            card?:
              | {
                  mandate_options?: { amount?: number; amount_type?: "fixed" | "maximum"; description?: string };
                  request_three_d_secure?: "any" | "automatic";
                }
              | ""
              | ({
                  mandate_options?: { amount?: number; amount_type?: "fixed" | "maximum"; description?: string };
                  request_three_d_secure?: "any" | "automatic";
                } & "");
          };
          payment_method_types?:
            | (
                | "ach_credit_transfer"
                | "ach_debit"
                | "acss_debit"
                | "au_becs_debit"
                | "bacs_debit"
                | "bancontact"
                | "boleto"
                | "card"
                | "fpx"
                | "giropay"
                | "ideal"
                | "sepa_debit"
                | "sofort"
                | "wechat_pay"
              )[]
            | ""
            | ((
                | "ach_credit_transfer"
                | "ach_debit"
                | "acss_debit"
                | "au_becs_debit"
                | "bacs_debit"
                | "bancontact"
                | "boleto"
                | "card"
                | "fpx"
                | "giropay"
                | "ideal"
                | "sepa_debit"
                | "sofort"
                | "wechat_pay"
              )[] &
                "");
        };
        pending_invoice_item_interval?:
          | { interval: "day" | "month" | "week" | "year"; interval_count?: number }
          | ""
          | ({ interval: "day" | "month" | "week" | "year"; interval_count?: number } & "");
        promotion_code?: string;
        proration_behavior?: "always_invoice" | "create_prorations" | "none";
        proration_date?: number;
        transfer_data?:
          | { amount_percent?: number; destination: string }
          | ""
          | ({ amount_percent?: number; destination: string } & "");
        trial_end?: "now" | number;
        trial_from_plan?: boolean;
      },
      params: RequestParams = {},
    ) =>
      this.request<Subscription, Error>({
        path: `/v1/subscriptions/${subscriptionExposedId}`,
        method: "POST",
        body: data,
        secure: true,
        type: ContentType.UrlEncoded,
        format: "json",
        ...params,
      }),

    /**
     * @description <p>Removes the currently applied discount on a subscription.</p>
     *
     * @name DeleteSubscriptionsSubscriptionExposedIdDiscount
     * @request DELETE:/v1/subscriptions/{subscription_exposed_id}/discount
     * @secure
     * @response `200` `DeletedDiscount` Successful response.
     * @response `default` `Error` Error response.
     */
    deleteSubscriptionsSubscriptionExposedIdDiscount: (
      subscriptionExposedId: string,
      data?: CardMandatePaymentMethodDetails,
      params: RequestParams = {},
    ) =>
      this.request<DeletedDiscount, Error>({
        path: `/v1/subscriptions/${subscriptionExposedId}/discount`,
        method: "DELETE",
        body: data,
        secure: true,
        type: ContentType.UrlEncoded,
        format: "json",
        ...params,
      }),

    /**
     * @description <p>A list of <a href="https://stripe.com/docs/tax/tax-codes">all tax codes available</a> to add to Products in order to allow specific tax calculations.</p>
     *
     * @name GetTaxCodes
     * @request GET:/v1/tax_codes
     * @secure
     * @response `200` `{ data: (TaxCode)[], has_more: boolean, object: "list", url: string }` Successful response.
     * @response `default` `Error` Error response.
     */
    getTaxCodes: (
      query?: { ending_before?: string; expand?: string[]; limit?: number; starting_after?: string },
      data?: CardMandatePaymentMethodDetails,
      params: RequestParams = {},
    ) =>
      this.request<{ data: TaxCode[]; has_more: boolean; object: "list"; url: string }, Error>({
        path: `/v1/tax_codes`,
        method: "GET",
        query: query,
        body: data,
        secure: true,
        type: ContentType.UrlEncoded,
        format: "json",
        ...params,
      }),

    /**
     * @description <p>Retrieves the details of an existing tax code. Supply the unique tax code ID and Stripe will return the corresponding tax code information.</p>
     *
     * @name GetTaxCodesId
     * @request GET:/v1/tax_codes/{id}
     * @secure
     * @response `200` `TaxCode` Successful response.
     * @response `default` `Error` Error response.
     */
    getTaxCodesId: (
      id: string,
      query?: { expand?: string[] },
      data?: CardMandatePaymentMethodDetails,
      params: RequestParams = {},
    ) =>
      this.request<TaxCode, Error>({
        path: `/v1/tax_codes/${id}`,
        method: "GET",
        query: query,
        body: data,
        secure: true,
        type: ContentType.UrlEncoded,
        format: "json",
        ...params,
      }),

    /**
     * @description <p>Returns a list of your tax rates. Tax rates are returned sorted by creation date, with the most recently created tax rates appearing first.</p>
     *
     * @name GetTaxRates
     * @request GET:/v1/tax_rates
     * @secure
     * @response `200` `{ data: (TaxRate)[], has_more: boolean, object: "list", url: string }` Successful response.
     * @response `default` `Error` Error response.
     */
    getTaxRates: (
      query?: {
        active?: boolean;
        created?: { gt?: number; gte?: number; lt?: number; lte?: number } | number;
        ending_before?: string;
        expand?: string[];
        inclusive?: boolean;
        limit?: number;
        starting_after?: string;
      },
      data?: CardMandatePaymentMethodDetails,
      params: RequestParams = {},
    ) =>
      this.request<{ data: TaxRate[]; has_more: boolean; object: "list"; url: string }, Error>({
        path: `/v1/tax_rates`,
        method: "GET",
        query: query,
        body: data,
        secure: true,
        type: ContentType.UrlEncoded,
        format: "json",
        ...params,
      }),

    /**
     * @description <p>Creates a new tax rate.</p>
     *
     * @name PostTaxRates
     * @request POST:/v1/tax_rates
     * @secure
     * @response `200` `TaxRate` Successful response.
     * @response `default` `Error` Error response.
     */
    postTaxRates: (
      data: {
        active?: boolean;
        country?: string;
        description?: string;
        display_name: string;
        expand?: string[];
        inclusive: boolean;
        jurisdiction?: string;
        metadata?: Record<string, string>;
        percentage: number;
        state?: string;
        tax_type?: "gst" | "hst" | "jct" | "pst" | "qst" | "rst" | "sales_tax" | "vat";
      },
      params: RequestParams = {},
    ) =>
      this.request<TaxRate, Error>({
        path: `/v1/tax_rates`,
        method: "POST",
        body: data,
        secure: true,
        type: ContentType.UrlEncoded,
        format: "json",
        ...params,
      }),

    /**
     * @description <p>Retrieves a tax rate with the given ID</p>
     *
     * @name GetTaxRatesTaxRate
     * @request GET:/v1/tax_rates/{tax_rate}
     * @secure
     * @response `200` `TaxRate` Successful response.
     * @response `default` `Error` Error response.
     */
    getTaxRatesTaxRate: (
      taxRate: string,
      query?: { expand?: string[] },
      data?: CardMandatePaymentMethodDetails,
      params: RequestParams = {},
    ) =>
      this.request<TaxRate, Error>({
        path: `/v1/tax_rates/${taxRate}`,
        method: "GET",
        query: query,
        body: data,
        secure: true,
        type: ContentType.UrlEncoded,
        format: "json",
        ...params,
      }),

    /**
     * @description <p>Updates an existing tax rate.</p>
     *
     * @name PostTaxRatesTaxRate
     * @request POST:/v1/tax_rates/{tax_rate}
     * @secure
     * @response `200` `TaxRate` Successful response.
     * @response `default` `Error` Error response.
     */
    postTaxRatesTaxRate: (
      taxRate: string,
      data?: {
        active?: boolean;
        country?: string;
        description?: string;
        display_name?: string;
        expand?: string[];
        jurisdiction?: string;
        metadata?: Record<string, string> | "" | (Record<string, string> & "");
        state?: string;
        tax_type?: "gst" | "hst" | "jct" | "pst" | "qst" | "rst" | "sales_tax" | "vat";
      },
      params: RequestParams = {},
    ) =>
      this.request<TaxRate, Error>({
        path: `/v1/tax_rates/${taxRate}`,
        method: "POST",
        body: data,
        secure: true,
        type: ContentType.UrlEncoded,
        format: "json",
        ...params,
      }),

    /**
     * @description <p>To connect to a reader the Stripe Terminal SDK needs to retrieve a short-lived connection token from Stripe, proxied through your server. On your backend, add an endpoint that creates and returns a connection token.</p>
     *
     * @name PostTerminalConnectionTokens
     * @request POST:/v1/terminal/connection_tokens
     * @secure
     * @response `200` `TerminalConnectionToken` Successful response.
     * @response `default` `Error` Error response.
     */
    postTerminalConnectionTokens: (data?: { expand?: string[]; location?: string }, params: RequestParams = {}) =>
      this.request<TerminalConnectionToken, Error>({
        path: `/v1/terminal/connection_tokens`,
        method: "POST",
        body: data,
        secure: true,
        type: ContentType.UrlEncoded,
        format: "json",
        ...params,
      }),

    /**
     * @description <p>Returns a list of <code>Location</code> objects.</p>
     *
     * @name GetTerminalLocations
     * @request GET:/v1/terminal/locations
     * @secure
     * @response `200` `{ data: (TerminalLocation)[], has_more: boolean, object: "list", url: string }` Successful response.
     * @response `default` `Error` Error response.
     */
    getTerminalLocations: (
      query?: { ending_before?: string; expand?: string[]; limit?: number; starting_after?: string },
      data?: CardMandatePaymentMethodDetails,
      params: RequestParams = {},
    ) =>
      this.request<{ data: TerminalLocation[]; has_more: boolean; object: "list"; url: string }, Error>({
        path: `/v1/terminal/locations`,
        method: "GET",
        query: query,
        body: data,
        secure: true,
        type: ContentType.UrlEncoded,
        format: "json",
        ...params,
      }),

    /**
     * @description <p>Creates a new <code>Location</code> object. For further details, including which address fields are required in each country, see the <a href="/docs/terminal/fleet/locations">Manage locations</a> guide.</p>
     *
     * @name PostTerminalLocations
     * @request POST:/v1/terminal/locations
     * @secure
     * @response `200` `TerminalLocation` Successful response.
     * @response `default` `Error` Error response.
     */
    postTerminalLocations: (
      data: {
        address: {
          city?: string;
          country: string;
          line1?: string;
          line2?: string;
          postal_code?: string;
          state?: string;
        };
        display_name: string;
        expand?: string[];
        metadata?: Record<string, string> | "" | (Record<string, string> & "");
      },
      params: RequestParams = {},
    ) =>
      this.request<TerminalLocation, Error>({
        path: `/v1/terminal/locations`,
        method: "POST",
        body: data,
        secure: true,
        type: ContentType.UrlEncoded,
        format: "json",
        ...params,
      }),

    /**
     * @description <p>Deletes a <code>Location</code> object.</p>
     *
     * @name DeleteTerminalLocationsLocation
     * @request DELETE:/v1/terminal/locations/{location}
     * @secure
     * @response `200` `DeletedTerminalLocation` Successful response.
     * @response `default` `Error` Error response.
     */
    deleteTerminalLocationsLocation: (
      location: string,
      data?: CardMandatePaymentMethodDetails,
      params: RequestParams = {},
    ) =>
      this.request<DeletedTerminalLocation, Error>({
        path: `/v1/terminal/locations/${location}`,
        method: "DELETE",
        body: data,
        secure: true,
        type: ContentType.UrlEncoded,
        format: "json",
        ...params,
      }),

    /**
     * @description <p>Retrieves a <code>Location</code> object.</p>
     *
     * @name GetTerminalLocationsLocation
     * @request GET:/v1/terminal/locations/{location}
     * @secure
     * @response `200` `TerminalLocation` Successful response.
     * @response `default` `Error` Error response.
     */
    getTerminalLocationsLocation: (
      location: string,
      query?: { expand?: string[] },
      data?: CardMandatePaymentMethodDetails,
      params: RequestParams = {},
    ) =>
      this.request<TerminalLocation, Error>({
        path: `/v1/terminal/locations/${location}`,
        method: "GET",
        query: query,
        body: data,
        secure: true,
        type: ContentType.UrlEncoded,
        format: "json",
        ...params,
      }),

    /**
     * @description <p>Updates a <code>Location</code> object by setting the values of the parameters passed. Any parameters not provided will be left unchanged.</p>
     *
     * @name PostTerminalLocationsLocation
     * @request POST:/v1/terminal/locations/{location}
     * @secure
     * @response `200` `TerminalLocation` Successful response.
     * @response `default` `Error` Error response.
     */
    postTerminalLocationsLocation: (
      location: string,
      data?: {
        address?: {
          city?: string;
          country?: string;
          line1?: string;
          line2?: string;
          postal_code?: string;
          state?: string;
        };
        display_name?: string;
        expand?: string[];
        metadata?: Record<string, string> | "" | (Record<string, string> & "");
      },
      params: RequestParams = {},
    ) =>
      this.request<TerminalLocation, Error>({
        path: `/v1/terminal/locations/${location}`,
        method: "POST",
        body: data,
        secure: true,
        type: ContentType.UrlEncoded,
        format: "json",
        ...params,
      }),

    /**
     * @description <p>Returns a list of <code>Reader</code> objects.</p>
     *
     * @name GetTerminalReaders
     * @request GET:/v1/terminal/readers
     * @secure
     * @response `200` `{ data: (TerminalReader)[], has_more: boolean, object: "list", url: string }` Successful response.
     * @response `default` `Error` Error response.
     */
    getTerminalReaders: (
      query?: {
        device_type?: "bbpos_chipper2x" | "bbpos_wisepos_e" | "verifone_P400";
        ending_before?: string;
        expand?: string[];
        limit?: number;
        location?: string;
        starting_after?: string;
        status?: "offline" | "online";
      },
      data?: CardMandatePaymentMethodDetails,
      params: RequestParams = {},
    ) =>
      this.request<{ data: TerminalReader[]; has_more: boolean; object: "list"; url: string }, Error>({
        path: `/v1/terminal/readers`,
        method: "GET",
        query: query,
        body: data,
        secure: true,
        type: ContentType.UrlEncoded,
        format: "json",
        ...params,
      }),

    /**
     * @description <p>Creates a new <code>Reader</code> object.</p>
     *
     * @name PostTerminalReaders
     * @request POST:/v1/terminal/readers
     * @secure
     * @response `200` `TerminalReader` Successful response.
     * @response `default` `Error` Error response.
     */
    postTerminalReaders: (
      data: {
        expand?: string[];
        label?: string;
        location?: string;
        metadata?: Record<string, string> | "" | (Record<string, string> & "");
        registration_code: string;
      },
      params: RequestParams = {},
    ) =>
      this.request<TerminalReader, Error>({
        path: `/v1/terminal/readers`,
        method: "POST",
        body: data,
        secure: true,
        type: ContentType.UrlEncoded,
        format: "json",
        ...params,
      }),

    /**
     * @description <p>Deletes a <code>Reader</code> object.</p>
     *
     * @name DeleteTerminalReadersReader
     * @request DELETE:/v1/terminal/readers/{reader}
     * @secure
     * @response `200` `DeletedTerminalReader` Successful response.
     * @response `default` `Error` Error response.
     */
    deleteTerminalReadersReader: (reader: string, data?: CardMandatePaymentMethodDetails, params: RequestParams = {}) =>
      this.request<DeletedTerminalReader, Error>({
        path: `/v1/terminal/readers/${reader}`,
        method: "DELETE",
        body: data,
        secure: true,
        type: ContentType.UrlEncoded,
        format: "json",
        ...params,
      }),

    /**
     * @description <p>Retrieves a <code>Reader</code> object.</p>
     *
     * @name GetTerminalReadersReader
     * @request GET:/v1/terminal/readers/{reader}
     * @secure
     * @response `200` `TerminalReader` Successful response.
     * @response `default` `Error` Error response.
     */
    getTerminalReadersReader: (
      reader: string,
      query?: { expand?: string[] },
      data?: CardMandatePaymentMethodDetails,
      params: RequestParams = {},
    ) =>
      this.request<TerminalReader, Error>({
        path: `/v1/terminal/readers/${reader}`,
        method: "GET",
        query: query,
        body: data,
        secure: true,
        type: ContentType.UrlEncoded,
        format: "json",
        ...params,
      }),

    /**
     * @description <p>Updates a <code>Reader</code> object by setting the values of the parameters passed. Any parameters not provided will be left unchanged.</p>
     *
     * @name PostTerminalReadersReader
     * @request POST:/v1/terminal/readers/{reader}
     * @secure
     * @response `200` `TerminalReader` Successful response.
     * @response `default` `Error` Error response.
     */
    postTerminalReadersReader: (
      reader: string,
      data?: {
        expand?: string[];
        label?: string;
        metadata?: Record<string, string> | "" | (Record<string, string> & "");
      },
      params: RequestParams = {},
    ) =>
      this.request<TerminalReader, Error>({
        path: `/v1/terminal/readers/${reader}`,
        method: "POST",
        body: data,
        secure: true,
        type: ContentType.UrlEncoded,
        format: "json",
        ...params,
      }),

    /**
     * @description <p>Creates a single-use token that represents a bank account’s details. This token can be used with any API method in place of a bank account dictionary. This token can be used only once, by attaching it to a <a href="#accounts">Custom account</a>.</p>
     *
     * @name PostTokens
     * @request POST:/v1/tokens
     * @secure
     * @response `200` `Token` Successful response.
     * @response `default` `Error` Error response.
     */
    postTokens: (
      data?: {
        account?: {
          business_type?: "company" | "government_entity" | "individual" | "non_profit";
          company?: {
            address?: {
              city?: string;
              country?: string;
              line1?: string;
              line2?: string;
              postal_code?: string;
              state?: string;
            };
            address_kana?: {
              city?: string;
              country?: string;
              line1?: string;
              line2?: string;
              postal_code?: string;
              state?: string;
              town?: string;
            };
            address_kanji?: {
              city?: string;
              country?: string;
              line1?: string;
              line2?: string;
              postal_code?: string;
              state?: string;
              town?: string;
            };
            directors_provided?: boolean;
            executives_provided?: boolean;
            name?: string;
            name_kana?: string;
            name_kanji?: string;
            owners_provided?: boolean;
            ownership_declaration?: { date?: number; ip?: string; user_agent?: string };
            ownership_declaration_shown_and_signed?: boolean;
            phone?: string;
            registration_number?: string;
            structure?:
              | ""
              | "free_zone_establishment"
              | "free_zone_llc"
              | "government_instrumentality"
              | "governmental_unit"
              | "incorporated_non_profit"
              | "limited_liability_partnership"
              | "llc"
              | "multi_member_llc"
              | "private_company"
              | "private_corporation"
              | "private_partnership"
              | "public_company"
              | "public_corporation"
              | "public_partnership"
              | "single_member_llc"
              | "sole_establishment"
              | "sole_proprietorship"
              | "tax_exempt_government_instrumentality"
              | "unincorporated_association"
              | "unincorporated_non_profit";
            tax_id?: string;
            tax_id_registrar?: string;
            vat_id?: string;
            verification?: { document?: { back?: string; front?: string } };
          };
          individual?: {
            address?: {
              city?: string;
              country?: string;
              line1?: string;
              line2?: string;
              postal_code?: string;
              state?: string;
            };
            address_kana?: {
              city?: string;
              country?: string;
              line1?: string;
              line2?: string;
              postal_code?: string;
              state?: string;
              town?: string;
            };
            address_kanji?: {
              city?: string;
              country?: string;
              line1?: string;
              line2?: string;
              postal_code?: string;
              state?: string;
              town?: string;
            };
            dob?:
              | { day: number; month: number; year: number }
              | ""
              | ({ day: number; month: number; year: number } & "");
            email?: string;
            first_name?: string;
            first_name_kana?: string;
            first_name_kanji?: string;
            full_name_aliases?: string[] | "" | (string[] & "");
            gender?: string;
            id_number?: string;
            last_name?: string;
            last_name_kana?: string;
            last_name_kanji?: string;
            maiden_name?: string;
            metadata?: Record<string, string> | "" | (Record<string, string> & "");
            phone?: string;
            political_exposure?: "existing" | "none";
            ssn_last_4?: string;
            verification?: {
              additional_document?: { back?: string; front?: string };
              document?: { back?: string; front?: string };
            };
          };
          tos_shown_and_accepted?: boolean;
        };
        bank_account?: {
          account_holder_name?: string;
          account_holder_type?: "company" | "individual";
          account_number: string;
          account_type?: "checking" | "futsu" | "savings" | "toza";
          country: string;
          currency?: string;
          routing_number?: string;
        };
        card?:
          | {
              address_city?: string;
              address_country?: string;
              address_line1?: string;
              address_line2?: string;
              address_state?: string;
              address_zip?: string;
              currency?: string;
              cvc?: string;
              exp_month: string;
              exp_year: string;
              name?: string;
              number: string;
            }
          | string;
        customer?: string;
        cvc_update?: { cvc: string };
        expand?: string[];
        person?: {
          address?: {
            city?: string;
            country?: string;
            line1?: string;
            line2?: string;
            postal_code?: string;
            state?: string;
          };
          address_kana?: {
            city?: string;
            country?: string;
            line1?: string;
            line2?: string;
            postal_code?: string;
            state?: string;
            town?: string;
          };
          address_kanji?: {
            city?: string;
            country?: string;
            line1?: string;
            line2?: string;
            postal_code?: string;
            state?: string;
            town?: string;
          };
          dob?: { day: number; month: number; year: number } | "" | ({ day: number; month: number; year: number } & "");
          documents?: {
            company_authorization?: { files?: string[] };
            passport?: { files?: string[] };
            visa?: { files?: string[] };
          };
          email?: string;
          first_name?: string;
          first_name_kana?: string;
          first_name_kanji?: string;
          full_name_aliases?: string[] | "" | (string[] & "");
          gender?: string;
          id_number?: string;
          last_name?: string;
          last_name_kana?: string;
          last_name_kanji?: string;
          maiden_name?: string;
          metadata?: Record<string, string> | "" | (Record<string, string> & "");
          nationality?: string;
          phone?: string;
          political_exposure?: string;
          relationship?: {
            director?: boolean;
            executive?: boolean;
            owner?: boolean;
            percent_ownership?: number | "";
            representative?: boolean;
            title?: string;
          };
          ssn_last_4?: string;
          verification?: {
            additional_document?: { back?: string; front?: string };
            document?: { back?: string; front?: string };
          };
        };
        pii?: { id_number?: string };
      },
      params: RequestParams = {},
    ) =>
      this.request<Token, Error>({
        path: `/v1/tokens`,
        method: "POST",
        body: data,
        secure: true,
        type: ContentType.UrlEncoded,
        format: "json",
        ...params,
      }),

    /**
     * @description <p>Retrieves the token with the given ID.</p>
     *
     * @name GetTokensToken
     * @request GET:/v1/tokens/{token}
     * @secure
     * @response `200` `Token` Successful response.
     * @response `default` `Error` Error response.
     */
    getTokensToken: (
      token: string,
      query?: { expand?: string[] },
      data?: CardMandatePaymentMethodDetails,
      params: RequestParams = {},
    ) =>
      this.request<Token, Error>({
        path: `/v1/tokens/${token}`,
        method: "GET",
        query: query,
        body: data,
        secure: true,
        type: ContentType.UrlEncoded,
        format: "json",
        ...params,
      }),

    /**
     * @description <p>Returns a list of top-ups.</p>
     *
     * @name GetTopups
     * @request GET:/v1/topups
     * @secure
     * @response `200` `{ data: (Topup)[], has_more: boolean, object: "list", url: string }` Successful response.
     * @response `default` `Error` Error response.
     */
    getTopups: (
      query?: {
        amount?: { gt?: number; gte?: number; lt?: number; lte?: number } | number;
        created?: { gt?: number; gte?: number; lt?: number; lte?: number } | number;
        ending_before?: string;
        expand?: string[];
        limit?: number;
        starting_after?: string;
        status?: "canceled" | "failed" | "pending" | "succeeded";
      },
      data?: CardMandatePaymentMethodDetails,
      params: RequestParams = {},
    ) =>
      this.request<{ data: Topup[]; has_more: boolean; object: "list"; url: string }, Error>({
        path: `/v1/topups`,
        method: "GET",
        query: query,
        body: data,
        secure: true,
        type: ContentType.UrlEncoded,
        format: "json",
        ...params,
      }),

    /**
     * @description <p>Top up the balance of an account</p>
     *
     * @name PostTopups
     * @request POST:/v1/topups
     * @secure
     * @response `200` `Topup` Successful response.
     * @response `default` `Error` Error response.
     */
    postTopups: (
      data: {
        amount: number;
        currency: string;
        description?: string;
        expand?: string[];
        metadata?: Record<string, string> | "" | (Record<string, string> & "");
        source?: string;
        statement_descriptor?: string;
        transfer_group?: string;
      },
      params: RequestParams = {},
    ) =>
      this.request<Topup, Error>({
        path: `/v1/topups`,
        method: "POST",
        body: data,
        secure: true,
        type: ContentType.UrlEncoded,
        format: "json",
        ...params,
      }),

    /**
     * @description <p>Retrieves the details of a top-up that has previously been created. Supply the unique top-up ID that was returned from your previous request, and Stripe will return the corresponding top-up information.</p>
     *
     * @name GetTopupsTopup
     * @request GET:/v1/topups/{topup}
     * @secure
     * @response `200` `Topup` Successful response.
     * @response `default` `Error` Error response.
     */
    getTopupsTopup: (
      topup: string,
      query?: { expand?: string[] },
      data?: CardMandatePaymentMethodDetails,
      params: RequestParams = {},
    ) =>
      this.request<Topup, Error>({
        path: `/v1/topups/${topup}`,
        method: "GET",
        query: query,
        body: data,
        secure: true,
        type: ContentType.UrlEncoded,
        format: "json",
        ...params,
      }),

    /**
     * @description <p>Updates the metadata of a top-up. Other top-up details are not editable by design.</p>
     *
     * @name PostTopupsTopup
     * @request POST:/v1/topups/{topup}
     * @secure
     * @response `200` `Topup` Successful response.
     * @response `default` `Error` Error response.
     */
    postTopupsTopup: (
      topup: string,
      data?: {
        description?: string;
        expand?: string[];
        metadata?: Record<string, string> | "" | (Record<string, string> & "");
      },
      params: RequestParams = {},
    ) =>
      this.request<Topup, Error>({
        path: `/v1/topups/${topup}`,
        method: "POST",
        body: data,
        secure: true,
        type: ContentType.UrlEncoded,
        format: "json",
        ...params,
      }),

    /**
     * @description <p>Cancels a top-up. Only pending top-ups can be canceled.</p>
     *
     * @name PostTopupsTopupCancel
     * @request POST:/v1/topups/{topup}/cancel
     * @secure
     * @response `200` `Topup` Successful response.
     * @response `default` `Error` Error response.
     */
    postTopupsTopupCancel: (topup: string, data?: { expand?: string[] }, params: RequestParams = {}) =>
      this.request<Topup, Error>({
        path: `/v1/topups/${topup}/cancel`,
        method: "POST",
        body: data,
        secure: true,
        type: ContentType.UrlEncoded,
        format: "json",
        ...params,
      }),

    /**
     * @description <p>Returns a list of existing transfers sent to connected accounts. The transfers are returned in sorted order, with the most recently created transfers appearing first.</p>
     *
     * @name GetTransfers
     * @request GET:/v1/transfers
     * @secure
     * @response `200` `{ data: (Transfer)[], has_more: boolean, object: "list", url: string }` Successful response.
     * @response `default` `Error` Error response.
     */
    getTransfers: (
      query?: {
        created?: { gt?: number; gte?: number; lt?: number; lte?: number } | number;
        destination?: string;
        ending_before?: string;
        expand?: string[];
        limit?: number;
        starting_after?: string;
        transfer_group?: string;
      },
      data?: CardMandatePaymentMethodDetails,
      params: RequestParams = {},
    ) =>
      this.request<{ data: Transfer[]; has_more: boolean; object: "list"; url: string }, Error>({
        path: `/v1/transfers`,
        method: "GET",
        query: query,
        body: data,
        secure: true,
        type: ContentType.UrlEncoded,
        format: "json",
        ...params,
      }),

    /**
     * @description <p>To send funds from your Stripe account to a connected account, you create a new transfer object. Your <a href="#balance">Stripe balance</a> must be able to cover the transfer amount, or you’ll receive an “Insufficient Funds” error.</p>
     *
     * @name PostTransfers
     * @request POST:/v1/transfers
     * @secure
     * @response `200` `Transfer` Successful response.
     * @response `default` `Error` Error response.
     */
    postTransfers: (
      data: {
        amount?: number;
        currency: string;
        description?: string;
        destination: string;
        expand?: string[];
        metadata?: Record<string, string>;
        source_transaction?: string;
        source_type?: "bank_account" | "card" | "fpx";
        transfer_group?: string;
      },
      params: RequestParams = {},
    ) =>
      this.request<Transfer, Error>({
        path: `/v1/transfers`,
        method: "POST",
        body: data,
        secure: true,
        type: ContentType.UrlEncoded,
        format: "json",
        ...params,
      }),

    /**
     * @description <p>You can see a list of the reversals belonging to a specific transfer. Note that the 10 most recent reversals are always available by default on the transfer object. If you need more than those 10, you can use this API method and the <code>limit</code> and <code>starting_after</code> parameters to page through additional reversals.</p>
     *
     * @name GetTransfersIdReversals
     * @request GET:/v1/transfers/{id}/reversals
     * @secure
     * @response `200` `{ data: (TransferReversal)[], has_more: boolean, object: "list", url: string }` Successful response.
     * @response `default` `Error` Error response.
     */
    getTransfersIdReversals: (
      id: string,
      query?: { ending_before?: string; expand?: string[]; limit?: number; starting_after?: string },
      data?: CardMandatePaymentMethodDetails,
      params: RequestParams = {},
    ) =>
      this.request<{ data: TransferReversal[]; has_more: boolean; object: "list"; url: string }, Error>({
        path: `/v1/transfers/${id}/reversals`,
        method: "GET",
        query: query,
        body: data,
        secure: true,
        type: ContentType.UrlEncoded,
        format: "json",
        ...params,
      }),

    /**
     * @description <p>When you create a new reversal, you must specify a transfer to create it on.</p> <p>When reversing transfers, you can optionally reverse part of the transfer. You can do so as many times as you wish until the entire transfer has been reversed.</p> <p>Once entirely reversed, a transfer can’t be reversed again. This method will return an error when called on an already-reversed transfer, or when trying to reverse more money than is left on a transfer.</p>
     *
     * @name PostTransfersIdReversals
     * @request POST:/v1/transfers/{id}/reversals
     * @secure
     * @response `200` `TransferReversal` Successful response.
     * @response `default` `Error` Error response.
     */
    postTransfersIdReversals: (
      id: string,
      data?: {
        amount?: number;
        description?: string;
        expand?: string[];
        metadata?: Record<string, string> | "" | (Record<string, string> & "");
        refund_application_fee?: boolean;
      },
      params: RequestParams = {},
    ) =>
      this.request<TransferReversal, Error>({
        path: `/v1/transfers/${id}/reversals`,
        method: "POST",
        body: data,
        secure: true,
        type: ContentType.UrlEncoded,
        format: "json",
        ...params,
      }),

    /**
     * @description <p>Retrieves the details of an existing transfer. Supply the unique transfer ID from either a transfer creation request or the transfer list, and Stripe will return the corresponding transfer information.</p>
     *
     * @name GetTransfersTransfer
     * @request GET:/v1/transfers/{transfer}
     * @secure
     * @response `200` `Transfer` Successful response.
     * @response `default` `Error` Error response.
     */
    getTransfersTransfer: (
      transfer: string,
      query?: { expand?: string[] },
      data?: CardMandatePaymentMethodDetails,
      params: RequestParams = {},
    ) =>
      this.request<Transfer, Error>({
        path: `/v1/transfers/${transfer}`,
        method: "GET",
        query: query,
        body: data,
        secure: true,
        type: ContentType.UrlEncoded,
        format: "json",
        ...params,
      }),

    /**
     * @description <p>Updates the specified transfer by setting the values of the parameters passed. Any parameters not provided will be left unchanged.</p> <p>This request accepts only metadata as an argument.</p>
     *
     * @name PostTransfersTransfer
     * @request POST:/v1/transfers/{transfer}
     * @secure
     * @response `200` `Transfer` Successful response.
     * @response `default` `Error` Error response.
     */
    postTransfersTransfer: (
      transfer: string,
      data?: {
        description?: string;
        expand?: string[];
        metadata?: Record<string, string> | "" | (Record<string, string> & "");
      },
      params: RequestParams = {},
    ) =>
      this.request<Transfer, Error>({
        path: `/v1/transfers/${transfer}`,
        method: "POST",
        body: data,
        secure: true,
        type: ContentType.UrlEncoded,
        format: "json",
        ...params,
      }),

    /**
     * @description <p>By default, you can see the 10 most recent reversals stored directly on the transfer object, but you can also retrieve details about a specific reversal stored on the transfer.</p>
     *
     * @name GetTransfersTransferReversalsId
     * @request GET:/v1/transfers/{transfer}/reversals/{id}
     * @secure
     * @response `200` `TransferReversal` Successful response.
     * @response `default` `Error` Error response.
     */
    getTransfersTransferReversalsId: (
      id: string,
      transfer: string,
      query?: { expand?: string[] },
      data?: CardMandatePaymentMethodDetails,
      params: RequestParams = {},
    ) =>
      this.request<TransferReversal, Error>({
        path: `/v1/transfers/${transfer}/reversals/${id}`,
        method: "GET",
        query: query,
        body: data,
        secure: true,
        type: ContentType.UrlEncoded,
        format: "json",
        ...params,
      }),

    /**
     * @description <p>Updates the specified reversal by setting the values of the parameters passed. Any parameters not provided will be left unchanged.</p> <p>This request only accepts metadata and description as arguments.</p>
     *
     * @name PostTransfersTransferReversalsId
     * @request POST:/v1/transfers/{transfer}/reversals/{id}
     * @secure
     * @response `200` `TransferReversal` Successful response.
     * @response `default` `Error` Error response.
     */
    postTransfersTransferReversalsId: (
      id: string,
      transfer: string,
      data?: { expand?: string[]; metadata?: Record<string, string> | "" | (Record<string, string> & "") },
      params: RequestParams = {},
    ) =>
      this.request<TransferReversal, Error>({
        path: `/v1/transfers/${transfer}/reversals/${id}`,
        method: "POST",
        body: data,
        secure: true,
        type: ContentType.UrlEncoded,
        format: "json",
        ...params,
      }),

    /**
     * @description <p>Returns a list of your webhook endpoints.</p>
     *
     * @name GetWebhookEndpoints
     * @request GET:/v1/webhook_endpoints
     * @secure
     * @response `200` `{ data: (WebhookEndpoint)[], has_more: boolean, object: "list", url: string }` Successful response.
     * @response `default` `Error` Error response.
     */
    getWebhookEndpoints: (
      query?: { ending_before?: string; expand?: string[]; limit?: number; starting_after?: string },
      data?: CardMandatePaymentMethodDetails,
      params: RequestParams = {},
    ) =>
      this.request<{ data: WebhookEndpoint[]; has_more: boolean; object: "list"; url: string }, Error>({
        path: `/v1/webhook_endpoints`,
        method: "GET",
        query: query,
        body: data,
        secure: true,
        type: ContentType.UrlEncoded,
        format: "json",
        ...params,
      }),

    /**
     * @description <p>A webhook endpoint must have a <code>url</code> and a list of <code>enabled_events</code>. You may optionally specify the Boolean <code>connect</code> parameter. If set to true, then a Connect webhook endpoint that notifies the specified <code>url</code> about events from all connected accounts is created; otherwise an account webhook endpoint that notifies the specified <code>url</code> only about events from your account is created. You can also create webhook endpoints in the <a href="https://dashboard.stripe.com/account/webhooks">webhooks settings</a> section of the Dashboard.</p>
     *
     * @name PostWebhookEndpoints
     * @request POST:/v1/webhook_endpoints
     * @secure
     * @response `200` `WebhookEndpoint` Successful response.
     * @response `default` `Error` Error response.
     */
    postWebhookEndpoints: (
      data: {
        api_version?:
          | "2011-01-01"
          | "2011-06-21"
          | "2011-06-28"
          | "2011-08-01"
          | "2011-09-15"
          | "2011-11-17"
          | "2012-02-23"
          | "2012-03-25"
          | "2012-06-18"
          | "2012-06-28"
          | "2012-07-09"
          | "2012-09-24"
          | "2012-10-26"
          | "2012-11-07"
          | "2013-02-11"
          | "2013-02-13"
          | "2013-07-05"
          | "2013-08-12"
          | "2013-08-13"
          | "2013-10-29"
          | "2013-12-03"
          | "2014-01-31"
          | "2014-03-13"
          | "2014-03-28"
          | "2014-05-19"
          | "2014-06-13"
          | "2014-06-17"
          | "2014-07-22"
          | "2014-07-26"
          | "2014-08-04"
          | "2014-08-20"
          | "2014-09-08"
          | "2014-10-07"
          | "2014-11-05"
          | "2014-11-20"
          | "2014-12-08"
          | "2014-12-17"
          | "2014-12-22"
          | "2015-01-11"
          | "2015-01-26"
          | "2015-02-10"
          | "2015-02-16"
          | "2015-02-18"
          | "2015-03-24"
          | "2015-04-07"
          | "2015-06-15"
          | "2015-07-07"
          | "2015-07-13"
          | "2015-07-28"
          | "2015-08-07"
          | "2015-08-19"
          | "2015-09-03"
          | "2015-09-08"
          | "2015-09-23"
          | "2015-10-01"
          | "2015-10-12"
          | "2015-10-16"
          | "2016-02-03"
          | "2016-02-19"
          | "2016-02-22"
          | "2016-02-23"
          | "2016-02-29"
          | "2016-03-07"
          | "2016-06-15"
          | "2016-07-06"
          | "2016-10-19"
          | "2017-01-27"
          | "2017-02-14"
          | "2017-04-06"
          | "2017-05-25"
          | "2017-06-05"
          | "2017-08-15"
          | "2017-12-14"
          | "2018-01-23"
          | "2018-02-05"
          | "2018-02-06"
          | "2018-02-28"
          | "2018-05-21"
          | "2018-07-27"
          | "2018-08-23"
          | "2018-09-06"
          | "2018-09-24"
          | "2018-10-31"
          | "2018-11-08"
          | "2019-02-11"
          | "2019-02-19"
          | "2019-03-14"
          | "2019-05-16"
          | "2019-08-14"
          | "2019-09-09"
          | "2019-10-08"
          | "2019-10-17"
          | "2019-11-05"
          | "2019-12-03"
          | "2020-03-02"
          | "2020-08-27";
        connect?: boolean;
        description?: string;
        enabled_events: (
          | "*"
          | "account.application.authorized"
          | "account.application.deauthorized"
          | "account.external_account.created"
          | "account.external_account.deleted"
          | "account.external_account.updated"
          | "account.updated"
          | "application_fee.created"
          | "application_fee.refund.updated"
          | "application_fee.refunded"
          | "balance.available"
          | "billing_portal.configuration.created"
          | "billing_portal.configuration.updated"
          | "capability.updated"
          | "charge.captured"
          | "charge.dispute.closed"
          | "charge.dispute.created"
          | "charge.dispute.funds_reinstated"
          | "charge.dispute.funds_withdrawn"
          | "charge.dispute.updated"
          | "charge.expired"
          | "charge.failed"
          | "charge.pending"
          | "charge.refund.updated"
          | "charge.refunded"
          | "charge.succeeded"
          | "charge.updated"
          | "checkout.session.async_payment_failed"
          | "checkout.session.async_payment_succeeded"
          | "checkout.session.completed"
          | "checkout.session.expired"
          | "coupon.created"
          | "coupon.deleted"
          | "coupon.updated"
          | "credit_note.created"
          | "credit_note.updated"
          | "credit_note.voided"
          | "customer.created"
          | "customer.deleted"
          | "customer.discount.created"
          | "customer.discount.deleted"
          | "customer.discount.updated"
          | "customer.source.created"
          | "customer.source.deleted"
          | "customer.source.expiring"
          | "customer.source.updated"
          | "customer.subscription.created"
          | "customer.subscription.deleted"
          | "customer.subscription.pending_update_applied"
          | "customer.subscription.pending_update_expired"
          | "customer.subscription.trial_will_end"
          | "customer.subscription.updated"
          | "customer.tax_id.created"
          | "customer.tax_id.deleted"
          | "customer.tax_id.updated"
          | "customer.updated"
          | "file.created"
          | "identity.verification_session.canceled"
          | "identity.verification_session.created"
          | "identity.verification_session.processing"
          | "identity.verification_session.redacted"
          | "identity.verification_session.requires_input"
          | "identity.verification_session.verified"
          | "invoice.created"
          | "invoice.deleted"
          | "invoice.finalization_failed"
          | "invoice.finalized"
          | "invoice.marked_uncollectible"
          | "invoice.paid"
          | "invoice.payment_action_required"
          | "invoice.payment_failed"
          | "invoice.payment_succeeded"
          | "invoice.sent"
          | "invoice.upcoming"
          | "invoice.updated"
          | "invoice.voided"
          | "invoiceitem.created"
          | "invoiceitem.deleted"
          | "invoiceitem.updated"
          | "issuing_authorization.created"
          | "issuing_authorization.request"
          | "issuing_authorization.updated"
          | "issuing_card.created"
          | "issuing_card.updated"
          | "issuing_cardholder.created"
          | "issuing_cardholder.updated"
          | "issuing_dispute.closed"
          | "issuing_dispute.created"
          | "issuing_dispute.funds_reinstated"
          | "issuing_dispute.submitted"
          | "issuing_dispute.updated"
          | "issuing_transaction.created"
          | "issuing_transaction.updated"
          | "mandate.updated"
          | "order.created"
          | "order.payment_failed"
          | "order.payment_succeeded"
          | "order.updated"
          | "order_return.created"
          | "payment_intent.amount_capturable_updated"
          | "payment_intent.canceled"
          | "payment_intent.created"
          | "payment_intent.payment_failed"
          | "payment_intent.processing"
          | "payment_intent.requires_action"
          | "payment_intent.succeeded"
          | "payment_method.attached"
          | "payment_method.automatically_updated"
          | "payment_method.detached"
          | "payment_method.updated"
          | "payout.canceled"
          | "payout.created"
          | "payout.failed"
          | "payout.paid"
          | "payout.updated"
          | "person.created"
          | "person.deleted"
          | "person.updated"
          | "plan.created"
          | "plan.deleted"
          | "plan.updated"
          | "price.created"
          | "price.deleted"
          | "price.updated"
          | "product.created"
          | "product.deleted"
          | "product.updated"
          | "promotion_code.created"
          | "promotion_code.updated"
          | "quote.accepted"
          | "quote.canceled"
          | "quote.created"
          | "quote.finalized"
          | "radar.early_fraud_warning.created"
          | "radar.early_fraud_warning.updated"
          | "recipient.created"
          | "recipient.deleted"
          | "recipient.updated"
          | "reporting.report_run.failed"
          | "reporting.report_run.succeeded"
          | "reporting.report_type.updated"
          | "review.closed"
          | "review.opened"
          | "setup_intent.canceled"
          | "setup_intent.created"
          | "setup_intent.requires_action"
          | "setup_intent.setup_failed"
          | "setup_intent.succeeded"
          | "sigma.scheduled_query_run.created"
          | "sku.created"
          | "sku.deleted"
          | "sku.updated"
          | "source.canceled"
          | "source.chargeable"
          | "source.failed"
          | "source.mandate_notification"
          | "source.refund_attributes_required"
          | "source.transaction.created"
          | "source.transaction.updated"
          | "subscription_schedule.aborted"
          | "subscription_schedule.canceled"
          | "subscription_schedule.completed"
          | "subscription_schedule.created"
          | "subscription_schedule.expiring"
          | "subscription_schedule.released"
          | "subscription_schedule.updated"
          | "tax_rate.created"
          | "tax_rate.updated"
          | "topup.canceled"
          | "topup.created"
          | "topup.failed"
          | "topup.reversed"
          | "topup.succeeded"
          | "transfer.created"
          | "transfer.failed"
          | "transfer.paid"
          | "transfer.reversed"
          | "transfer.updated"
        )[];
        expand?: string[];
        metadata?: Record<string, string> | "" | (Record<string, string> & "");
        url: string;
      },
      params: RequestParams = {},
    ) =>
      this.request<WebhookEndpoint, Error>({
        path: `/v1/webhook_endpoints`,
        method: "POST",
        body: data,
        secure: true,
        type: ContentType.UrlEncoded,
        format: "json",
        ...params,
      }),

    /**
     * @description <p>You can also delete webhook endpoints via the <a href="https://dashboard.stripe.com/account/webhooks">webhook endpoint management</a> page of the Stripe dashboard.</p>
     *
     * @name DeleteWebhookEndpointsWebhookEndpoint
     * @request DELETE:/v1/webhook_endpoints/{webhook_endpoint}
     * @secure
     * @response `200` `DeletedWebhookEndpoint` Successful response.
     * @response `default` `Error` Error response.
     */
    deleteWebhookEndpointsWebhookEndpoint: (
      webhookEndpoint: string,
      data?: CardMandatePaymentMethodDetails,
      params: RequestParams = {},
    ) =>
      this.request<DeletedWebhookEndpoint, Error>({
        path: `/v1/webhook_endpoints/${webhookEndpoint}`,
        method: "DELETE",
        body: data,
        secure: true,
        type: ContentType.UrlEncoded,
        format: "json",
        ...params,
      }),

    /**
     * @description <p>Retrieves the webhook endpoint with the given ID.</p>
     *
     * @name GetWebhookEndpointsWebhookEndpoint
     * @request GET:/v1/webhook_endpoints/{webhook_endpoint}
     * @secure
     * @response `200` `WebhookEndpoint` Successful response.
     * @response `default` `Error` Error response.
     */
    getWebhookEndpointsWebhookEndpoint: (
      webhookEndpoint: string,
      query?: { expand?: string[] },
      data?: CardMandatePaymentMethodDetails,
      params: RequestParams = {},
    ) =>
      this.request<WebhookEndpoint, Error>({
        path: `/v1/webhook_endpoints/${webhookEndpoint}`,
        method: "GET",
        query: query,
        body: data,
        secure: true,
        type: ContentType.UrlEncoded,
        format: "json",
        ...params,
      }),

    /**
     * @description <p>Updates the webhook endpoint. You may edit the <code>url</code>, the list of <code>enabled_events</code>, and the status of your endpoint.</p>
     *
     * @name PostWebhookEndpointsWebhookEndpoint
     * @request POST:/v1/webhook_endpoints/{webhook_endpoint}
     * @secure
     * @response `200` `WebhookEndpoint` Successful response.
     * @response `default` `Error` Error response.
     */
    postWebhookEndpointsWebhookEndpoint: (
      webhookEndpoint: string,
      data?: {
        description?: string;
        disabled?: boolean;
        enabled_events?: (
          | "*"
          | "account.application.authorized"
          | "account.application.deauthorized"
          | "account.external_account.created"
          | "account.external_account.deleted"
          | "account.external_account.updated"
          | "account.updated"
          | "application_fee.created"
          | "application_fee.refund.updated"
          | "application_fee.refunded"
          | "balance.available"
          | "billing_portal.configuration.created"
          | "billing_portal.configuration.updated"
          | "capability.updated"
          | "charge.captured"
          | "charge.dispute.closed"
          | "charge.dispute.created"
          | "charge.dispute.funds_reinstated"
          | "charge.dispute.funds_withdrawn"
          | "charge.dispute.updated"
          | "charge.expired"
          | "charge.failed"
          | "charge.pending"
          | "charge.refund.updated"
          | "charge.refunded"
          | "charge.succeeded"
          | "charge.updated"
          | "checkout.session.async_payment_failed"
          | "checkout.session.async_payment_succeeded"
          | "checkout.session.completed"
          | "checkout.session.expired"
          | "coupon.created"
          | "coupon.deleted"
          | "coupon.updated"
          | "credit_note.created"
          | "credit_note.updated"
          | "credit_note.voided"
          | "customer.created"
          | "customer.deleted"
          | "customer.discount.created"
          | "customer.discount.deleted"
          | "customer.discount.updated"
          | "customer.source.created"
          | "customer.source.deleted"
          | "customer.source.expiring"
          | "customer.source.updated"
          | "customer.subscription.created"
          | "customer.subscription.deleted"
          | "customer.subscription.pending_update_applied"
          | "customer.subscription.pending_update_expired"
          | "customer.subscription.trial_will_end"
          | "customer.subscription.updated"
          | "customer.tax_id.created"
          | "customer.tax_id.deleted"
          | "customer.tax_id.updated"
          | "customer.updated"
          | "file.created"
          | "identity.verification_session.canceled"
          | "identity.verification_session.created"
          | "identity.verification_session.processing"
          | "identity.verification_session.redacted"
          | "identity.verification_session.requires_input"
          | "identity.verification_session.verified"
          | "invoice.created"
          | "invoice.deleted"
          | "invoice.finalization_failed"
          | "invoice.finalized"
          | "invoice.marked_uncollectible"
          | "invoice.paid"
          | "invoice.payment_action_required"
          | "invoice.payment_failed"
          | "invoice.payment_succeeded"
          | "invoice.sent"
          | "invoice.upcoming"
          | "invoice.updated"
          | "invoice.voided"
          | "invoiceitem.created"
          | "invoiceitem.deleted"
          | "invoiceitem.updated"
          | "issuing_authorization.created"
          | "issuing_authorization.request"
          | "issuing_authorization.updated"
          | "issuing_card.created"
          | "issuing_card.updated"
          | "issuing_cardholder.created"
          | "issuing_cardholder.updated"
          | "issuing_dispute.closed"
          | "issuing_dispute.created"
          | "issuing_dispute.funds_reinstated"
          | "issuing_dispute.submitted"
          | "issuing_dispute.updated"
          | "issuing_transaction.created"
          | "issuing_transaction.updated"
          | "mandate.updated"
          | "order.created"
          | "order.payment_failed"
          | "order.payment_succeeded"
          | "order.updated"
          | "order_return.created"
          | "payment_intent.amount_capturable_updated"
          | "payment_intent.canceled"
          | "payment_intent.created"
          | "payment_intent.payment_failed"
          | "payment_intent.processing"
          | "payment_intent.requires_action"
          | "payment_intent.succeeded"
          | "payment_method.attached"
          | "payment_method.automatically_updated"
          | "payment_method.detached"
          | "payment_method.updated"
          | "payout.canceled"
          | "payout.created"
          | "payout.failed"
          | "payout.paid"
          | "payout.updated"
          | "person.created"
          | "person.deleted"
          | "person.updated"
          | "plan.created"
          | "plan.deleted"
          | "plan.updated"
          | "price.created"
          | "price.deleted"
          | "price.updated"
          | "product.created"
          | "product.deleted"
          | "product.updated"
          | "promotion_code.created"
          | "promotion_code.updated"
          | "quote.accepted"
          | "quote.canceled"
          | "quote.created"
          | "quote.finalized"
          | "radar.early_fraud_warning.created"
          | "radar.early_fraud_warning.updated"
          | "recipient.created"
          | "recipient.deleted"
          | "recipient.updated"
          | "reporting.report_run.failed"
          | "reporting.report_run.succeeded"
          | "reporting.report_type.updated"
          | "review.closed"
          | "review.opened"
          | "setup_intent.canceled"
          | "setup_intent.created"
          | "setup_intent.requires_action"
          | "setup_intent.setup_failed"
          | "setup_intent.succeeded"
          | "sigma.scheduled_query_run.created"
          | "sku.created"
          | "sku.deleted"
          | "sku.updated"
          | "source.canceled"
          | "source.chargeable"
          | "source.failed"
          | "source.mandate_notification"
          | "source.refund_attributes_required"
          | "source.transaction.created"
          | "source.transaction.updated"
          | "subscription_schedule.aborted"
          | "subscription_schedule.canceled"
          | "subscription_schedule.completed"
          | "subscription_schedule.created"
          | "subscription_schedule.expiring"
          | "subscription_schedule.released"
          | "subscription_schedule.updated"
          | "tax_rate.created"
          | "tax_rate.updated"
          | "topup.canceled"
          | "topup.created"
          | "topup.failed"
          | "topup.reversed"
          | "topup.succeeded"
          | "transfer.created"
          | "transfer.failed"
          | "transfer.paid"
          | "transfer.reversed"
          | "transfer.updated"
        )[];
        expand?: string[];
        metadata?: Record<string, string> | "" | (Record<string, string> & "");
        url?: string;
      },
      params: RequestParams = {},
    ) =>
      this.request<WebhookEndpoint, Error>({
        path: `/v1/webhook_endpoints/${webhookEndpoint}`,
        method: "POST",
        body: data,
        secure: true,
        type: ContentType.UrlEncoded,
        format: "json",
        ...params,
      }),
  };
}
